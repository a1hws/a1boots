{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useRecordContext, useSaveContext } from 'ra-core';\nimport { DeleteWithUndoButton } from './DeleteWithUndoButton';\nimport { DeleteWithConfirmButton } from './DeleteWithConfirmButton';\n/**\n * Button used to delete a single record. Added by default by the <Toolbar> of edit and show views.\n *\n * @typedef {Object} Props The props you can use (other props are injected if you used it in the <Toolbar>)\n * @prop {boolean} mutationMode Either 'pessimistic', 'optimistic' or 'undoable'. Determine whether the deletion uses an undo button in a notification or a confirmation dialog. Defaults to 'undoable'.\n * @prop {Object} record The current resource record\n * @prop {string} className\n * @prop {string} label Button label. Defaults to 'ra.action.delete, translated.\n * @prop {boolean} disabled Disable the button.\n * @prop {string} variant Material UI variant for the button. Defaults to 'contained'.\n * @prop {ReactElement} icon Override the icon. Defaults to the Delete icon from Material UI.\n *\n * @param {Props} props\n *\n * @example Usage in the <TopToolbar> of an <Edit> form\n *\n * import * as React from 'react';\n * import { Edit, DeleteButton, TopToolbar } from 'react-admin';\n *\n * const EditActions = props => {\n *     const { data, resource } = props;\n *     return (\n *         <TopToolbar>\n *             <DeleteButton\n *                 mutationMode=\"pessimistic\" // Renders the <DeleteWithConfirmButton>\n *             />\n *         </TopToolbar>\n *     );\n * };\n *\n * const Edit = props => {\n *     return <Edit actions={<EditActions />} {...props} />;\n * };\n */\n\nexport var DeleteButton = function DeleteButton(props) {\n  var mutationMode = props.mutationMode,\n      rest = __rest(props, [\"mutationMode\"]);\n\n  var record = useRecordContext(props);\n  var saveContext = useSaveContext(props);\n\n  if (!record || record.id == null) {\n    return null;\n  }\n\n  var finalMutationMode = mutationMode ? mutationMode : (saveContext === null || saveContext === void 0 ? void 0 : saveContext.mutationMode) ? saveContext.mutationMode : 'undoable';\n  return finalMutationMode === 'undoable' ? // @ts-ignore I looked for the error for one hour without finding it\n  React.createElement(DeleteWithUndoButton, __assign({\n    record: record\n  }, rest)) : React.createElement(DeleteWithConfirmButton, __assign({\n    // @ts-ignore I looked for the error for one hour without finding it\n    mutationMode: finalMutationMode,\n    record: record\n  }, rest));\n};\nDeleteButton.propTypes = {\n  label: PropTypes.string,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  record: PropTypes.any,\n  // @ts-ignore\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  resource: PropTypes.string,\n  icon: PropTypes.element\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAIIC,gBAJJ,EAKIC,cALJ,QAQO,SARP;AAWA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CACxBC,KADwB,EACY;EAE5B,gBAAY,GAAcA,KAAK,aAA/B;EAAA,IAAiBC,IAAI,UAAKD,KAAL,EAAvB,gBAAuB,CAArB;;EACR,IAAME,MAAM,GAAGP,gBAAgB,CAACK,KAAD,CAA/B;EACA,IAAMG,WAAW,GAAGP,cAAc,CAACI,KAAD,CAAlC;;EACA,IAAI,CAACE,MAAD,IAAWA,MAAM,CAACE,EAAP,IAAa,IAA5B,EAAkC;IAC9B,OAAO,IAAP;EACH;;EAED,IAAMC,iBAAiB,GAAGC,YAAY,GAChCA,YADgC,GAEhC,YAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEA,YAAb,IACAH,WAAW,CAACG,YADZ,GAEA,UAJN;EAMA,OAAOD,iBAAiB,KAAK,UAAtB,GACH;EACAZ,oBAACI,oBAAD,EAAqBU;IAAaL,MAAM,EAAEA;EAArB,GAAiCD,IAAjC,CAArB,CAFG,GAIHR,oBAACK,uBAAD,EAAwBS;IACpB;IACAD,YAAY,EAAED,iBAFM;IAGpBH,MAAM,EAAEA;EAHY,GAIhBD,IAJgB,CAAxB,CAJJ;AAWH,CA3BM;AAgDPF,YAAY,CAACS,SAAb,GAAyB;EACrBC,KAAK,EAAEf,SAAS,CAACgB,MADI;EAErBJ,YAAY,EAAEZ,SAAS,CAACiB,KAAV,CAAgB,CAAC,aAAD,EAAgB,YAAhB,EAA8B,UAA9B,CAAhB,CAFO;EAGrBT,MAAM,EAAER,SAAS,CAACkB,GAHG;EAIrB;EACAC,QAAQ,EAAEnB,SAAS,CAACoB,SAAV,CAAoB,CAC1BpB,SAAS,CAACgB,MADgB,EAE1BhB,SAAS,CAACqB,IAFgB,EAG1BrB,SAAS,CAACsB,IAHgB,CAApB,CALW;EAUrBC,QAAQ,EAAEvB,SAAS,CAACgB,MAVC;EAWrBQ,IAAI,EAAExB,SAAS,CAACyB;AAXK,CAAzB","names":["React","PropTypes","useRecordContext","useSaveContext","DeleteWithUndoButton","DeleteWithConfirmButton","DeleteButton","props","rest","record","saveContext","id","finalMutationMode","mutationMode","__assign","propTypes","label","string","oneOf","any","redirect","oneOfType","bool","func","resource","icon","element"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/DeleteButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { UseMutationOptions } from 'react-query';\nimport {\n    RaRecord,\n    MutationMode,\n    DeleteParams,\n    useRecordContext,\n    useSaveContext,\n    SaveContextValue,\n    RedirectionSideEffect,\n} from 'ra-core';\n\nimport { ButtonProps } from './Button';\nimport { DeleteWithUndoButton } from './DeleteWithUndoButton';\nimport { DeleteWithConfirmButton } from './DeleteWithConfirmButton';\n\n/**\n * Button used to delete a single record. Added by default by the <Toolbar> of edit and show views.\n *\n * @typedef {Object} Props The props you can use (other props are injected if you used it in the <Toolbar>)\n * @prop {boolean} mutationMode Either 'pessimistic', 'optimistic' or 'undoable'. Determine whether the deletion uses an undo button in a notification or a confirmation dialog. Defaults to 'undoable'.\n * @prop {Object} record The current resource record\n * @prop {string} className\n * @prop {string} label Button label. Defaults to 'ra.action.delete, translated.\n * @prop {boolean} disabled Disable the button.\n * @prop {string} variant Material UI variant for the button. Defaults to 'contained'.\n * @prop {ReactElement} icon Override the icon. Defaults to the Delete icon from Material UI.\n *\n * @param {Props} props\n *\n * @example Usage in the <TopToolbar> of an <Edit> form\n *\n * import * as React from 'react';\n * import { Edit, DeleteButton, TopToolbar } from 'react-admin';\n *\n * const EditActions = props => {\n *     const { data, resource } = props;\n *     return (\n *         <TopToolbar>\n *             <DeleteButton\n *                 mutationMode=\"pessimistic\" // Renders the <DeleteWithConfirmButton>\n *             />\n *         </TopToolbar>\n *     );\n * };\n *\n * const Edit = props => {\n *     return <Edit actions={<EditActions />} {...props} />;\n * };\n */\nexport const DeleteButton = <RecordType extends RaRecord = any>(\n    props: DeleteButtonProps<RecordType>\n) => {\n    const { mutationMode, ...rest } = props;\n    const record = useRecordContext(props);\n    const saveContext = useSaveContext(props);\n    if (!record || record.id == null) {\n        return null;\n    }\n\n    const finalMutationMode = mutationMode\n        ? mutationMode\n        : saveContext?.mutationMode\n        ? saveContext.mutationMode\n        : 'undoable';\n\n    return finalMutationMode === 'undoable' ? (\n        // @ts-ignore I looked for the error for one hour without finding it\n        <DeleteWithUndoButton<RecordType> record={record} {...rest} />\n    ) : (\n        <DeleteWithConfirmButton<RecordType>\n            // @ts-ignore I looked for the error for one hour without finding it\n            mutationMode={finalMutationMode}\n            record={record}\n            {...rest}\n        />\n    );\n};\n\nexport interface DeleteButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown\n> extends ButtonProps,\n        SaveContextValue {\n    confirmTitle?: string;\n    confirmContent?: string;\n    icon?: ReactElement;\n    mutationMode?: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteParams<RecordType>\n    >;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n}\n\nDeleteButton.propTypes = {\n    label: PropTypes.string,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    record: PropTypes.any,\n    // @ts-ignore\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    icon: PropTypes.element,\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as React from 'react';\nimport { styled, Tooltip } from '@mui/material';\nimport BookmarkIcon from '@mui/icons-material/BookmarkBorder';\nimport HelpIcon from '@mui/icons-material/HelpOutline';\nimport { useListContext, useTranslate } from 'ra-core';\nimport isEqual from 'lodash/isEqual';\nimport { extractValidSavedQueries, useSavedQueries } from './useSavedQueries';\nimport { RemoveSavedQueryIconButton } from './RemoveSavedQueryIconButton';\nimport { AddSavedQueryIconButton } from './AddSavedQueryIconButton';\nimport { SavedQueryFilterListItem } from './SavedQueryFilterListItem';\nimport { FilterList } from './FilterList';\n/**\n * FilterList-like component allowing to save and restore a query (filters, sort, perPage).\n *\n * Use this component in a Filter sidebar to let users store custom queries\n * that they can reuse later. The saved queries will appear as FilterListItems,\n * and can be removed.\n *\n * This component uses useStore under the hood to store saved queries in\n * localStorage, one set of saved queries per resource.\n *\n * @example\n *\n * import { FilterList, FilterListItem, List, Datagrid, SavedQueriesList } from 'react-admin';\n * import { Card, CardContent } from '@mui/material';\n *\n * const PostFilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <SavedQueriesList />\n *             <FilterList label=\"Category\" icon={<CategoryIcon />}>\n *                 ...\n *             </FilterList>\n *             <FilterList label=\"Published\" icon={<DateRangeIcon />}>\n *                ...\n *             </FilterList>\n *             <FilterList label=\"Popularity\" icon={<DateRangeIcon />}>\n *                ...\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n *\n * const PostList = () => (\n *     <List aside={<PostFilterSidebar />}>\n *         <Datagrid>\n *             ...\n *         </Datagrid>\n *     </List>\n * );\n *\n */\n\nexport var SavedQueriesList = function (_a) {\n  var _b = _a.icon,\n      icon = _b === void 0 ? defaultIcon : _b;\n  var translate = useTranslate();\n\n  var _c = useListContext(),\n      resource = _c.resource,\n      filterValues = _c.filterValues,\n      displayedFilters = _c.displayedFilters,\n      sort = _c.sort,\n      perPage = _c.perPage;\n\n  var savedQueries = useSavedQueries(resource)[0];\n  var validSavedQueries = extractValidSavedQueries(savedQueries);\n  var hasSavedCurrentFilterValue = validSavedQueries.some(function (savedQuery) {\n    return isEqual(savedQuery.value, {\n      filter: filterValues,\n      sort: sort,\n      perPage: perPage,\n      displayedFilters: displayedFilters\n    });\n  });\n  var hasFilterValues = !isEqual(filterValues, {});\n  return React.createElement(Root, {\n    label: \"ra.saved_queries.label\",\n    icon: icon\n  }, hasSavedCurrentFilterValue ? React.createElement(RemoveSavedQueryIconButton, {\n    className: SavedQueriesListClasses.floatingIcon\n  }) : hasFilterValues ? React.createElement(AddSavedQueryIconButton, {\n    className: SavedQueriesListClasses.floatingIcon\n  }) : React.createElement(Tooltip, {\n    title: translate('ra.saved_queries.help'),\n    className: SavedQueriesListClasses.floatingTooltip\n  }, React.createElement(HelpIcon, null)), validSavedQueries.map(function (savedQuery, index) {\n    return React.createElement(SavedQueryFilterListItem, {\n      label: savedQuery.label,\n      value: savedQuery.value,\n      key: index\n    });\n  }));\n};\nvar PREFIX = 'RaSavedQueriesList';\nexport var SavedQueriesListClasses = {\n  floatingIcon: \"\".concat(PREFIX, \"-floatingIcon\"),\n  floatingTooltip: \"\".concat(PREFIX, \"-floatingTooltip\"),\n  titleContainer: \"\".concat(PREFIX, \"-titleContainer\"),\n  titleIcon: \"\".concat(PREFIX, \"-titleIcon\")\n};\nvar Root = styled(FilterList, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(SavedQueriesListClasses.floatingIcon)] = {\n    position: 'absolute',\n    top: '-1.8em',\n    right: 0\n  }, _b[\"& .\".concat(SavedQueriesListClasses.floatingTooltip)] = {\n    position: 'absolute',\n    top: '-1.2em',\n    right: 3,\n    color: theme.palette.action.disabled\n  }, _b;\n});\nvar defaultIcon = React.createElement(BookmarkIcon, null);","map":{"version":3,"mappings":"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","names":["React","styled","Tooltip","BookmarkIcon","HelpIcon","useListContext","useTranslate","isEqual","extractValidSavedQueries","useSavedQueries","RemoveSavedQueryIconButton","AddSavedQueryIconButton","SavedQueryFilterListItem","FilterList","SavedQueriesList","_a","_b","icon","defaultIcon","translate","resource","filterValues","displayedFilters","sort","perPage","validSavedQueries","savedQueries","hasSavedCurrentFilterValue","some","savedQuery","value","filter","hasFilterValues","Root","label","className","SavedQueriesListClasses","floatingIcon","title","floatingTooltip","map","index","key","PREFIX","titleContainer","titleIcon","name","overridesResolver","props","styles","root","theme","position","top","right","color","palette","action","disabled"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/filter/SavedQueriesList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { styled, Tooltip } from '@mui/material';\nimport BookmarkIcon from '@mui/icons-material/BookmarkBorder';\nimport HelpIcon from '@mui/icons-material/HelpOutline';\nimport { useListContext, useTranslate } from 'ra-core';\nimport isEqual from 'lodash/isEqual';\n\nimport { extractValidSavedQueries, useSavedQueries } from './useSavedQueries';\nimport { RemoveSavedQueryIconButton } from './RemoveSavedQueryIconButton';\nimport { AddSavedQueryIconButton } from './AddSavedQueryIconButton';\nimport { SavedQueryFilterListItem } from './SavedQueryFilterListItem';\nimport { FilterList } from './FilterList';\n\n/**\n * FilterList-like component allowing to save and restore a query (filters, sort, perPage).\n *\n * Use this component in a Filter sidebar to let users store custom queries\n * that they can reuse later. The saved queries will appear as FilterListItems,\n * and can be removed.\n *\n * This component uses useStore under the hood to store saved queries in\n * localStorage, one set of saved queries per resource.\n *\n * @example\n *\n * import { FilterList, FilterListItem, List, Datagrid, SavedQueriesList } from 'react-admin';\n * import { Card, CardContent } from '@mui/material';\n *\n * const PostFilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <SavedQueriesList />\n *             <FilterList label=\"Category\" icon={<CategoryIcon />}>\n *                 ...\n *             </FilterList>\n *             <FilterList label=\"Published\" icon={<DateRangeIcon />}>\n *                ...\n *             </FilterList>\n *             <FilterList label=\"Popularity\" icon={<DateRangeIcon />}>\n *                ...\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n *\n * const PostList = () => (\n *     <List aside={<PostFilterSidebar />}>\n *         <Datagrid>\n *             ...\n *         </Datagrid>\n *     </List>\n * );\n *\n */\nexport const SavedQueriesList = ({\n    icon = defaultIcon,\n}: SavedQueriesListProps) => {\n    const translate = useTranslate();\n    const {\n        resource,\n        filterValues,\n        displayedFilters,\n        sort,\n        perPage,\n    } = useListContext();\n\n    const [savedQueries] = useSavedQueries(resource);\n    const validSavedQueries = extractValidSavedQueries(savedQueries);\n    const hasSavedCurrentFilterValue = validSavedQueries.some(savedQuery =>\n        isEqual(savedQuery.value, {\n            filter: filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        })\n    );\n    const hasFilterValues = !isEqual(filterValues, {});\n\n    return (\n        <Root label=\"ra.saved_queries.label\" icon={icon}>\n            {hasSavedCurrentFilterValue ? (\n                <RemoveSavedQueryIconButton\n                    className={SavedQueriesListClasses.floatingIcon}\n                />\n            ) : hasFilterValues ? (\n                <AddSavedQueryIconButton\n                    className={SavedQueriesListClasses.floatingIcon}\n                />\n            ) : (\n                <Tooltip\n                    title={translate('ra.saved_queries.help')}\n                    className={SavedQueriesListClasses.floatingTooltip}\n                >\n                    <HelpIcon />\n                </Tooltip>\n            )}\n            {validSavedQueries.map((savedQuery, index) => (\n                <SavedQueryFilterListItem\n                    label={savedQuery.label}\n                    value={savedQuery.value}\n                    key={index}\n                />\n            ))}\n        </Root>\n    );\n};\n\nconst PREFIX = 'RaSavedQueriesList';\n\nexport const SavedQueriesListClasses = {\n    floatingIcon: `${PREFIX}-floatingIcon`,\n    floatingTooltip: `${PREFIX}-floatingTooltip`,\n    titleContainer: `${PREFIX}-titleContainer`,\n    titleIcon: `${PREFIX}-titleIcon`,\n};\n\nconst Root = styled(FilterList, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${SavedQueriesListClasses.floatingIcon}`]: {\n        position: 'absolute',\n        top: '-1.8em',\n        right: 0,\n    },\n    [`& .${SavedQueriesListClasses.floatingTooltip}`]: {\n        position: 'absolute',\n        top: '-1.2em',\n        right: 3,\n        color: theme.palette.action.disabled,\n    },\n}));\n\nconst defaultIcon = <BookmarkIcon />;\n\nexport interface SavedQueriesListProps {\n    icon?: ReactNode;\n}\n"]},"metadata":{},"sourceType":"module"}
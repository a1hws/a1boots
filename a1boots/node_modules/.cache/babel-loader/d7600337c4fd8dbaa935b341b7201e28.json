{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useInfiniteListController } from './useInfiniteListController';\nimport { ResourceContextProvider } from '../../core';\nimport { ListContextProvider } from './ListContextProvider';\nimport { InfinitePaginationContext } from './InfinitePaginationContext';\n/**\n * Call useInfiniteListController and put the value in a ListContext\n *\n * Base class for <InfiniteList> components, without UI.\n *\n * Accepts any props accepted by useInfiniteListController:\n * - filter: permanent filter applied to the list\n * - filters: Filter element, to display the filters\n * - filterDefaultValues: object;\n * - perPage: Number of results per page\n * - sort: Default sort\n * - exporter: exported function\n *\n * @example // Custom list layout\n *\n * const PostList = () => (\n *     <InfiniteListBase perPage={10}>\n *         <div>\n *              List metrics...\n *         </div>\n *         <Grid container>\n *             <Grid item xs={8}>\n *                 <SimpleList primaryText={record => record.title} />\n *             </Grid>\n *             <Grid item xs={4}>\n *                 List instructions...\n *             </Grid>\n *         </Grid>\n *         <div>\n *             Post related links...\n *         </div>\n *     </ListBase>\n * );\n */\n\nexport var InfiniteListBase = function InfiniteListBase(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  var controllerProps = useInfiniteListController(props);\n  return React.createElement(ResourceContextProvider, {\n    value: props.resource\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(InfinitePaginationContext.Provider, {\n    value: {\n      hasNextPage: controllerProps.hasNextPage,\n      fetchNextPage: controllerProps.fetchNextPage,\n      isFetchingNextPage: controllerProps.isFetchingNextPage,\n      hasPreviousPage: controllerProps.hasPreviousPage,\n      fetchPreviousPage: controllerProps.fetchPreviousPage,\n      isFetchingPreviousPage: controllerProps.isFetchingPreviousPage\n    }\n  }, children)));\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SACIC,yBADJ,QAGO,6BAHP;AAIA,SAASC,uBAAT,QAAwC,YAAxC;AAEA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,yBAAT,QAA0C,6BAA1C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAoCC,EAApC,EAGoC;EAFhE,YAAQ,cAAR;EAAA,IACGC,KAAK,cAFwD,YAExD,CADR;;EAGA,IAAMC,eAAe,GAAGP,yBAAyB,CAAaM,KAAb,CAAjD;EACA,OACIP,oBAACE,uBAAD,EAAwB;IAACO,KAAK,EAAEF,KAAK,CAACG;EAAd,CAAxB,EACIV,oBAACG,mBAAD,EAAoB;IAACM,KAAK,EAAED;EAAR,CAApB,EACIR,oBAACI,yBAAyB,CAACO,QAA3B,EAAmC;IAC/BF,KAAK,EAAE;MACHG,WAAW,EAAEJ,eAAe,CAACI,WAD1B;MAEHC,aAAa,EAAEL,eAAe,CAACK,aAF5B;MAGHC,kBAAkB,EAAEN,eAAe,CAACM,kBAHjC;MAIHC,eAAe,EAAEP,eAAe,CAACO,eAJ9B;MAKHC,iBAAiB,EAAER,eAAe,CAACQ,iBALhC;MAMHC,sBAAsB,EAClBT,eAAe,CAACS;IAPjB;EADwB,CAAnC,EAWKC,QAXL,CADJ,CADJ,CADJ;AAmBH,CAxBM","names":["React","useInfiniteListController","ResourceContextProvider","ListContextProvider","InfinitePaginationContext","InfiniteListBase","_a","props","controllerProps","value","resource","Provider","hasNextPage","fetchNextPage","isFetchingNextPage","hasPreviousPage","fetchPreviousPage","isFetchingPreviousPage","children"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/list/InfiniteListBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport {\n    useInfiniteListController,\n    InfiniteListControllerProps,\n} from './useInfiniteListController';\nimport { ResourceContextProvider } from '../../core';\nimport { RaRecord } from '../../types';\nimport { ListContextProvider } from './ListContextProvider';\nimport { InfinitePaginationContext } from './InfinitePaginationContext';\n\n/**\n * Call useInfiniteListController and put the value in a ListContext\n *\n * Base class for <InfiniteList> components, without UI.\n *\n * Accepts any props accepted by useInfiniteListController:\n * - filter: permanent filter applied to the list\n * - filters: Filter element, to display the filters\n * - filterDefaultValues: object;\n * - perPage: Number of results per page\n * - sort: Default sort\n * - exporter: exported function\n *\n * @example // Custom list layout\n *\n * const PostList = () => (\n *     <InfiniteListBase perPage={10}>\n *         <div>\n *              List metrics...\n *         </div>\n *         <Grid container>\n *             <Grid item xs={8}>\n *                 <SimpleList primaryText={record => record.title} />\n *             </Grid>\n *             <Grid item xs={4}>\n *                 List instructions...\n *             </Grid>\n *         </Grid>\n *         <div>\n *             Post related links...\n *         </div>\n *     </ListBase>\n * );\n */\nexport const InfiniteListBase = <RecordType extends RaRecord = any>({\n    children,\n    ...props\n}: InfiniteListControllerProps<RecordType> & { children: ReactNode }) => {\n    const controllerProps = useInfiniteListController<RecordType>(props);\n    return (\n        <ResourceContextProvider value={props.resource}>\n            <ListContextProvider value={controllerProps}>\n                <InfinitePaginationContext.Provider\n                    value={{\n                        hasNextPage: controllerProps.hasNextPage,\n                        fetchNextPage: controllerProps.fetchNextPage,\n                        isFetchingNextPage: controllerProps.isFetchingNextPage,\n                        hasPreviousPage: controllerProps.hasPreviousPage,\n                        fetchPreviousPage: controllerProps.fetchPreviousPage,\n                        isFetchingPreviousPage:\n                            controllerProps.isFetchingPreviousPage,\n                    }}\n                >\n                    {children}\n                </InfinitePaginationContext.Provider>\n            </ListContextProvider>\n        </ResourceContextProvider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
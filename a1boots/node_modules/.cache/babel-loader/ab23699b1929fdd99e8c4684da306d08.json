{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useCallback, useMemo, useEffect, useState, useRef } from 'react';\nimport { parse, stringify } from 'query-string';\nimport lodashDebounce from 'lodash/debounce';\nimport pickBy from 'lodash/pickBy';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useStore } from '../../store';\nimport queryReducer, { SET_FILTER, HIDE_FILTER, SHOW_FILTER, SET_PAGE, SET_PER_PAGE, SET_SORT, SORT_ASC } from './queryReducer';\nimport removeEmpty from '../../util/removeEmpty';\nimport { useIsMounted } from '../../util/hooks';\n/**\n * Get the list parameters (page, sort, filters) and modifiers.\n *\n * These parameters are merged from 3 sources:\n *   - the query string from the URL\n *   - the params stored in the state (from previous navigation)\n *   - the options passed to the hook (including the filter defaultValues)\n *\n * @returns {Array} A tuple [parameters, modifiers].\n * Destructure as [\n *    { page, perPage, sort, order, filter, filterValues, displayedFilters, requestSignature },\n *    { setFilters, hideFilter, showFilter, setPage, setPerPage, setSort }\n * ]\n *\n * @example\n *\n * const [listParams, listParamsActions] = useListParams({\n *      resource: 'posts',\n *      location: location // From react-router. Injected to your component by react-admin inside a List\n *      filterDefaultValues: {\n *          published: true\n *      },\n *      sort: {\n *          field: 'published_at',\n *          order: 'DESC'\n *      },\n *      perPage: 25\n * });\n *\n * const {\n *      page,\n *      perPage,\n *      sort,\n *      order,\n *      filter,\n *      filterValues,\n *      displayedFilters,\n *      requestSignature\n * } = listParams;\n *\n * const {\n *      setFilters,\n *      hideFilter,\n *      showFilter,\n *      setPage,\n *      setPerPage,\n *      setSort,\n * } = listParamsActions;\n */\n\nexport var useListParams = function (_a) {\n  var _b = _a.debounce,\n      debounce = _b === void 0 ? 500 : _b,\n      _c = _a.disableSyncWithLocation,\n      disableSyncWithLocation = _c === void 0 ? false : _c,\n      filterDefaultValues = _a.filterDefaultValues,\n      _d = _a.perPage,\n      perPage = _d === void 0 ? 10 : _d,\n      resource = _a.resource,\n      _e = _a.sort,\n      sort = _e === void 0 ? defaultSort : _e,\n      _f = _a.storeKey,\n      storeKey = _f === void 0 ? \"\".concat(resource, \".listParams\") : _f;\n  var location = useLocation();\n  var navigate = useNavigate();\n\n  var _g = useState(defaultParams),\n      localParams = _g[0],\n      setLocalParams = _g[1];\n\n  var _h = useStore(storeKey, defaultParams),\n      params = _h[0],\n      setParams = _h[1];\n\n  var tempParams = useRef();\n  var isMounted = useIsMounted();\n  var requestSignature = [location.search, resource, storeKey, JSON.stringify(disableSyncWithLocation ? localParams : params), JSON.stringify(filterDefaultValues), JSON.stringify(sort), perPage, disableSyncWithLocation];\n  var queryFromLocation = disableSyncWithLocation ? {} : parseQueryFromLocation(location);\n  var query = useMemo(function () {\n    return getQuery({\n      queryFromLocation: queryFromLocation,\n      params: disableSyncWithLocation ? localParams : params,\n      filterDefaultValues: filterDefaultValues,\n      sort: sort,\n      perPage: perPage\n    });\n  }, requestSignature // eslint-disable-line react-hooks/exhaustive-deps\n  ); // if the location includes params (for example from a link like\n  // the categories products on the demo), we need to persist them in the\n  // store as well so that we don't lose them after a redirection back\n  // to the list\n\n  useEffect(function () {\n    if (Object.keys(queryFromLocation).length > 0) {\n      setParams(query);\n    }\n  }, [location.search]); // eslint-disable-line\n\n  var changeParams = useCallback(function (action) {\n    // do not change params if the component is already unmounted\n    // this is necessary because changeParams can be debounced, and therefore\n    // executed after the component is unmounted\n    if (!isMounted.current) return;\n\n    if (!tempParams.current) {\n      // no other changeParams action dispatched this tick\n      tempParams.current = queryReducer(query, action); // schedule side effects for next tick\n\n      setTimeout(function () {\n        if (disableSyncWithLocation) {\n          setLocalParams(tempParams.current);\n        } else {\n          // the useEffect above will apply the changes to the params in the store\n          navigate({\n            search: \"?\".concat(stringify(__assign(__assign({}, tempParams.current), {\n              filter: JSON.stringify(tempParams.current.filter),\n              displayedFilters: JSON.stringify(tempParams.current.displayedFilters)\n            })))\n          }, {\n            state: {\n              _scrollToTop: action.type === SET_PAGE\n            }\n          });\n        }\n\n        tempParams.current = undefined;\n      }, 0);\n    } else {\n      // side effects already scheduled, just change the params\n      tempParams.current = queryReducer(tempParams.current, action);\n    }\n  }, __spreadArray(__spreadArray([], requestSignature, true), [navigate], false));\n  var setSort = useCallback(function (sort) {\n    return changeParams({\n      type: SET_SORT,\n      payload: sort\n    });\n  }, [changeParams]);\n  var setPage = useCallback(function (newPage) {\n    return changeParams({\n      type: SET_PAGE,\n      payload: newPage\n    });\n  }, [changeParams]);\n  var setPerPage = useCallback(function (newPerPage) {\n    return changeParams({\n      type: SET_PER_PAGE,\n      payload: newPerPage\n    });\n  }, [changeParams]);\n  var filterValues = query.filter || emptyObject;\n  var displayedFilterValues = query.displayedFilters || emptyObject;\n  var debouncedSetFilters = lodashDebounce(function (filter, displayedFilters) {\n    changeParams({\n      type: SET_FILTER,\n      payload: {\n        filter: removeEmpty(filter),\n        displayedFilters: displayedFilters\n      }\n    });\n  }, debounce);\n  var setFilters = useCallback(function (filter, displayedFilters, debounce) {\n    if (debounce === void 0) {\n      debounce = true;\n    }\n\n    return debounce ? debouncedSetFilters(filter, displayedFilters) : changeParams({\n      type: SET_FILTER,\n      payload: {\n        filter: removeEmpty(filter),\n        displayedFilters: displayedFilters\n      }\n    });\n  }, [changeParams] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var hideFilter = useCallback(function (filterName) {\n    changeParams({\n      type: HIDE_FILTER,\n      payload: filterName\n    });\n  }, [changeParams]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    changeParams({\n      type: SHOW_FILTER,\n      payload: {\n        filterName: filterName,\n        defaultValue: defaultValue\n      }\n    });\n  }, [changeParams]);\n  return [__assign({\n    displayedFilters: displayedFilterValues,\n    filterValues: filterValues,\n    requestSignature: requestSignature\n  }, query), {\n    changeParams: changeParams,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    setFilters: setFilters,\n    hideFilter: hideFilter,\n    showFilter: showFilter\n  }];\n};\nexport var validQueryParams = ['page', 'perPage', 'sort', 'order', 'filter', 'displayedFilters'];\n\nvar parseObject = function (query, field) {\n  if (query[field] && typeof query[field] === 'string') {\n    try {\n      query[field] = JSON.parse(query[field]);\n    } catch (err) {\n      delete query[field];\n    }\n  }\n};\n\nexport var parseQueryFromLocation = function (_a) {\n  var search = _a.search;\n  var query = pickBy(parse(search), function (v, k) {\n    return validQueryParams.indexOf(k) !== -1;\n  });\n  parseObject(query, 'filter');\n  parseObject(query, 'displayedFilters');\n  return query;\n};\n/**\n * Check if user has already set custom sort, page, or filters for this list\n *\n * User params come from the store as the params props. By default,\n * this object is:\n *\n * { filter: {}, order: null, page: 1, perPage: null, sort: null }\n *\n * To check if the user has custom params, we must compare the params\n * to these initial values.\n *\n * @param {Object} params\n */\n\nexport var hasCustomParams = function (params) {\n  return params && params.filter && (Object.keys(params.filter).length > 0 || params.order != null || params.page !== 1 || params.perPage != null || params.sort != null);\n};\n/**\n * Merge list params from 3 different sources:\n *   - the query string\n *   - the params stored in the state (from previous navigation)\n *   - the props passed to the List component (including the filter defaultValues)\n */\n\nexport var getQuery = function (_a) {\n  var queryFromLocation = _a.queryFromLocation,\n      params = _a.params,\n      filterDefaultValues = _a.filterDefaultValues,\n      sort = _a.sort,\n      perPage = _a.perPage;\n  var query = Object.keys(queryFromLocation).length > 0 ? queryFromLocation : hasCustomParams(params) ? __assign({}, params) : {\n    filter: filterDefaultValues || {}\n  };\n\n  if (!query.sort) {\n    query.sort = sort.field;\n    query.order = sort.order;\n  }\n\n  if (query.perPage == null) {\n    query.perPage = perPage;\n  }\n\n  if (query.page == null) {\n    query.page = 1;\n  }\n\n  return __assign(__assign({}, query), {\n    page: getNumberOrDefault(query.page, 1),\n    perPage: getNumberOrDefault(query.perPage, 10)\n  });\n};\nexport var getNumberOrDefault = function (possibleNumber, defaultValue) {\n  var parsedNumber = typeof possibleNumber === 'string' ? parseInt(possibleNumber, 10) : possibleNumber;\n  return isNaN(parsedNumber) ? defaultValue : parsedNumber;\n};\nvar emptyObject = {};\nvar defaultSort = {\n  field: 'id',\n  order: SORT_ASC\n};\nvar defaultParams = {};","map":{"version":3,"mappings":"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","names":["useCallback","useMemo","useEffect","useState","useRef","parse","stringify","lodashDebounce","pickBy","useNavigate","useLocation","useStore","queryReducer","SET_FILTER","HIDE_FILTER","SHOW_FILTER","SET_PAGE","SET_PER_PAGE","SET_SORT","SORT_ASC","removeEmpty","useIsMounted","useListParams","_a","_b","debounce","_c","disableSyncWithLocation","filterDefaultValues","_d","perPage","resource","_e","sort","defaultSort","_f","storeKey","location","navigate","defaultParams","localParams","setLocalParams","params","setParams","tempParams","isMounted","requestSignature","search","JSON","queryFromLocation","parseQueryFromLocation","query","Object","keys","length","changeParams","current","action","setTimeout","filter","displayedFilters","state","_scrollToTop","type","undefined","__spreadArray","setSort","payload","setPage","newPage","setPerPage","newPerPage","filterValues","emptyObject","displayedFilterValues","debouncedSetFilters","setFilters","hideFilter","filterName","showFilter","defaultValue","validQueryParams","parseObject","field","err","v","k","indexOf","hasCustomParams","order","page","getQuery","__assign","getNumberOrDefault","possibleNumber","parsedNumber","parseInt","isNaN"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/list/useListParams.ts"],"sourcesContent":["import { useCallback, useMemo, useEffect, useState, useRef } from 'react';\nimport { parse, stringify } from 'query-string';\nimport lodashDebounce from 'lodash/debounce';\nimport pickBy from 'lodash/pickBy';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport { useStore } from '../../store';\nimport queryReducer, {\n    SET_FILTER,\n    HIDE_FILTER,\n    SHOW_FILTER,\n    SET_PAGE,\n    SET_PER_PAGE,\n    SET_SORT,\n    SORT_ASC,\n} from './queryReducer';\nimport { SortPayload, FilterPayload } from '../../types';\nimport removeEmpty from '../../util/removeEmpty';\nimport { useIsMounted } from '../../util/hooks';\n\nexport interface ListParams {\n    sort: string;\n    order: string;\n    page: number;\n    perPage: number;\n    filter: any;\n    displayedFilters: any;\n}\n\n/**\n * Get the list parameters (page, sort, filters) and modifiers.\n *\n * These parameters are merged from 3 sources:\n *   - the query string from the URL\n *   - the params stored in the state (from previous navigation)\n *   - the options passed to the hook (including the filter defaultValues)\n *\n * @returns {Array} A tuple [parameters, modifiers].\n * Destructure as [\n *    { page, perPage, sort, order, filter, filterValues, displayedFilters, requestSignature },\n *    { setFilters, hideFilter, showFilter, setPage, setPerPage, setSort }\n * ]\n *\n * @example\n *\n * const [listParams, listParamsActions] = useListParams({\n *      resource: 'posts',\n *      location: location // From react-router. Injected to your component by react-admin inside a List\n *      filterDefaultValues: {\n *          published: true\n *      },\n *      sort: {\n *          field: 'published_at',\n *          order: 'DESC'\n *      },\n *      perPage: 25\n * });\n *\n * const {\n *      page,\n *      perPage,\n *      sort,\n *      order,\n *      filter,\n *      filterValues,\n *      displayedFilters,\n *      requestSignature\n * } = listParams;\n *\n * const {\n *      setFilters,\n *      hideFilter,\n *      showFilter,\n *      setPage,\n *      setPerPage,\n *      setSort,\n * } = listParamsActions;\n */\nexport const useListParams = ({\n    debounce = 500,\n    disableSyncWithLocation = false,\n    filterDefaultValues,\n    perPage = 10,\n    resource,\n    sort = defaultSort,\n    storeKey = `${resource}.listParams`,\n}: ListParamsOptions): [Parameters, Modifiers] => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const [localParams, setLocalParams] = useState(defaultParams);\n    const [params, setParams] = useStore(storeKey, defaultParams);\n    const tempParams = useRef<ListParams>();\n    const isMounted = useIsMounted();\n\n    const requestSignature = [\n        location.search,\n        resource,\n        storeKey,\n        JSON.stringify(disableSyncWithLocation ? localParams : params),\n        JSON.stringify(filterDefaultValues),\n        JSON.stringify(sort),\n        perPage,\n        disableSyncWithLocation,\n    ];\n\n    const queryFromLocation = disableSyncWithLocation\n        ? {}\n        : parseQueryFromLocation(location);\n\n    const query = useMemo(\n        () =>\n            getQuery({\n                queryFromLocation,\n                params: disableSyncWithLocation ? localParams : params,\n                filterDefaultValues,\n                sort,\n                perPage,\n            }),\n        requestSignature // eslint-disable-line react-hooks/exhaustive-deps\n    );\n\n    // if the location includes params (for example from a link like\n    // the categories products on the demo), we need to persist them in the\n    // store as well so that we don't lose them after a redirection back\n    // to the list\n    useEffect(() => {\n        if (Object.keys(queryFromLocation).length > 0) {\n            setParams(query);\n        }\n    }, [location.search]); // eslint-disable-line\n\n    const changeParams = useCallback(\n        action => {\n            // do not change params if the component is already unmounted\n            // this is necessary because changeParams can be debounced, and therefore\n            // executed after the component is unmounted\n            if (!isMounted.current) return;\n\n            if (!tempParams.current) {\n                // no other changeParams action dispatched this tick\n                tempParams.current = queryReducer(query, action);\n                // schedule side effects for next tick\n                setTimeout(() => {\n                    if (disableSyncWithLocation) {\n                        setLocalParams(tempParams.current);\n                    } else {\n                        // the useEffect above will apply the changes to the params in the store\n                        navigate(\n                            {\n                                search: `?${stringify({\n                                    ...tempParams.current,\n                                    filter: JSON.stringify(\n                                        tempParams.current.filter\n                                    ),\n                                    displayedFilters: JSON.stringify(\n                                        tempParams.current.displayedFilters\n                                    ),\n                                })}`,\n                            },\n                            {\n                                state: {\n                                    _scrollToTop: action.type === SET_PAGE,\n                                },\n                            }\n                        );\n                    }\n                    tempParams.current = undefined;\n                }, 0);\n            } else {\n                // side effects already scheduled, just change the params\n                tempParams.current = queryReducer(tempParams.current, action);\n            }\n        },\n        [...requestSignature, navigate] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n\n    const setSort = useCallback(\n        (sort: SortPayload) =>\n            changeParams({\n                type: SET_SORT,\n                payload: sort,\n            }),\n        [changeParams]\n    );\n\n    const setPage = useCallback(\n        (newPage: number) => changeParams({ type: SET_PAGE, payload: newPage }),\n        [changeParams]\n    );\n\n    const setPerPage = useCallback(\n        (newPerPage: number) =>\n            changeParams({ type: SET_PER_PAGE, payload: newPerPage }),\n        [changeParams]\n    );\n\n    const filterValues = query.filter || emptyObject;\n    const displayedFilterValues = query.displayedFilters || emptyObject;\n\n    const debouncedSetFilters = lodashDebounce((filter, displayedFilters) => {\n        changeParams({\n            type: SET_FILTER,\n            payload: {\n                filter: removeEmpty(filter),\n                displayedFilters,\n            },\n        });\n    }, debounce);\n\n    const setFilters = useCallback(\n        (filter, displayedFilters, debounce = true) =>\n            debounce\n                ? debouncedSetFilters(filter, displayedFilters)\n                : changeParams({\n                      type: SET_FILTER,\n                      payload: {\n                          filter: removeEmpty(filter),\n                          displayedFilters,\n                      },\n                  }),\n        [changeParams] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n\n    const hideFilter = useCallback(\n        (filterName: string) => {\n            changeParams({\n                type: HIDE_FILTER,\n                payload: filterName,\n            });\n        },\n        [changeParams]\n    );\n\n    const showFilter = useCallback(\n        (filterName: string, defaultValue: any) => {\n            changeParams({\n                type: SHOW_FILTER,\n                payload: {\n                    filterName,\n                    defaultValue,\n                },\n            });\n        },\n        [changeParams]\n    );\n\n    return [\n        {\n            displayedFilters: displayedFilterValues,\n            filterValues,\n            requestSignature,\n            ...query,\n        },\n        {\n            changeParams,\n            setPage,\n            setPerPage,\n            setSort,\n            setFilters,\n            hideFilter,\n            showFilter,\n        },\n    ];\n};\n\nexport const validQueryParams = [\n    'page',\n    'perPage',\n    'sort',\n    'order',\n    'filter',\n    'displayedFilters',\n];\n\nconst parseObject = (query, field) => {\n    if (query[field] && typeof query[field] === 'string') {\n        try {\n            query[field] = JSON.parse(query[field]);\n        } catch (err) {\n            delete query[field];\n        }\n    }\n};\n\nexport const parseQueryFromLocation = ({ search }): Partial<ListParams> => {\n    const query = pickBy(\n        parse(search),\n        (v, k) => validQueryParams.indexOf(k) !== -1\n    );\n    parseObject(query, 'filter');\n    parseObject(query, 'displayedFilters');\n    return query;\n};\n\n/**\n * Check if user has already set custom sort, page, or filters for this list\n *\n * User params come from the store as the params props. By default,\n * this object is:\n *\n * { filter: {}, order: null, page: 1, perPage: null, sort: null }\n *\n * To check if the user has custom params, we must compare the params\n * to these initial values.\n *\n * @param {Object} params\n */\nexport const hasCustomParams = (params: ListParams) => {\n    return (\n        params &&\n        params.filter &&\n        (Object.keys(params.filter).length > 0 ||\n            params.order != null ||\n            params.page !== 1 ||\n            params.perPage != null ||\n            params.sort != null)\n    );\n};\n\n/**\n * Merge list params from 3 different sources:\n *   - the query string\n *   - the params stored in the state (from previous navigation)\n *   - the props passed to the List component (including the filter defaultValues)\n */\nexport const getQuery = ({\n    queryFromLocation,\n    params,\n    filterDefaultValues,\n    sort,\n    perPage,\n}) => {\n    const query: Partial<ListParams> =\n        Object.keys(queryFromLocation).length > 0\n            ? queryFromLocation\n            : hasCustomParams(params)\n            ? { ...params }\n            : { filter: filterDefaultValues || {} };\n\n    if (!query.sort) {\n        query.sort = sort.field;\n        query.order = sort.order;\n    }\n    if (query.perPage == null) {\n        query.perPage = perPage;\n    }\n    if (query.page == null) {\n        query.page = 1;\n    }\n\n    return {\n        ...query,\n        page: getNumberOrDefault(query.page, 1),\n        perPage: getNumberOrDefault(query.perPage, 10),\n    } as ListParams;\n};\n\nexport const getNumberOrDefault = (\n    possibleNumber: string | number | undefined,\n    defaultValue: number\n) => {\n    const parsedNumber =\n        typeof possibleNumber === 'string'\n            ? parseInt(possibleNumber, 10)\n            : possibleNumber;\n\n    return isNaN(parsedNumber) ? defaultValue : parsedNumber;\n};\n\nexport interface ListParamsOptions {\n    debounce?: number;\n    // Whether to disable the synchronization of the list parameters with\n    // the current location (URL search parameters)\n    disableSyncWithLocation?: boolean;\n    // default value for a filter when displayed but not yet set\n    filterDefaultValues?: FilterPayload;\n    perPage?: number;\n    resource: string;\n    sort?: SortPayload;\n    storeKey?: string;\n}\n\ninterface Parameters extends ListParams {\n    filterValues: object;\n    displayedFilters: {\n        [key: string]: boolean;\n    };\n    requestSignature: any[];\n}\n\ninterface Modifiers {\n    changeParams: (action: any) => void;\n    setPage: (page: number) => void;\n    setPerPage: (pageSize: number) => void;\n    setSort: (sort: SortPayload) => void;\n    setFilters: (filters: any, displayedFilters: any) => void;\n    hideFilter: (filterName: string) => void;\n    showFilter: (filterName: string, defaultValue: any) => void;\n}\n\nconst emptyObject = {};\n\nconst defaultSort = {\n    field: 'id',\n    order: SORT_ASC,\n};\n\nconst defaultParams = {};\n"]},"metadata":{},"sourceType":"module"}
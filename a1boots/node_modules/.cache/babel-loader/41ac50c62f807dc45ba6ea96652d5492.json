{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport get from 'lodash/get';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\n/**\n * Fetch a reference record in a one-to-one relationship, and return it when available\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { data, isLoading, error } = useReferenceOneFieldController({\n *     record: { id: 7, name: 'James Joyce'}\n *     reference: 'bios',\n *     target: 'author_id',\n * });\n *\n * @typedef {Object} UseReferenceOneFieldControllerParams\n * @prop {Object} props.record The current resource record\n * @prop {string} props.reference The linked resource name\n * @prop {string} props.target The target resource key\n * @prop {string} props.source The key current record identifier ('id' by default)\n * @prop {Object} props.sort The sort to apply to the referenced records\n * @prop {Object} props.filter The filter to apply to the referenced records\n * @returns {UseReferenceResult} The request state. Destructure as { referenceRecord, isLoading, error }.\n */\n\nexport var useReferenceOneFieldController = function (props) {\n  var reference = props.reference,\n      record = props.record,\n      target = props.target,\n      _a = props.source,\n      source = _a === void 0 ? 'id' : _a,\n      _b = props.sort,\n      sort = _b === void 0 ? {\n    field: 'id',\n    order: 'ASC'\n  } : _b,\n      _c = props.filter,\n      filter = _c === void 0 ? {} : _c,\n      _d = props.queryOptions,\n      queryOptions = _d === void 0 ? {} : _d;\n  var notify = useNotify();\n\n  var meta = queryOptions.meta,\n      otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n\n  var _e = useGetManyReference(reference, {\n    target: target,\n    id: get(record, source),\n    pagination: {\n      page: 1,\n      perPage: 1\n    },\n    sort: sort,\n    filter: filter,\n    meta: meta\n  }, __assign({\n    enabled: !!record,\n    onError: function (error) {\n      return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n        type: 'error',\n        messageArgs: {\n          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n        }\n      });\n    }\n  }, otherQueryOptions)),\n      data = _e.data,\n      error = _e.error,\n      isFetching = _e.isFetching,\n      isLoading = _e.isLoading,\n      refetch = _e.refetch;\n\n  return {\n    referenceRecord: data ? data[0] : undefined,\n    error: error,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    refetch: refetch\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AAGA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,8BAA8B,GAAG,UAG1CC,KAH0C,EAGa;EAGnD,aAAS,GAOTA,KAAK,UAPL;EAAA,IACAC,MAAM,GAMND,KAAK,OAPL;EAAA,IAEAE,MAAM,GAKNF,KAAK,OAPL;EAAA,IAGAG,KAIAH,KAAK,OAPL;EAAA,IAGAI,MAAM,mBAAG,IAAH,GAAOD,EAHb;EAAA,IAIAE,KAGAL,KAAK,KAPL;EAAA,IAIAM,IAAI,mBAAG;IAAEC,KAAK,EAAE,IAAT;IAAeC,KAAK,EAAE;EAAtB,CAAH,GAAgCH,EAJpC;EAAA,IAKAI,KAEAT,KAAK,OAPL;EAAA,IAKAU,MAAM,mBAAG,EAAH,GAAKD,EALX;EAAA,IAMAE,KACAX,KAAK,aAPL;EAAA,IAMAY,YAAY,mBAAG,EAAH,GAAKD,EANjB;EAQJ,IAAME,MAAM,GAAGf,SAAS,EAAxB;;EACQ,QAAI,GAA2Bc,YAAY,KAA3C;EAAA,IAASE,iBAAiB,UAAKF,YAAL,EAA5B,QAA4B,CAA1B;;EAEF,SAAkDf,mBAAmB,CAGvEkB,SAHuE,EAIvE;IACIb,MAAM,QADV;IAEIc,EAAE,EAAEpB,GAAG,CAACK,MAAD,EAASG,MAAT,CAFX;IAGIa,UAAU,EAAE;MAAEC,IAAI,EAAE,CAAR;MAAWC,OAAO,EAAE;IAApB,CAHhB;IAIIb,IAAI,MAJR;IAKII,MAAM,QALV;IAMIU,IAAI;EANR,CAJuE,EAWtEC;IAEGC,OAAO,EAAE,CAAC,CAACrB,MAFd;IAGGsB,OAAO,EAAE,iBAAK;MACV,aAAM,CACF,OAAOC,KAAP,KAAiB,QAAjB,GACMA,KADN,GAEMA,KAAK,CAACC,OAAN,IAAiB,4BAHrB,EAIF;QACIC,IAAI,EAAE,OADV;QAEIC,WAAW,EAAE;UACTC,CAAC,EACG,OAAOJ,KAAP,KAAiB,QAAjB,GACMA,KADN,GAEMA,KAAK,IAAIA,KAAK,CAACC,OAAf,GACAD,KAAK,CAACC,OADN,GAEAI;QAND;MAFjB,CAJE,CAAN;IAeC;EAnBR,GAoBMf,iBApBN,CAXsE,CAArE;EAAA,IAAEgB,IAAI,UAAN;EAAA,IAAQN,KAAK,WAAb;EAAA,IAAeO,UAAU,gBAAzB;EAAA,IAA2BC,SAAS,eAApC;EAAA,IAAsCC,OAAO,aAA7C;;EAmCN,OAAO;IACHC,eAAe,EAAEJ,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAP,GAAaD,SAD/B;IAEHL,KAAK,OAFF;IAGHO,UAAU,YAHP;IAIHC,SAAS,WAJN;IAKHC,OAAO;EALJ,CAAP;AAOH,CA3DM","names":["get","useGetManyReference","useNotify","useReferenceOneFieldController","props","record","target","_a","source","_b","sort","field","order","_c","filter","_d","queryOptions","notify","otherQueryOptions","reference","id","pagination","page","perPage","meta","__assign","enabled","onError","error","message","type","messageArgs","_","undefined","data","isFetching","isLoading","refetch","referenceRecord"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/field/useReferenceOneFieldController.tsx"],"sourcesContent":["import get from 'lodash/get';\nimport { UseQueryOptions } from 'react-query';\n\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport { RaRecord, SortPayload } from '../../types';\nimport { UseReferenceResult } from '../useReference';\n\nexport interface UseReferenceOneFieldControllerParams<\n    RecordType extends RaRecord = any\n> {\n    record?: RaRecord;\n    reference: string;\n    source?: string;\n    target: string;\n    sort?: SortPayload;\n    filter?: any;\n    queryOptions?: UseQueryOptions<{\n        data: RecordType[];\n        total: number;\n    }> & { meta?: any };\n}\n\n/**\n * Fetch a reference record in a one-to-one relationship, and return it when available\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { data, isLoading, error } = useReferenceOneFieldController({\n *     record: { id: 7, name: 'James Joyce'}\n *     reference: 'bios',\n *     target: 'author_id',\n * });\n *\n * @typedef {Object} UseReferenceOneFieldControllerParams\n * @prop {Object} props.record The current resource record\n * @prop {string} props.reference The linked resource name\n * @prop {string} props.target The target resource key\n * @prop {string} props.source The key current record identifier ('id' by default)\n * @prop {Object} props.sort The sort to apply to the referenced records\n * @prop {Object} props.filter The filter to apply to the referenced records\n * @returns {UseReferenceResult} The request state. Destructure as { referenceRecord, isLoading, error }.\n */\nexport const useReferenceOneFieldController = <\n    RecordType extends RaRecord = any\n>(\n    props: UseReferenceOneFieldControllerParams<RecordType>\n): UseReferenceResult<RecordType> => {\n    const {\n        reference,\n        record,\n        target,\n        source = 'id',\n        sort = { field: 'id', order: 'ASC' },\n        filter = {},\n        queryOptions = {},\n    } = props;\n    const notify = useNotify();\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    const { data, error, isFetching, isLoading, refetch } = useGetManyReference<\n        RecordType\n    >(\n        reference,\n        {\n            target,\n            id: get(record, source),\n            pagination: { page: 1, perPage: 1 },\n            sort,\n            filter,\n            meta,\n        },\n        {\n            enabled: !!record,\n            onError: error =>\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                ),\n            ...otherQueryOptions,\n        }\n    );\n\n    return {\n        referenceRecord: data ? data[0] : undefined,\n        error,\n        isFetching,\n        isLoading,\n        refetch,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
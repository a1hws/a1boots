{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n/**\n * Converts a datetime string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {string} value Date string, formatted as yyyy-MM-ddThh:mm\n * @return {Date}\n */\n\nvar parseDateTime = function (value) {\n  return value ? new Date(value) : value === '' ? null : value;\n};\n/**\n * Input component for entering a date and a time with timezone, using the browser locale\n */\n\n\nexport var DateTimeInput = function (_a) {\n  var className = _a.className,\n      defaultValue = _a.defaultValue,\n      _b = _a.format,\n      format = _b === void 0 ? formatDateTime : _b,\n      label = _a.label,\n      helperText = _a.helperText,\n      margin = _a.margin,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      source = _a.source,\n      resource = _a.resource,\n      _c = _a.parse,\n      parse = _c === void 0 ? parseDateTime : _c,\n      validate = _a.validate,\n      variant = _a.variant,\n      rest = __rest(_a, [\"className\", \"defaultValue\", \"format\", \"label\", \"helperText\", \"margin\", \"onBlur\", \"onChange\", \"source\", \"resource\", \"parse\", \"validate\", \"variant\"]);\n\n  var _d = useInput(__assign({\n    defaultValue: defaultValue,\n    format: format,\n    parse: parse,\n    onBlur: onBlur,\n    onChange: onChange,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      field = _d.field,\n      fieldState = _d.fieldState,\n      formState = _d.formState,\n      id = _d.id,\n      isRequired = _d.isRequired;\n\n  var error = fieldState.error,\n      invalid = fieldState.invalid,\n      isTouched = fieldState.isTouched;\n  var isSubmitted = formState.isSubmitted;\n  return React.createElement(TextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    type: \"datetime-local\",\n    size: \"small\",\n    variant: variant,\n    margin: margin,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    }),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    InputLabelProps: defaultInputLabelProps\n  }, sanitizeInputRestProps(rest)));\n};\nDateTimeInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\n\nvar leftPad = function (nb) {\n  if (nb === void 0) {\n    nb = 2;\n  }\n\n  return function (value) {\n    return ('0'.repeat(nb) + value).slice(-nb);\n  };\n};\n\nvar leftPad4 = leftPad(4);\nvar leftPad2 = leftPad(2);\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized datetime (yyyy-MM-ddThh:mm), to be passed to an <input type=\"datetime-local\" />\n */\n\nvar convertDateToString = function (value) {\n  if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n  var yyyy = leftPad4(value.getFullYear());\n  var MM = leftPad2(value.getMonth() + 1);\n  var dd = leftPad2(value.getDate());\n  var hh = leftPad2(value.getHours());\n  var mm = leftPad2(value.getMinutes());\n  return \"\".concat(yyyy, \"-\").concat(MM, \"-\").concat(dd, \"T\").concat(hh, \":\").concat(mm);\n}; // yyyy-MM-ddThh:mm\n\n\nvar dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/;\nvar defaultInputLabelProps = {\n  shrink: true\n};\n/**\n * Converts a date from the dataProvider, with timezone, to a date string\n * without timezone for use in an <input type=\"datetime-local\" />.\n *\n * @param {Date | String} value date string or object\n */\n\nvar formatDateTime = function (value) {\n  // null, undefined and empty string values should not go through convertDateToString\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  }\n\n  if (value instanceof Date) {\n    return convertDateToString(value);\n  } // valid dates should not be converted\n\n\n  if (dateTimeRegex.test(value)) {\n    return value;\n  }\n\n  return convertDateToString(new Date(value));\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","clsx","TextField","useInput","FieldTitle","sanitizeInputRestProps","InputHelperText","parseDateTime","value","Date","DateTimeInput","_a","defaultValue","_b","format","formatDateTime","label","helperText","margin","onBlur","onChange","source","resource","_c","parse","validate","variant","rest","field","fieldState","formState","id","isRequired","invalid","isTouched","__assign","className","type","size","error","isSubmitted","touched","message","InputLabelProps","defaultInputLabelProps","propTypes","oneOfType","string","bool","element","leftPad","nb","repeat","slice","leftPad4","leftPad2","convertDateToString","isNaN","getDate","yyyy","getFullYear","MM","getMonth","dd","hh","getHours","mm","getMinutes","concat","dateTimeRegex","shrink","test"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/DateTimeInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n\n/**\n * Converts a datetime string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {string} value Date string, formatted as yyyy-MM-ddThh:mm\n * @return {Date}\n */\nconst parseDateTime = (value: string) =>\n    value ? new Date(value) : value === '' ? null : value;\n\n/**\n * Input component for entering a date and a time with timezone, using the browser locale\n */\nexport const DateTimeInput = ({\n    className,\n    defaultValue,\n    format = formatDateTime,\n    label,\n    helperText,\n    margin,\n    onBlur,\n    onChange,\n    source,\n    resource,\n    parse = parseDateTime,\n    validate,\n    variant,\n    ...rest\n}: DateTimeInputProps) => {\n    const { field, fieldState, formState, id, isRequired } = useInput({\n        defaultValue,\n        format,\n        parse,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n    const { isSubmitted } = formState;\n\n    return (\n        <TextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"datetime-local\"\n            size=\"small\"\n            variant={variant}\n            margin={margin}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            InputLabelProps={defaultInputLabelProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nDateTimeInput.propTypes = {\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n\nexport type DateTimeInputProps = CommonInputProps &\n    Omit<TextFieldProps, 'helperText' | 'label'>;\n\nconst leftPad = (nb = 2) => value => ('0'.repeat(nb) + value).slice(-nb);\nconst leftPad4 = leftPad(4);\nconst leftPad2 = leftPad(2);\n\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized datetime (yyyy-MM-ddThh:mm), to be passed to an <input type=\"datetime-local\" />\n */\nconst convertDateToString = (value: Date) => {\n    if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n    const yyyy = leftPad4(value.getFullYear());\n    const MM = leftPad2(value.getMonth() + 1);\n    const dd = leftPad2(value.getDate());\n    const hh = leftPad2(value.getHours());\n    const mm = leftPad2(value.getMinutes());\n    return `${yyyy}-${MM}-${dd}T${hh}:${mm}`;\n};\n\n// yyyy-MM-ddThh:mm\nconst dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/;\nconst defaultInputLabelProps = { shrink: true };\n\n/**\n * Converts a date from the dataProvider, with timezone, to a date string\n * without timezone for use in an <input type=\"datetime-local\" />.\n *\n * @param {Date | String} value date string or object\n */\nconst formatDateTime = (value: string | Date) => {\n    // null, undefined and empty string values should not go through convertDateToString\n    // otherwise, it returns undefined and will make the input an uncontrolled one.\n    if (value == null || value === '') {\n        return '';\n    }\n\n    if (value instanceof Date) {\n        return convertDateToString(value);\n    }\n    // valid dates should not be converted\n    if (dateTimeRegex.test(value)) {\n        return value;\n    }\n\n    return convertDateToString(new Date(value));\n};\n"]},"metadata":{},"sourceType":"module"}
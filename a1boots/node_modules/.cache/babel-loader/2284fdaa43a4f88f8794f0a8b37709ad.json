{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The create parameters { data }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.data The record to create, e.g. { title: 'hello, world' }\n *\n * @returns The current mutation state. Destructure as [create, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [create, { isLoading: false, isIdle: true }]\n * - start:   [create, { isLoading: true }]\n * - success: [create, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [create, { error: [error from response], isLoading: false, isError: true }]\n *\n * The create() function must be called with a resource and a parameter object: create(resource, { data, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the create callback\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate();\n *     const handleClick = () => {\n *         create('likes', { data: like })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate('likes', { data: like });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => create()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [create, { data }] = useCreate<Product>('products', { data: product });\n *                    \\-- data is Product\n */\n\nexport var useCreate = function useCreate(resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var paramsRef = useRef(params);\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.resource,\n        callTimeResource = _c === void 0 ? resource : _c,\n        _d = _b.data,\n        callTimeData = _d === void 0 ? paramsRef.current.data : _d,\n        _e = _b.meta,\n        callTimeMeta = _e === void 0 ? paramsRef.current.meta : _e;\n\n    return dataProvider.create(callTimeResource, {\n      data: callTimeData,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, options), {\n    onSuccess: function onSuccess(data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      var _a = variables.resource,\n          callTimeResource = _a === void 0 ? resource : _a;\n      queryClient.setQueryData([callTimeResource, 'getOne', {\n        id: String(data.id)\n      }], data);\n\n      if (options.onSuccess) {\n        options.onSuccess(data, variables, context);\n      } // call-time success callback is executed by react-query\n\n    }\n  }));\n\n  var create = function create(callTimeResource, callTimeParams, createOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n\n    if (createOptions === void 0) {\n      createOptions = {};\n    }\n\n    var _a = createOptions.returnPromise,\n        returnPromise = _a === void 0 ? options.returnPromise : _a,\n        reactCreateOptions = __rest(createOptions, [\"returnPromise\"]);\n\n    if (returnPromise) {\n      return mutation.mutateAsync(__assign({\n        resource: callTimeResource\n      }, callTimeParams), createOptions);\n    }\n\n    mutation.mutate(__assign({\n      resource: callTimeResource\n    }, callTimeParams), reactCreateOptions);\n  };\n\n  return [useEvent(create), mutation];\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SACIC,WADJ,EAIIC,cAJJ,QAMO,aANP;AAQA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,SAASC,QAAT,QAAyB,SAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAKrBC,QALqB,EAMrBC,MANqB,EAOrBC,OAPqB,EAOsD;EAD3E;IAAAD;EAAuD;;EACvD;IAAAC;EAA2E;;EAE3E,IAAMC,YAAY,GAAGN,eAAe,EAApC;EACA,IAAMO,WAAW,GAAGR,cAAc,EAAlC;EACA,IAAMS,SAAS,GAAGX,MAAM,CACpBO,MADoB,CAAxB;EAIA,IAAMK,QAAQ,GAAGX,WAAW,CAKxB,UAACY,EAAD,EAIM;QAJLC,qBAIG,EAJH,GAIKD;QAHFE;QAAUC,gBAAgB,mBAAGV,QAAH,GAAWS;QACrCE;QAAMC,YAAY,mBAAGP,SAAS,CAACQ,OAAV,CAAkBC,IAArB,GAAyBH;QAC3CI;QAAMC,YAAY,mBAAGX,SAAS,CAACQ,OAAV,CAAkBI,IAArB,GAAyBF;;IAE3C,mBAAY,CACPG,MADL,CAC0CR,gBAD1C,EAC4D;MACpDI,IAAI,EAAEF,YAD8C;MAEpDK,IAAI,EAAED;IAF8C,CAD5D,EAKKG,IALL,CAKU,UAACZ,EAAD,EAAS;UAANO,IAAI;MAAO;IAAI,CAL5B;EAK6B,CAfT,EAeSM,sBAE1BlB,OAF0B,GAEnB;IACVmB,SAAS,EAAE,mBACPP,IADO,EAEPQ,SAFO,EAGPC,OAHO,EAGS;MADhB;QAAAD;MAA0D;;MAGlD,SAA0CA,SAAS,SAAnD;MAAA,IAAUZ,gBAAgB,mBAAGV,QAAH,GAAWO,EAArC;MACRH,WAAW,CAACoB,YAAZ,CACI,CAACd,gBAAD,EAAmB,QAAnB,EAA6B;QAAEe,EAAE,EAAEC,MAAM,CAACZ,IAAI,CAACW,EAAN;MAAZ,CAA7B,CADJ,EAEIX,IAFJ;;MAKA,IAAIZ,OAAO,CAACmB,SAAZ,EAAuB;QACnBnB,OAAO,CAACmB,SAAR,CAAkBP,IAAlB,EAAwBQ,SAAxB,EAAmCC,OAAnC;MACH,CAVe,CAWhB;;IACH;EAhBS,CAFmB,CAfT,CAA5B;;EAqCA,IAAML,MAAM,GAAG,SAATA,MAAS,CACXR,gBADW,EAEXiB,cAFW,EAGXC,aAHW,EAQyB;IAPpC;MAAAlB;IAAmC;;IACnC;MAAAiB;IAA+D;;IAC/D;MAAAC;IAKoC;;IAGhC,SAEAA,aAAa,cAFb;IAAA,iBAAa,mBAAG1B,OAAO,CAAC2B,aAAX,GAAwBtB,EAArC;IAAA,IACGuB,kBAAkB,UACrBF,aADqB,EAFnB,iBAEmB,CADrB;;IAGJ,IAAIC,aAAJ,EAAmB;MACf,OAAOvB,QAAQ,CAACyB,WAAT,CAAoBX;QACrBpB,QAAQ,EAAEU;MADW,GACUiB,cADV,CAApB,EAEHC,aAFG,CAAP;IAIH;;IACDtB,QAAQ,CAAC0B,MAAT,CAAeZ;MACTpB,QAAQ,EAAEU;IADD,GACsBiB,cADtB,CAAf,EAEIG,kBAFJ;EAIH,CAxBD;;EA0BA,OAAO,CAAChC,QAAQ,CAACoB,MAAD,CAAT,EAAmBZ,QAAnB,CAAP;AACH,CA/EM","names":["useRef","useMutation","useQueryClient","useDataProvider","useEvent","useCreate","resource","params","options","dataProvider","queryClient","paramsRef","mutation","_a","_b","_c","callTimeResource","_d","callTimeData","current","data","_e","callTimeMeta","meta","create","then","__assign","onSuccess","variables","context","setQueryData","id","String","callTimeParams","createOptions","returnPromise","reactCreateOptions","mutateAsync","mutate"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/useCreate.ts"],"sourcesContent":["import { useRef } from 'react';\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n    MutateOptions,\n} from 'react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport { RaRecord, CreateParams, Identifier } from '../types';\nimport { useEvent } from '../util';\n\n/**\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The create parameters { data }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.data The record to create, e.g. { title: 'hello, world' }\n *\n * @returns The current mutation state. Destructure as [create, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [create, { isLoading: false, isIdle: true }]\n * - start:   [create, { isLoading: true }]\n * - success: [create, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [create, { error: [error from response], isLoading: false, isError: true }]\n *\n * The create() function must be called with a resource and a parameter object: create(resource, { data, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the create callback\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate();\n *     const handleClick = () => {\n *         create('likes', { data: like })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate('likes', { data: like });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => create()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [create, { data }] = useCreate<Product>('products', { data: product });\n *                    \\-- data is Product\n */\nexport const useCreate = <\n    RecordType extends Omit<RaRecord, 'id'> = any,\n    MutationError = unknown,\n    ResultRecordType extends RaRecord = RecordType & { id: Identifier }\n>(\n    resource?: string,\n    params: Partial<CreateParams<Partial<RecordType>>> = {},\n    options: UseCreateOptions<RecordType, MutationError, ResultRecordType> = {}\n): UseCreateResult<RecordType, boolean, MutationError, ResultRecordType> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const paramsRef = useRef<Partial<CreateParams<Partial<RecordType>>>>(\n        params\n    );\n\n    const mutation = useMutation<\n        ResultRecordType,\n        MutationError,\n        Partial<UseCreateMutateParams<RecordType>>\n    >(\n        ({\n            resource: callTimeResource = resource,\n            data: callTimeData = paramsRef.current.data,\n            meta: callTimeMeta = paramsRef.current.meta,\n        } = {}) =>\n            dataProvider\n                .create<RecordType, ResultRecordType>(callTimeResource, {\n                    data: callTimeData,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data),\n        {\n            ...options,\n            onSuccess: (\n                data: ResultRecordType,\n                variables: Partial<UseCreateMutateParams<RecordType>> = {},\n                context: unknown\n            ) => {\n                const { resource: callTimeResource = resource } = variables;\n                queryClient.setQueryData(\n                    [callTimeResource, 'getOne', { id: String(data.id) }],\n                    data\n                );\n\n                if (options.onSuccess) {\n                    options.onSuccess(data, variables, context);\n                }\n                // call-time success callback is executed by react-query\n            },\n        }\n    );\n\n    const create = (\n        callTimeResource: string = resource,\n        callTimeParams: Partial<CreateParams<Partial<RecordType>>> = {},\n        createOptions: MutateOptions<\n            ResultRecordType,\n            MutationError,\n            Partial<UseCreateMutateParams<RecordType>>,\n            unknown\n        > & { returnPromise?: boolean } = {}\n    ) => {\n        const {\n            returnPromise = options.returnPromise,\n            ...reactCreateOptions\n        } = createOptions;\n        if (returnPromise) {\n            return mutation.mutateAsync(\n                { resource: callTimeResource, ...callTimeParams },\n                createOptions\n            );\n        }\n        mutation.mutate(\n            { resource: callTimeResource, ...callTimeParams },\n            reactCreateOptions\n        );\n    };\n\n    return [useEvent(create), mutation];\n};\n\nexport interface UseCreateMutateParams<\n    RecordType extends Omit<RaRecord, 'id'> = any\n> {\n    resource?: string;\n    data?: Partial<Omit<RecordType, 'id'>>;\n    meta?: any;\n}\n\nexport type UseCreateOptions<\n    RecordType extends Omit<RaRecord, 'id'> = any,\n    MutationError = unknown,\n    ResultRecordType extends RaRecord = RecordType & { id: Identifier }\n> = UseMutationOptions<\n    ResultRecordType,\n    MutationError,\n    Partial<UseCreateMutateParams<RecordType>>\n> & { returnPromise?: boolean };\n\nexport type UseCreateResult<\n    RecordType extends Omit<RaRecord, 'id'> = any,\n    TReturnPromise extends boolean = boolean,\n    MutationError = unknown,\n    ResultRecordType extends RaRecord = RecordType & { id: Identifier }\n> = [\n    (\n        resource?: string,\n        params?: Partial<CreateParams<Partial<RecordType>>>,\n        options?: MutateOptions<\n            ResultRecordType,\n            MutationError,\n            Partial<UseCreateMutateParams<RecordType>>,\n            unknown\n        > & { returnPromise?: TReturnPromise }\n    ) => Promise<TReturnPromise extends true ? ResultRecordType : void>,\n    UseMutationResult<\n        ResultRecordType,\n        MutationError,\n        Partial<UseCreateMutateParams<RecordType>>,\n        unknown\n    >\n];\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport { ShowBase, InferredElement, getElementsFromRecords, useResourceContext, useShowContext } from 'ra-core';\nimport { ShowView } from './ShowView';\nimport { showFieldTypes } from './showFieldTypes';\nexport var ShowGuesser = function (_a) {\n  var id = _a.id,\n      queryOptions = _a.queryOptions,\n      resource = _a.resource,\n      rest = __rest(_a, [\"id\", \"queryOptions\", \"resource\"]);\n\n  return React.createElement(ShowBase, {\n    id: id,\n    resource: resource,\n    queryOptions: queryOptions\n  }, React.createElement(ShowViewGuesser, __assign({}, rest)));\n};\n\nvar ShowViewGuesser = function (props) {\n  var resource = useResourceContext(props);\n  var record = useShowContext().record;\n\n  var _a = useState(null),\n      child = _a[0],\n      setChild = _a[1];\n\n  useEffect(function () {\n    setChild(null);\n  }, [resource]);\n  useEffect(function () {\n    if (record && !child) {\n      var inferredElements = getElementsFromRecords([record], showFieldTypes);\n      var inferredChild = new InferredElement(showFieldTypes.show, null, inferredElements);\n      setChild(inferredChild.getElement());\n      if (process.env.NODE_ENV === 'production') return;\n      var representation = inferredChild.getRepresentation();\n      var components = ['Show'].concat(Array.from(new Set(Array.from(representation.matchAll(/<([^/\\s>]+)/g)).map(function (match) {\n        return match[1];\n      }).filter(function (component) {\n        return component !== 'span';\n      })))).sort(); // eslint-disable-next-line no-console\n\n      console.log(\"Guessed Show:\\n\\nimport { \".concat(components.join(', '), \" } from 'react-admin';\\n\\nexport const \").concat(inflection.capitalize(inflection.singularize(resource)), \"Show = () => (\\n    <Show>\\n\").concat(inferredChild.getRepresentation(), \"\\n    </Show>\\n);\"));\n    }\n  }, [record, child, resource]);\n  return React.createElement(ShowView, __assign({}, props), child);\n};\n\nShowViewGuesser.propTypes = ShowView.propTypes;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACIC,QADJ,EAEIC,eAFJ,EAGIC,sBAHJ,EAIIC,kBAJJ,EAKIC,cALJ,QAMO,SANP;AASA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,IAAMC,WAAW,GAAG,UAACC,EAAD,EAKG;EAJ1B,MAAE,QAAF;EAAA,IACAC,YAAY,kBADZ;EAAA,IAEAC,QAAQ,cAFR;EAAA,IAGGC,IAAI,cAJiB,kCAIjB,CAHP;;EAI+B,OAC/Bf,oBAACI,QAAD,EAAS;IAACY,EAAE,EAAEA,EAAL;IAASF,QAAQ,EAAEA,QAAnB;IAA6BD,YAAY,EAAEA;EAA3C,CAAT,EACIb,oBAACiB,eAAD,EAAgBC,aAAKH,IAAL,CAAhB,CADJ,CAD+B;AAIlC,CATM;;AAWP,IAAME,eAAe,GAAG,iBAAK;EACzB,IAAMH,QAAQ,GAAGP,kBAAkB,CAACY,KAAD,CAAnC;EACQ,UAAM,GAAKX,cAAc,GAAEY,MAA3B;;EACF,SAAoBlB,QAAQ,CAAC,IAAD,CAA5B;EAAA,IAACmB,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB;;EAENrB,SAAS,CAAC;IACNqB,QAAQ,CAAC,IAAD,CAAR;EACH,CAFQ,EAEN,CAACR,QAAD,CAFM,CAAT;EAIAb,SAAS,CAAC;IACN,IAAImB,MAAM,IAAI,CAACC,KAAf,EAAsB;MAClB,IAAME,gBAAgB,GAAGjB,sBAAsB,CAC3C,CAACc,MAAD,CAD2C,EAE3CV,cAF2C,CAA/C;MAIA,IAAMc,aAAa,GAAG,IAAInB,eAAJ,CAClBK,cAAc,CAACe,IADG,EAElB,IAFkB,EAGlBF,gBAHkB,CAAtB;MAKAD,QAAQ,CAACE,aAAa,CAACE,UAAd,EAAD,CAAR;MAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MAE3C,IAAMC,cAAc,GAAGN,aAAa,CAACO,iBAAd,EAAvB;MACA,IAAMC,UAAU,GAAG,CAAC,MAAD,EACdC,MADc,CAEXC,KAAK,CAACC,IAAN,CACI,IAAIC,GAAJ,CACIF,KAAK,CAACC,IAAN,CAAWL,cAAc,CAACO,QAAf,CAAwB,cAAxB,CAAX,EACKC,GADL,CACS,iBAAK;QAAI,YAAK,CAAC,CAAD,CAAL;MAAQ,CAD1B,EAEKC,MAFL,CAEY,qBAAS;QAAI,gBAAS,KAAK,MAAd;MAAoB,CAF7C,CADJ,CADJ,CAFW,EAUdC,IAVc,EAAnB,CAfkB,CA2BlB;;MACAC,OAAO,CAACC,GAAR,CACI,oCAELV,UAAU,CAACW,IAAX,CAAgB,IAAhB,CAFK,EAEgB,yCAFhB,EAEgBV,MAFhB,CAID9B,UAAU,CAACyC,UAAX,CACKzC,UAAU,CAAC0C,WAAX,CAAuB/B,QAAvB,CADL,CAJC,EAMC,8BAND,EAMCmB,MAND,CAQdT,aAAa,CAACO,iBAAd,EARc,EAQmB,mBARnB,CADJ;IAaH;EACJ,CA3CQ,EA2CN,CAACX,MAAD,EAASC,KAAT,EAAgBP,QAAhB,CA3CM,CAAT;EA6CA,OAAOd,oBAACS,QAAD,EAASS,aAAKC,KAAL,CAAT,EAAsBE,KAAtB,CAAP;AACH,CAvDD;;AAyDAJ,eAAe,CAAC6B,SAAhB,GAA4BrC,QAAQ,CAACqC,SAArC","names":["React","useEffect","useState","inflection","ShowBase","InferredElement","getElementsFromRecords","useResourceContext","useShowContext","ShowView","showFieldTypes","ShowGuesser","_a","queryOptions","resource","rest","id","ShowViewGuesser","__assign","props","record","child","setChild","inferredElements","inferredChild","show","getElement","process","env","NODE_ENV","representation","getRepresentation","components","concat","Array","from","Set","matchAll","map","filter","sort","console","log","join","capitalize","singularize","propTypes"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/detail/ShowGuesser.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport {\n    ShowBase,\n    InferredElement,\n    getElementsFromRecords,\n    useResourceContext,\n    useShowContext,\n} from 'ra-core';\n\nimport { ShowProps } from '../types';\nimport { ShowView } from './ShowView';\nimport { showFieldTypes } from './showFieldTypes';\n\nexport const ShowGuesser = ({\n    id,\n    queryOptions,\n    resource,\n    ...rest\n}: Omit<ShowProps, 'children'>) => (\n    <ShowBase id={id} resource={resource} queryOptions={queryOptions}>\n        <ShowViewGuesser {...rest} />\n    </ShowBase>\n);\n\nconst ShowViewGuesser = props => {\n    const resource = useResourceContext(props);\n    const { record } = useShowContext();\n    const [child, setChild] = useState(null);\n\n    useEffect(() => {\n        setChild(null);\n    }, [resource]);\n\n    useEffect(() => {\n        if (record && !child) {\n            const inferredElements = getElementsFromRecords(\n                [record],\n                showFieldTypes\n            );\n            const inferredChild = new InferredElement(\n                showFieldTypes.show,\n                null,\n                inferredElements\n            );\n            setChild(inferredChild.getElement());\n\n            if (process.env.NODE_ENV === 'production') return;\n\n            const representation = inferredChild.getRepresentation();\n            const components = ['Show']\n                .concat(\n                    Array.from(\n                        new Set(\n                            Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                                .map(match => match[1])\n                                .filter(component => component !== 'span')\n                        )\n                    )\n                )\n                .sort();\n\n            // eslint-disable-next-line no-console\n            console.log(\n                `Guessed Show:\n\nimport { ${components.join(', ')} } from 'react-admin';\n\nexport const ${inflection.capitalize(\n                    inflection.singularize(resource)\n                )}Show = () => (\n    <Show>\n${inferredChild.getRepresentation()}\n    </Show>\n);`\n            );\n        }\n    }, [record, child, resource]);\n\n    return <ShowView {...props}>{child}</ShowView>;\n};\n\nShowViewGuesser.propTypes = ShowView.propTypes;\n"]},"metadata":{},"sourceType":"module"}
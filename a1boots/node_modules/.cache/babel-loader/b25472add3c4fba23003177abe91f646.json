{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useResourceContext, usePreference, useStore, useTranslate } from 'ra-core';\nimport { Configurable } from '../preferences';\nimport { SimpleForm } from './SimpleForm';\nimport { SimpleFormEditor } from './SimpleFormEditor';\nexport var SimpleFormConfigurable = function SimpleFormConfigurable(_a) {\n  var preferenceKey = _a.preferenceKey,\n      omit = _a.omit,\n      props = __rest(_a, [\"preferenceKey\", \"omit\"]);\n\n  var translate = useTranslate();\n  var resource = useResourceContext(props);\n  var finalPreferenceKey = preferenceKey || \"\".concat(resource, \".simpleForm\");\n\n  var _b = useStore(\"preferences.\".concat(finalPreferenceKey, \".availableInputs\"), []),\n      availableInputs = _b[0],\n      setAvailableInputs = _b[1]; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  var _c = useStore(\"preferences.\".concat(finalPreferenceKey, \".omit\"), omit),\n      _ = _c[0],\n      setOmit = _c[1];\n\n  React.useEffect(function () {\n    // first render, or the preference have been cleared\n    var inputs = React.Children.map(props.children, function (child, index) {\n      return React.isValidElement(child) ? {\n        index: String(index),\n        source: child.props.source,\n        label: child.props.source || child.props.label ? child.props.label : translate('ra.configurable.SimpleForm.unlabeled', {\n          input: index,\n          _: \"Unlabeled input #%{input}\"\n        })\n      } : null;\n    }).filter(function (column) {\n      return column != null;\n    });\n\n    if (inputs.length !== availableInputs.length) {\n      setAvailableInputs(inputs);\n      setOmit(omit);\n    }\n  }, [availableInputs]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return React.createElement(Configurable, {\n    editor: React.createElement(SimpleFormEditor, null),\n    preferenceKey: finalPreferenceKey,\n    sx: {\n      display: 'block',\n      '&.RaConfigurable-editMode': {\n        margin: '2px'\n      }\n    }\n  }, React.createElement(SimpleFormWithPreferences, __assign({}, props)));\n};\n/**\n * This SimpleForm filters its children depending on preferences\n */\n\nvar SimpleFormWithPreferences = function SimpleFormWithPreferences(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  var availableInputs = usePreference('availableInputs', [])[0];\n  var omit = usePreference('omit', [])[0];\n  var inputs = usePreference('inputs', availableInputs.filter(function (input) {\n    return !(omit === null || omit === void 0 ? void 0 : omit.includes(input.source));\n  }).map(function (input) {\n    return input.index;\n  }))[0];\n  var childrenArray = React.Children.toArray(children);\n  return React.createElement(SimpleForm, __assign({}, props), inputs === undefined ? children : inputs.map(function (index) {\n    return childrenArray[index];\n  }));\n};","map":{"version":3,"mappings":"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","names":["React","useResourceContext","usePreference","useStore","useTranslate","Configurable","SimpleForm","SimpleFormEditor","SimpleFormConfigurable","_a","omit","props","translate","resource","finalPreferenceKey","preferenceKey","availableInputs","setAvailableInputs","_","setOmit","useEffect","inputs","Children","map","children","child","index","isValidElement","String","source","label","input","filter","length","editor","sx","display","margin","SimpleFormWithPreferences","__assign","includes","childrenArray","toArray","undefined"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/form/SimpleFormConfigurable.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    useResourceContext,\n    usePreference,\n    useStore,\n    useTranslate,\n} from 'ra-core';\n\nimport { Configurable } from '../preferences';\nimport { SimpleForm, SimpleFormProps } from './SimpleForm';\nimport { SimpleFormEditor } from './SimpleFormEditor';\n\nexport const SimpleFormConfigurable = ({\n    preferenceKey,\n    omit,\n    ...props\n}: SimpleFormConfigurableProps) => {\n    const translate = useTranslate();\n    const resource = useResourceContext(props);\n    const finalPreferenceKey = preferenceKey || `${resource}.simpleForm`;\n\n    const [availableInputs, setAvailableInputs] = useStore<\n        SimpleFormConfigurableColumn[]\n    >(`preferences.${finalPreferenceKey}.availableInputs`, []);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, setOmit] = useStore<string[]>(\n        `preferences.${finalPreferenceKey}.omit`,\n        omit\n    );\n\n    React.useEffect(() => {\n        // first render, or the preference have been cleared\n        const inputs = React.Children.map(props.children, (child, index) =>\n            React.isValidElement(child)\n                ? {\n                      index: String(index),\n                      source: child.props.source,\n                      label:\n                          child.props.source || child.props.label\n                              ? child.props.label\n                              : translate(\n                                    'ra.configurable.SimpleForm.unlabeled',\n                                    {\n                                        input: index,\n                                        _: `Unlabeled input #%{input}`,\n                                    }\n                                ),\n                  }\n                : null\n        ).filter(column => column != null);\n        if (inputs.length !== availableInputs.length) {\n            setAvailableInputs(inputs);\n            setOmit(omit);\n        }\n    }, [availableInputs]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <Configurable\n            editor={<SimpleFormEditor />}\n            preferenceKey={finalPreferenceKey}\n            sx={{\n                display: 'block',\n                '&.RaConfigurable-editMode': {\n                    margin: '2px',\n                },\n            }}\n        >\n            <SimpleFormWithPreferences {...props} />\n        </Configurable>\n    );\n};\n\nexport interface SimpleFormConfigurableProps extends SimpleFormProps {\n    /**\n     * Key to use to store the user's preferences for this SimpleForm.\n     *\n     * Set to '[resource].simpleForm' by default. Pass a custom key if you need\n     * to display more than one SimpleFormConfigurable per resource.\n     */\n    preferenceKey?: string;\n    /**\n     * columns to hide by default\n     *\n     * @example\n     * // by default, hide the id and author columns\n     * // users can choose to show show them in configuration mode\n     * const PostEdit = () => (\n     *     <Edit>\n     *         <SimpleFormConfigurable omit={['id', 'author']}>\n     *             <TextInput source=\"id\" />\n     *             <TextInput source=\"title\" />\n     *             <TextInput source=\"author\" />\n     *             <TextInput source=\"year\" />\n     *         </SimpleFormConfigurable>\n     *     </Edit>\n     * );\n     */\n    omit?: string[];\n}\n\nexport interface SimpleFormConfigurableColumn {\n    index: string;\n    source: string;\n    label?: string;\n}\n\n/**\n * This SimpleForm filters its children depending on preferences\n */\nconst SimpleFormWithPreferences = ({ children, ...props }: SimpleFormProps) => {\n    const [availableInputs] = usePreference('availableInputs', []);\n    const [omit] = usePreference('omit', []);\n    const [inputs] = usePreference(\n        'inputs',\n        availableInputs\n            .filter(input => !omit?.includes(input.source))\n            .map(input => input.index)\n    );\n    const childrenArray = React.Children.toArray(children);\n    return (\n        <SimpleForm {...props}>\n            {inputs === undefined\n                ? children\n                : inputs.map(index => childrenArray[index])}\n        </SimpleForm>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
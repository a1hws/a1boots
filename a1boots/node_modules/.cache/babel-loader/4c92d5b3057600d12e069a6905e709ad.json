{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport ActionList from '@mui/icons-material/List';\nimport { Link } from 'react-router-dom';\nimport { useResourceContext, useCreatePath } from 'ra-core';\nimport { Button } from './Button';\n/**\n * Opens the List view of a given resource\n *\n * @example // basic usage\n * import { ListButton } from 'react-admin';\n *\n * const CommentListButton = () => (\n *     <ListButton label=\"Comments\" />\n * );\n *\n * @example // linking back to the list from the Edit view\n * import { TopToolbar, ListButton, ShowButton, Edit } from 'react-admin';\n *\n * const PostEditActions = () => (\n *     <TopToolbar>\n *         <ListButton />\n *         <ShowButton />\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = (props) => (\n *     <Edit actions={<PostEditActions />} {...props}>\n *         ...\n *     </Edit>\n * );\n */\n\nexport var ListButton = function (props) {\n  var _a = props.icon,\n      icon = _a === void 0 ? defaultIcon : _a,\n      _b = props.label,\n      label = _b === void 0 ? 'ra.action.list' : _b,\n      resourceProp = props.resource,\n      _c = props.scrollToTop,\n      scrollToTop = _c === void 0 ? true : _c,\n      rest = __rest(props, [\"icon\", \"label\", \"resource\", \"scrollToTop\"]);\n\n  var resource = useResourceContext(props);\n  var createPath = useCreatePath();\n  return React.createElement(Button, __assign({\n    component: Link,\n    to: createPath({\n      type: 'list',\n      resource: resource\n    }),\n    state: scrollStates[String(scrollToTop)],\n    label: label\n  }, rest), icon);\n}; // avoids using useMemo to get a constant value for the link state\n\nvar scrollStates = {\n  true: {\n    _scrollToTop: true\n  },\n  false: {}\n};\nvar defaultIcon = React.createElement(ActionList, null);\nListButton.propTypes = {\n  icon: PropTypes.element,\n  label: PropTypes.string\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,SAAlD;AAEA,SAASC,MAAT,QAAoC,UAApC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,IAAMC,UAAU,GAAG,UAACC,KAAD,EAAuB;EAEzC,SAKAA,KAAK,KALL;EAAA,QAAI,mBAAGC,WAAH,GAAcC,EAAlB;EAAA,IACAC,KAIAH,KAAK,MALL;EAAA,IACAI,KAAK,mBAAG,gBAAH,GAAmBD,EADxB;EAAA,IAEUE,YAAY,GAGtBL,KAAK,SALL;EAAA,IAGAM,KAEAN,KAAK,YALL;EAAA,IAGAO,WAAW,mBAAG,IAAH,GAAOD,EAHlB;EAAA,IAIGE,IAAI,UACPR,KADO,EALL,4CAKK,CAJP;;EAMJ,IAAMS,QAAQ,GAAGb,kBAAkB,CAACI,KAAD,CAAnC;EACA,IAAMU,UAAU,GAAGb,aAAa,EAAhC;EACA,OACIL,oBAACM,MAAD,EAAOa;IACHC,SAAS,EAAEjB,IADR;IAEHkB,EAAE,EAAEH,UAAU,CAAC;MAAEI,IAAI,EAAE,MAAR;MAAgBL,QAAQ;IAAxB,CAAD,CAFX;IAGHM,KAAK,EAAEC,YAAY,CAACC,MAAM,CAACV,WAAD,CAAP,CAHhB;IAIHH,KAAK,EAAEA;EAJJ,GAKEI,IALF,CAAP,EAOKU,IAPL,CADJ;AAWH,CArBM,C,CAuBP;;AACA,IAAMF,YAAY,GAAG;EACjBG,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAhB,CADW;EAEjBC,KAAK,EAAE;AAFU,CAArB;AAKA,IAAMpB,WAAW,GAAGT,oBAACE,UAAD,EAAW,IAAX,CAApB;AAWAK,UAAU,CAACuB,SAAX,GAAuB;EACnBJ,IAAI,EAAEzB,SAAS,CAAC8B,OADG;EAEnBnB,KAAK,EAAEX,SAAS,CAAC+B;AAFE,CAAvB","names":["React","PropTypes","ActionList","Link","useResourceContext","useCreatePath","Button","ListButton","props","defaultIcon","_a","_b","label","resourceProp","_c","scrollToTop","rest","resource","createPath","__assign","component","to","type","state","scrollStates","String","icon","true","_scrollToTop","false","propTypes","element","string"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/ListButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionList from '@mui/icons-material/List';\nimport { Link } from 'react-router-dom';\nimport { useResourceContext, useCreatePath } from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the List view of a given resource\n *\n * @example // basic usage\n * import { ListButton } from 'react-admin';\n *\n * const CommentListButton = () => (\n *     <ListButton label=\"Comments\" />\n * );\n *\n * @example // linking back to the list from the Edit view\n * import { TopToolbar, ListButton, ShowButton, Edit } from 'react-admin';\n *\n * const PostEditActions = () => (\n *     <TopToolbar>\n *         <ListButton />\n *         <ShowButton />\n *     </TopToolbar>\n * );\n *\n * export const PostEdit = (props) => (\n *     <Edit actions={<PostEditActions />} {...props}>\n *         ...\n *     </Edit>\n * );\n */\nexport const ListButton = (props: ListButtonProps) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.list',\n        resource: resourceProp,\n        scrollToTop = true,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const createPath = useCreatePath();\n    return (\n        <Button\n            component={Link}\n            to={createPath({ type: 'list', resource })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            {...(rest as any)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ActionList />;\n\ninterface Props {\n    icon?: ReactElement;\n    label?: string;\n    resource?: string;\n    scrollToTop?: boolean;\n}\n\nexport type ListButtonProps = Props & ButtonProps;\n\nListButton.propTypes = {\n    icon: PropTypes.element,\n    label: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}
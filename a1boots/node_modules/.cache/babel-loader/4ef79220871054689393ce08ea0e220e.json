{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { memo, useMemo } from 'react';\nimport { InputAdornment } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Form, useTranslate, useListFilterContext } from 'ra-core';\nimport { TextInput } from '../../input';\n/**\n * Form and search input for doing a full-text search filter.\n *\n * Triggers a search on change (with debounce).\n *\n * @example\n *\n * const FilterPanel = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterLiveSearch source=\"title\" />\n *         </CardContent>\n *     </Card>\n * );\n */\n\nexport var FilterLiveSearch = memo(function (props) {\n  var _a = useListFilterContext(),\n      filterValues = _a.filterValues,\n      setFilters = _a.setFilters;\n\n  var translate = useTranslate();\n\n  var _b = props.source,\n      source = _b === void 0 ? 'q' : _b,\n      variant = props.variant,\n      _c = props.label,\n      label = _c === void 0 ? translate('ra.action.search') : _c,\n      rest = __rest(props, [\"source\", \"variant\", \"label\"]);\n\n  var handleChange = function (event) {\n    var _a;\n\n    if (event.target) {\n      setFilters(__assign(__assign({}, filterValues), (_a = {}, _a[source] = event.target.value, _a)), null);\n    } else {\n      var _b = filterValues,\n          _c = source,\n          _1 = _b[_c],\n          filters = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n      setFilters(filters, null);\n    }\n  };\n\n  var initialValues = useMemo(function () {\n    var _a;\n\n    return _a = {}, _a[source] = filterValues[source], _a;\n  }, [filterValues, source]);\n\n  var onSubmit = function () {\n    return undefined;\n  };\n\n  return React.createElement(Form, {\n    defaultValues: initialValues,\n    onSubmit: onSubmit\n  }, React.createElement(TextInput, __assign({\n    resettable: true,\n    helperText: false,\n    source: source,\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\"\n      }, React.createElement(SearchIcon, {\n        color: \"disabled\"\n      }))\n    },\n    onChange: handleChange,\n    size: \"small\"\n  }, variant === 'outlined' ? {\n    variant: 'outlined',\n    label: label\n  } : {\n    placeholder: label,\n    label: false,\n    hiddenLabel: true\n  }, rest)));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAsBC,IAAtB,EAA4BC,OAA5B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,IAAT,EAAeC,YAAf,EAA6BC,oBAA7B,QAAyD,SAAzD;AAEA,SAASC,SAAT,QAA0C,aAA1C;AAEA;;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,gBAAgB,GAAGR,IAAI,CAAC,UAACS,KAAD,EAA6B;EACxD,SAA+BH,oBAAoB,EAAnD;EAAA,IAAEI,YAAY,kBAAd;EAAA,IAAgBC,UAAU,gBAA1B;;EACN,IAAMC,SAAS,GAAGP,YAAY,EAA9B;;EAGI,SAIAI,KAAK,OAJL;EAAA,UAAM,mBAAG,GAAH,GAAMI,EAAZ;EAAA,IACAC,OAAO,GAGPL,KAAK,QAJL;EAAA,IAEAM,KAEAN,KAAK,MAJL;EAAA,IAEAO,KAAK,mBAAGJ,SAAS,CAAC,kBAAD,CAAZ,GAAgCG,EAFrC;EAAA,IAGGE,IAAI,UACPR,KADO,EAJL,8BAIK,CAHP;;EAMJ,IAAMS,YAAY,GAAG,UAACC,KAAD,EAAqC;;;IACtD,IAAIA,KAAK,CAACC,MAAV,EAAkB;MACdT,UAAU,uBAAMD,YAAN,IAAkBW,YAAGC,MAAH,IAAYH,KAAK,CAACC,MAAN,CAAaG,KAAzB,EAA8BF,EAAhD,IAAoD,IAApD,CAAV;IACH,CAFD,MAEO;MACH,IAAoCR,iBAApC;MAAA,IAAQE,KAACO,MAAT;MAAA,IAAkBE,EAAC,SAAnB;MAAA,IAAwBC,OAAO,cAAzB,uCAAyB,CAA/B;;MACAd,UAAU,CAACc,OAAD,EAAU,IAAV,CAAV;IACH;EACJ,CAPD;;EASA,IAAMC,aAAa,GAAGzB,OAAO,CACzB;;;IAAM,gBACFoB,GAACC,MAAD,IAAUZ,YAAY,CAACY,MAAD,CADpB;EAEJ,CAHuB,EAIzB,CAACZ,YAAD,EAAeY,MAAf,CAJyB,CAA7B;;EAOA,IAAMK,QAAQ,GAAG;IAAM;EAAS,CAAhC;;EACA,OACI5B,oBAACK,IAAD,EAAK;IAACwB,aAAa,EAAEF,aAAhB;IAA+BC,QAAQ,EAAEA;EAAzC,CAAL,EACI5B,oBAACQ,SAAD,EAAUsB;IACNC,UAAU,MADJ;IAENC,UAAU,EAAE,KAFN;IAGNT,MAAM,EAAEA,MAHF;IAINU,UAAU,EAAE;MACRC,YAAY,EACRlC,oBAACG,cAAD,EAAe;QAACgC,QAAQ,EAAC;MAAV,CAAf,EACInC,oBAACI,UAAD,EAAW;QAACgC,KAAK,EAAC;MAAP,CAAX,CADJ;IAFI,CAJN;IAWNC,QAAQ,EAAElB,YAXJ;IAYNmB,IAAI,EAAC;EAZC,GAaDvB,OAAO,KAAK,UAAZ,GACC;IAAEA,OAAO,EAAE,UAAX;IAAuBE,KAAK;EAA5B,CADD,GAEC;IACIsB,WAAW,EAAEtB,KADjB;IAEIA,KAAK,EAAE,KAFX;IAGIuB,WAAW,EAAE;EAHjB,CAfA,EAoBFtB,IApBE,CAAV,CADJ,CADJ;AA0BH,CAtDmC,CAA7B","names":["React","memo","useMemo","InputAdornment","SearchIcon","Form","useTranslate","useListFilterContext","TextInput","FilterLiveSearch","props","filterValues","setFilters","translate","_b","variant","_c","label","rest","handleChange","event","target","_a","source","value","_1","filters","initialValues","onSubmit","defaultValues","__assign","resettable","helperText","InputProps","endAdornment","position","color","onChange","size","placeholder","hiddenLabel"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/filter/FilterLiveSearch.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ChangeEvent, memo, useMemo } from 'react';\nimport { InputAdornment } from '@mui/material';\nimport { SxProps } from '@mui/system';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Form, useTranslate, useListFilterContext } from 'ra-core';\n\nimport { TextInput, TextInputProps } from '../../input';\n\n/**\n * Form and search input for doing a full-text search filter.\n *\n * Triggers a search on change (with debounce).\n *\n * @example\n *\n * const FilterPanel = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterLiveSearch source=\"title\" />\n *         </CardContent>\n *     </Card>\n * );\n */\nexport const FilterLiveSearch = memo((props: FilterLiveSearchProps) => {\n    const { filterValues, setFilters } = useListFilterContext();\n    const translate = useTranslate();\n\n    const {\n        source = 'q',\n        variant,\n        label = translate('ra.action.search'),\n        ...rest\n    } = props;\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        if (event.target) {\n            setFilters({ ...filterValues, [source]: event.target.value }, null);\n        } else {\n            const { [source]: _, ...filters } = filterValues;\n            setFilters(filters, null);\n        }\n    };\n\n    const initialValues = useMemo(\n        () => ({\n            [source]: filterValues[source],\n        }),\n        [filterValues, source]\n    );\n\n    const onSubmit = () => undefined;\n    return (\n        <Form defaultValues={initialValues} onSubmit={onSubmit}>\n            <TextInput\n                resettable\n                helperText={false}\n                source={source}\n                InputProps={{\n                    endAdornment: (\n                        <InputAdornment position=\"end\">\n                            <SearchIcon color=\"disabled\" />\n                        </InputAdornment>\n                    ),\n                }}\n                onChange={handleChange}\n                size=\"small\"\n                {...(variant === 'outlined'\n                    ? { variant: 'outlined', label }\n                    : {\n                          placeholder: label,\n                          label: false,\n                          hiddenLabel: true,\n                      })}\n                {...rest}\n            />\n        </Form>\n    );\n});\n\nexport interface FilterLiveSearchProps extends Omit<TextInputProps, 'source'> {\n    source?: string;\n    sx?: SxProps;\n    label?: string;\n    fullWidth?: boolean;\n    variant?: 'filled' | 'outlined';\n}\n"]},"metadata":{},"sourceType":"module"}
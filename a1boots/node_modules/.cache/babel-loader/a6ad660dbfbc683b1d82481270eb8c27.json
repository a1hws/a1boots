{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as React from 'react';\nimport { Children, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'ra-core';\nimport get from 'lodash/get';\nimport { TabbedFormView } from './TabbedFormView';\nimport { useFormRootPath } from './useFormRootPath';\nimport { FormTab } from './FormTab';\n/**\n * Form layout where inputs are divided by tab, one input per line.\n *\n * Pass <TabbedForm.Tab> components as children.\n *\n * @example\n *\n * import * as React from \"react\";\n * import {\n *     Edit,\n *     TabbedForm,\n *     Datagrid,\n *     TextField,\n *     DateField,\n *     TextInput,\n *     ReferenceManyField,\n *     NumberInput,\n *     DateInput,\n *     BooleanInput,\n *     EditButton\n * } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <TabbedForm>\n *             <TabbedForm.Tab label=\"summary\">\n *                 <TextInput disabled label=\"Id\" source=\"id\" />\n *                 <TextInput source=\"title\" validate={required()} />\n *                 <TextInput multiline source=\"teaser\" validate={required()} />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"body\">\n *                 <RichTextInput source=\"body\" validate={required()} label={false} />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"Miscellaneous\">\n *                 <TextInput label=\"Password (if protected post)\" source=\"password\" type=\"password\" />\n *                 <DateInput label=\"Publication date\" source=\"published_at\" />\n *                 <NumberInput source=\"average_note\" validate={[ number(), minValue(0) ]} />\n *                 <BooleanInput label=\"Allow comments?\" source=\"commentable\" defaultValue />\n *                 <TextInput disabled label=\"Nb views\" source=\"views\" />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"comments\">\n *                 <ReferenceManyField reference=\"comments\" target=\"post_id\" label={false}>\n *                     <Datagrid>\n *                         <TextField source=\"body\" />\n *                         <DateField source=\"created_at\" />\n *                         <EditButton />\n *                     </Datagrid>\n *                 </ReferenceManyField>\n *             </TabbedForm.Tab>\n *         </TabbedForm>\n *     </Edit>\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\n * @prop {ReactElement[]} FormTab elements\n * @prop {Object} defaultValues\n * @prop {Function} validate\n * @prop {ReactElement} toolbar The element displayed at the bottom of the form, containing the SaveButton\n *\n * @param {Props} props\n */\n\nexport var TabbedForm = function TabbedForm(props) {\n  var formRootPathname = useFormRootPath();\n  return React.createElement(Form, __assign({\n    formRootPathname: formRootPathname\n  }, props), React.createElement(TabbedFormView, __assign({\n    formRootPathname: formRootPathname\n  }, sanitizeRestProps(props))));\n};\nTabbedForm.Tab = FormTab;\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var criteriaMode = _a.criteriaMode,\n      defaultValues = _a.defaultValues,\n      delayError = _a.delayError,\n      formRootPathname = _a.formRootPathname,\n      mode = _a.mode,\n      noValidate = _a.noValidate,\n      onSubmit = _a.onSubmit,\n      record = _a.record,\n      resetOptions = _a.resetOptions,\n      resolver = _a.resolver,\n      reValidateMode = _a.reValidateMode,\n      sanitizeEmptyValues = _a.sanitizeEmptyValues,\n      shouldFocusError = _a.shouldFocusError,\n      shouldUnregister = _a.shouldUnregister,\n      shouldUseNativeValidation = _a.shouldUseNativeValidation,\n      validate = _a.validate,\n      warnWhenUnsavedChanges = _a.warnWhenUnsavedChanges,\n      rest = __rest(_a, [\"criteriaMode\", \"defaultValues\", \"delayError\", \"formRootPathname\", \"mode\", \"noValidate\", \"onSubmit\", \"record\", \"resetOptions\", \"resolver\", \"reValidateMode\", \"sanitizeEmptyValues\", \"shouldFocusError\", \"shouldUnregister\", \"shouldUseNativeValidation\", \"validate\", \"warnWhenUnsavedChanges\"]);\n\n  return rest;\n};\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\n\nTabbedForm.propTypes = {\n  children: PropTypes.node,\n  defaultValues: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  formRootPathname: PropTypes.string,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  // @ts-ignore\n  record: PropTypes.object,\n  saving: PropTypes.bool,\n  validate: PropTypes.func\n};\nexport var findTabsWithErrors = function findTabsWithErrors(children, errors) {\n  console.warn('Deprecated. FormTab now wrap their content inside a FormGroupContextProvider. If you implemented custom forms with tabs, please use the FormGroupContextProvider. See https://marmelab.com/react-admin/EditTutorial.html#grouping-inputs');\n  return Children.toArray(children).reduce(function (acc, child) {\n    if (!isValidElement(child)) {\n      return acc;\n    }\n\n    var inputs = Children.toArray(child.props.children);\n\n    if (inputs.some(function (input) {\n      return isValidElement(input) && get(errors, input.props.source);\n    })) {\n      return __spreadArray(__spreadArray([], acc, true), [child.props.label], false);\n    }\n\n    return acc;\n  }, []);\n};","map":{"version":3,"mappings":"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","names":["React","Children","isValidElement","PropTypes","Form","get","TabbedFormView","useFormRootPath","FormTab","TabbedForm","props","formRootPathname","__assign","sanitizeRestProps","Tab","_a","defaultValues","delayError","mode","noValidate","onSubmit","record","resetOptions","resolver","reValidateMode","sanitizeEmptyValues","shouldFocusError","shouldUnregister","shouldUseNativeValidation","validate","warnWhenUnsavedChanges","rest","propTypes","children","node","oneOfType","object","func","string","mutationMode","oneOf","saving","bool","findTabsWithErrors","errors","console","warn","toArray","reduce","acc","child","inputs","some","input","source","label"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/form/TabbedForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    HtmlHTMLAttributes,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, FormProps, MutationMode, RaRecord } from 'ra-core';\nimport get from 'lodash/get';\n\nimport { TabbedFormView, TabbedFormViewProps } from './TabbedFormView';\nimport { useFormRootPath } from './useFormRootPath';\nimport { FormTab } from './FormTab';\n\n/**\n * Form layout where inputs are divided by tab, one input per line.\n *\n * Pass <TabbedForm.Tab> components as children.\n *\n * @example\n *\n * import * as React from \"react\";\n * import {\n *     Edit,\n *     TabbedForm,\n *     Datagrid,\n *     TextField,\n *     DateField,\n *     TextInput,\n *     ReferenceManyField,\n *     NumberInput,\n *     DateInput,\n *     BooleanInput,\n *     EditButton\n * } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <TabbedForm>\n *             <TabbedForm.Tab label=\"summary\">\n *                 <TextInput disabled label=\"Id\" source=\"id\" />\n *                 <TextInput source=\"title\" validate={required()} />\n *                 <TextInput multiline source=\"teaser\" validate={required()} />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"body\">\n *                 <RichTextInput source=\"body\" validate={required()} label={false} />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"Miscellaneous\">\n *                 <TextInput label=\"Password (if protected post)\" source=\"password\" type=\"password\" />\n *                 <DateInput label=\"Publication date\" source=\"published_at\" />\n *                 <NumberInput source=\"average_note\" validate={[ number(), minValue(0) ]} />\n *                 <BooleanInput label=\"Allow comments?\" source=\"commentable\" defaultValue />\n *                 <TextInput disabled label=\"Nb views\" source=\"views\" />\n *             </TabbedForm.Tab>\n *             <TabbedForm.Tab label=\"comments\">\n *                 <ReferenceManyField reference=\"comments\" target=\"post_id\" label={false}>\n *                     <Datagrid>\n *                         <TextField source=\"body\" />\n *                         <DateField source=\"created_at\" />\n *                         <EditButton />\n *                     </Datagrid>\n *                 </ReferenceManyField>\n *             </TabbedForm.Tab>\n *         </TabbedForm>\n *     </Edit>\n * );\n *\n * @typedef {Object} Props the props you can use (other props are injected by Create or Edit)\n * @prop {ReactElement[]} FormTab elements\n * @prop {Object} defaultValues\n * @prop {Function} validate\n * @prop {ReactElement} toolbar The element displayed at the bottom of the form, containing the SaveButton\n *\n * @param {Props} props\n */\nexport const TabbedForm = (props: TabbedFormProps) => {\n    const formRootPathname = useFormRootPath();\n\n    return (\n        <Form formRootPathname={formRootPathname} {...props}>\n            <TabbedFormView\n                formRootPathname={formRootPathname}\n                {...sanitizeRestProps(props)}\n            />\n        </Form>\n    );\n};\n\nTabbedForm.Tab = FormTab;\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nconst sanitizeRestProps = ({\n    criteriaMode,\n    defaultValues,\n    delayError,\n    formRootPathname,\n    mode,\n    noValidate,\n    onSubmit,\n    record,\n    resetOptions,\n    resolver,\n    reValidateMode,\n    sanitizeEmptyValues,\n    shouldFocusError,\n    shouldUnregister,\n    shouldUseNativeValidation,\n    validate,\n    warnWhenUnsavedChanges,\n    ...rest\n}: TabbedFormProps) => rest;\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\nTabbedForm.propTypes = {\n    children: PropTypes.node,\n    defaultValues: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    formRootPathname: PropTypes.string,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    // @ts-ignore\n    record: PropTypes.object,\n    saving: PropTypes.bool,\n    validate: PropTypes.func,\n};\n\nexport interface TabbedFormProps\n    extends Omit<FormProps, 'render'>,\n        Omit<\n            HtmlHTMLAttributes<HTMLFormElement>,\n            'defaultValue' | 'onSubmit' | 'children'\n        >,\n        Partial<TabbedFormViewProps> {\n    children: ReactNode;\n    className?: string;\n    defaultValues?: any;\n    formRootPathname?: string;\n    mutationMode?: MutationMode;\n    record?: RaRecord;\n    resource?: string;\n    syncWithLocation?: boolean;\n    tabs?: ReactElement;\n    toolbar?: ReactElement | false;\n    warnWhenUnsavedChanges?: boolean;\n}\n\nexport const findTabsWithErrors = (children, errors) => {\n    console.warn(\n        'Deprecated. FormTab now wrap their content inside a FormGroupContextProvider. If you implemented custom forms with tabs, please use the FormGroupContextProvider. See https://marmelab.com/react-admin/EditTutorial.html#grouping-inputs'\n    );\n\n    return Children.toArray(children).reduce((acc: any[], child) => {\n        if (!isValidElement(child)) {\n            return acc;\n        }\n\n        const inputs = Children.toArray(child.props.children);\n\n        if (\n            inputs.some(\n                input =>\n                    isValidElement(input) && get(errors, input.props.source)\n            )\n        ) {\n            return [...acc, child.props.label];\n        }\n\n        return acc;\n    }, []);\n};\n"]},"metadata":{},"sourceType":"module"}
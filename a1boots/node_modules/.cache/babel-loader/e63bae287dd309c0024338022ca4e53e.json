{"ast":null,"code":"/**\n * This internal function is used to convert an object matching the form shape with errors to a\n * format compatible with react-hook-form. It's used to handle submission errors. Only useful when\n * you are implementing a custom form without leveraging our Form component.\n *\n * @example\n * const MyForm = () => {\n *     const { register, handleSubmit, setError } = useForm();\n *     const onSubmit = data => {\n *         return saveAsync(data).catch(error => setSubmissionErrors(error.body.details));\n *     };\n *\n *     return (\n *         <form onSubmit={handleSubmit(onSubmit)}>\n *             ...\n *         </form>\n *     );\n * };\n */\nexport var setSubmissionErrors = function setSubmissionErrors(errors, setError) {\n  var setErrorFromObject = function setErrorFromObject(errors, rootPath) {\n    Object.entries(errors).forEach(function (_a) {\n      var name = _a[0],\n          error = _a[1];\n\n      if (typeof error === 'object') {\n        setErrorFromObject(error, \"\".concat(rootPath).concat(name, \".\"));\n        return;\n      }\n\n      setError(\"\".concat(rootPath).concat(name), {\n        type: 'server',\n        message: error.toString()\n      });\n    });\n  };\n\n  setErrorFromObject(errors, '');\n};","map":{"version":3,"mappings":"AAEA;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC/BC,MAD+B,EAE/BC,QAF+B,EAEO;EAEtC,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACF,MAAD,EAAsBG,QAAtB,EAAsC;IAC7DC,MAAM,CAACC,OAAP,CAAeL,MAAf,EAAuBM,OAAvB,CAA+B,UAACC,EAAD,EAAc;UAAZC,IAAI;UAAEC,KAAK;;MACxC,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC3BP,kBAAkB,CAACO,KAAD,EAAQ,UAAGN,QAAH,EAAWO,MAAX,CAAcF,IAAd,EAAkB,GAAlB,CAAR,CAAlB;QACA;MACH;;MACDP,QAAQ,CAAC,UAAGE,QAAH,EAAWO,MAAX,CAAcF,IAAd,CAAD,EAAuB;QAC3BG,IAAI,EAAE,QADqB;QAE3BC,OAAO,EAAEH,KAAK,CAACI,QAAN;MAFkB,CAAvB,CAAR;IAIH,CATD;EAUH,CAXD;;EAYAX,kBAAkB,CAACF,MAAD,EAAS,EAAT,CAAlB;AACH,CAjBM","names":["setSubmissionErrors","errors","setError","setErrorFromObject","rootPath","Object","entries","forEach","_a","name","error","concat","type","message","toString"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/setSubmissionErrors.ts"],"sourcesContent":["import { FieldValues, UseFormSetError } from 'react-hook-form';\n\n/**\n * This internal function is used to convert an object matching the form shape with errors to a\n * format compatible with react-hook-form. It's used to handle submission errors. Only useful when\n * you are implementing a custom form without leveraging our Form component.\n *\n * @example\n * const MyForm = () => {\n *     const { register, handleSubmit, setError } = useForm();\n *     const onSubmit = data => {\n *         return saveAsync(data).catch(error => setSubmissionErrors(error.body.details));\n *     };\n *\n *     return (\n *         <form onSubmit={handleSubmit(onSubmit)}>\n *             ...\n *         </form>\n *     );\n * };\n */\nexport const setSubmissionErrors = (\n    errors: FieldValues,\n    setError: UseFormSetError<FieldValues>\n) => {\n    const setErrorFromObject = (errors: FieldValues, rootPath: string) => {\n        Object.entries(errors).forEach(([name, error]) => {\n            if (typeof error === 'object') {\n                setErrorFromObject(error, `${rootPath}${name}.`);\n                return;\n            }\n            setError(`${rootPath}${name}`, {\n                type: 'server',\n                message: error.toString(),\n            });\n        });\n    };\n    setErrorFromObject(errors, '');\n};\n"]},"metadata":{},"sourceType":"module"}
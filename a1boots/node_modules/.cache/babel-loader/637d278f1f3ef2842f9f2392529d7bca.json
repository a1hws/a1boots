{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.delete() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The delete parameters { id, previousData }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.previousData The record before the update is applied\n *\n * @returns The current mutation state. Destructure as [deleteOne, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [deleteOne, { isLoading: false, isIdle: true }]\n * - start:   [deleteOne, { isLoading: true }]\n * - success: [deleteOne, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [deleteOne, { error: [error from response], isLoading: false, isError: true }]\n *\n * The deleteOne() function must be called with a resource and a parameter object: deleteOne(resource, { id, previousData, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the deleteOne callback\n *\n * import { useDelete, useRecordContext } from 'react-admin';\n *\n * const DeleteButton = () => {\n *     const record = useRecordContext();\n *     const [deleteOne, { isLoading, error }] = useDelete();\n *     const handleClick = () => {\n *         deleteOne('likes', { id: record.id, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Delete</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useDelete, useRecordContext } from 'react-admin';\n *\n * const DeleteButton = () => {\n *     const record = useRecordContext();\n *     const [deleteOne, { isLoading, error }] = useDelete('likes', { id: record.id, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => deleteOne()}>Delete</button>;\n * };\n *\n * @example // TypeScript\n * const [delete, { data }] = useDelete<Product>('products', { id, previousData: product });\n *                    \\-- data is Product\n */\n\nexport var useDelete = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var id = params.id,\n      previousData = params.previousData;\n\n  var _a = options.mutationMode,\n      mutationMode = _a === void 0 ? 'pessimistic' : _a,\n      reactMutationOptions = __rest(options, [\"mutationMode\"]);\n\n  var mode = useRef(mutationMode);\n  var paramsRef = useRef(params);\n  var snapshot = useRef([]);\n\n  var updateCache = function (_a) {\n    var resource = _a.resource,\n        id = _a.id; // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n    // because setQueryData doesn't accept a stale time option\n\n    var now = Date.now();\n    var updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n\n    var updateColl = function (old) {\n      if (!old) return;\n      var index = old.findIndex( // eslint-disable-next-line eqeqeq\n      function (record) {\n        return record.id == id;\n      });\n\n      if (index === -1) {\n        return old;\n      }\n\n      return __spreadArray(__spreadArray([], old.slice(0, index), true), old.slice(index + 1), true);\n    };\n\n    queryClient.setQueriesData([resource, 'getList'], function (res) {\n      if (!res || !res.data) return res;\n      var newCollection = updateColl(res.data);\n      var recordWasFound = newCollection.length < res.data.length;\n      return recordWasFound ? {\n        data: newCollection,\n        total: res.total ? res.total - 1 : undefined,\n        pageInfo: res.pageInfo\n      } : res;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getInfiniteList'], function (res) {\n      if (!res || !res.pages) return res;\n      return __assign(__assign({}, res), {\n        pages: res.pages.map(function (page) {\n          var newCollection = updateColl(page.data);\n          var recordWasFound = newCollection.length < page.data.length;\n          return recordWasFound ? __assign(__assign({}, page), {\n            data: newCollection,\n            total: page.total ? page.total - 1 : undefined,\n            pageInfo: page.pageInfo\n          }) : page;\n        })\n      });\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getMany'], function (coll) {\n      return coll && coll.length > 0 ? updateColl(coll) : coll;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getManyReference'], function (res) {\n      if (!res || !res.data) return res;\n      var newCollection = updateColl(res.data);\n      var recordWasFound = newCollection.length < res.data.length;\n      return recordWasFound ? {\n        data: newCollection,\n        total: res.total - 1\n      } : res;\n    }, {\n      updatedAt: updatedAt\n    });\n  };\n\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.resource,\n        callTimeResource = _c === void 0 ? resource : _c,\n        _d = _b.id,\n        callTimeId = _d === void 0 ? paramsRef.current.id : _d,\n        _e = _b.previousData,\n        callTimePreviousData = _e === void 0 ? paramsRef.current.previousData : _e,\n        _f = _b.meta,\n        callTimeMeta = _f === void 0 ? paramsRef.current.meta : _f;\n\n    return dataProvider.delete(callTimeResource, {\n      id: callTimeId,\n      previousData: callTimePreviousData,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, reactMutationOptions), {\n    onMutate: function (variables) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var userContext;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!reactMutationOptions.onMutate) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , reactMutationOptions.onMutate(variables)];\n\n            case 1:\n              userContext = _a.sent() || {};\n              return [2\n              /*return*/\n              , __assign({\n                snapshot: snapshot.current\n              }, userContext)];\n\n            case 2:\n              // Return a context object with the snapshot value\n              return [2\n              /*return*/\n              , {\n                snapshot: snapshot.current\n              }];\n          }\n        });\n      });\n    },\n    onError: function (error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // If the mutation fails, use the context returned from onMutate to rollback\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0],\n              value = _a[1];\n          queryClient.setQueryData(key, value);\n        });\n      }\n\n      if (reactMutationOptions.onError) {\n        return reactMutationOptions.onError(error, variables, context);\n      } // call-time error callback is executed by react-query\n\n    },\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (mode.current === 'pessimistic') {\n        // update the getOne and getList query cache with the new result\n        var _a = variables.resource,\n            callTimeResource = _a === void 0 ? resource : _a,\n            _b = variables.id,\n            callTimeId = _b === void 0 ? id : _b;\n        updateCache({\n          resource: callTimeResource,\n          id: callTimeId\n        });\n\n        if (reactMutationOptions.onSuccess) {\n          reactMutationOptions.onSuccess(data, variables, context);\n        } // call-time success callback is executed by react-query\n\n      }\n    },\n    onSettled: function (data, error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // Always refetch after error or success:\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0];\n          queryClient.invalidateQueries(key);\n        });\n      }\n\n      if (reactMutationOptions.onSettled) {\n        return reactMutationOptions.onSettled(data, error, variables, context);\n      }\n    }\n  }));\n\n  var mutate = function (callTimeResource, callTimeParams, updateOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n\n    if (updateOptions === void 0) {\n      updateOptions = {};\n    }\n\n    return __awaiter(void 0, void 0, void 0, function () {\n      var mutationMode, onSuccess, onSettled, onError, _a, callTimeId, _b, callTimePreviousData, queryKeys;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            mutationMode = updateOptions.mutationMode, onSuccess = updateOptions.onSuccess, onSettled = updateOptions.onSettled, onError = updateOptions.onError; // store the hook time params *at the moment of the call*\n            // because they may change afterwards, which would break the undoable mode\n            // as the previousData would be overwritten by the optimistic update\n\n            paramsRef.current = params;\n\n            if (mutationMode) {\n              mode.current = mutationMode;\n            }\n\n            if (mode.current === 'pessimistic') {\n              return [2\n              /*return*/\n              , mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSuccess: onSuccess,\n                onSettled: onSettled,\n                onError: onError\n              })];\n            }\n\n            _a = callTimeParams.id, callTimeId = _a === void 0 ? id : _a, _b = callTimeParams.previousData, callTimePreviousData = _b === void 0 ? previousData : _b;\n            queryKeys = [[callTimeResource, 'getList'], [callTimeResource, 'getInfiniteList'], [callTimeResource, 'getMany'], [callTimeResource, 'getManyReference']];\n            /**\n             * Snapshot the previous values via queryClient.getQueriesData()\n             *\n             * The snapshotData ref will contain an array of tuples [query key, associated data]\n             *\n             * @example\n             * [\n             *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n             *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n             * ]\n             *\n             * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n             */\n\n            snapshot.current = queryKeys.reduce(function (prev, curr) {\n              return prev.concat(queryClient.getQueriesData(curr));\n            }, []); // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n\n            return [4\n            /*yield*/\n            , Promise.all(snapshot.current.map(function (_a) {\n              var key = _a[0];\n              return queryClient.cancelQueries(key);\n            }))];\n\n          case 1:\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            _c.sent(); // Optimistically update to the new value\n\n\n            updateCache({\n              resource: callTimeResource,\n              id: callTimeId\n            }); // run the success callbacks during the next tick\n\n            if (onSuccess) {\n              setTimeout(function () {\n                return onSuccess(callTimePreviousData, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n\n            if (reactMutationOptions.onSuccess) {\n              setTimeout(function () {\n                return reactMutationOptions.onSuccess(callTimePreviousData, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n\n            if (mode.current === 'optimistic') {\n              // call the mutate method without success side effects\n              return [2\n              /*return*/\n              , mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSettled: onSettled,\n                onError: onError\n              })];\n            } else {\n              // undoable mutation: register the mutation for later\n              undoableEventEmitter.once('end', function (_a) {\n                var isUndo = _a.isUndo;\n\n                if (isUndo) {\n                  // rollback\n                  snapshot.current.forEach(function (_a) {\n                    var key = _a[0],\n                        value = _a[1];\n                    queryClient.setQueryData(key, value);\n                  });\n                } else {\n                  // call the mutate method without success side effects\n                  mutation.mutate(__assign({\n                    resource: callTimeResource\n                  }, callTimeParams), {\n                    onSettled: onSettled,\n                    onError: onError\n                  });\n                }\n              });\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return [useEvent(mutate), mutation];\n};","map":{"version":3,"mappings":"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","names":["useRef","useMutation","useQueryClient","useDataProvider","undoableEventEmitter","useEvent","useDelete","resource","params","options","dataProvider","queryClient","previousData","_a","reactMutationOptions","mode","mutationMode","paramsRef","snapshot","updateCache","id","now","Date","updatedAt","current","updateColl","old","index","findIndex","slice","setQueriesData","res","data","newCollection","recordWasFound","length","total","undefined","pageInfo","pages","map","page","__assign","coll","mutation","_b","_c","callTimeResource","_d","callTimeId","_e","callTimePreviousData","_f","callTimeMeta","meta","delete","then","onMutate","variables","userContext","onError","error","context","forEach","key","value","setQueryData","onSuccess","onSettled","invalidateQueries","mutate","callTimeParams","updateOptions","queryKeys","reduce","prev","curr","concat","getQueriesData","Promise","all","cancelQueries","setTimeout","once","isUndo"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/useDelete.ts"],"sourcesContent":["import { useRef } from 'react';\nimport {\n    useMutation,\n    useQueryClient,\n    UseMutationOptions,\n    UseMutationResult,\n    MutateOptions,\n    QueryKey,\n    UseInfiniteQueryResult,\n} from 'react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport {\n    RaRecord,\n    DeleteParams,\n    MutationMode,\n    GetListResult as OriginalGetListResult,\n    GetInfiniteListResult,\n} from '../types';\nimport { useEvent } from '../util';\n\n/**\n * Get a callback to call the dataProvider.delete() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The delete parameters { id, previousData }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.previousData The record before the update is applied\n *\n * @returns The current mutation state. Destructure as [deleteOne, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [deleteOne, { isLoading: false, isIdle: true }]\n * - start:   [deleteOne, { isLoading: true }]\n * - success: [deleteOne, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [deleteOne, { error: [error from response], isLoading: false, isError: true }]\n *\n * The deleteOne() function must be called with a resource and a parameter object: deleteOne(resource, { id, previousData, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the deleteOne callback\n *\n * import { useDelete, useRecordContext } from 'react-admin';\n *\n * const DeleteButton = () => {\n *     const record = useRecordContext();\n *     const [deleteOne, { isLoading, error }] = useDelete();\n *     const handleClick = () => {\n *         deleteOne('likes', { id: record.id, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Delete</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useDelete, useRecordContext } from 'react-admin';\n *\n * const DeleteButton = () => {\n *     const record = useRecordContext();\n *     const [deleteOne, { isLoading, error }] = useDelete('likes', { id: record.id, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => deleteOne()}>Delete</button>;\n * };\n *\n * @example // TypeScript\n * const [delete, { data }] = useDelete<Product>('products', { id, previousData: product });\n *                    \\-- data is Product\n */\nexport const useDelete = <\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n>(\n    resource?: string,\n    params: Partial<DeleteParams<RecordType>> = {},\n    options: UseDeleteOptions<RecordType, MutationError> = {}\n): UseDeleteResult<RecordType, MutationError> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const { id, previousData } = params;\n    const { mutationMode = 'pessimistic', ...reactMutationOptions } = options;\n    const mode = useRef<MutationMode>(mutationMode);\n    const paramsRef = useRef<Partial<DeleteParams<RecordType>>>(params);\n    const snapshot = useRef<Snapshot>([]);\n\n    const updateCache = ({ resource, id }) => {\n        // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n        // because setQueryData doesn't accept a stale time option\n        const now = Date.now();\n        const updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n\n        const updateColl = (old: RecordType[]) => {\n            if (!old) return;\n            const index = old.findIndex(\n                // eslint-disable-next-line eqeqeq\n                record => record.id == id\n            );\n            if (index === -1) {\n                return old;\n            }\n            return [...old.slice(0, index), ...old.slice(index + 1)];\n        };\n\n        type GetListResult = Omit<OriginalGetListResult, 'data'> & {\n            data?: RecordType[];\n        };\n\n        queryClient.setQueriesData(\n            [resource, 'getList'],\n            (res: GetListResult) => {\n                if (!res || !res.data) return res;\n                const newCollection = updateColl(res.data);\n                const recordWasFound = newCollection.length < res.data.length;\n                return recordWasFound\n                    ? {\n                          data: newCollection,\n                          total: res.total ? res.total - 1 : undefined,\n                          pageInfo: res.pageInfo,\n                      }\n                    : res;\n            },\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getInfiniteList'],\n            (res: UseInfiniteQueryResult<GetInfiniteListResult>['data']) => {\n                if (!res || !res.pages) return res;\n                return {\n                    ...res,\n                    pages: res.pages.map(page => {\n                        const newCollection = updateColl(page.data);\n                        const recordWasFound =\n                            newCollection.length < page.data.length;\n                        return recordWasFound\n                            ? {\n                                  ...page,\n                                  data: newCollection,\n                                  total: page.total\n                                      ? page.total - 1\n                                      : undefined,\n                                  pageInfo: page.pageInfo,\n                              }\n                            : page;\n                    }),\n                };\n            },\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getMany'],\n            (coll: RecordType[]) =>\n                coll && coll.length > 0 ? updateColl(coll) : coll,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getManyReference'],\n            (res: GetListResult) => {\n                if (!res || !res.data) return res;\n                const newCollection = updateColl(res.data);\n                const recordWasFound = newCollection.length < res.data.length;\n                return recordWasFound\n                    ? {\n                          data: newCollection,\n                          total: res.total - 1,\n                      }\n                    : res;\n            },\n            { updatedAt }\n        );\n    };\n\n    const mutation = useMutation<\n        RecordType,\n        MutationError,\n        Partial<UseDeleteMutateParams<RecordType>>\n    >(\n        ({\n            resource: callTimeResource = resource,\n            id: callTimeId = paramsRef.current.id,\n            previousData: callTimePreviousData = paramsRef.current.previousData,\n            meta: callTimeMeta = paramsRef.current.meta,\n        } = {}) =>\n            dataProvider\n                .delete<RecordType>(callTimeResource, {\n                    id: callTimeId,\n                    previousData: callTimePreviousData,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data),\n        {\n            ...reactMutationOptions,\n            onMutate: async (\n                variables: Partial<UseDeleteMutateParams<RecordType>>\n            ) => {\n                if (reactMutationOptions.onMutate) {\n                    const userContext =\n                        (await reactMutationOptions.onMutate(variables)) || {};\n                    return {\n                        snapshot: snapshot.current,\n                        // @ts-ignore\n                        ...userContext,\n                    };\n                } else {\n                    // Return a context object with the snapshot value\n                    return { snapshot: snapshot.current };\n                }\n            },\n            onError: (\n                error: MutationError,\n                variables: Partial<UseDeleteMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // If the mutation fails, use the context returned from onMutate to rollback\n                    context.snapshot.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                }\n\n                if (reactMutationOptions.onError) {\n                    return reactMutationOptions.onError(\n                        error,\n                        variables,\n                        context\n                    );\n                }\n                // call-time error callback is executed by react-query\n            },\n            onSuccess: (\n                data: RecordType,\n                variables: Partial<UseDeleteMutateParams<RecordType>> = {},\n                context: unknown\n            ) => {\n                if (mode.current === 'pessimistic') {\n                    // update the getOne and getList query cache with the new result\n                    const {\n                        resource: callTimeResource = resource,\n                        id: callTimeId = id,\n                    } = variables;\n                    updateCache({\n                        resource: callTimeResource,\n                        id: callTimeId,\n                    });\n\n                    if (reactMutationOptions.onSuccess) {\n                        reactMutationOptions.onSuccess(\n                            data,\n                            variables,\n                            context\n                        );\n                    }\n                    // call-time success callback is executed by react-query\n                }\n            },\n            onSettled: (\n                data: RecordType,\n                error: MutationError,\n                variables: Partial<UseDeleteMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // Always refetch after error or success:\n                    context.snapshot.forEach(([key]) => {\n                        queryClient.invalidateQueries(key);\n                    });\n                }\n\n                if (reactMutationOptions.onSettled) {\n                    return reactMutationOptions.onSettled(\n                        data,\n                        error,\n                        variables,\n                        context\n                    );\n                }\n            },\n        }\n    );\n\n    const mutate = async (\n        callTimeResource: string = resource,\n        callTimeParams: Partial<DeleteParams<RecordType>> = {},\n        updateOptions: MutateOptions<\n            RecordType,\n            MutationError,\n            Partial<UseDeleteMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode } = {}\n    ) => {\n        const { mutationMode, onSuccess, onSettled, onError } = updateOptions;\n\n        // store the hook time params *at the moment of the call*\n        // because they may change afterwards, which would break the undoable mode\n        // as the previousData would be overwritten by the optimistic update\n        paramsRef.current = params;\n\n        if (mutationMode) {\n            mode.current = mutationMode;\n        }\n\n        if (mode.current === 'pessimistic') {\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSuccess, onSettled, onError }\n            );\n        }\n\n        const {\n            id: callTimeId = id,\n            previousData: callTimePreviousData = previousData,\n        } = callTimeParams;\n\n        // optimistic update as documented in https://react-query-v3.tanstack.com/guides/optimistic-updates\n        // except we do it in a mutate wrapper instead of the onMutate callback\n        // to have access to success side effects\n\n        const queryKeys = [\n            [callTimeResource, 'getList'],\n            [callTimeResource, 'getInfiniteList'],\n            [callTimeResource, 'getMany'],\n            [callTimeResource, 'getManyReference'],\n        ];\n\n        /**\n         * Snapshot the previous values via queryClient.getQueriesData()\n         *\n         * The snapshotData ref will contain an array of tuples [query key, associated data]\n         *\n         * @example\n         * [\n         *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n         *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n         * ]\n         *\n         * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n         */\n        snapshot.current = queryKeys.reduce(\n            (prev, curr) => prev.concat(queryClient.getQueriesData(curr)),\n            [] as Snapshot\n        );\n\n        // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n        await Promise.all(\n            snapshot.current.map(([key]) => queryClient.cancelQueries(key))\n        );\n\n        // Optimistically update to the new value\n        updateCache({\n            resource: callTimeResource,\n            id: callTimeId,\n        });\n\n        // run the success callbacks during the next tick\n        if (onSuccess) {\n            setTimeout(\n                () =>\n                    onSuccess(\n                        callTimePreviousData,\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n        if (reactMutationOptions.onSuccess) {\n            setTimeout(\n                () =>\n                    reactMutationOptions.onSuccess(\n                        callTimePreviousData,\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n\n        if (mode.current === 'optimistic') {\n            // call the mutate method without success side effects\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSettled, onError }\n            );\n        } else {\n            // undoable mutation: register the mutation for later\n            undoableEventEmitter.once('end', ({ isUndo }) => {\n                if (isUndo) {\n                    // rollback\n                    snapshot.current.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                } else {\n                    // call the mutate method without success side effects\n                    mutation.mutate(\n                        { resource: callTimeResource, ...callTimeParams },\n                        { onSettled, onError }\n                    );\n                }\n            });\n        }\n    };\n\n    return [useEvent(mutate), mutation];\n};\n\ntype Snapshot = [key: QueryKey, value: any][];\n\nexport interface UseDeleteMutateParams<RecordType extends RaRecord = any> {\n    resource?: string;\n    id?: RecordType['id'];\n    data?: Partial<RecordType>;\n    previousData?: any;\n    meta?: any;\n}\n\nexport type UseDeleteOptions<\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n> = UseMutationOptions<\n    RecordType,\n    MutationError,\n    Partial<UseDeleteMutateParams<RecordType>>\n> & { mutationMode?: MutationMode };\n\nexport type UseDeleteResult<\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n> = [\n    (\n        resource?: string,\n        params?: Partial<DeleteParams<RecordType>>,\n        options?: MutateOptions<\n            RecordType,\n            MutationError,\n            Partial<UseDeleteMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode }\n    ) => Promise<void>,\n    UseMutationResult<\n        RecordType,\n        MutationError,\n        Partial<DeleteParams<RecordType> & { resource?: string }>,\n        unknown\n    >\n];\n"]},"metadata":{},"sourceType":"module"}
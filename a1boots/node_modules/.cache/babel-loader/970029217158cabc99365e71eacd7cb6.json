{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { warning } from 'ra-core';\nimport { PageTitleConfigurable } from './PageTitleConfigurable';\nexport var Title = function (props) {\n  var defaultTitle = props.defaultTitle,\n      title = props.title,\n      preferenceKey = props.preferenceKey,\n      rest = __rest(props, [\"defaultTitle\", \"title\", \"preferenceKey\"]);\n\n  var _a = useState(function () {\n    return typeof document !== 'undefined' ? document.getElementById('react-admin-title') : null;\n  }),\n      container = _a[0],\n      setContainer = _a[1]; // on first mount, we don't have the container yet, so we wait for it\n\n\n  useEffect(function () {\n    setContainer(function (container) {\n      var isInTheDom = typeof document !== 'undefined' && document.body.contains(container);\n      if (container && isInTheDom) return container;\n      return typeof document !== 'undefined' ? document.getElementById('react-admin-title') : null;\n    });\n  }, []);\n  if (!container) return null;\n  warning(!defaultTitle && !title, 'Missing title prop in <Title> element');\n  return createPortal(React.createElement(PageTitleConfigurable, __assign({\n    title: title,\n    defaultTitle: defaultTitle,\n    preferenceKey: preferenceKey\n  }, rest)), container);\n};\nexport var TitlePropType = PropTypes.oneOfType([PropTypes.string, PropTypes.element]);\nTitle.propTypes = {\n  defaultTitle: PropTypes.string,\n  className: PropTypes.string,\n  record: PropTypes.any,\n  title: TitlePropType\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,YAAT,QAA6B,WAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAmBC,OAAnB,QAAkC,SAAlC;AAEA,SAASC,qBAAT,QAAsC,yBAAtC;AAEA,OAAO,IAAMC,KAAK,GAAG,UAACC,KAAD,EAAkB;EAC3B,gBAAY,GAAoCA,KAAK,aAArD;EAAA,IAAcC,KAAK,GAA6BD,KAAK,MAArD;EAAA,IAAqBE,aAAa,GAAcF,KAAK,cAArD;EAAA,IAAuCG,IAAI,UAAKH,KAAL,EAA7C,0CAA6C,CAA3C;;EACF,SAA4BN,QAAQ,CAAC;IACvC,cAAOU,QAAP,KAAoB,WAApB,GACMA,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CADN,GAEM,IAFN;EAEU,CAH4B,CAApC;EAAA,IAACC,SAAS,QAAV;EAAA,IAAYC,YAAY,QAAxB,CAF6B,CAQnC;;;EACAd,SAAS,CAAC;IACNc,YAAY,CAAC,qBAAS;MAClB,IAAMC,UAAU,GACZ,OAAOJ,QAAP,KAAoB,WAApB,IACAA,QAAQ,CAACK,IAAT,CAAcC,QAAd,CAAuBJ,SAAvB,CAFJ;MAGA,IAAIA,SAAS,IAAIE,UAAjB,EAA6B,OAAOF,SAAP;MAC7B,OAAO,OAAOF,QAAP,KAAoB,WAApB,GACDA,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CADC,GAED,IAFN;IAGH,CARW,CAAZ;EASH,CAVQ,EAUN,EAVM,CAAT;EAYA,IAAI,CAACC,SAAL,EAAgB,OAAO,IAAP;EAEhBT,OAAO,CAAC,CAACc,YAAD,IAAiB,CAACV,KAAnB,EAA0B,uCAA1B,CAAP;EAEA,OAAON,YAAY,CACfH,oBAACM,qBAAD,EAAsBc;IAClBX,KAAK,EAAEA,KADW;IAElBU,YAAY,EAAEA,YAFI;IAGlBT,aAAa,EAAEA;EAHG,GAIdC,IAJc,CAAtB,CADe,EAOfG,SAPe,CAAnB;AASH,CAlCM;AAoCP,OAAO,IAAMO,aAAa,GAAGjB,SAAS,CAACkB,SAAV,CAAoB,CAC7ClB,SAAS,CAACmB,MADmC,EAE7CnB,SAAS,CAACoB,OAFmC,CAApB,CAAtB;AAKPjB,KAAK,CAACkB,SAAN,GAAkB;EACdN,YAAY,EAAEf,SAAS,CAACmB,MADV;EAEdG,SAAS,EAAEtB,SAAS,CAACmB,MAFP;EAGdI,MAAM,EAAEvB,SAAS,CAACwB,GAHJ;EAIdnB,KAAK,EAAEY;AAJO,CAAlB","names":["React","useEffect","useState","createPortal","PropTypes","warning","PageTitleConfigurable","Title","props","title","preferenceKey","rest","document","getElementById","container","setContainer","isInTheDom","body","contains","defaultTitle","__assign","TitlePropType","oneOfType","string","element","propTypes","className","record","any"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/layout/Title.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { ReactElement } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { RaRecord, warning } from 'ra-core';\n\nimport { PageTitleConfigurable } from './PageTitleConfigurable';\n\nexport const Title = (props: TitleProps) => {\n    const { defaultTitle, title, preferenceKey, ...rest } = props;\n    const [container, setContainer] = useState(() =>\n        typeof document !== 'undefined'\n            ? document.getElementById('react-admin-title')\n            : null\n    );\n\n    // on first mount, we don't have the container yet, so we wait for it\n    useEffect(() => {\n        setContainer(container => {\n            const isInTheDom =\n                typeof document !== 'undefined' &&\n                document.body.contains(container);\n            if (container && isInTheDom) return container;\n            return typeof document !== 'undefined'\n                ? document.getElementById('react-admin-title')\n                : null;\n        });\n    }, []);\n\n    if (!container) return null;\n\n    warning(!defaultTitle && !title, 'Missing title prop in <Title> element');\n\n    return createPortal(\n        <PageTitleConfigurable\n            title={title}\n            defaultTitle={defaultTitle}\n            preferenceKey={preferenceKey}\n            {...rest}\n        />,\n        container\n    );\n};\n\nexport const TitlePropType = PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n]);\n\nTitle.propTypes = {\n    defaultTitle: PropTypes.string,\n    className: PropTypes.string,\n    record: PropTypes.any,\n    title: TitlePropType,\n};\n\nexport interface TitleProps {\n    className?: string;\n    defaultTitle?: string;\n    record?: Partial<RaRecord>;\n    title?: string | ReactElement;\n    preferenceKey?: string;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableBody } from '@mui/material';\nimport clsx from 'clsx';\nimport { DatagridClasses } from './useDatagridStyles';\nimport DatagridRow, { PureDatagridRow } from './DatagridRow';\nvar DatagridBody = React.forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      data = _a.data,\n      expand = _a.expand,\n      hasBulkActions = _a.hasBulkActions,\n      hover = _a.hover,\n      onToggleItem = _a.onToggleItem,\n      resource = _a.resource,\n      row = _a.row,\n      rowClick = _a.rowClick,\n      rowStyle = _a.rowStyle,\n      selectedIds = _a.selectedIds,\n      isRowSelectable = _a.isRowSelectable,\n      rest = __rest(_a, [\"children\", \"className\", \"data\", \"expand\", \"hasBulkActions\", \"hover\", \"onToggleItem\", \"resource\", \"row\", \"rowClick\", \"rowStyle\", \"selectedIds\", \"isRowSelectable\"]);\n\n  return React.createElement(TableBody, __assign({\n    ref: ref,\n    className: clsx('datagrid-body', className, DatagridClasses.tbody)\n  }, rest), data.map(function (record, rowIndex) {\n    var _a;\n\n    var _b, _c;\n\n    return cloneElement(row, {\n      className: clsx(DatagridClasses.row, (_a = {}, _a[DatagridClasses.rowEven] = rowIndex % 2 === 0, _a[DatagridClasses.rowOdd] = rowIndex % 2 !== 0, _a)),\n      expand: expand,\n      hasBulkActions: hasBulkActions && !!selectedIds,\n      hover: hover,\n      id: (_b = record.id) !== null && _b !== void 0 ? _b : \"row\".concat(rowIndex),\n      key: (_c = record.id) !== null && _c !== void 0 ? _c : \"row\".concat(rowIndex),\n      onToggleItem: onToggleItem,\n      record: record,\n      resource: resource,\n      rowClick: rowClick,\n      selectable: !isRowSelectable || isRowSelectable(record),\n      selected: selectedIds === null || selectedIds === void 0 ? void 0 : selectedIds.includes(record.id),\n      style: rowStyle ? rowStyle(record, rowIndex) : null\n    }, children);\n  }));\n});\nDatagridBody.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  // @ts-ignore\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool.isRequired,\n  hover: PropTypes.bool,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  row: PropTypes.element,\n  // @ts-ignore\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.bool]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  styles: PropTypes.object,\n  isRowSelectable: PropTypes.func\n};\nDatagridBody.defaultProps = {\n  data: [],\n  hasBulkActions: false,\n  row: React.createElement(DatagridRow, null)\n}; // trick Material UI Table into thinking this is one of the child type it supports\n// @ts-ignore\n\nDatagridBody.muiName = 'TableBody';\nexport var PureDatagridBody = memo(DatagridBody); // trick Material UI Table into thinking this is one of the child type it supports\n// @ts-ignore\n\nPureDatagridBody.muiName = 'TableBody'; // @ts-ignore\n\nPureDatagridBody.defaultProps = {\n  row: React.createElement(PureDatagridRow, null)\n};\nexport default DatagridBody;","map":{"version":3,"mappings":"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","names":["React","cloneElement","memo","PropTypes","TableBody","clsx","DatagridClasses","DatagridRow","PureDatagridRow","DatagridBody","forwardRef","_a","ref","className","data","expand","hasBulkActions","hover","onToggleItem","resource","row","rowClick","rowStyle","selectedIds","isRowSelectable","rest","__assign","tbody","map","record","rowIndex","rowEven","rowOdd","id","_b","key","_c","selectable","selected","includes","style","children","propTypes","string","node","arrayOf","object","isRequired","oneOfType","element","elementType","bool","func","any","styles","defaultProps","muiName","PureDatagridBody"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/datagrid/DatagridBody.tsx"],"sourcesContent":["import * as React from 'react';\nimport { cloneElement, memo, FC, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableBody, TableBodyProps } from '@mui/material';\nimport clsx from 'clsx';\nimport { Identifier, RaRecord } from 'ra-core';\n\nimport { DatagridClasses } from './useDatagridStyles';\nimport DatagridRow, { PureDatagridRow, RowClickFunction } from './DatagridRow';\n\nconst DatagridBody: FC<DatagridBodyProps> = React.forwardRef(\n    (\n        {\n            children,\n            className,\n            data,\n            expand,\n            hasBulkActions,\n            hover,\n            onToggleItem,\n            resource,\n            row,\n            rowClick,\n            rowStyle,\n            selectedIds,\n            isRowSelectable,\n            ...rest\n        },\n        ref\n    ) => (\n        <TableBody\n            ref={ref}\n            className={clsx('datagrid-body', className, DatagridClasses.tbody)}\n            {...rest}\n        >\n            {data.map((record, rowIndex) =>\n                cloneElement(\n                    row,\n                    {\n                        className: clsx(DatagridClasses.row, {\n                            [DatagridClasses.rowEven]: rowIndex % 2 === 0,\n                            [DatagridClasses.rowOdd]: rowIndex % 2 !== 0,\n                        }),\n                        expand,\n                        hasBulkActions: hasBulkActions && !!selectedIds,\n                        hover,\n                        id: record.id ?? `row${rowIndex}`,\n                        key: record.id ?? `row${rowIndex}`,\n                        onToggleItem,\n                        record,\n                        resource,\n                        rowClick,\n                        selectable: !isRowSelectable || isRowSelectable(record),\n                        selected: selectedIds?.includes(record.id),\n                        style: rowStyle ? rowStyle(record, rowIndex) : null,\n                    },\n                    children\n                )\n            )}\n        </TableBody>\n    )\n);\n\nDatagridBody.propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.node,\n    // @ts-ignore\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool.isRequired,\n    hover: PropTypes.bool,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    row: PropTypes.element,\n    // @ts-ignore\n    rowClick: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.bool,\n    ]),\n    rowStyle: PropTypes.func,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    styles: PropTypes.object,\n    isRowSelectable: PropTypes.func,\n};\n\nDatagridBody.defaultProps = {\n    data: [],\n    hasBulkActions: false,\n    row: <DatagridRow />,\n};\n\nexport interface DatagridBodyProps extends Omit<TableBodyProps, 'classes'> {\n    className?: string;\n    data?: any[];\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RaRecord;\n              resource: string;\n          }>;\n    hasBulkActions?: boolean;\n    hover?: boolean;\n    onToggleItem?: (\n        id: Identifier,\n        event: React.TouchEvent | React.MouseEvent\n    ) => void;\n    record?: RaRecord;\n    resource?: string;\n    row?: ReactElement;\n    rowClick?: string | RowClickFunction | false;\n    rowStyle?: (record: RaRecord, index: number) => any;\n    selectedIds?: Identifier[];\n    isRowSelectable?: (record: RaRecord) => boolean;\n}\n\n// trick Material UI Table into thinking this is one of the child type it supports\n// @ts-ignore\nDatagridBody.muiName = 'TableBody';\n\nexport const PureDatagridBody = memo(DatagridBody);\n\n// trick Material UI Table into thinking this is one of the child type it supports\n// @ts-ignore\nPureDatagridBody.muiName = 'TableBody';\n// @ts-ignore\nPureDatagridBody.defaultProps = {\n    row: <PureDatagridRow />,\n};\n\nexport default DatagridBody;\n"]},"metadata":{},"sourceType":"module"}
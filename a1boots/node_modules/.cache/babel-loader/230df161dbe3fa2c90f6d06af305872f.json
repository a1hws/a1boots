{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useSafeSetState, removeEmpty } from '../../util';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport usePaginationState from '../usePaginationState';\nimport { useRecordSelection } from '../list/useRecordSelection';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\nvar defaultFilter = {};\n/**\n * Fetch reference records, and return them when available\n *\n * Uses dataProvider.getManyReference() internally.\n *\n * @example // fetch the comments related to the current post\n * const { isLoading, data } = useReferenceManyFieldController({\n *     reference: 'comments',\n *     target: 'post_id',\n *     record: { id: 123, title: 'hello, world' },\n *     resource: 'posts',\n * });\n *\n * @param {Object} props\n * @param {string} props.reference The linked resource name. Required.\n * @param {string} props.target The target resource key. Required.\n * @param {Object} props.filter The filter applied on the recorded records list\n * @param {number} props.page the page number\n * @param {number} props.perPage the number of item per page\n * @param {Object} props.record The current resource record\n * @param {string} props.resource The current resource name\n * @param {Object} props.sort the sort to apply to the referenced records\n * @param {string} props.source The key of the linked resource identifier\n *\n * @returns {ListControllerResult} The reference many props\n */\n\nexport var useReferenceManyFieldController = function useReferenceManyFieldController(props) {\n  var reference = props.reference,\n      record = props.record,\n      target = props.target,\n      _a = props.filter,\n      filter = _a === void 0 ? defaultFilter : _a,\n      source = props.source,\n      initialPage = props.page,\n      initialPerPage = props.perPage,\n      _b = props.sort,\n      initialSort = _b === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _b;\n  var notify = useNotify();\n  var resource = useResourceContext(props); // pagination logic\n\n  var _c = usePaginationState({\n    page: initialPage,\n    perPage: initialPerPage\n  }),\n      page = _c.page,\n      setPage = _c.setPage,\n      perPage = _c.perPage,\n      setPerPage = _c.setPerPage; // sort logic\n\n\n  var _d = useSortState(initialSort),\n      sort = _d.sort,\n      setSortState = _d.setSort;\n\n  var setSort = useCallback(function (sort) {\n    setSortState(sort);\n    setPage(1);\n  }, [setPage, setSortState]); // selection logic\n\n  var _e = useRecordSelection(\"\".concat(resource, \".\").concat(record === null || record === void 0 ? void 0 : record.id, \".\").concat(reference)),\n      selectedIds = _e[0],\n      selectionModifiers = _e[1]; // filter logic\n\n\n  var filterRef = useRef(filter);\n\n  var _f = useSafeSetState({}),\n      displayedFilters = _f[0],\n      setDisplayedFilters = _f[1];\n\n  var _g = useSafeSetState(filter),\n      filterValues = _g[0],\n      setFilterValues = _g[1];\n\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n          _b = filterName,\n          _ = _a[_b],\n          newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n          _b = filterName,\n          _ = _a[_b],\n          newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var setFilters = useCallback(function (filters, displayedFilters) {\n    setFilterValues(removeEmpty(filters));\n    setDisplayedFilters(displayedFilters);\n    setPage(1);\n  }, [setDisplayedFilters, setFilterValues, setPage]); // handle filter prop change\n\n  useEffect(function () {\n    if (!isEqual(filter, filterRef.current)) {\n      filterRef.current = filter;\n      setFilterValues(filter);\n    }\n  });\n\n  var _h = useGetManyReference(reference, {\n    target: target,\n    id: get(record, source),\n    pagination: {\n      page: page,\n      perPage: perPage\n    },\n    sort: sort,\n    filter: filterValues\n  }, {\n    keepPreviousData: true,\n    onError: function onError(error) {\n      return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n        type: 'error',\n        messageArgs: {\n          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n        }\n      });\n    }\n  }),\n      data = _h.data,\n      total = _h.total,\n      pageInfo = _h.pageInfo,\n      error = _h.error,\n      isFetching = _h.isFetching,\n      isLoading = _h.isLoading,\n      refetch = _h.refetch;\n\n  return {\n    sort: sort,\n    data: data,\n    defaultTitle: null,\n    displayedFilters: displayedFilters,\n    error: error,\n    filterValues: filterValues,\n    hideFilter: hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: reference,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    hasNextPage: pageInfo ? pageInfo.hasNextPage : total != null ? page * perPage < total : undefined,\n    hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : page > 1,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: total\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,YAA7C;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAGA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA,SAASC,kBAAT,QAAmC,4BAAnC;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,kBAAT,QAAmC,YAAnC;AAgBA,IAAMC,aAAa,GAAG,EAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,CAI3CC,KAJ2C,EAIa;EAGpD,aAAS,GAQTA,KAAK,UARL;EAAA,IACAC,MAAM,GAOND,KAAK,OARL;EAAA,IAEAE,MAAM,GAMNF,KAAK,OARL;EAAA,IAGAG,KAKAH,KAAK,OARL;EAAA,IAGAI,MAAM,mBAAGN,aAAH,GAAgBK,EAHtB;EAAA,IAIAE,MAAM,GAINL,KAAK,OARL;EAAA,IAKMM,WAAW,GAGjBN,KAAK,KARL;EAAA,IAMSO,cAAc,GAEvBP,KAAK,QARL;EAAA,IAOAQ,KACAR,KAAK,KARL;EAAA,IAOMS,WAAW,mBAAG;IAAEC,KAAK,EAAE,IAAT;IAAeC,KAAK,EAAE;EAAtB,CAAH,GAAiCH,EAPlD;EASJ,IAAMI,MAAM,GAAGnB,SAAS,EAAxB;EACA,IAAMoB,QAAQ,GAAGhB,kBAAkB,CAACG,KAAD,CAAnC,CAbwD,CAexD;;EACM,SAAyCN,kBAAkB,CAAC;IAC9DoB,IAAI,EAAER,WADwD;IAE9DS,OAAO,EAAER;EAFqD,CAAD,CAA3D;EAAA,IAAEO,IAAI,UAAN;EAAA,IAAQE,OAAO,aAAf;EAAA,IAAiBD,OAAO,aAAxB;EAAA,IAA0BE,UAAU,gBAApC,CAhBkD,CAqBxD;;;EACM,SAAkCrB,YAAY,CAACa,WAAD,CAA9C;EAAA,IAAES,IAAI,UAAN;EAAA,IAAiBC,YAAY,aAA7B;;EACN,IAAMC,OAAO,GAAGnC,WAAW,CACvB,UAACiC,IAAD,EAAkB;IACdC,YAAY,CAACD,IAAD,CAAZ;IACAF,OAAO,CAAC,CAAD,CAAP;EACH,CAJsB,EAKvB,CAACA,OAAD,EAAUG,YAAV,CALuB,CAA3B,CAvBwD,CA+BxD;;EACM,SAAoCxB,kBAAkB,CACxD,UAAGkB,QAAH,EAAW,GAAX,EAAWQ,MAAX,CAAepB,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEqB,EAAvB,EAAyB,GAAzB,EAAyBD,MAAzB,CAA6BE,SAA7B,CADwD,CAAtD;EAAA,IAACC,WAAW,QAAZ;EAAA,IAAcC,kBAAkB,QAAhC,CAhCkD,CAoCxD;;;EACA,IAAMC,SAAS,GAAGvC,MAAM,CAACiB,MAAD,CAAxB;;EACM,SAA0Cd,eAAe,CAE5D,EAF4D,CAAzD;EAAA,IAACqC,gBAAgB,QAAjB;EAAA,IAAmBC,mBAAmB,QAAtC;;EAGA,SAAkCtC,eAAe,CAEpDc,MAFoD,CAAjD;EAAA,IAACyB,YAAY,QAAb;EAAA,IAAeC,eAAe,QAA9B;;EAGN,IAAMC,UAAU,GAAG9C,WAAW,CAC1B,UAAC+C,UAAD,EAAmB;IACfJ,mBAAmB,CAAC,yBAAa;MAC7B,IAAyCzB,kBAAzC;MAAA,IAAQK,KAACwB,UAAT;MAAA,IAAsBC,CAAC,SAAvB;MAAA,IAA4BC,QAAQ,cAA9B,uCAA8B,CAApC;;MACA,OAAOA,QAAP;IACH,CAHkB,CAAnB;IAIAJ,eAAe,CAAC,yBAAa;MACzB,IAAyC3B,kBAAzC;MAAA,IAAQK,KAACwB,UAAT;MAAA,IAAsBC,CAAC,SAAvB;MAAA,IAA4BC,QAAQ,cAA9B,uCAA8B,CAApC;;MACA,OAAOA,QAAP;IACH,CAHc,CAAf;EAIH,CAVyB,EAW1B,CAACN,mBAAD,EAAsBE,eAAtB,CAX0B,CAA9B;EAaA,IAAMK,UAAU,GAAGlD,WAAW,CAC1B,UAAC+C,UAAD,EAAqBI,YAArB,EAAsC;IAClCR,mBAAmB,CAAC,yBAAa;;;MAAI,6BAC9BS,aAD8B,IACjBlC,YACf6B,UADe,IACF,IADE,EACE7B,EAFe;IAGnC,CAHiB,CAAnB;IAIA2B,eAAe,CAAC,yBAAa;;;MAAI,6BAC1BO,aAD0B,IACblC,YACf6B,UADe,IACFI,YADE,EACUjC,EAFG;IAG/B,CAHa,CAAf;EAIH,CAVyB,EAW1B,CAACyB,mBAAD,EAAsBE,eAAtB,CAX0B,CAA9B;EAaA,IAAMQ,UAAU,GAAGrD,WAAW,CAC1B,UAACsD,OAAD,EAAUZ,gBAAV,EAA0B;IACtBG,eAAe,CAACvC,WAAW,CAACgD,OAAD,CAAZ,CAAf;IACAX,mBAAmB,CAACD,gBAAD,CAAnB;IACAX,OAAO,CAAC,CAAD,CAAP;EACH,CALyB,EAM1B,CAACY,mBAAD,EAAsBE,eAAtB,EAAuCd,OAAvC,CAN0B,CAA9B,CAtEwD,CA8ExD;;EACA9B,SAAS,CAAC;IACN,IAAI,CAACG,OAAO,CAACe,MAAD,EAASsB,SAAS,CAACc,OAAnB,CAAZ,EAAyC;MACrCd,SAAS,CAACc,OAAV,GAAoBpC,MAApB;MACA0B,eAAe,CAAC1B,MAAD,CAAf;IACH;EACJ,CALQ,CAAT;;EAOM,SAQFZ,mBAAmB,CACnB+B,SADmB,EAEnB;IACIrB,MAAM,QADV;IAEIoB,EAAE,EAAElC,GAAG,CAACa,MAAD,EAASI,MAAT,CAFX;IAGIoC,UAAU,EAAE;MAAE3B,IAAI,MAAN;MAAQC,OAAO;IAAf,CAHhB;IAIIG,IAAI,MAJR;IAKId,MAAM,EAAEyB;EALZ,CAFmB,EASnB;IACIa,gBAAgB,EAAE,IADtB;IAEIC,OAAO,EAAE,wBAAK;MACV,aAAM,CACF,OAAOC,KAAP,KAAiB,QAAjB,GACMA,KADN,GAEMA,KAAK,CAACC,OAAN,IAAiB,4BAHrB,EAIF;QACIC,IAAI,EAAE,OADV;QAEIC,WAAW,EAAE;UACTd,CAAC,EACG,OAAOW,KAAP,KAAiB,QAAjB,GACMA,KADN,GAEMA,KAAK,IAAIA,KAAK,CAACC,OAAf,GACAD,KAAK,CAACC,OADN,GAEAG;QAND;MAFjB,CAJE,CAAN;IAeC;EAlBT,CATmB,CARjB;EAAA,IACFC,IAAI,UADF;EAAA,IAEFC,KAAK,WAFH;EAAA,IAGFC,QAAQ,cAHN;EAAA,IAIFP,KAAK,WAJH;EAAA,IAKFQ,UAAU,gBALR;EAAA,IAMFC,SAAS,eANP;EAAA,IAOFC,OAAO,aAPL;;EAuCN,OAAO;IACHpC,IAAI,MADD;IAEH+B,IAAI,MAFD;IAGHM,YAAY,EAAE,IAHX;IAIH5B,gBAAgB,kBAJb;IAKHiB,KAAK,OALF;IAMHf,YAAY,cANT;IAOHE,UAAU,YAPP;IAQHqB,UAAU,YARP;IASHC,SAAS,WATN;IAUHG,QAAQ,EAAE/B,kBAAkB,CAACgC,MAV1B;IAWHC,YAAY,EAAEjC,kBAAkB,CAACkC,MAX9B;IAYHC,eAAe,EAAEnC,kBAAkB,CAACoC,cAZjC;IAaH/C,IAAI,MAbD;IAcHC,OAAO,SAdJ;IAeHuC,OAAO,SAfJ;IAgBHzC,QAAQ,EAAEU,SAhBP;IAiBHC,WAAW,aAjBR;IAkBHc,UAAU,YAlBP;IAmBHtB,OAAO,SAnBJ;IAoBHC,UAAU,YApBP;IAqBH6C,WAAW,EAAEX,QAAQ,GACfA,QAAQ,CAACW,WADM,GAEfZ,KAAK,IAAI,IAAT,GACApC,IAAI,GAAGC,OAAP,GAAiBmC,KADjB,GAEAF,SAzBH;IA0BHe,eAAe,EAAEZ,QAAQ,GAAGA,QAAQ,CAACY,eAAZ,GAA8BjD,IAAI,GAAG,CA1B3D;IA2BHM,OAAO,SA3BJ;IA4BHe,UAAU,YA5BP;IA6BHe,KAAK;EA7BF,CAAP;AA+BH,CAhKM","names":["useCallback","useEffect","useRef","get","isEqual","useSafeSetState","removeEmpty","useGetManyReference","useNotify","usePaginationState","useRecordSelection","useSortState","useResourceContext","defaultFilter","useReferenceManyFieldController","props","record","target","_a","filter","source","initialPage","initialPerPage","_b","initialSort","field","order","notify","resource","page","perPage","setPage","setPerPage","sort","setSortState","setSort","concat","id","reference","selectedIds","selectionModifiers","filterRef","displayedFilters","setDisplayedFilters","filterValues","setFilterValues","hideFilter","filterName","_","newState","showFilter","defaultValue","previousState","setFilters","filters","current","pagination","keepPreviousData","onError","error","message","type","messageArgs","undefined","data","total","pageInfo","isFetching","isLoading","refetch","defaultTitle","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection","hasNextPage","hasPreviousPage"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/field/useReferenceManyFieldController.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { useSafeSetState, removeEmpty } from '../../util';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport { Identifier, RaRecord, SortPayload } from '../../types';\nimport { ListControllerResult } from '../list';\nimport usePaginationState from '../usePaginationState';\nimport { useRecordSelection } from '../list/useRecordSelection';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\n\nexport interface UseReferenceManyFieldControllerParams<\n    RecordType extends RaRecord = RaRecord\n> {\n    filter?: any;\n    page?: number;\n    perPage?: number;\n    record?: RecordType;\n    reference: string;\n    resource?: string;\n    sort?: SortPayload;\n    source?: string;\n    target: string;\n}\n\nconst defaultFilter = {};\n\n/**\n * Fetch reference records, and return them when available\n *\n * Uses dataProvider.getManyReference() internally.\n *\n * @example // fetch the comments related to the current post\n * const { isLoading, data } = useReferenceManyFieldController({\n *     reference: 'comments',\n *     target: 'post_id',\n *     record: { id: 123, title: 'hello, world' },\n *     resource: 'posts',\n * });\n *\n * @param {Object} props\n * @param {string} props.reference The linked resource name. Required.\n * @param {string} props.target The target resource key. Required.\n * @param {Object} props.filter The filter applied on the recorded records list\n * @param {number} props.page the page number\n * @param {number} props.perPage the number of item per page\n * @param {Object} props.record The current resource record\n * @param {string} props.resource The current resource name\n * @param {Object} props.sort the sort to apply to the referenced records\n * @param {string} props.source The key of the linked resource identifier\n *\n * @returns {ListControllerResult} The reference many props\n */\nexport const useReferenceManyFieldController = <\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord\n>(\n    props: UseReferenceManyFieldControllerParams<RecordType>\n): ListControllerResult<ReferenceRecordType> => {\n    const {\n        reference,\n        record,\n        target,\n        filter = defaultFilter,\n        source,\n        page: initialPage,\n        perPage: initialPerPage,\n        sort: initialSort = { field: 'id', order: 'DESC' },\n    } = props;\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n\n    // pagination logic\n    const { page, setPage, perPage, setPerPage } = usePaginationState({\n        page: initialPage,\n        perPage: initialPerPage,\n    });\n\n    // sort logic\n    const { sort, setSort: setSortState } = useSortState(initialSort);\n    const setSort = useCallback(\n        (sort: SortPayload) => {\n            setSortState(sort);\n            setPage(1);\n        },\n        [setPage, setSortState]\n    );\n\n    // selection logic\n    const [selectedIds, selectionModifiers] = useRecordSelection(\n        `${resource}.${record?.id}.${reference}`\n    );\n\n    // filter logic\n    const filterRef = useRef(filter);\n    const [displayedFilters, setDisplayedFilters] = useSafeSetState<{\n        [key: string]: boolean;\n    }>({});\n    const [filterValues, setFilterValues] = useSafeSetState<{\n        [key: string]: any;\n    }>(filter);\n    const hideFilter = useCallback(\n        (filterName: string) => {\n            setDisplayedFilters(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n            setFilterValues(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const showFilter = useCallback(\n        (filterName: string, defaultValue: any) => {\n            setDisplayedFilters(previousState => ({\n                ...previousState,\n                [filterName]: true,\n            }));\n            setFilterValues(previousState => ({\n                ...previousState,\n                [filterName]: defaultValue,\n            }));\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const setFilters = useCallback(\n        (filters, displayedFilters) => {\n            setFilterValues(removeEmpty(filters));\n            setDisplayedFilters(displayedFilters);\n            setPage(1);\n        },\n        [setDisplayedFilters, setFilterValues, setPage]\n    );\n    // handle filter prop change\n    useEffect(() => {\n        if (!isEqual(filter, filterRef.current)) {\n            filterRef.current = filter;\n            setFilterValues(filter);\n        }\n    });\n\n    const {\n        data,\n        total,\n        pageInfo,\n        error,\n        isFetching,\n        isLoading,\n        refetch,\n    } = useGetManyReference<ReferenceRecordType>(\n        reference,\n        {\n            target,\n            id: get(record, source) as Identifier,\n            pagination: { page, perPage },\n            sort,\n            filter: filterValues,\n        },\n        {\n            keepPreviousData: true,\n            onError: error =>\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                ),\n        }\n    );\n\n    return {\n        sort,\n        data,\n        defaultTitle: null,\n        displayedFilters,\n        error,\n        filterValues,\n        hideFilter,\n        isFetching,\n        isLoading,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page,\n        perPage,\n        refetch,\n        resource: reference,\n        selectedIds,\n        setFilters,\n        setPage,\n        setPerPage,\n        hasNextPage: pageInfo\n            ? pageInfo.hasNextPage\n            : total != null\n            ? page * perPage < total\n            : undefined,\n        hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : page > 1,\n        setSort,\n        showFilter,\n        total,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
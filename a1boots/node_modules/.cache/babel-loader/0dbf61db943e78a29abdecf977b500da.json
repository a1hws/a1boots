{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback, useMemo, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useSaveContext } from '../controller';\nimport { useRecordContext } from '../controller';\nimport getFormInitialValues from './getFormInitialValues';\nimport { getSimpleValidationResolver } from './getSimpleValidationResolver';\nimport { setSubmissionErrors } from './setSubmissionErrors';\nimport { useNotifyIsFormInvalid } from './useNotifyIsFormInvalid';\nimport { useWarnWhenUnsavedChanges } from './useWarnWhenUnsavedChanges';\nimport { sanitizeEmptyValues as sanitizeValues } from './sanitizeEmptyValues';\n/**\n * Wrapper around react-hook-form's useForm\n *\n * This hook adds the following features to react-hook-form's useForm:\n *\n * - form initialization based on RecordContext\n * - validation based on a validate function\n * - sanitization of empty values\n * - notification on invalid form\n * - stop form submission event propagation\n */\n\nexport var useAugmentedForm = function useAugmentedForm(props) {\n  var _a = props.criteriaMode,\n      criteriaMode = _a === void 0 ? 'firstError' : _a,\n      defaultValues = props.defaultValues,\n      formRootPathname = props.formRootPathname,\n      resolver = props.resolver,\n      _b = props.reValidateMode,\n      reValidateMode = _b === void 0 ? 'onChange' : _b,\n      onSubmit = props.onSubmit,\n      sanitizeEmptyValues = props.sanitizeEmptyValues,\n      warnWhenUnsavedChanges = props.warnWhenUnsavedChanges,\n      validate = props.validate,\n      rest = __rest(props, [\"criteriaMode\", \"defaultValues\", \"formRootPathname\", \"resolver\", \"reValidateMode\", \"onSubmit\", \"sanitizeEmptyValues\", \"warnWhenUnsavedChanges\", \"validate\"]);\n\n  var record = useRecordContext(props);\n  var saveContext = useSaveContext();\n  var defaultValuesIncludingRecord = useMemo(function () {\n    return getFormInitialValues(defaultValues, record);\n  }, // eslint-disable-next-line\n  [// eslint-disable-next-line\n  JSON.stringify({\n    defaultValues: typeof defaultValues === 'function' ? 'function' : defaultValues,\n    record: record\n  })]);\n  var finalResolver = resolver ? resolver : validate ? getSimpleValidationResolver(validate) : undefined;\n  var form = useForm(__assign({\n    criteriaMode: criteriaMode,\n    values: defaultValuesIncludingRecord,\n    reValidateMode: reValidateMode,\n    resolver: finalResolver\n  }, rest));\n  var formRef = useRef(form); // notify on invalid form\n\n  useNotifyIsFormInvalid(form.control); // warn when unsaved change\n\n  useWarnWhenUnsavedChanges(Boolean(warnWhenUnsavedChanges), formRootPathname, form.control); // submit callbacks\n\n  var handleSubmit = useCallback(function (values, event) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var errors, finalValues;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            finalValues = sanitizeEmptyValues ? sanitizeValues(values, record) : values;\n            if (!onSubmit) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , onSubmit(finalValues, event)];\n\n          case 1:\n            errors = _a.sent();\n            _a.label = 2;\n\n          case 2:\n            if (!(onSubmit == null && (saveContext === null || saveContext === void 0 ? void 0 : saveContext.save))) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , saveContext.save(finalValues, event)];\n\n          case 3:\n            errors = _a.sent();\n            _a.label = 4;\n\n          case 4:\n            if (errors != null) {\n              setSubmissionErrors(errors, formRef.current.setError);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, [onSubmit, saveContext, sanitizeEmptyValues, record]);\n  var formHandleSubmit = useCallback(function (event) {\n    if (!event.defaultPrevented) {\n      // Prevent outer forms to receive the event\n      event.stopPropagation();\n      form.handleSubmit(handleSubmit)(event);\n    }\n\n    return;\n  }, [form, handleSubmit]);\n  return {\n    form: form,\n    handleSubmit: handleSubmit,\n    formHandleSubmit: formHandleSubmit\n  };\n};","map":{"version":3,"mappings":"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","names":["useCallback","useMemo","useRef","useForm","useSaveContext","useRecordContext","getFormInitialValues","getSimpleValidationResolver","setSubmissionErrors","useNotifyIsFormInvalid","useWarnWhenUnsavedChanges","sanitizeEmptyValues","sanitizeValues","useAugmentedForm","props","_a","defaultValues","formRootPathname","resolver","_b","reValidateMode","onSubmit","warnWhenUnsavedChanges","validate","rest","record","saveContext","defaultValuesIncludingRecord","JSON","stringify","finalResolver","undefined","form","criteriaMode","values","formRef","control","Boolean","handleSubmit","event","finalValues","errors","save","current","setError","formHandleSubmit","defaultPrevented","stopPropagation"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/useAugmentedForm.ts"],"sourcesContent":["import {\n    BaseSyntheticEvent,\n    useCallback,\n    useMemo,\n    useEffect,\n    useRef,\n} from 'react';\nimport {\n    FieldValues,\n    SubmitHandler,\n    useForm,\n    UseFormProps,\n} from 'react-hook-form';\n\nimport { RaRecord } from '../types';\nimport { useSaveContext } from '../controller';\nimport { useRecordContext } from '../controller';\nimport getFormInitialValues from './getFormInitialValues';\nimport {\n    getSimpleValidationResolver,\n    ValidateForm,\n} from './getSimpleValidationResolver';\nimport { setSubmissionErrors } from './setSubmissionErrors';\nimport { useNotifyIsFormInvalid } from './useNotifyIsFormInvalid';\nimport { useWarnWhenUnsavedChanges } from './useWarnWhenUnsavedChanges';\nimport { sanitizeEmptyValues as sanitizeValues } from './sanitizeEmptyValues';\n\n/**\n * Wrapper around react-hook-form's useForm\n *\n * This hook adds the following features to react-hook-form's useForm:\n *\n * - form initialization based on RecordContext\n * - validation based on a validate function\n * - sanitization of empty values\n * - notification on invalid form\n * - stop form submission event propagation\n */\nexport const useAugmentedForm = (props: UseAugmentedFormProps) => {\n    const {\n        criteriaMode = 'firstError',\n        defaultValues,\n        formRootPathname,\n        resolver,\n        reValidateMode = 'onChange',\n        onSubmit,\n        sanitizeEmptyValues,\n        warnWhenUnsavedChanges,\n        validate,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const saveContext = useSaveContext();\n\n    const defaultValuesIncludingRecord = useMemo(\n        () => getFormInitialValues(defaultValues, record),\n        // eslint-disable-next-line\n        [\n            // eslint-disable-next-line\n            JSON.stringify({\n                defaultValues:\n                    typeof defaultValues === 'function'\n                        ? 'function'\n                        : defaultValues,\n                record,\n            }),\n        ]\n    );\n\n    const finalResolver = resolver\n        ? resolver\n        : validate\n        ? getSimpleValidationResolver(validate)\n        : undefined;\n\n    const form = useForm({\n        criteriaMode,\n        values: defaultValuesIncludingRecord,\n        reValidateMode,\n        resolver: finalResolver,\n        ...rest,\n    });\n\n    const formRef = useRef(form);\n\n    // notify on invalid form\n    useNotifyIsFormInvalid(form.control);\n\n    // warn when unsaved change\n    useWarnWhenUnsavedChanges(\n        Boolean(warnWhenUnsavedChanges),\n        formRootPathname,\n        form.control\n    );\n\n    // submit callbacks\n    const handleSubmit = useCallback(\n        async (values, event) => {\n            let errors;\n            const finalValues = sanitizeEmptyValues\n                ? sanitizeValues(values, record)\n                : values;\n            if (onSubmit) {\n                errors = await onSubmit(finalValues, event);\n            }\n            if (onSubmit == null && saveContext?.save) {\n                errors = await saveContext.save(finalValues, event);\n            }\n            if (errors != null) {\n                setSubmissionErrors(errors, formRef.current.setError);\n            }\n        },\n        [onSubmit, saveContext, sanitizeEmptyValues, record]\n    );\n\n    const formHandleSubmit = useCallback(\n        (event: BaseSyntheticEvent) => {\n            if (!event.defaultPrevented) {\n                // Prevent outer forms to receive the event\n                event.stopPropagation();\n                form.handleSubmit(handleSubmit)(event);\n            }\n            return;\n        },\n        [form, handleSubmit]\n    );\n\n    return {\n        form,\n        handleSubmit,\n        formHandleSubmit,\n    };\n};\n\nexport type UseAugmentedFormProps = UseFormOwnProps &\n    Omit<UseFormProps, 'onSubmit'> & {\n        validate?: ValidateForm;\n    };\n\nexport interface UseFormOwnProps {\n    defaultValues?: any;\n    formRootPathname?: string;\n    record?: Partial<RaRecord>;\n    onSubmit?: SubmitHandler<FieldValues>;\n    warnWhenUnsavedChanges?: boolean;\n    sanitizeEmptyValues?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}
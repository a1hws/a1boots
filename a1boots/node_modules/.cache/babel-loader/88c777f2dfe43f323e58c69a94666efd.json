{"ast":null,"code":"import { createContext } from 'react';\n/**\n * Context to store the result of the useListController() hook.\n *\n * Use the useListContext() hook to read the context. That's what many\n * List components do in react-admin (e.g. <Datagrid>, <FilterForm>, <Pagination>).\n *\n * @typedef {Object} ListControllerProps\n * @prop {Array}    data an array of the list records, e.g. [{ id: 123, title: 'hello world' }, { ... }]\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {boolean}  isFetching boolean that is true on mount, and false once the data was fetched\n * @prop {boolean}  isLoading boolean that is false until the data is available\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Object}   sort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort({ field: 'name', order: 'ASC' })\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\n * @prop {Array}    selectedIds an array listing the ids of the selected rows, e.g. [123, 456]\n * @prop {Function} onSelect callback to change the list of selected rows, e.g. onSelect([456, 789])\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n * @prop {Function} refetch a function for triggering a refetch of the list data\n *\n * @typedef Props\n * @prop {ListControllerResult} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListContext.Provider value={controllerProps}>\n *             ...\n *         </ListContext.Provider>\n *     );\n * };\n */\n\nexport var ListContext = createContext({\n  sort: null,\n  data: null,\n  defaultTitle: null,\n  displayedFilters: null,\n  exporter: null,\n  filterValues: null,\n  hasNextPage: null,\n  hasPreviousPage: null,\n  hideFilter: null,\n  isFetching: null,\n  isLoading: null,\n  onSelect: null,\n  onToggleItem: null,\n  onUnselectItems: null,\n  page: null,\n  perPage: null,\n  refetch: null,\n  resource: null,\n  selectedIds: undefined,\n  setFilters: null,\n  setPage: null,\n  setPerPage: null,\n  setSort: null,\n  showFilter: null,\n  total: null\n});\nListContext.displayName = 'ListContext';","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,OAAO,IAAMC,WAAW,GAAGD,aAAa,CAAuB;EAC3DE,IAAI,EAAE,IADqD;EAE3DC,IAAI,EAAE,IAFqD;EAG3DC,YAAY,EAAE,IAH6C;EAI3DC,gBAAgB,EAAE,IAJyC;EAK3DC,QAAQ,EAAE,IALiD;EAM3DC,YAAY,EAAE,IAN6C;EAO3DC,WAAW,EAAE,IAP8C;EAQ3DC,eAAe,EAAE,IAR0C;EAS3DC,UAAU,EAAE,IAT+C;EAU3DC,UAAU,EAAE,IAV+C;EAW3DC,SAAS,EAAE,IAXgD;EAY3DC,QAAQ,EAAE,IAZiD;EAa3DC,YAAY,EAAE,IAb6C;EAc3DC,eAAe,EAAE,IAd0C;EAe3DC,IAAI,EAAE,IAfqD;EAgB3DC,OAAO,EAAE,IAhBkD;EAiB3DC,OAAO,EAAE,IAjBkD;EAkB3DC,QAAQ,EAAE,IAlBiD;EAmB3DC,WAAW,EAAEC,SAnB8C;EAoB3DC,UAAU,EAAE,IApB+C;EAqB3DC,OAAO,EAAE,IArBkD;EAsB3DC,UAAU,EAAE,IAtB+C;EAuB3DC,OAAO,EAAE,IAvBkD;EAwB3DC,UAAU,EAAE,IAxB+C;EAyB3DC,KAAK,EAAE;AAzBoD,CAAvB,CAAjC;AA4BP1B,WAAW,CAAC2B,WAAZ,GAA0B,aAA1B","names":["createContext","ListContext","sort","data","defaultTitle","displayedFilters","exporter","filterValues","hasNextPage","hasPreviousPage","hideFilter","isFetching","isLoading","onSelect","onToggleItem","onUnselectItems","page","perPage","refetch","resource","selectedIds","undefined","setFilters","setPage","setPerPage","setSort","showFilter","total","displayName"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/list/ListContext.tsx"],"sourcesContent":["import { createContext } from 'react';\nimport { ListControllerResult } from './useListController';\n\n/**\n * Context to store the result of the useListController() hook.\n *\n * Use the useListContext() hook to read the context. That's what many\n * List components do in react-admin (e.g. <Datagrid>, <FilterForm>, <Pagination>).\n *\n * @typedef {Object} ListControllerProps\n * @prop {Array}    data an array of the list records, e.g. [{ id: 123, title: 'hello world' }, { ... }]\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {boolean}  isFetching boolean that is true on mount, and false once the data was fetched\n * @prop {boolean}  isLoading boolean that is false until the data is available\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Object}   sort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort({ field: 'name', order: 'ASC' })\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\n * @prop {Array}    selectedIds an array listing the ids of the selected rows, e.g. [123, 456]\n * @prop {Function} onSelect callback to change the list of selected rows, e.g. onSelect([456, 789])\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n * @prop {Function} refetch a function for triggering a refetch of the list data\n *\n * @typedef Props\n * @prop {ListControllerResult} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListContext.Provider value={controllerProps}>\n *             ...\n *         </ListContext.Provider>\n *     );\n * };\n */\nexport const ListContext = createContext<ListControllerResult>({\n    sort: null,\n    data: null,\n    defaultTitle: null,\n    displayedFilters: null,\n    exporter: null,\n    filterValues: null,\n    hasNextPage: null,\n    hasPreviousPage: null,\n    hideFilter: null,\n    isFetching: null,\n    isLoading: null,\n    onSelect: null,\n    onToggleItem: null,\n    onUnselectItems: null,\n    page: null,\n    perPage: null,\n    refetch: null,\n    resource: null,\n    selectedIds: undefined,\n    setFilters: null,\n    setPage: null,\n    setPerPage: null,\n    setSort: null,\n    showFilter: null,\n    total: null,\n});\n\nListContext.displayName = 'ListContext';\n"]},"metadata":{},"sourceType":"module"}
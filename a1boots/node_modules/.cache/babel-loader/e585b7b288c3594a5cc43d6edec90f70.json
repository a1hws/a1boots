{"ast":null,"code":"import * as React from 'react';\nimport { useState } from 'react';\nimport { useLocaleState, useLocales } from 'ra-core';\nimport { Box, Button, Menu, MenuItem, styled } from '@mui/material';\nimport LanguageIcon from '@mui/icons-material/Translate';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n/**\n * Language selector. Changes the locale in the app and persists it in\n * preferences so that the app opens with the right locale in the future.\n *\n * Uses i18nProvider.getLocales() to get the list of available locales.\n *\n * @example\n * import { AppBar, TitlePortal, LocalesMenuButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar>\n *         <TitlePortal />\n *         <LocalesMenuButton />\n *     </AppBar>\n * );\n */\n\nexport var LocalesMenuButton = function LocalesMenuButton(props) {\n  var _a = useState(null),\n      anchorEl = _a[0],\n      setAnchorEl = _a[1];\n\n  var languages = useLocales({\n    locales: props.languages\n  });\n\n  var _b = useLocaleState(),\n      locale = _b[0],\n      setLocale = _b[1];\n\n  var getNameForLocale = function getNameForLocale(locale) {\n    var language = languages.find(function (language) {\n      return language.locale === locale;\n    });\n    return language ? language.name : '';\n  };\n\n  var changeLocale = function changeLocale(locale) {\n    return function () {\n      setLocale(locale);\n      setAnchorEl(null);\n    };\n  };\n\n  var handleLanguageClick = function handleLanguageClick(event) {\n    setAnchorEl(event.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  return React.createElement(Root, {\n    component: \"span\"\n  }, React.createElement(Button, {\n    color: \"inherit\",\n    \"aria-controls\": \"simple-menu\",\n    \"aria-label\": \"\",\n    \"aria-haspopup\": \"true\",\n    onClick: handleLanguageClick,\n    startIcon: React.createElement(LanguageIcon, null),\n    endIcon: React.createElement(ExpandMoreIcon, {\n      fontSize: \"small\"\n    })\n  }, getNameForLocale(locale)), React.createElement(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose\n  }, languages.map(function (language) {\n    return React.createElement(MenuItem, {\n      key: language.locale,\n      onClick: changeLocale(language.locale),\n      selected: language.locale === locale\n    }, language.name);\n  })));\n};\nvar PREFIX = 'RaLocalesMenuButton';\nexport var LocalesMenuButtonClasses = {};\nvar Root = styled(Box, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({});","map":{"version":3,"mappings":"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","names":["React","useState","useLocaleState","useLocales","Box","Button","Menu","MenuItem","styled","LanguageIcon","ExpandMoreIcon","LocalesMenuButton","props","anchorEl","setAnchorEl","languages","locales","locale","setLocale","getNameForLocale","language","find","name","changeLocale","handleLanguageClick","event","currentTarget","handleClose","Root","component","color","onClick","startIcon","endIcon","fontSize","id","keepMounted","open","Boolean","onClose","map","key","selected","PREFIX","LocalesMenuButtonClasses","overridesResolver","styles","root"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/LocalesMenuButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { MouseEvent, useState } from 'react';\nimport { useLocaleState, useLocales } from 'ra-core';\nimport { Box, Button, Menu, MenuItem, styled } from '@mui/material';\nimport LanguageIcon from '@mui/icons-material/Translate';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\n/**\n * Language selector. Changes the locale in the app and persists it in\n * preferences so that the app opens with the right locale in the future.\n *\n * Uses i18nProvider.getLocales() to get the list of available locales.\n *\n * @example\n * import { AppBar, TitlePortal, LocalesMenuButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar>\n *         <TitlePortal />\n *         <LocalesMenuButton />\n *     </AppBar>\n * );\n */\nexport const LocalesMenuButton = (props: LocalesMenuButtonProps) => {\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const languages = useLocales({ locales: props.languages });\n    const [locale, setLocale] = useLocaleState();\n\n    const getNameForLocale = (locale: string): string => {\n        const language = languages.find(language => language.locale === locale);\n        return language ? language.name : '';\n    };\n\n    const changeLocale = (locale: string) => (): void => {\n        setLocale(locale);\n        setAnchorEl(null);\n    };\n\n    const handleLanguageClick = (event: MouseEvent<HTMLElement>): void => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (): void => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <Root component=\"span\">\n            <Button\n                color=\"inherit\"\n                aria-controls=\"simple-menu\"\n                aria-label=\"\"\n                aria-haspopup=\"true\"\n                onClick={handleLanguageClick}\n                startIcon={<LanguageIcon />}\n                endIcon={<ExpandMoreIcon fontSize=\"small\" />}\n            >\n                {getNameForLocale(locale)}\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {languages.map(language => (\n                    <MenuItem\n                        key={language.locale}\n                        onClick={changeLocale(language.locale)}\n                        selected={language.locale === locale}\n                    >\n                        {language.name}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Root>\n    );\n};\n\nconst PREFIX = 'RaLocalesMenuButton';\n\nexport const LocalesMenuButtonClasses = {};\n\nconst Root = styled(Box, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({});\n\nexport interface LocalesMenuButtonProps {\n    languages?: { locale: string; name: string }[];\n}\n"]},"metadata":{},"sourceType":"module"}
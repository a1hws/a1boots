{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport DataProviderContext from './DataProviderContext';\nimport { defaultDataProvider } from './defaultDataProvider';\nimport validateResponseFormat from './validateResponseFormat';\nimport useLogoutIfAccessDenied from '../auth/useLogoutIfAccessDenied';\nimport { reactAdminFetchActions } from './dataFetchActions';\n/**\n * Hook for getting a dataProvider\n *\n * Gets a dataProvider object, which behaves just like the real dataProvider\n * (same methods returning a Promise). But it's actually a Proxy object,\n * which validates the response format, and logs the user out upon error\n * if authProvider.checkError() rejects.\n *\n * @return dataProvider\n *\n * @example Basic usage\n *\n * import * as React from 'react';\n * import { useState } from 'react';\n * import { useDataProvider } from 'react-admin';\n *\n * const PostList = () => {\n *      const [posts, setPosts] = useState([])\n *      const dataProvider = useDataProvider();\n *      useEffect(() => {\n *          dataProvider.getList('posts', { filter: { status: 'pending' }})\n *            .then(({ data }) => setPosts(data));\n *      }, [])\n *\n *      return (\n *          <Fragment>\n *              {posts.map((post, key) => <PostDetail post={post} key={key} />)}\n *          </Fragment>\n *     );\n * }\n *\n * @example Handling all states (loading, error, success)\n *\n * import { useState, useEffect } from 'react';\n * import { useDataProvider } from 'react-admin';\n *\n * const UserProfile = ({ userId }) => {\n *     const dataProvider = useDataProvider();\n *     const [user, setUser] = useState();\n *     const [loading, setLoading] = useState(true);\n *     const [error, setError] = useState();\n *     useEffect(() => {\n *         dataProvider.getOne('users', { id: userId })\n *             .then(({ data }) => {\n *                 setUser(data);\n *                 setLoading(false);\n *             })\n *             .catch(error => {\n *                 setError(error);\n *                 setLoading(false);\n *             })\n *     }, []);\n *\n *     if (loading) return <Loading />;\n *     if (error) return <Error />\n *     if (!user) return null;\n *\n *     return (\n *         <ul>\n *             <li>Name: {user.name}</li>\n *             <li>Email: {user.email}</li>\n *         </ul>\n *     )\n * }\n */\n\nvar arrayReturnTypes = ['getList', 'getMany', 'getManyReference'];\nexport var useDataProvider = function useDataProvider() {\n  var dataProvider = useContext(DataProviderContext) || defaultDataProvider;\n  var logoutIfAccessDenied = useLogoutIfAccessDenied();\n  var dataProviderProxy = useMemo(function () {\n    return new Proxy(dataProvider, {\n      get: function get(target, name) {\n        if (typeof name === 'symbol' || name === 'then') {\n          return;\n        }\n\n        return function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          var type = name.toString();\n\n          if (typeof dataProvider[type] !== 'function') {\n            throw new Error(\"Unknown dataProvider function: \".concat(type));\n          }\n\n          try {\n            return dataProvider[type].apply(dataProvider, args).then(function (response) {\n              if (process.env.NODE_ENV !== 'production' && reactAdminFetchActions.includes(type)) {\n                validateResponseFormat(response, type);\n              }\n\n              return response;\n            }).catch(function (error) {\n              if (process.env.NODE_ENV !== 'production') {\n                console.error(error);\n              }\n\n              return logoutIfAccessDenied(error).then(function (loggedOut) {\n                if (loggedOut) return {\n                  data: arrayReturnTypes.includes(type) ? [] : {}\n                };\n                throw error;\n              });\n            });\n          } catch (e) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.error(e);\n            }\n\n            throw new Error('The dataProvider threw an error. It should return a rejected Promise instead.');\n          }\n        };\n      }\n    });\n  }, [dataProvider, logoutIfAccessDenied]);\n  return dataProviderProxy;\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AAEA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AAEA,OAAOC,uBAAP,MAAoC,iCAApC;AACA,SAASC,sBAAT,QAAuC,oBAAvC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA,IAAMC,gBAAgB,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,kBAAvB,CAAzB;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;EAG3B,IAAMC,YAAY,GAAKT,UAAU,CAACE,mBAAD,CAAV,IACnBC,mBADJ;EAGA,IAAMO,oBAAoB,GAAGL,uBAAuB,EAApD;EAEA,IAAMM,iBAAiB,GAAGV,OAAO,CAAC;IAC9B,OAAO,IAAIW,KAAJ,CAAUH,YAAV,EAAwB;MAC3BI,GAAG,EAAE,aAACC,MAAD,EAASC,IAAT,EAAa;QACd,IAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,MAAzC,EAAiD;UAC7C;QACH;;QACD,OAAO;UAAC;;eAAA,yCAAO;YAAPC;;;UACJ,IAAMC,IAAI,GAAGF,IAAI,CAACG,QAAL,EAAb;;UAEA,IAAI,OAAOT,YAAY,CAACQ,IAAD,CAAnB,KAA8B,UAAlC,EAA8C;YAC1C,MAAM,IAAIE,KAAJ,CACF,yCAAkCF,IAAlC,CADE,CAAN;UAGH;;UAED,IAAI;YACA,OAAOR,YAAY,CAACQ,IAAD,CAAZ,CACFG,KADE,CACIX,YADJ,EACkBO,IADlB,EAEFK,IAFE,CAEG,oBAAQ;cACV,IACIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACAlB,sBAAsB,CAACmB,QAAvB,CAAgCR,IAAhC,CAFJ,EAGE;gBACEb,sBAAsB,CAACsB,QAAD,EAAWT,IAAX,CAAtB;cACH;;cACD,OAAOS,QAAP;YACH,CAVE,EAWFC,KAXE,CAWI,iBAAK;cACR,IAAIL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;gBACvCI,OAAO,CAACC,KAAR,CAAcA,KAAd;cACH;;cACD,OAAOnB,oBAAoB,CAACmB,KAAD,CAApB,CAA4BR,IAA5B,CACH,qBAAS;gBACL,IAAIS,SAAJ,EACI,OAAO;kBACHC,IAAI,EAAExB,gBAAgB,CAACkB,QAAjB,CACFR,IADE,IAGA,EAHA,GAIA;gBALH,CAAP;gBAOJ,MAAMY,KAAN;cACH,CAXE,CAAP;YAaH,CA5BE,CAAP;UA6BH,CA9BD,CA8BE,OAAOG,CAAP,EAAU;YACR,IAAIV,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;cACvCI,OAAO,CAACC,KAAR,CAAcG,CAAd;YACH;;YACD,MAAM,IAAIb,KAAJ,CACF,+EADE,CAAN;UAGH;QACJ,CA/CD;MAgDH;IArD0B,CAAxB,CAAP;EAuDH,CAxDgC,EAwD9B,CAACV,YAAD,EAAeC,oBAAf,CAxD8B,CAAjC;EA0DA,OAAOC,iBAAP;AACH,CAnEM","names":["useContext","useMemo","DataProviderContext","defaultDataProvider","validateResponseFormat","useLogoutIfAccessDenied","reactAdminFetchActions","arrayReturnTypes","useDataProvider","dataProvider","logoutIfAccessDenied","dataProviderProxy","Proxy","get","target","name","args","type","toString","Error","apply","then","process","env","NODE_ENV","includes","response","catch","console","error","loggedOut","data","e"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/useDataProvider.ts"],"sourcesContent":["import { useContext, useMemo } from 'react';\n\nimport DataProviderContext from './DataProviderContext';\nimport { defaultDataProvider } from './defaultDataProvider';\nimport validateResponseFormat from './validateResponseFormat';\nimport { DataProvider } from '../types';\nimport useLogoutIfAccessDenied from '../auth/useLogoutIfAccessDenied';\nimport { reactAdminFetchActions } from './dataFetchActions';\n\n/**\n * Hook for getting a dataProvider\n *\n * Gets a dataProvider object, which behaves just like the real dataProvider\n * (same methods returning a Promise). But it's actually a Proxy object,\n * which validates the response format, and logs the user out upon error\n * if authProvider.checkError() rejects.\n *\n * @return dataProvider\n *\n * @example Basic usage\n *\n * import * as React from 'react';\n * import { useState } from 'react';\n * import { useDataProvider } from 'react-admin';\n *\n * const PostList = () => {\n *      const [posts, setPosts] = useState([])\n *      const dataProvider = useDataProvider();\n *      useEffect(() => {\n *          dataProvider.getList('posts', { filter: { status: 'pending' }})\n *            .then(({ data }) => setPosts(data));\n *      }, [])\n *\n *      return (\n *          <Fragment>\n *              {posts.map((post, key) => <PostDetail post={post} key={key} />)}\n *          </Fragment>\n *     );\n * }\n *\n * @example Handling all states (loading, error, success)\n *\n * import { useState, useEffect } from 'react';\n * import { useDataProvider } from 'react-admin';\n *\n * const UserProfile = ({ userId }) => {\n *     const dataProvider = useDataProvider();\n *     const [user, setUser] = useState();\n *     const [loading, setLoading] = useState(true);\n *     const [error, setError] = useState();\n *     useEffect(() => {\n *         dataProvider.getOne('users', { id: userId })\n *             .then(({ data }) => {\n *                 setUser(data);\n *                 setLoading(false);\n *             })\n *             .catch(error => {\n *                 setError(error);\n *                 setLoading(false);\n *             })\n *     }, []);\n *\n *     if (loading) return <Loading />;\n *     if (error) return <Error />\n *     if (!user) return null;\n *\n *     return (\n *         <ul>\n *             <li>Name: {user.name}</li>\n *             <li>Email: {user.email}</li>\n *         </ul>\n *     )\n * }\n */\n\nconst arrayReturnTypes = ['getList', 'getMany', 'getManyReference'];\n\nexport const useDataProvider = <\n    TDataProvider extends DataProvider = DataProvider\n>(): TDataProvider => {\n    const dataProvider = ((useContext(DataProviderContext) ||\n        defaultDataProvider) as unknown) as TDataProvider;\n\n    const logoutIfAccessDenied = useLogoutIfAccessDenied();\n\n    const dataProviderProxy = useMemo(() => {\n        return new Proxy(dataProvider, {\n            get: (target, name) => {\n                if (typeof name === 'symbol' || name === 'then') {\n                    return;\n                }\n                return (...args) => {\n                    const type = name.toString();\n\n                    if (typeof dataProvider[type] !== 'function') {\n                        throw new Error(\n                            `Unknown dataProvider function: ${type}`\n                        );\n                    }\n\n                    try {\n                        return dataProvider[type]\n                            .apply(dataProvider, args)\n                            .then(response => {\n                                if (\n                                    process.env.NODE_ENV !== 'production' &&\n                                    reactAdminFetchActions.includes(type)\n                                ) {\n                                    validateResponseFormat(response, type);\n                                }\n                                return response;\n                            })\n                            .catch(error => {\n                                if (process.env.NODE_ENV !== 'production') {\n                                    console.error(error);\n                                }\n                                return logoutIfAccessDenied(error).then(\n                                    loggedOut => {\n                                        if (loggedOut)\n                                            return {\n                                                data: arrayReturnTypes.includes(\n                                                    type\n                                                )\n                                                    ? []\n                                                    : {},\n                                            };\n                                        throw error;\n                                    }\n                                );\n                            });\n                    } catch (e) {\n                        if (process.env.NODE_ENV !== 'production') {\n                            console.error(e);\n                        }\n                        throw new Error(\n                            'The dataProvider threw an error. It should return a rejected Promise instead.'\n                        );\n                    }\n                };\n            },\n        });\n    }, [dataProvider, logoutIfAccessDenied]);\n\n    return dataProviderProxy;\n};\n"]},"metadata":{},"sourceType":"module"}
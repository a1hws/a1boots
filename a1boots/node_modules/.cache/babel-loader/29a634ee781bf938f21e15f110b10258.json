{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\n\nexport var useFormGroup = function (name) {\n  var _a = useFormState(),\n      dirtyFields = _a.dirtyFields,\n      touchedFields = _a.touchedFields,\n      errors = _a.errors;\n\n  var formGroups = useFormGroups();\n\n  var _b = useState({\n    errors: undefined,\n    isDirty: false,\n    isTouched: false,\n    isValid: true\n  }),\n      state = _b[0],\n      setState = _b[1];\n\n  var updateGroupState = useCallback(function () {\n    var fields = formGroups.getGroupFields(name);\n    var fieldStates = fields.map(function (field) {\n      return {\n        name: field,\n        error: get(errors, field, undefined),\n        isDirty: get(dirtyFields, field, false) !== false,\n        isValid: get(errors, field, undefined) == undefined,\n        isTouched: get(touchedFields, field, false) !== false\n      };\n    }).filter(function (fieldState) {\n      return fieldState != undefined;\n    }); // eslint-disable-line\n\n    var newState = getFormGroupState(fieldStates);\n    setState(function (oldState) {\n      if (!isEqual(oldState, newState)) {\n        return newState;\n      }\n\n      return oldState;\n    });\n  }, [dirtyFields, errors, touchedFields, formGroups, name]);\n  useEffect(function () {\n    updateGroupState();\n  }, // eslint-disable-next-line\n  [// eslint-disable-next-line\n  JSON.stringify({\n    dirtyFields: dirtyFields,\n    errors: errors,\n    touchedFields: touchedFields\n  }), updateGroupState]);\n  useEffect(function () {\n    // Whenever the group content changes (input are added or removed)\n    // we must update its state\n    return formGroups.subscribe(name, function () {\n      updateGroupState();\n    });\n  }, [formGroups, name, updateGroupState]);\n  return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\n\nexport var getFormGroupState = function (fieldStates) {\n  return fieldStates.reduce(function (acc, fieldState) {\n    var errors = acc.errors || {};\n\n    if (fieldState.error) {\n      errors[fieldState.name] = fieldState.error;\n    }\n\n    var newState = {\n      isDirty: acc.isDirty || fieldState.isDirty,\n      errors: errors,\n      isTouched: acc.isTouched || fieldState.isTouched,\n      isValid: acc.isValid && fieldState.isValid\n    };\n    return newState;\n  }, {\n    isDirty: false,\n    errors: undefined,\n    isValid: true,\n    isTouched: false\n  });\n};","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useState","get","isEqual","useFormState","useFormGroups","useFormGroup","name","dirtyFields","touchedFields","errors","formGroups","undefined","isDirty","isTouched","isValid","state","setState","updateGroupState","fields","getGroupFields","fieldStates","map","field","error","filter","newState","getFormGroupState","oldState","JSON","stringify","subscribe","reduce","acc","fieldState"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/useFormGroup.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\n\ntype FieldState = {\n    name: string;\n    error?: any;\n    isDirty: boolean;\n    isTouched: boolean;\n    isValid: boolean;\n};\n\ntype FormGroupState = {\n    errors?: object;\n    isDirty: boolean;\n    isTouched: boolean;\n    isValid: boolean;\n};\n\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport const useFormGroup = (name: string): FormGroupState => {\n    const { dirtyFields, touchedFields, errors } = useFormState();\n    const formGroups = useFormGroups();\n    const [state, setState] = useState<FormGroupState>({\n        errors: undefined,\n        isDirty: false,\n        isTouched: false,\n        isValid: true,\n    });\n\n    const updateGroupState = useCallback(() => {\n        const fields = formGroups.getGroupFields(name);\n        const fieldStates = fields\n            .map<FieldState>(field => {\n                return {\n                    name: field,\n                    error: get(errors, field, undefined),\n                    isDirty: get(dirtyFields, field, false) !== false,\n                    isValid: get(errors, field, undefined) == undefined, // eslint-disable-line\n                    isTouched: get(touchedFields, field, false) !== false,\n                };\n            })\n            .filter(fieldState => fieldState != undefined); // eslint-disable-line\n\n        const newState = getFormGroupState(fieldStates);\n        setState(oldState => {\n            if (!isEqual(oldState, newState)) {\n                return newState;\n            }\n\n            return oldState;\n        });\n    }, [dirtyFields, errors, touchedFields, formGroups, name]);\n\n    useEffect(\n        () => {\n            updateGroupState();\n        },\n        // eslint-disable-next-line\n        [\n            // eslint-disable-next-line\n            JSON.stringify({ dirtyFields, errors, touchedFields }),\n            updateGroupState,\n        ]\n    );\n\n    useEffect(() => {\n        // Whenever the group content changes (input are added or removed)\n        // we must update its state\n        return formGroups.subscribe(name, () => {\n            updateGroupState();\n        });\n    }, [formGroups, name, updateGroupState]);\n\n    return state;\n};\n\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport const getFormGroupState = (\n    fieldStates: FieldState[]\n): FormGroupState => {\n    return fieldStates.reduce<FormGroupState>(\n        (acc, fieldState) => {\n            let errors = acc.errors || {};\n\n            if (fieldState.error) {\n                errors[fieldState.name] = fieldState.error;\n            }\n\n            const newState = {\n                isDirty: acc.isDirty || fieldState.isDirty,\n                errors,\n                isTouched: acc.isTouched || fieldState.isTouched,\n                isValid: acc.isValid && fieldState.isValid,\n            };\n\n            return newState;\n        },\n        {\n            isDirty: false,\n            errors: undefined,\n            isValid: true,\n            isTouched: false,\n        }\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
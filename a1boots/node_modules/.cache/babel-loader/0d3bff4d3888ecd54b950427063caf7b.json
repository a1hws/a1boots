{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { FormControl, FormHelperText, FormLabel, RadioGroup } from '@mui/material';\nimport get from 'lodash/get';\nimport { useInput, FieldTitle, useChoicesContext } from 'ra-core';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\nimport { RadioButtonGroupInputItem } from './RadioButtonGroupInputItem';\nimport { Labeled } from '../Labeled';\nimport { LinearProgress } from '../layout';\n/**\n * An Input component for a radio button group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <RadioButtonGroupInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <RadioButtonGroupInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<span>{record.first_name} {record.last_name}</span>)\n * };\n * <RadioButtonGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <RadioButtonGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the Material UI <RadioButtonGroup> component\n */\n\nexport var RadioButtonGroupInput = function RadioButtonGroupInput(props) {\n  var choicesProp = props.choices,\n      className = props.className,\n      format = props.format,\n      helperText = props.helperText,\n      isFetchingProp = props.isFetching,\n      isLoadingProp = props.isLoading,\n      label = props.label,\n      _a = props.margin,\n      margin = _a === void 0 ? 'dense' : _a,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      options = props.options,\n      optionText = props.optionText,\n      optionValue = props.optionValue,\n      parse = props.parse,\n      resourceProp = props.resource,\n      row = props.row,\n      sourceProp = props.source,\n      translateChoice = props.translateChoice,\n      validate = props.validate,\n      rest = __rest(props, [\"choices\", \"className\", \"format\", \"helperText\", \"isFetching\", \"isLoading\", \"label\", \"margin\", \"onBlur\", \"onChange\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"row\", \"source\", \"translateChoice\", \"validate\"]);\n\n  var _b = useChoicesContext({\n    choices: choicesProp,\n    isFetching: isFetchingProp,\n    isLoading: isLoadingProp,\n    resource: resourceProp,\n    source: sourceProp\n  }),\n      allChoices = _b.allChoices,\n      isLoading = _b.isLoading,\n      fetchError = _b.error,\n      resource = _b.resource,\n      source = _b.source;\n\n  if (source === undefined) {\n    throw new Error(\"If you're not wrapping the RadioButtonGroupInput inside a ReferenceArrayInput, you must provide the source prop\");\n  }\n\n  if (!isLoading && !fetchError && allChoices === undefined) {\n    throw new Error(\"If you're not wrapping the RadioButtonGroupInput inside a ReferenceArrayInput, you must provide the choices prop\");\n  }\n\n  var _c = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _c.id,\n      isRequired = _c.isRequired,\n      fieldState = _c.fieldState,\n      field = _c.field,\n      formState = _c.formState;\n\n  var error = fieldState.error,\n      invalid = fieldState.invalid,\n      isTouched = fieldState.isTouched;\n  var isSubmitted = formState.isSubmitted;\n\n  if (isLoading) {\n    return React.createElement(Labeled, {\n      htmlFor: id,\n      label: label,\n      source: source,\n      resource: resource,\n      className: clsx('ra-input', \"ra-input-\".concat(source), className),\n      isRequired: isRequired\n    }, React.createElement(LinearProgress, null));\n  }\n\n  return React.createElement(StyledFormControl, __assign({\n    component: \"fieldset\",\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    margin: margin,\n    error: fetchError || (isTouched || isSubmitted) && invalid\n  }, sanitizeRestProps(rest)), React.createElement(FormLabel, {\n    component: \"legend\",\n    className: RadioButtonGroupInputClasses.label\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(RadioGroup, __assign({\n    id: id,\n    row: row\n  }, field, options, sanitizeRestProps(rest)), allChoices === null || allChoices === void 0 ? void 0 : allChoices.map(function (choice) {\n    return React.createElement(RadioButtonGroupInputItem, {\n      key: get(choice, optionValue),\n      choice: choice,\n      optionText: optionText,\n      optionValue: optionValue,\n      source: source,\n      translateChoice: translateChoice\n    });\n  })), React.createElement(FormHelperText, null, React.createElement(InputHelperText, {\n    touched: isTouched || isSubmitted || fetchError,\n    error: (error === null || error === void 0 ? void 0 : error.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n    helperText: helperText\n  })));\n};\nRadioButtonGroupInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.any),\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nRadioButtonGroupInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  row: true,\n  translateChoice: true\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var afterSubmit = _a.afterSubmit,\n      allowNull = _a.allowNull,\n      beforeSubmit = _a.beforeSubmit,\n      choices = _a.choices,\n      className = _a.className,\n      crudGetMatching = _a.crudGetMatching,\n      crudGetOne = _a.crudGetOne,\n      data = _a.data,\n      filter = _a.filter,\n      filterToQuery = _a.filterToQuery,\n      formatOnBlur = _a.formatOnBlur,\n      isEqual = _a.isEqual,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      multiple = _a.multiple,\n      name = _a.name,\n      pagination = _a.pagination,\n      perPage = _a.perPage,\n      ref = _a.ref,\n      reference = _a.reference,\n      refetch = _a.refetch,\n      render = _a.render,\n      setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      sort = _a.sort,\n      subscription = _a.subscription,\n      type = _a.type,\n      validateFields = _a.validateFields,\n      validation = _a.validation,\n      value = _a.value,\n      rest = __rest(_a, [\"afterSubmit\", \"allowNull\", \"beforeSubmit\", \"choices\", \"className\", \"crudGetMatching\", \"crudGetOne\", \"data\", \"filter\", \"filterToQuery\", \"formatOnBlur\", \"isEqual\", \"limitChoicesToValue\", \"multiple\", \"name\", \"pagination\", \"perPage\", \"ref\", \"reference\", \"refetch\", \"render\", \"setFilter\", \"setPagination\", \"setSort\", \"sort\", \"subscription\", \"type\", \"validateFields\", \"validation\", \"value\"]);\n\n  return sanitizeInputRestProps(rest);\n};\n\nvar PREFIX = 'RaRadioButtonGroupInput';\nexport var RadioButtonGroupInputClasses = {\n  label: \"\".concat(PREFIX, \"-label\")\n};\nvar StyledFormControl = styled(FormControl, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(RadioButtonGroupInputClasses.label)] = {\n    transform: 'translate(0, 5px) scale(0.75)',\n    transformOrigin: \"top \".concat(theme.direction === 'ltr' ? 'left' : 'right')\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","styled","PropTypes","clsx","FormControl","FormHelperText","FormLabel","RadioGroup","get","useInput","FieldTitle","useChoicesContext","sanitizeInputRestProps","InputHelperText","RadioButtonGroupInputItem","Labeled","LinearProgress","RadioButtonGroupInput","props","choicesProp","className","format","helperText","isFetchingProp","isLoadingProp","label","_a","margin","onBlur","onChange","options","optionText","optionValue","parse","resourceProp","row","sourceProp","translateChoice","validate","rest","choices","isFetching","isLoading","resource","source","allChoices","fetchError","undefined","Error","id","isRequired","fieldState","field","formState","invalid","isTouched","htmlFor","StyledFormControl","__assign","component","error","isSubmitted","sanitizeRestProps","RadioButtonGroupInputClasses","map","key","choice","touched","message","propTypes","arrayOf","any","oneOfType","string","bool","element","object","func","defaultProps","allowNull","beforeSubmit","crudGetMatching","crudGetOne","data","filter","filterToQuery","formatOnBlur","isEqual","limitChoicesToValue","multiple","name","pagination","perPage","ref","reference","refetch","render","setFilter","setPagination","setSort","sort","subscription","type","validateFields","validation","value","PREFIX","overridesResolver","styles","root","theme","_b","transform","transformOrigin","direction"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/RadioButtonGroupInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    FormControl,\n    FormHelperText,\n    FormLabel,\n    RadioGroup,\n} from '@mui/material';\nimport { RadioGroupProps } from '@mui/material/RadioGroup';\nimport { FormControlProps } from '@mui/material/FormControl';\nimport get from 'lodash/get';\nimport { useInput, FieldTitle, ChoicesProps, useChoicesContext } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\nimport { RadioButtonGroupInputItem } from './RadioButtonGroupInputItem';\nimport { Labeled } from '../Labeled';\nimport { LinearProgress } from '../layout';\n\n/**\n * An Input component for a radio button group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <RadioButtonGroupInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <RadioButtonGroupInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<span>{record.first_name} {record.last_name}</span>)\n * };\n * <RadioButtonGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <RadioButtonGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the Material UI <RadioButtonGroup> component\n */\nexport const RadioButtonGroupInput = (props: RadioButtonGroupInputProps) => {\n    const {\n        choices: choicesProp,\n        className,\n        format,\n        helperText,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        label,\n        margin = 'dense',\n        onBlur,\n        onChange,\n        options,\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        row,\n        source: sourceProp,\n        translateChoice,\n        validate,\n        ...rest\n    } = props;\n\n    const {\n        allChoices,\n        isLoading,\n        error: fetchError,\n        resource,\n        source,\n    } = useChoicesContext({\n        choices: choicesProp,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    if (source === undefined) {\n        throw new Error(\n            `If you're not wrapping the RadioButtonGroupInput inside a ReferenceArrayInput, you must provide the source prop`\n        );\n    }\n\n    if (!isLoading && !fetchError && allChoices === undefined) {\n        throw new Error(\n            `If you're not wrapping the RadioButtonGroupInput inside a ReferenceArrayInput, you must provide the choices prop`\n        );\n    }\n\n    const { id, isRequired, fieldState, field, formState } = useInput({\n        format,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n    const { isSubmitted } = formState;\n\n    if (isLoading) {\n        return (\n            <Labeled\n                htmlFor={id}\n                label={label}\n                source={source}\n                resource={resource}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                isRequired={isRequired}\n            >\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n    return (\n        <StyledFormControl\n            component=\"fieldset\"\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            margin={margin}\n            error={fetchError || ((isTouched || isSubmitted) && invalid)}\n            {...sanitizeRestProps(rest)}\n        >\n            <FormLabel\n                component=\"legend\"\n                className={RadioButtonGroupInputClasses.label}\n            >\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            </FormLabel>\n\n            <RadioGroup\n                id={id}\n                row={row}\n                {...field}\n                {...options}\n                {...sanitizeRestProps(rest)}\n            >\n                {allChoices?.map(choice => (\n                    <RadioButtonGroupInputItem\n                        key={get(choice, optionValue)}\n                        choice={choice}\n                        optionText={optionText}\n                        optionValue={optionValue}\n                        source={source}\n                        translateChoice={translateChoice}\n                    />\n                ))}\n            </RadioGroup>\n            <FormHelperText>\n                <InputHelperText\n                    touched={isTouched || isSubmitted || fetchError}\n                    error={error?.message || fetchError?.message}\n                    helperText={helperText}\n                />\n            </FormHelperText>\n        </StyledFormControl>\n    );\n};\n\nRadioButtonGroupInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.any),\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nRadioButtonGroupInput.defaultProps = {\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    row: true,\n    translateChoice: true,\n};\n\nconst sanitizeRestProps = ({\n    afterSubmit,\n    allowNull,\n    beforeSubmit,\n    choices,\n    className,\n    crudGetMatching,\n    crudGetOne,\n    data,\n    filter,\n    filterToQuery,\n    formatOnBlur,\n    isEqual,\n    limitChoicesToValue,\n    multiple,\n    name,\n    pagination,\n    perPage,\n    ref,\n    reference,\n    refetch,\n    render,\n    setFilter,\n    setPagination,\n    setSort,\n    sort,\n    subscription,\n    type,\n    validateFields,\n    validation,\n    value,\n    ...rest\n}: any) => sanitizeInputRestProps(rest);\n\nexport type RadioButtonGroupInputProps = Omit<CommonInputProps, 'source'> &\n    ChoicesProps &\n    FormControlProps &\n    RadioGroupProps & {\n        options?: RadioGroupProps;\n        source?: string;\n    };\n\nconst PREFIX = 'RaRadioButtonGroupInput';\n\nexport const RadioButtonGroupInputClasses = {\n    label: `${PREFIX}-label`,\n};\n\nconst StyledFormControl = styled(FormControl, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${RadioButtonGroupInputClasses.label}`]: {\n        transform: 'translate(0, 5px) scale(0.75)',\n        transformOrigin: `top ${theme.direction === 'ltr' ? 'left' : 'right'}`,\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
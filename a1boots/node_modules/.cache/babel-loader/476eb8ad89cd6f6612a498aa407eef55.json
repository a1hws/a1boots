{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport inflection from 'inflection';\nimport { alpha, styled } from '@mui/material/styles';\nimport { useDeleteMany, useListContext, useNotify, useRefresh, useResourceContext, useTranslate, useSafeSetState } from 'ra-core';\nimport { Confirm } from '../layout';\nimport { Button } from './Button';\nexport var BulkDeleteWithConfirmButton = function (props) {\n  var _a = props.confirmTitle,\n      confirmTitle = _a === void 0 ? 'ra.message.bulk_delete_title' : _a,\n      _b = props.confirmContent,\n      confirmContent = _b === void 0 ? 'ra.message.bulk_delete_content' : _b,\n      _c = props.icon,\n      icon = _c === void 0 ? defaultIcon : _c,\n      _d = props.label,\n      label = _d === void 0 ? 'ra.action.delete' : _d,\n      _e = props.mutationMode,\n      mutationMode = _e === void 0 ? 'pessimistic' : _e,\n      _f = props.mutationOptions,\n      mutationOptions = _f === void 0 ? {} : _f,\n      onClick = props.onClick,\n      rest = __rest(props, [\"confirmTitle\", \"confirmContent\", \"icon\", \"label\", \"mutationMode\", \"mutationOptions\", \"onClick\"]);\n\n  var mutationMeta = mutationOptions.meta,\n      otherMutationOptions = __rest(mutationOptions, [\"meta\"]);\n\n  var _g = useListContext(props),\n      selectedIds = _g.selectedIds,\n      onUnselectItems = _g.onUnselectItems;\n\n  var _h = useSafeSetState(false),\n      isOpen = _h[0],\n      setOpen = _h[1];\n\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  var refresh = useRefresh();\n  var translate = useTranslate();\n\n  var _j = useDeleteMany(resource, {\n    ids: selectedIds,\n    meta: mutationMeta\n  }, __assign({\n    onSuccess: function () {\n      refresh();\n      notify('ra.notification.deleted', {\n        type: 'info',\n        messageArgs: {\n          smart_count: selectedIds.length\n        },\n        undoable: mutationMode === 'undoable'\n      });\n      onUnselectItems();\n      setOpen(false);\n    },\n    onError: function (error) {\n      notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n        type: 'error',\n        messageArgs: {\n          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n        }\n      });\n      setOpen(false);\n    },\n    mutationMode: mutationMode\n  }, otherMutationOptions)),\n      deleteMany = _j[0],\n      isLoading = _j[1].isLoading;\n\n  var handleClick = function (e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n\n  var handleDialogClose = function () {\n    setOpen(false);\n  };\n\n  var handleDelete = function (e) {\n    deleteMany();\n\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n\n  return React.createElement(Fragment, null, React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label\n  }, sanitizeRestProps(rest)), icon), React.createElement(Confirm, {\n    isOpen: isOpen,\n    loading: isLoading,\n    title: confirmTitle,\n    content: confirmContent,\n    translateOptions: {\n      smart_count: selectedIds.length,\n      name: translate(\"resources.\".concat(resource, \".forcedCaseName\"), {\n        smart_count: selectedIds.length,\n        _: inflection.humanize(translate(\"resources.\".concat(resource, \".name\"), {\n          smart_count: selectedIds.length,\n          _: inflection.inflect(resource, selectedIds.length)\n        }), true)\n      })\n    },\n    onConfirm: handleDelete,\n    onClose: handleDialogClose\n  }));\n};\n\nvar sanitizeRestProps = function (_a) {\n  var classes = _a.classes,\n      filterValues = _a.filterValues,\n      label = _a.label,\n      selectedIds = _a.selectedIds,\n      rest = __rest(_a, [\"classes\", \"filterValues\", \"label\", \"selectedIds\"]);\n\n  return rest;\n};\n\nvar PREFIX = 'RaBulkDeleteWithConfirmButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.error.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.error.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});\nvar defaultIcon = React.createElement(ActionDelete, null);\nBulkDeleteWithConfirmButton.propTypes = {\n  confirmTitle: PropTypes.string,\n  confirmContent: PropTypes.string,\n  icon: PropTypes.element,\n  label: PropTypes.string,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any)\n};","map":{"version":3,"mappings":"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","names":["React","Fragment","PropTypes","ActionDelete","inflection","alpha","styled","useDeleteMany","useListContext","useNotify","useRefresh","useResourceContext","useTranslate","useSafeSetState","Confirm","Button","BulkDeleteWithConfirmButton","props","_a","_b","confirmContent","_c","icon","defaultIcon","_d","label","_e","mutationMode","_f","mutationOptions","onClick","rest","mutationMeta","otherMutationOptions","selectedIds","onUnselectItems","isOpen","setOpen","notify","resource","refresh","translate","ids","meta","__assign","onSuccess","type","messageArgs","smart_count","length","undoable","onError","error","message","_","undefined","deleteMany","isLoading","handleClick","e","stopPropagation","handleDialogClose","handleDelete","StyledButton","sanitizeRestProps","loading","title","confirmTitle","content","translateOptions","name","humanize","inflect","onConfirm","onClose","filterValues","PREFIX","overridesResolver","styles","root","theme","color","palette","main","backgroundColor","propTypes","string","element","oneOf","arrayOf","any"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/BulkDeleteWithConfirmButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Fragment, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport inflection from 'inflection';\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    MutationMode,\n    useDeleteMany,\n    useListContext,\n    useNotify,\n    useRefresh,\n    useResourceContext,\n    useTranslate,\n    useSafeSetState,\n    RaRecord,\n    DeleteManyParams,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\nimport { UseMutationOptions } from 'react-query';\n\nexport const BulkDeleteWithConfirmButton = (\n    props: BulkDeleteWithConfirmButtonProps\n) => {\n    const {\n        confirmTitle = 'ra.message.bulk_delete_title',\n        confirmContent = 'ra.message.bulk_delete_content',\n        icon = defaultIcon,\n        label = 'ra.action.delete',\n        mutationMode = 'pessimistic',\n        mutationOptions = {},\n        onClick,\n        ...rest\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n    const { selectedIds, onUnselectItems } = useListContext(props);\n    const [isOpen, setOpen] = useSafeSetState(false);\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const [deleteMany, { isLoading }] = useDeleteMany(\n        resource,\n        { ids: selectedIds, meta: mutationMeta },\n        {\n            onSuccess: () => {\n                refresh();\n                notify('ra.notification.deleted', {\n                    type: 'info',\n                    messageArgs: { smart_count: selectedIds.length },\n                    undoable: mutationMode === 'undoable',\n                });\n                onUnselectItems();\n                setOpen(false);\n            },\n            onError: (error: Error) => {\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                );\n                setOpen(false);\n            },\n            mutationMode,\n            ...otherMutationOptions,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleDelete = e => {\n        deleteMany();\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isLoading}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    smart_count: selectedIds.length,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: selectedIds.length,\n                        _: inflection.humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: selectedIds.length,\n                                _: inflection.inflect(\n                                    resource,\n                                    selectedIds.length\n                                ),\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleDelete}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    classes,\n    filterValues,\n    label,\n    selectedIds,\n    ...rest\n}: Omit<\n    BulkDeleteWithConfirmButtonProps,\n    'resource' | 'icon' | 'mutationMode'\n>) => rest;\n\nexport interface BulkDeleteWithConfirmButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown\n> extends BulkActionProps,\n        ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: string;\n    icon?: ReactElement;\n    mutationMode: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteManyParams<RecordType>\n    > & { meta?: any };\n}\n\nconst PREFIX = 'RaBulkDeleteWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionDelete />;\n\nBulkDeleteWithConfirmButton.propTypes = {\n    confirmTitle: PropTypes.string,\n    confirmContent: PropTypes.string,\n    icon: PropTypes.element,\n    label: PropTypes.string,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useMemo } from 'react';\nimport { useQuery } from 'react-query';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { removeDoubleSlashes, useBasename } from '../routing';\nimport { useNotify } from '../notification';\nvar emptyParams = {};\n/**\n * Hook for getting the authentication status\n *\n * Calls the authProvider.checkAuth() method asynchronously.\n *\n * The return value updates according to the authProvider request state:\n *\n * - isLoading: true just after mount, while the authProvider is being called. false once the authProvider has answered.\n * - authenticated: true while loading. then true or false depending on the authProvider response.\n *\n * To avoid rendering a component and force waiting for the authProvider response, use the useAuthState() hook\n * instead of the useAuthenticated() hook.\n *\n * You can render different content depending on the authenticated status.\n *\n * @see useAuthenticated()\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @param {Boolean} logoutOnFailure: Optional. Whether the user should be logged out if the authProvider fails to authenticate them. False by default.\n *\n * @returns The current auth check state. Destructure as { authenticated, error, isLoading }.\n *\n * @example\n * import { useAuthState, Loading } from 'react-admin';\n *\n * const MyPage = () => {\n *     const { isLoading, authenticated } = useAuthState();\n *     if (isLoading) {\n *         return <Loading />;\n *     }\n *     if (authenticated) {\n *        return <AuthenticatedContent />;\n *     }\n *     return <AnonymousContent />;\n * };\n */\n\nvar useAuthState = function (params, logoutOnFailure, queryOptions) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n\n  if (logoutOnFailure === void 0) {\n    logoutOnFailure = false;\n  }\n\n  var authProvider = useAuthProvider();\n  var logout = useLogout();\n  var basename = useBasename();\n  var notify = useNotify();\n  var result = useQuery(['auth', 'checkAuth', params], function () {\n    // The authProvider is optional in react-admin\n    return authProvider === null || authProvider === void 0 ? void 0 : authProvider.checkAuth(params).then(function () {\n      return true;\n    });\n  }, __assign({\n    onError: function (error) {\n      var loginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.loginUrl));\n\n      if (logoutOnFailure) {\n        logout({}, error && error.redirectTo != null ? error.redirectTo : loginUrl);\n        var shouldSkipNotify = error && error.message === false;\n        !shouldSkipNotify && notify(getErrorMessage(error, 'ra.auth.auth_check_error'), {\n          type: 'error'\n        });\n      }\n    },\n    retry: false\n  }, queryOptions));\n  return useMemo(function () {\n    var _a;\n\n    return {\n      // If the data is undefined and the query isn't loading anymore, it means the query failed.\n      // In that case, we set authenticated to false unless there's no authProvider.\n      authenticated: ((_a = result.data) !== null && _a !== void 0 ? _a : result.isLoading) ? true : authProvider == null,\n      isLoading: result.isLoading,\n      error: result.error\n    };\n  }, [authProvider, result]);\n};\n\nexport default useAuthState;\n\nvar getErrorMessage = function (error, defaultMessage) {\n  return typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? defaultMessage : error.message;\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,QAAT,QAA0C,aAA1C;AACA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,mBAAT,EAA8BC,WAA9B,QAAiD,YAAjD;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAOA,IAAMC,WAAW,GAAG,EAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,IAAMC,YAAY,GAAG,UACjBC,MADiB,EAEjBC,eAFiB,EAGjBC,YAHiB,EAG2B;EAF5C;IAAAF;EAAyB;;EACzB;IAAAC;EAAgC;;EAGhC,IAAME,YAAY,GAAGX,eAAe,EAApC;EACA,IAAMY,MAAM,GAAGV,SAAS,EAAxB;EACA,IAAMW,QAAQ,GAAGT,WAAW,EAA5B;EACA,IAAMU,MAAM,GAAGT,SAAS,EAAxB;EAEA,IAAMU,MAAM,GAAGhB,QAAQ,CACnB,CAAC,MAAD,EAAS,WAAT,EAAsBS,MAAtB,CADmB,EAEnB;IACI;IACA,OAAOG,YAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEK,SAAd,CAAwBR,MAAxB,EAAgCS,IAAhC,CAAqC;MAAM;IAAI,CAA/C,CAAP;EACH,CALkB,EAKlBC;IAEGC,OAAO,EAAE,iBAAK;MACV,IAAMC,QAAQ,GAAGjB,mBAAmB,CAChC,UAAGU,QAAH,EAAW,GAAX,EAAWQ,MAAX,CAAepB,iBAAiB,CAACmB,QAAjC,CADgC,CAApC;;MAGA,IAAIX,eAAJ,EAAqB;QACjBG,MAAM,CACF,EADE,EAEFU,KAAK,IAAIA,KAAK,CAACC,UAAN,IAAoB,IAA7B,GACMD,KAAK,CAACC,UADZ,GAEMH,QAJJ,CAAN;QAMA,IAAMI,gBAAgB,GAAGF,KAAK,IAAIA,KAAK,CAACG,OAAN,KAAkB,KAApD;QACA,CAACD,gBAAD,IACIV,MAAM,CACFY,eAAe,CAACJ,KAAD,EAAQ,0BAAR,CADb,EAEF;UAAEK,IAAI,EAAE;QAAR,CAFE,CADV;MAKH;IACJ,CApBJ;IAqBGC,KAAK,EAAE;EArBV,GAsBMlB,YAtBN,CALkB,CAAvB;EA+BA,OAAOZ,OAAO,CAAC;;;IACX,OAAO;MACH;MACA;MACA+B,aAAa,EACT,aAAM,CAACC,IAAP,MAAW,IAAX,IAAWC,aAAX,GAAWA,EAAX,GAAehB,MAAM,CAACiB,SAAtB,IAAkC,IAAlC,GAAyCrB,YAAY,IAAI,IAJ1D;MAKHqB,SAAS,EAAEjB,MAAM,CAACiB,SALf;MAMHV,KAAK,EAAEP,MAAM,CAACO;IANX,CAAP;EAQH,CATa,EASX,CAACX,YAAD,EAAeI,MAAf,CATW,CAAd;AAUH,CAnDD;;AAqDA,eAAeR,YAAf;;AAEA,IAAMmB,eAAe,GAAG,UAACJ,KAAD,EAAQW,cAAR,EAAsB;EAC1C,cAAOX,KAAP,KAAiB,QAAjB,GACMA,KADN,GAEM,OAAOA,KAAP,KAAiB,WAAjB,IAAgC,CAACA,KAAK,CAACG,OAAvC,GACAQ,cADA,GAEAX,KAAK,CAACG,OAJZ;AAImB,CALvB","names":["useMemo","useQuery","useAuthProvider","defaultAuthParams","useLogout","removeDoubleSlashes","useBasename","useNotify","emptyParams","useAuthState","params","logoutOnFailure","queryOptions","authProvider","logout","basename","notify","result","checkAuth","then","__assign","onError","loginUrl","concat","error","redirectTo","shouldSkipNotify","message","getErrorMessage","type","retry","authenticated","data","_a","isLoading","defaultMessage"],"sources":["/var/www/a1boots/node_modules/ra-core/src/auth/useAuthState.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useQuery, UseQueryOptions } from 'react-query';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { removeDoubleSlashes, useBasename } from '../routing';\nimport { useNotify } from '../notification';\n\ninterface State {\n    isLoading: boolean;\n    authenticated?: boolean;\n}\n\nconst emptyParams = {};\n\n/**\n * Hook for getting the authentication status\n *\n * Calls the authProvider.checkAuth() method asynchronously.\n *\n * The return value updates according to the authProvider request state:\n *\n * - isLoading: true just after mount, while the authProvider is being called. false once the authProvider has answered.\n * - authenticated: true while loading. then true or false depending on the authProvider response.\n *\n * To avoid rendering a component and force waiting for the authProvider response, use the useAuthState() hook\n * instead of the useAuthenticated() hook.\n *\n * You can render different content depending on the authenticated status.\n *\n * @see useAuthenticated()\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @param {Boolean} logoutOnFailure: Optional. Whether the user should be logged out if the authProvider fails to authenticate them. False by default.\n *\n * @returns The current auth check state. Destructure as { authenticated, error, isLoading }.\n *\n * @example\n * import { useAuthState, Loading } from 'react-admin';\n *\n * const MyPage = () => {\n *     const { isLoading, authenticated } = useAuthState();\n *     if (isLoading) {\n *         return <Loading />;\n *     }\n *     if (authenticated) {\n *        return <AuthenticatedContent />;\n *     }\n *     return <AnonymousContent />;\n * };\n */\nconst useAuthState = (\n    params: any = emptyParams,\n    logoutOnFailure: boolean = false,\n    queryOptions?: UseQueryOptions<boolean, any>\n): State => {\n    const authProvider = useAuthProvider();\n    const logout = useLogout();\n    const basename = useBasename();\n    const notify = useNotify();\n\n    const result = useQuery<boolean, any>(\n        ['auth', 'checkAuth', params],\n        () => {\n            // The authProvider is optional in react-admin\n            return authProvider?.checkAuth(params).then(() => true);\n        },\n        {\n            onError: error => {\n                const loginUrl = removeDoubleSlashes(\n                    `${basename}/${defaultAuthParams.loginUrl}`\n                );\n                if (logoutOnFailure) {\n                    logout(\n                        {},\n                        error && error.redirectTo != null\n                            ? error.redirectTo\n                            : loginUrl\n                    );\n                    const shouldSkipNotify = error && error.message === false;\n                    !shouldSkipNotify &&\n                        notify(\n                            getErrorMessage(error, 'ra.auth.auth_check_error'),\n                            { type: 'error' }\n                        );\n                }\n            },\n            retry: false,\n            ...queryOptions,\n        }\n    );\n\n    return useMemo(() => {\n        return {\n            // If the data is undefined and the query isn't loading anymore, it means the query failed.\n            // In that case, we set authenticated to false unless there's no authProvider.\n            authenticated:\n                result.data ?? result.isLoading ? true : authProvider == null, // Optimisic\n            isLoading: result.isLoading,\n            error: result.error,\n        };\n    }, [authProvider, result]);\n};\n\nexport default useAuthState;\n\nconst getErrorMessage = (error, defaultMessage) =>\n    typeof error === 'string'\n        ? error\n        : typeof error === 'undefined' || !error.message\n        ? defaultMessage\n        : error.message;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useState, useCallback, useRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, MenuItem, styled } from '@mui/material';\nimport ContentFilter from '@mui/icons-material/FilterList';\nimport lodashGet from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useListContext, useResourceContext, useTranslate } from 'ra-core';\nimport { stringify } from 'query-string';\nimport { useNavigate } from 'react-router';\nimport { FilterButtonMenuItem } from './FilterButtonMenuItem';\nimport { Button } from '../../button';\nimport { FilterContext } from '../FilterContext';\nimport { extractValidSavedQueries, useSavedQueries } from './useSavedQueries';\nimport { AddSavedQueryDialog } from './AddSavedQueryDialog';\nimport { RemoveSavedQueryDialog } from './RemoveSavedQueryDialog';\nexport var FilterButton = function FilterButton(props) {\n  var filtersProp = props.filters,\n      className = props.className,\n      disableSaveQuery = props.disableSaveQuery,\n      rest = __rest(props, [\"filters\", \"className\", \"disableSaveQuery\"]);\n\n  var filters = useContext(FilterContext) || filtersProp;\n  var resource = useResourceContext(props);\n  var translate = useTranslate();\n  var savedQueries = useSavedQueries(resource)[0];\n  var navigate = useNavigate();\n\n  var _a = useListContext(props),\n      _b = _a.displayedFilters,\n      displayedFilters = _b === void 0 ? {} : _b,\n      filterValues = _a.filterValues,\n      perPage = _a.perPage,\n      setFilters = _a.setFilters,\n      showFilter = _a.showFilter,\n      sort = _a.sort;\n\n  var hasFilterValues = !isEqual(filterValues, {});\n  var validSavedQueries = extractValidSavedQueries(savedQueries);\n  var hasSavedCurrentQuery = validSavedQueries.some(function (savedQuery) {\n    return isEqual(savedQuery.value, {\n      filter: filterValues,\n      sort: sort,\n      perPage: perPage,\n      displayedFilters: displayedFilters\n    });\n  });\n\n  var _c = useState(false),\n      open = _c[0],\n      setOpen = _c[1];\n\n  var anchorEl = useRef();\n\n  if (filters === undefined) {\n    throw new Error('FilterButton requires filters prop to be set');\n  }\n\n  var hiddenFilters = filters.filter(function (filterElement) {\n    return !filterElement.props.alwaysOn && !displayedFilters[filterElement.props.source] && typeof lodashGet(filterValues, filterElement.props.source) === 'undefined';\n  });\n  var handleClickButton = useCallback(function (event) {\n    // This prevents ghost click.\n    event.preventDefault();\n    setOpen(true);\n    anchorEl.current = event.currentTarget;\n  }, [anchorEl, setOpen]);\n  var handleRequestClose = useCallback(function () {\n    setOpen(false);\n  }, [setOpen]);\n  var handleShow = useCallback(function (_a) {\n    var source = _a.source,\n        defaultValue = _a.defaultValue;\n    showFilter(source, defaultValue === '' ? undefined : defaultValue);\n    setOpen(false);\n  }, [showFilter, setOpen]); // add query dialog state\n\n  var _d = useState(false),\n      addSavedQueryDialogOpen = _d[0],\n      setAddSavedQueryDialogOpen = _d[1];\n\n  var hideAddSavedQueryDialog = function hideAddSavedQueryDialog() {\n    setAddSavedQueryDialogOpen(false);\n  };\n\n  var showAddSavedQueryDialog = function showAddSavedQueryDialog() {\n    setOpen(false);\n    setAddSavedQueryDialogOpen(true);\n  }; // remove query dialog state\n\n\n  var _e = useState(false),\n      removeSavedQueryDialogOpen = _e[0],\n      setRemoveSavedQueryDialogOpen = _e[1];\n\n  var hideRemoveSavedQueryDialog = function hideRemoveSavedQueryDialog() {\n    setRemoveSavedQueryDialogOpen(false);\n  };\n\n  var showRemoveSavedQueryDialog = function showRemoveSavedQueryDialog() {\n    setOpen(false);\n    setRemoveSavedQueryDialogOpen(true);\n  };\n\n  if (hiddenFilters.length === 0 && validSavedQueries.length === 0 && !hasFilterValues) {\n    return null;\n  }\n\n  return React.createElement(Root, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), React.createElement(Button, {\n    className: \"add-filter\",\n    label: \"ra.action.add_filter\",\n    \"aria-haspopup\": \"true\",\n    onClick: handleClickButton\n  }, React.createElement(ContentFilter, null)), React.createElement(Menu, {\n    open: open,\n    anchorEl: anchorEl.current,\n    onClose: handleRequestClose\n  }, hiddenFilters.map(function (filterElement, index) {\n    return React.createElement(FilterButtonMenuItem, {\n      key: filterElement.props.source,\n      filter: filterElement,\n      resource: resource,\n      onShow: handleShow,\n      autoFocus: index === 0\n    });\n  }), validSavedQueries.map(function (savedQuery, index) {\n    return isEqual(savedQuery.value, {\n      filter: filterValues,\n      sort: sort,\n      perPage: perPage,\n      displayedFilters: displayedFilters\n    }) ? React.createElement(MenuItem, {\n      onClick: showRemoveSavedQueryDialog,\n      key: index\n    }, translate('ra.saved_queries.remove_label_with_name', {\n      _: 'Remove query \"%{name}\"',\n      name: savedQuery.label\n    })) : React.createElement(MenuItem, {\n      onClick: function onClick() {\n        navigate({\n          search: stringify({\n            filter: JSON.stringify(savedQuery.value.filter),\n            sort: savedQuery.value.sort.field,\n            order: savedQuery.value.sort.order,\n            page: 1,\n            perPage: savedQuery.value.perPage,\n            displayedFilters: JSON.stringify(savedQuery.value.displayedFilters)\n          })\n        });\n        setOpen(false);\n      },\n      key: index\n    }, savedQuery.label);\n  }), hasFilterValues && !hasSavedCurrentQuery && !disableSaveQuery && React.createElement(MenuItem, {\n    onClick: showAddSavedQueryDialog\n  }, translate('ra.saved_queries.new_label', {\n    _: 'Save current query...'\n  })), hasFilterValues && React.createElement(MenuItem, {\n    onClick: function onClick() {\n      return setFilters({}, {}, false);\n    }\n  }, translate('ra.action.remove_all_filters', {\n    _: 'Remove all filters'\n  }))), !disableSaveQuery && React.createElement(React.Fragment, null, React.createElement(AddSavedQueryDialog, {\n    open: addSavedQueryDialogOpen,\n    onClose: hideAddSavedQueryDialog\n  }), React.createElement(RemoveSavedQueryDialog, {\n    open: removeSavedQueryDialogOpen,\n    onClose: hideRemoveSavedQueryDialog\n  })));\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var _b = _a.displayedFilters,\n      displayedFilters = _b === void 0 ? null : _b,\n      _c = _a.filterValues,\n      filterValues = _c === void 0 ? null : _c,\n      _d = _a.showFilter,\n      showFilter = _d === void 0 ? null : _d,\n      rest = __rest(_a, [\"displayedFilters\", \"filterValues\", \"showFilter\"]);\n\n  return rest;\n};\n\nFilterButton.propTypes = {\n  resource: PropTypes.string,\n  filters: PropTypes.arrayOf(PropTypes.node),\n  displayedFilters: PropTypes.object,\n  filterValues: PropTypes.object,\n  showFilter: PropTypes.func,\n  className: PropTypes.string\n};\nvar PREFIX = 'RaFilterButton';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    display: 'inline-block'\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACIC,QADJ,EAEIC,WAFJ,EAGIC,MAHJ,EAMIC,UANJ,QAOO,OAPP;AAQA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,MAAzB,QAAuC,eAAvC;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,EAA6CC,YAA7C,QAAiE,SAAjE;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,wBAAT,EAAmCC,eAAnC,QAA0D,mBAA1D;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAyB;EAE7C,IAASC,WAAW,GAIpBD,KAAK,QAJL;EAAA,IACAE,SAAS,GAGTF,KAAK,UAJL;EAAA,IAEAG,gBAAgB,GAEhBH,KAAK,iBAJL;EAAA,IAGGI,IAAI,UACPJ,KADO,EAJL,4CAIK,CAHP;;EAKJ,IAAMK,OAAO,GAAG1B,UAAU,CAACe,aAAD,CAAV,IAA6BO,WAA7C;EACA,IAAMK,QAAQ,GAAGlB,kBAAkB,CAACY,KAAD,CAAnC;EACA,IAAMO,SAAS,GAAGlB,YAAY,EAA9B;EACO,gBAAY,GAAIO,eAAe,CAACU,QAAD,CAAf,CAAyB,CAAzB,CAAhB;EACP,IAAME,QAAQ,GAAGjB,WAAW,EAA5B;;EACM,SAOFJ,cAAc,CAACa,KAAD,CAPZ;EAAA,IACFS,wBADE;EAAA,IACFC,gBAAgB,mBAAG,EAAH,GAAKD,EADnB;EAAA,IAEFE,YAAY,kBAFV;EAAA,IAGFC,OAAO,aAHL;EAAA,IAIFC,UAAU,gBAJR;EAAA,IAKFC,UAAU,gBALR;EAAA,IAMFC,IAAI,UANF;;EAQN,IAAMC,eAAe,GAAG,CAAC9B,OAAO,CAACyB,YAAD,EAAe,EAAf,CAAhC;EACA,IAAMM,iBAAiB,GAAGtB,wBAAwB,CAACuB,YAAD,CAAlD;EACA,IAAMC,oBAAoB,GAAGF,iBAAiB,CAACG,IAAlB,CAAuB,sBAAU;IAC1D,cAAO,CAACC,UAAU,CAACC,KAAZ,EAAmB;MACtBC,MAAM,EAAEZ,YADc;MAEtBI,IAAI,MAFkB;MAGtBH,OAAO,SAHe;MAItBF,gBAAgB;IAJM,CAAnB,CAAP;EAKE,CANuB,CAA7B;;EAQM,SAAkBlC,QAAQ,CAAC,KAAD,CAA1B;EAAA,IAACgD,IAAI,QAAL;EAAA,IAAOC,OAAO,QAAd;;EACN,IAAMC,QAAQ,GAAGhD,MAAM,EAAvB;;EAEA,IAAI2B,OAAO,KAAKsB,SAAhB,EAA2B;IACvB,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;EACH;;EAED,IAAMC,aAAa,GAAGxB,OAAO,CAACkB,MAAR,CAClB,UAACO,aAAD,EAA2B;IACvB,QAACA,aAAa,CAAC9B,KAAd,CAAoB+B,QAArB,IACA,CAACrB,gBAAgB,CAACoB,aAAa,CAAC9B,KAAd,CAAoBgC,MAArB,CADjB,IAEA,OAAO/C,SAAS,CAAC0B,YAAD,EAAemB,aAAa,CAAC9B,KAAd,CAAoBgC,MAAnC,CAAhB,KACI,WAHJ;EAGe,CALD,CAAtB;EAQA,IAAMC,iBAAiB,GAAGxD,WAAW,CACjC,iBAAK;IACD;IACAyD,KAAK,CAACC,cAAN;IACAV,OAAO,CAAC,IAAD,CAAP;IACAC,QAAQ,CAACU,OAAT,GAAmBF,KAAK,CAACG,aAAzB;EACH,CANgC,EAOjC,CAACX,QAAD,EAAWD,OAAX,CAPiC,CAArC;EAUA,IAAMa,kBAAkB,GAAG7D,WAAW,CAAC;IACnCgD,OAAO,CAAC,KAAD,CAAP;EACH,CAFqC,EAEnC,CAACA,OAAD,CAFmC,CAAtC;EAIA,IAAMc,UAAU,GAAG9D,WAAW,CAC1B,UAAC+D,EAAD,EAAyB;QAAtBR,MAAM;QAAES,YAAY;IACnB3B,UAAU,CAACkB,MAAD,EAASS,YAAY,KAAK,EAAjB,GAAsBd,SAAtB,GAAkCc,YAA3C,CAAV;IACAhB,OAAO,CAAC,KAAD,CAAP;EACH,CAJyB,EAK1B,CAACX,UAAD,EAAaW,OAAb,CAL0B,CAA9B,CA3DiD,CAmEjD;;EACM,SAAwDjD,QAAQ,CAClE,KADkE,CAAhE;EAAA,IAACkE,uBAAuB,QAAxB;EAAA,IAA0BC,0BAA0B,QAApD;;EAGN,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B;IAC5BD,0BAA0B,CAAC,KAAD,CAA1B;EACH,CAFD;;EAGA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B;IAC5BpB,OAAO,CAAC,KAAD,CAAP;IACAkB,0BAA0B,CAAC,IAAD,CAA1B;EACH,CAHD,CA1EiD,CA+EjD;;;EACM,SAGFnE,QAAQ,CAAC,KAAD,CAHN;EAAA,IACFsE,0BAA0B,QADxB;EAAA,IAEFC,6BAA6B,QAF3B;;EAIN,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B;IAC/BD,6BAA6B,CAAC,KAAD,CAA7B;EACH,CAFD;;EAGA,IAAME,0BAA0B,GAAG,SAA7BA,0BAA6B;IAC/BxB,OAAO,CAAC,KAAD,CAAP;IACAsB,6BAA6B,CAAC,IAAD,CAA7B;EACH,CAHD;;EAKA,IACIlB,aAAa,CAACqB,MAAd,KAAyB,CAAzB,IACAjC,iBAAiB,CAACiC,MAAlB,KAA6B,CAD7B,IAEA,CAAClC,eAHL,EAIE;IACE,OAAO,IAAP;EACH;;EACD,OACIzC,oBAAC4E,IAAD,EAAKC;IAAClD,SAAS,EAAEA;EAAZ,GAA2BmD,iBAAiB,CAACjD,IAAD,CAA5C,CAAL,EACI7B,oBAACkB,MAAD,EAAO;IACHS,SAAS,EAAC,YADP;IAEHoD,KAAK,EAAC,sBAFH;IAEyB,iBACd,MAHX;IAIHC,OAAO,EAAEtB;EAJN,CAAP,EAMI1D,oBAACS,aAAD,EAAc,IAAd,CANJ,CADJ,EASIT,oBAACM,IAAD,EAAK;IACD2C,IAAI,EAAEA,IADL;IAEDE,QAAQ,EAAEA,QAAQ,CAACU,OAFlB;IAGDoB,OAAO,EAAElB;EAHR,CAAL,EAKKT,aAAa,CAAC4B,GAAd,CAAkB,UAAC3B,aAAD,EAA6B4B,KAA7B,EAAkC;IAAK,OACtDnF,oBAACiB,oBAAD,EAAqB;MACjBmE,GAAG,EAAE7B,aAAa,CAAC9B,KAAd,CAAoBgC,MADR;MAEjBT,MAAM,EAAEO,aAFS;MAGjBxB,QAAQ,EAAEA,QAHO;MAIjBsD,MAAM,EAAErB,UAJS;MAKjBsB,SAAS,EAAEH,KAAK,KAAK;IALJ,CAArB,CADsD;EAQzD,CARA,CALL,EAcKzC,iBAAiB,CAACwC,GAAlB,CAAsB,UAACpC,UAAD,EAAaqC,KAAb,EAAkB;IACrC,cAAO,CAACrC,UAAU,CAACC,KAAZ,EAAmB;MACtBC,MAAM,EAAEZ,YADc;MAEtBI,IAAI,MAFkB;MAGtBH,OAAO,SAHe;MAItBF,gBAAgB;IAJM,CAAnB,CAAP,GAMInC,oBAACO,QAAD,EAAS;MACLyE,OAAO,EAAEN,0BADJ;MAELU,GAAG,EAAED;IAFA,CAAT,EAIKnD,SAAS,CACN,yCADM,EAEN;MACIuD,CAAC,EAAE,wBADP;MAEIC,IAAI,EAAE1C,UAAU,CAACiC;IAFrB,CAFM,CAJd,CANJ,GAmBI/E,oBAACO,QAAD,EAAS;MACLyE,OAAO,EAAE;QACL/C,QAAQ,CAAC;UACLwD,MAAM,EAAE1E,SAAS,CAAC;YACdiC,MAAM,EAAE0C,IAAI,CAAC3E,SAAL,CACJ+B,UAAU,CAACC,KAAX,CAAiBC,MADb,CADM;YAIdR,IAAI,EAAEM,UAAU,CAACC,KAAX,CAAiBP,IAAjB,CAAsBmD,KAJd;YAKdC,KAAK,EAAE9C,UAAU,CAACC,KAAX,CAAiBP,IAAjB,CAAsBoD,KALf;YAMdC,IAAI,EAAE,CANQ;YAOdxD,OAAO,EAAES,UAAU,CAACC,KAAX,CAAiBV,OAPZ;YAQdF,gBAAgB,EAAEuD,IAAI,CAAC3E,SAAL,CACd+B,UAAU,CAACC,KAAX,CAAiBZ,gBADH;UARJ,CAAD;QADZ,CAAD,CAAR;QAcAe,OAAO,CAAC,KAAD,CAAP;MACH,CAjBI;MAkBLkC,GAAG,EAAED;IAlBA,CAAT,EAoBKrC,UAAU,CAACiC,KApBhB,CAnBJ;EAyCC,CA1CJ,CAdL,EA0DKtC,eAAe,IAAI,CAACG,oBAApB,IAA4C,CAAChB,gBAA7C,IACG5B,oBAACO,QAAD,EAAS;IAACyE,OAAO,EAAEV;EAAV,CAAT,EACKtC,SAAS,CAAC,4BAAD,EAA+B;IACrCuD,CAAC,EAAE;EADkC,CAA/B,CADd,CA3DR,EAiEK9C,eAAe,IACZzC,oBAACO,QAAD,EAAS;IAACyE,OAAO,EAAE;MAAM,iBAAU,CAAC,EAAD,EAAK,EAAL,EAAS,KAAT,CAAV;IAAyB;EAAzC,CAAT,EACKhD,SAAS,CAAC,8BAAD,EAAiC;IACvCuD,CAAC,EAAE;EADoC,CAAjC,CADd,CAlER,CATJ,EAkFK,CAAC3D,gBAAD,IACG5B,0CACIA,oBAACsB,mBAAD,EAAoB;IAChB2B,IAAI,EAAEkB,uBADU;IAEhBc,OAAO,EAAEZ;EAFO,CAApB,CADJ,EAKIrE,oBAACuB,sBAAD,EAAuB;IACnB0B,IAAI,EAAEsB,0BADa;IAEnBU,OAAO,EAAER;EAFU,CAAvB,CALJ,CAnFR,CADJ;AAiGH,CApMM;;AAsMP,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAACb,EAAD,EAKzB;EAJG;EAAA,oBAAgB,mBAAG,IAAH,GAAO/B,EAAvB;EAAA,IACA4D,oBADA;EAAA,IACA1D,YAAY,mBAAG,IAAH,GAAO0D,EADnB;EAAA,IAEAC,kBAFA;EAAA,IAEAxD,UAAU,mBAAG,IAAH,GAAOwD,EAFjB;EAAA,IAGGlE,IAAI,cAJgB,kDAIhB,CAHP;;EAIE;AAAI,CALV;;AAOAL,YAAY,CAACwE,SAAb,GAAyB;EACrBjE,QAAQ,EAAE1B,SAAS,CAAC4F,MADC;EAErBnE,OAAO,EAAEzB,SAAS,CAAC6F,OAAV,CAAkB7F,SAAS,CAAC8F,IAA5B,CAFY;EAGrBhE,gBAAgB,EAAE9B,SAAS,CAAC+F,MAHP;EAIrBhE,YAAY,EAAE/B,SAAS,CAAC+F,MAJH;EAKrB7D,UAAU,EAAElC,SAAS,CAACgG,IALD;EAMrB1E,SAAS,EAAEtB,SAAS,CAAC4F;AANA,CAAzB;AAmBA,IAAMK,MAAM,GAAG,gBAAf;AAEA,IAAM1B,IAAI,GAAGpE,MAAM,CAAC,KAAD,EAAQ;EACvBgF,IAAI,EAAEc,MADiB;EAEvBC,iBAAiB,EAAE,2BAAC9E,KAAD,EAAQ+E,MAAR,EAAc;IAAK,aAAM,CAACC,IAAP;EAAW;AAF1B,CAAR,CAAN,CAGV,UAACxC,EAAD,EAAU;MAAPyC,KAAK;EAAO,OAAC;IACfC,OAAO,EAAE;EADM,CAAD;AAEhB,CALW,CAAb","names":["React","useState","useCallback","useRef","useContext","PropTypes","Menu","MenuItem","styled","ContentFilter","lodashGet","isEqual","useListContext","useResourceContext","useTranslate","stringify","useNavigate","FilterButtonMenuItem","Button","FilterContext","extractValidSavedQueries","useSavedQueries","AddSavedQueryDialog","RemoveSavedQueryDialog","FilterButton","props","filtersProp","className","disableSaveQuery","rest","filters","resource","translate","navigate","_b","displayedFilters","filterValues","perPage","setFilters","showFilter","sort","hasFilterValues","validSavedQueries","savedQueries","hasSavedCurrentQuery","some","savedQuery","value","filter","open","setOpen","anchorEl","undefined","Error","hiddenFilters","filterElement","alwaysOn","source","handleClickButton","event","preventDefault","current","currentTarget","handleRequestClose","handleShow","_a","defaultValue","addSavedQueryDialogOpen","setAddSavedQueryDialogOpen","hideAddSavedQueryDialog","showAddSavedQueryDialog","removeSavedQueryDialogOpen","setRemoveSavedQueryDialogOpen","hideRemoveSavedQueryDialog","showRemoveSavedQueryDialog","length","Root","__assign","sanitizeRestProps","label","onClick","onClose","map","index","key","onShow","autoFocus","_","name","search","JSON","field","order","page","_c","_d","propTypes","string","arrayOf","node","object","func","PREFIX","overridesResolver","styles","root","theme","display"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/filter/FilterButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    useState,\n    useCallback,\n    useRef,\n    ReactNode,\n    HtmlHTMLAttributes,\n    useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Menu, MenuItem, styled } from '@mui/material';\nimport ContentFilter from '@mui/icons-material/FilterList';\nimport lodashGet from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useListContext, useResourceContext, useTranslate } from 'ra-core';\nimport { stringify } from 'query-string';\nimport { useNavigate } from 'react-router';\n\nimport { FilterButtonMenuItem } from './FilterButtonMenuItem';\nimport { Button } from '../../button';\nimport { FilterContext } from '../FilterContext';\nimport { extractValidSavedQueries, useSavedQueries } from './useSavedQueries';\nimport { AddSavedQueryDialog } from './AddSavedQueryDialog';\nimport { RemoveSavedQueryDialog } from './RemoveSavedQueryDialog';\n\nexport const FilterButton = (props: FilterButtonProps): JSX.Element => {\n    const {\n        filters: filtersProp,\n        className,\n        disableSaveQuery,\n        ...rest\n    } = props;\n    const filters = useContext(FilterContext) || filtersProp;\n    const resource = useResourceContext(props);\n    const translate = useTranslate();\n    const [savedQueries] = useSavedQueries(resource);\n    const navigate = useNavigate();\n    const {\n        displayedFilters = {},\n        filterValues,\n        perPage,\n        setFilters,\n        showFilter,\n        sort,\n    } = useListContext(props);\n    const hasFilterValues = !isEqual(filterValues, {});\n    const validSavedQueries = extractValidSavedQueries(savedQueries);\n    const hasSavedCurrentQuery = validSavedQueries.some(savedQuery =>\n        isEqual(savedQuery.value, {\n            filter: filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        })\n    );\n    const [open, setOpen] = useState(false);\n    const anchorEl = useRef();\n\n    if (filters === undefined) {\n        throw new Error('FilterButton requires filters prop to be set');\n    }\n\n    const hiddenFilters = filters.filter(\n        (filterElement: JSX.Element) =>\n            !filterElement.props.alwaysOn &&\n            !displayedFilters[filterElement.props.source] &&\n            typeof lodashGet(filterValues, filterElement.props.source) ===\n                'undefined'\n    );\n\n    const handleClickButton = useCallback(\n        event => {\n            // This prevents ghost click.\n            event.preventDefault();\n            setOpen(true);\n            anchorEl.current = event.currentTarget;\n        },\n        [anchorEl, setOpen]\n    );\n\n    const handleRequestClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const handleShow = useCallback(\n        ({ source, defaultValue }) => {\n            showFilter(source, defaultValue === '' ? undefined : defaultValue);\n            setOpen(false);\n        },\n        [showFilter, setOpen]\n    );\n\n    // add query dialog state\n    const [addSavedQueryDialogOpen, setAddSavedQueryDialogOpen] = useState(\n        false\n    );\n    const hideAddSavedQueryDialog = (): void => {\n        setAddSavedQueryDialogOpen(false);\n    };\n    const showAddSavedQueryDialog = (): void => {\n        setOpen(false);\n        setAddSavedQueryDialogOpen(true);\n    };\n\n    // remove query dialog state\n    const [\n        removeSavedQueryDialogOpen,\n        setRemoveSavedQueryDialogOpen,\n    ] = useState(false);\n    const hideRemoveSavedQueryDialog = (): void => {\n        setRemoveSavedQueryDialogOpen(false);\n    };\n    const showRemoveSavedQueryDialog = (): void => {\n        setOpen(false);\n        setRemoveSavedQueryDialogOpen(true);\n    };\n\n    if (\n        hiddenFilters.length === 0 &&\n        validSavedQueries.length === 0 &&\n        !hasFilterValues\n    ) {\n        return null;\n    }\n    return (\n        <Root className={className} {...sanitizeRestProps(rest)}>\n            <Button\n                className=\"add-filter\"\n                label=\"ra.action.add_filter\"\n                aria-haspopup=\"true\"\n                onClick={handleClickButton}\n            >\n                <ContentFilter />\n            </Button>\n            <Menu\n                open={open}\n                anchorEl={anchorEl.current}\n                onClose={handleRequestClose}\n            >\n                {hiddenFilters.map((filterElement: JSX.Element, index) => (\n                    <FilterButtonMenuItem\n                        key={filterElement.props.source}\n                        filter={filterElement}\n                        resource={resource}\n                        onShow={handleShow}\n                        autoFocus={index === 0}\n                    />\n                ))}\n                {validSavedQueries.map((savedQuery, index) =>\n                    isEqual(savedQuery.value, {\n                        filter: filterValues,\n                        sort,\n                        perPage,\n                        displayedFilters,\n                    }) ? (\n                        <MenuItem\n                            onClick={showRemoveSavedQueryDialog}\n                            key={index}\n                        >\n                            {translate(\n                                'ra.saved_queries.remove_label_with_name',\n                                {\n                                    _: 'Remove query \"%{name}\"',\n                                    name: savedQuery.label,\n                                }\n                            )}\n                        </MenuItem>\n                    ) : (\n                        <MenuItem\n                            onClick={(): void => {\n                                navigate({\n                                    search: stringify({\n                                        filter: JSON.stringify(\n                                            savedQuery.value.filter\n                                        ),\n                                        sort: savedQuery.value.sort.field,\n                                        order: savedQuery.value.sort.order,\n                                        page: 1,\n                                        perPage: savedQuery.value.perPage,\n                                        displayedFilters: JSON.stringify(\n                                            savedQuery.value.displayedFilters\n                                        ),\n                                    }),\n                                });\n                                setOpen(false);\n                            }}\n                            key={index}\n                        >\n                            {savedQuery.label}\n                        </MenuItem>\n                    )\n                )}\n                {hasFilterValues && !hasSavedCurrentQuery && !disableSaveQuery && (\n                    <MenuItem onClick={showAddSavedQueryDialog}>\n                        {translate('ra.saved_queries.new_label', {\n                            _: 'Save current query...',\n                        })}\n                    </MenuItem>\n                )}\n                {hasFilterValues && (\n                    <MenuItem onClick={() => setFilters({}, {}, false)}>\n                        {translate('ra.action.remove_all_filters', {\n                            _: 'Remove all filters',\n                        })}\n                    </MenuItem>\n                )}\n            </Menu>\n            {!disableSaveQuery && (\n                <>\n                    <AddSavedQueryDialog\n                        open={addSavedQueryDialogOpen}\n                        onClose={hideAddSavedQueryDialog}\n                    />\n                    <RemoveSavedQueryDialog\n                        open={removeSavedQueryDialogOpen}\n                        onClose={hideRemoveSavedQueryDialog}\n                    />\n                </>\n            )}\n        </Root>\n    );\n};\n\nconst sanitizeRestProps = ({\n    displayedFilters = null,\n    filterValues = null,\n    showFilter = null,\n    ...rest\n}) => rest;\n\nFilterButton.propTypes = {\n    resource: PropTypes.string,\n    filters: PropTypes.arrayOf(PropTypes.node),\n    displayedFilters: PropTypes.object,\n    filterValues: PropTypes.object,\n    showFilter: PropTypes.func,\n    className: PropTypes.string,\n};\n\nexport interface FilterButtonProps extends HtmlHTMLAttributes<HTMLDivElement> {\n    className?: string;\n    resource?: string;\n    filterValues?: any;\n    showFilter?: (filterName: string, defaultValue: any) => void;\n    displayedFilters?: any;\n    filters?: ReactNode[];\n    disableSaveQuery?: boolean;\n}\n\nconst PREFIX = 'RaFilterButton';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'inline-block',\n}));\n"]},"metadata":{},"sourceType":"module"}
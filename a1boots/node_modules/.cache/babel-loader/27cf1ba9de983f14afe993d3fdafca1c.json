{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { parsePath } from 'history';\nimport { useBasename } from './useBasename';\nimport { useCreatePath } from './useCreatePath';\n/**\n * Hook for Redirection Side Effect\n *\n * @example\n *\n * const redirect = useRedirect();\n * // redirect to list view\n * redirect('list', 'posts');\n * // redirect to edit view\n * redirect('edit', 'posts', 123);\n * // redirect to edit view with state data\n * redirect('edit', 'comments', 123, {}, { record: { post_id: record.id } });\n * // do not redirect\n * redirect(false);\n * // redirect to the result of a function\n * redirect((resource, id, data) => ...)\n */\n\nexport var useRedirect = function () {\n  var navigate = useNavigate();\n  var basename = useBasename();\n  var createPath = useCreatePath();\n  return useCallback(function (redirectTo, resource, id, data, state) {\n    if (resource === void 0) {\n      resource = '';\n    }\n\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (!redirectTo) {\n      return;\n    } else if (typeof redirectTo === 'function') {\n      var target = redirectTo(resource, id, data);\n      var absoluteTarget = typeof target === 'string' ? \"\".concat(basename, \"/\").concat(target) : __assign({\n        pathname: \"\".concat(basename, \"/\").concat(target.pathname)\n      }, target);\n      navigate(typeof absoluteTarget === 'string' ? parsePath(absoluteTarget) : absoluteTarget, {\n        state: __assign({\n          _scrollToTop: true\n        }, state)\n      });\n      return;\n    } else if (typeof redirectTo === 'string' && redirectTo.startsWith('http') && window) {\n      // redirection to an absolute url\n      // history doesn't handle that case, so we handle it by hand\n      window.location.href = redirectTo;\n      return;\n    } else {\n      // redirection to an internal link\n      navigate(createPath({\n        resource: resource,\n        id: id,\n        type: redirectTo\n      }), {\n        state: __assign({\n          _scrollToTop: true\n        }, state)\n      });\n      return;\n    }\n  }, [navigate, basename, createPath]);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAAgC,kBAAhC;AACA,SAASC,SAAT,QAA0B,SAA1B;AAGA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAAyBC,aAAzB,QAA8C,iBAA9C;AAWA;;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAMC,WAAW,GAAG;EACvB,IAAMC,QAAQ,GAAGL,WAAW,EAA5B;EACA,IAAMM,QAAQ,GAAGJ,WAAW,EAA5B;EACA,IAAMK,UAAU,GAAGJ,aAAa,EAAhC;EAEA,OAAOJ,WAAW,CACd,UACIS,UADJ,EAEIC,QAFJ,EAGIC,EAHJ,EAIIC,IAJJ,EAKIC,KALJ,EAKsB;IAHlB;MAAAH;IAAqB;;IAGrB;MAAAG;IAAkB;;IAElB,IAAI,CAACJ,UAAL,EAAiB;MACb;IACH,CAFD,MAEO,IAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;MACzC,IAAMK,MAAM,GAAOL,UAAU,CAACC,QAAD,EAAWC,EAAX,EAAeC,IAAf,CAA7B;MACA,IAAMG,cAAc,GAChB,OAAOD,MAAP,KAAkB,QAAlB,GACM,UAAGP,QAAH,EAAW,GAAX,EAAWS,MAAX,CAAeF,MAAf,CADN,GAEKG;QACKC,QAAQ,EAAE,UAAGX,QAAH,EAAW,GAAX,EAAWS,MAAX,CAAeF,MAAM,CAACI,QAAtB;MADf,GAEQJ,MAFR,CAHT;MAOAR,QAAQ,CACJ,OAAOS,cAAP,KAA0B,QAA1B,GACMb,SAAS,CAACa,cAAD,CADf,GAEMA,cAHF,EAIJ;QACIF,KAAK;UAAIM,YAAY,EAAE;QAAlB,GAA2BN,KAA3B;MADT,CAJI,CAAR;MAQA;IACH,CAlBM,MAkBA,IACH,OAAOJ,UAAP,KAAsB,QAAtB,IACAA,UAAU,CAACW,UAAX,CAAsB,MAAtB,CADA,IAEAC,MAHG,EAIL;MACE;MACA;MACAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBd,UAAvB;MACA;IACH,CATM,MASA;MACH;MACAH,QAAQ,CAACE,UAAU,CAAC;QAAEE,QAAQ,UAAV;QAAYC,EAAE,IAAd;QAAgBa,IAAI,EAAEf;MAAtB,CAAD,CAAX,EAAiD;QACrDI,KAAK;UAAIM,YAAY,EAAE;QAAlB,GAA2BN,KAA3B;MADgD,CAAjD,CAAR;MAGA;IACH;EACJ,CA5Ca,EA6Cd,CAACP,QAAD,EAAWC,QAAX,EAAqBC,UAArB,CA7Cc,CAAlB;AA+CH,CApDM","names":["useCallback","useNavigate","parsePath","useBasename","useCreatePath","useRedirect","navigate","basename","createPath","redirectTo","resource","id","data","state","target","absoluteTarget","concat","__assign","pathname","_scrollToTop","startsWith","window","location","href","type"],"sources":["/var/www/a1boots/node_modules/ra-core/src/routing/useRedirect.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { useNavigate, To } from 'react-router-dom';\nimport { parsePath } from 'history';\n\nimport { Identifier, RaRecord } from '../types';\nimport { useBasename } from './useBasename';\nimport { CreatePathType, useCreatePath } from './useCreatePath';\n\ntype RedirectToFunction = (\n    resource?: string,\n    id?: Identifier,\n    data?: Partial<RaRecord>,\n    state?: object\n) => To;\n\nexport type RedirectionSideEffect = CreatePathType | false | RedirectToFunction;\n\n/**\n * Hook for Redirection Side Effect\n *\n * @example\n *\n * const redirect = useRedirect();\n * // redirect to list view\n * redirect('list', 'posts');\n * // redirect to edit view\n * redirect('edit', 'posts', 123);\n * // redirect to edit view with state data\n * redirect('edit', 'comments', 123, {}, { record: { post_id: record.id } });\n * // do not redirect\n * redirect(false);\n * // redirect to the result of a function\n * redirect((resource, id, data) => ...)\n */\nexport const useRedirect = () => {\n    const navigate = useNavigate();\n    const basename = useBasename();\n    const createPath = useCreatePath();\n\n    return useCallback(\n        (\n            redirectTo: RedirectionSideEffect,\n            resource: string = '',\n            id?: Identifier,\n            data?: Partial<RaRecord>,\n            state: object = {}\n        ) => {\n            if (!redirectTo) {\n                return;\n            } else if (typeof redirectTo === 'function') {\n                const target: To = redirectTo(resource, id, data);\n                const absoluteTarget =\n                    typeof target === 'string'\n                        ? `${basename}/${target}`\n                        : {\n                              pathname: `${basename}/${target.pathname}`,\n                              ...target,\n                          };\n                navigate(\n                    typeof absoluteTarget === 'string'\n                        ? parsePath(absoluteTarget)\n                        : absoluteTarget,\n                    {\n                        state: { _scrollToTop: true, ...state },\n                    }\n                );\n                return;\n            } else if (\n                typeof redirectTo === 'string' &&\n                redirectTo.startsWith('http') &&\n                window\n            ) {\n                // redirection to an absolute url\n                // history doesn't handle that case, so we handle it by hand\n                window.location.href = redirectTo;\n                return;\n            } else {\n                // redirection to an internal link\n                navigate(createPath({ resource, id, type: redirectTo }), {\n                    state: { _scrollToTop: true, ...state },\n                });\n                return;\n            }\n        },\n        [navigate, basename, createPath]\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
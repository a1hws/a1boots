{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { TranslatableContextProvider, useTranslatable } from 'ra-core';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </Translatable>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </Translatable>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to Material UI tabs.\n */\n\nexport var TranslatableInputs = function TranslatableInputs(props) {\n  var className = props.className,\n      defaultLocale = props.defaultLocale,\n      locales = props.locales,\n      _a = props.groupKey,\n      groupKey = _a === void 0 ? '' : _a,\n      _b = props.selector,\n      selector = _b === void 0 ? React.createElement(TranslatableInputsTabs, {\n    groupKey: groupKey\n  }) : _b,\n      children = props.children,\n      variant = props.variant,\n      margin = props.margin;\n  var context = useTranslatable({\n    defaultLocale: defaultLocale,\n    locales: locales\n  });\n  return React.createElement(Root, {\n    className: className\n  }, React.createElement(TranslatableContextProvider, {\n    value: context\n  }, selector, locales.map(function (locale) {\n    return React.createElement(TranslatableInputsTabContent, {\n      key: locale,\n      locale: locale,\n      groupKey: groupKey,\n      variant: variant,\n      margin: margin\n    }, children);\n  })));\n};\nvar PREFIX = 'RaTranslatableInputs';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5)\n  };\n});","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AAEA,SACIC,2BADJ,EAEIC,eAFJ,QAIO,SAJP;AAKA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,4BAAT,QAA6C,gCAA7C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAC9BC,KAD8B,EACA;EAG1B,aAAS,GAQTA,KAAK,UARL;EAAA,IACAC,aAAa,GAObD,KAAK,cARL;EAAA,IAEAE,OAAO,GAMPF,KAAK,QARL;EAAA,IAGAG,KAKAH,KAAK,SARL;EAAA,IAGAI,QAAQ,mBAAG,EAAH,GAAKD,EAHb;EAAA,IAIAE,KAIAL,KAAK,SARL;EAAA,IAIAM,QAAQ,mBAAGb,oBAACI,sBAAD,EAAuB;IAACO,QAAQ,EAAEA;EAAX,CAAvB,CAAH,GAAiDC,EAJzD;EAAA,IAKAE,QAAQ,GAGRP,KAAK,SARL;EAAA,IAMAQ,OAAO,GAEPR,KAAK,QARL;EAAA,IAOAS,MAAM,GACNT,KAAK,OARL;EASJ,IAAMU,OAAO,GAAGd,eAAe,CAAC;IAAEK,aAAa,eAAf;IAAiBC,OAAO;EAAxB,CAAD,CAA/B;EAEA,OACIT,oBAACkB,IAAD,EAAK;IAACC,SAAS,EAAEA;EAAZ,CAAL,EACInB,oBAACE,2BAAD,EAA4B;IAACkB,KAAK,EAAEH;EAAR,CAA5B,EACKJ,QADL,EAEKJ,OAAO,CAACY,GAAR,CAAY,kBAAM;IAAI,OACnBrB,oBAACK,4BAAD,EAA6B;MACzBiB,GAAG,EAAEC,MADoB;MAEzBA,MAAM,EAAEA,MAFiB;MAGzBZ,QAAQ,EAAEA,QAHe;MAIzBI,OAAO,EAAEA,OAJgB;MAKzBC,MAAM,EAAEA;IALiB,CAA7B,EAOKF,QAPL,CADmB;EAUtB,CAVA,CAFL,CADJ,CADJ;AAkBH,CAjCM;AA4CP,IAAMU,MAAM,GAAG,sBAAf;AAEA,IAAMN,IAAI,GAAGjB,MAAM,CAAC,KAAD,EAAQ;EACvBwB,IAAI,EAAED,MADiB;EAEvBE,iBAAiB,EAAE,2BAACnB,KAAD,EAAQoB,MAAR,EAAc;IAAK,aAAM,CAACC,IAAP;EAAW;AAF1B,CAAR,CAAN,CAGV,UAAClB,EAAD,EAAU;MAAPmB,KAAK;EAAO,OAAC;IACfC,QAAQ,EAAE,CADK;IAEfC,SAAS,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CAFI;IAGfC,YAAY,EAAEJ,KAAK,CAACG,OAAN,CAAc,GAAd;EAHC,CAAD;AAIhB,CAPW,CAAb","names":["React","styled","TranslatableContextProvider","useTranslatable","TranslatableInputsTabs","TranslatableInputsTabContent","TranslatableInputs","props","defaultLocale","locales","_a","groupKey","_b","selector","children","variant","margin","context","Root","className","value","map","key","locale","PREFIX","name","overridesResolver","styles","root","theme","flexGrow","marginTop","spacing","marginBottom"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/TranslatableInputs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement, ReactNode } from 'react';\nimport {\n    TranslatableContextProvider,\n    useTranslatable,\n    UseTranslatableOptions,\n} from 'ra-core';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\n\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </Translatable>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </Translatable>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to Material UI tabs.\n */\nexport const TranslatableInputs = (\n    props: TranslatableInputsProps\n): ReactElement => {\n    const {\n        className,\n        defaultLocale,\n        locales,\n        groupKey = '',\n        selector = <TranslatableInputsTabs groupKey={groupKey} />,\n        children,\n        variant,\n        margin,\n    } = props;\n    const context = useTranslatable({ defaultLocale, locales });\n\n    return (\n        <Root className={className}>\n            <TranslatableContextProvider value={context}>\n                {selector}\n                {locales.map(locale => (\n                    <TranslatableInputsTabContent\n                        key={locale}\n                        locale={locale}\n                        groupKey={groupKey}\n                        variant={variant}\n                        margin={margin}\n                    >\n                        {children}\n                    </TranslatableInputsTabContent>\n                ))}\n            </TranslatableContextProvider>\n        </Root>\n    );\n};\n\nexport interface TranslatableInputsProps extends UseTranslatableOptions {\n    className?: string;\n    selector?: ReactElement;\n    children: ReactNode;\n    groupKey?: string;\n    margin?: 'none' | 'normal' | 'dense';\n    variant?: 'standard' | 'outlined' | 'filled';\n}\n\nconst PREFIX = 'RaTranslatableInputs';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5),\n}));\n"]},"metadata":{},"sourceType":"module"}
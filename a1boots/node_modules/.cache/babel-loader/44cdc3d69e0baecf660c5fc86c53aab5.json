{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar _a;\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nexport var ImageField = function ImageField(props) {\n  var _a;\n\n  var className = props.className,\n      emptyText = props.emptyText,\n      source = props.source,\n      src = props.src,\n      title = props.title,\n      rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"src\", \"title\"]);\n\n  var record = useRecordContext(props);\n  var sourceValue = get(record, source);\n  var translate = useTranslate();\n\n  if (!sourceValue) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : React.createElement(Typography, __assign({\n      component: \"div\",\n      className: className\n    }, sanitizeFieldRestProps(rest)));\n  }\n\n  if (Array.isArray(sourceValue)) {\n    return React.createElement(Root, __assign({\n      className: className\n    }, sanitizeFieldRestProps(rest)), React.createElement(\"ul\", {\n      className: ImageFieldClasses.list\n    }, sourceValue.map(function (file, index) {\n      var fileTitleValue = get(file, title) || title;\n      var srcValue = get(file, src) || title;\n      return React.createElement(\"li\", {\n        key: index\n      }, React.createElement(\"img\", {\n        alt: fileTitleValue,\n        title: fileTitleValue,\n        src: srcValue,\n        className: ImageFieldClasses.image\n      }));\n    })));\n  }\n\n  var titleValue = ((_a = get(record, title)) === null || _a === void 0 ? void 0 : _a.toString()) || title;\n  return React.createElement(Root, __assign({\n    className: className\n  }, sanitizeFieldRestProps(rest)), React.createElement(\"img\", {\n    title: titleValue,\n    alt: titleValue,\n    src: sourceValue === null || sourceValue === void 0 ? void 0 : sourceValue.toString(),\n    className: ImageFieldClasses.image\n  }));\n}; // What? TypeScript loses the displayName if we don't set it explicitly\n\nImageField.displayName = 'ImageField';\nImageField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  src: PropTypes.string,\n  title: PropTypes.string\n});\nvar PREFIX = 'RaImageField';\nexport var ImageFieldClasses = {\n  list: \"\".concat(PREFIX, \"-list\"),\n  image: \"\".concat(PREFIX, \"-image\")\n};\nvar Root = styled(Box, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"& .\".concat(ImageFieldClasses.list)] = {\n  display: 'flex',\n  listStyleType: 'none'\n}, _a[\"& .\".concat(ImageFieldClasses.image)] = {\n  margin: '0.25rem',\n  width: 200,\n  height: 100,\n  objectFit: 'contain'\n}, _a));","map":{"version":3,"mappings":"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","names":["React","styled","Box","Typography","PropTypes","get","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","ImageField","props","emptyText","source","src","title","rest","record","sourceValue","translate","__assign","component","variant","className","_","Array","isArray","Root","ImageFieldClasses","list","map","file","index","fileTitleValue","srcValue","key","alt","image","titleValue","_a","toString","displayName","propTypes","string","PREFIX","name","overridesResolver","styles","root","display","listStyleType","margin","width","height","objectFit"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/ImageField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { SxProps } from '@mui/system';\n\nexport const ImageField = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: ImageFieldProps<RecordType>\n) => {\n    const { className, emptyText, source, src, title, ...rest } = props;\n    const record = useRecordContext(props);\n    const sourceValue = get(record, source);\n    const translate = useTranslate();\n\n    if (!sourceValue) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : (\n            <Typography\n                component=\"div\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            />\n        );\n    }\n\n    if (Array.isArray(sourceValue)) {\n        return (\n            <Root className={className} {...sanitizeFieldRestProps(rest)}>\n                <ul className={ImageFieldClasses.list}>\n                    {sourceValue.map((file, index) => {\n                        const fileTitleValue = get(file, title) || title;\n                        const srcValue = get(file, src) || title;\n\n                        return (\n                            <li key={index}>\n                                <img\n                                    alt={fileTitleValue}\n                                    title={fileTitleValue}\n                                    src={srcValue}\n                                    className={ImageFieldClasses.image}\n                                />\n                            </li>\n                        );\n                    })}\n                </ul>\n            </Root>\n        );\n    }\n\n    const titleValue = get(record, title)?.toString() || title;\n\n    return (\n        <Root className={className} {...sanitizeFieldRestProps(rest)}>\n            <img\n                title={titleValue}\n                alt={titleValue}\n                src={sourceValue?.toString()}\n                className={ImageFieldClasses.image}\n            />\n        </Root>\n    );\n};\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nImageField.displayName = 'ImageField';\n\nImageField.propTypes = {\n    ...fieldPropTypes,\n    src: PropTypes.string,\n    title: PropTypes.string,\n};\n\nconst PREFIX = 'RaImageField';\n\nexport const ImageFieldClasses = {\n    list: `${PREFIX}-list`,\n    image: `${PREFIX}-image`,\n};\n\nconst Root = styled(Box, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${ImageFieldClasses.list}`]: {\n        display: 'flex',\n        listStyleType: 'none',\n    },\n    [`& .${ImageFieldClasses.image}`]: {\n        margin: '0.25rem',\n        width: 200,\n        height: 100,\n        objectFit: 'contain',\n    },\n});\n\nexport interface ImageFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType> {\n    src?: string;\n    title?: string;\n    sx?: SxProps;\n}\n"]},"metadata":{},"sourceType":"module"}
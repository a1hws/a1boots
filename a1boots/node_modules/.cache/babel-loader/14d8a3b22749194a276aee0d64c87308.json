{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useParams } from 'react-router-dom';\nimport { useAuthenticated } from '../../auth';\nimport { useGetOne, useRefresh } from '../../dataProvider';\nimport { useTranslate } from '../../i18n';\nimport { useRedirect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport { useResourceContext, useGetResourceLabel, useGetRecordRepresentation } from '../../core';\n/**\n * Prepare data for the Show view.\n *\n * useShowController does a few things:\n * - it grabs the id from the URL and the resource name from the ResourceContext,\n * - it fetches the record via useGetOne,\n * - it prepares the page title.\n *\n * @param {Object} props The props passed to the Show component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Show view\n *\n * @example\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = () => {\n *     const controllerProps = useShowController();\n *     return <ShowView {...controllerProps} />;\n * };\n *\n * @example // useShowController can also take its parameters from props\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = () => {\n *     const controllerProps = useShowController({ resource: 'posts', id: 1234 });\n *     return <ShowView {...controllerProps} />;\n * };\n */\n\nexport var useShowController = function (props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var disableAuthentication = props.disableAuthentication,\n      propsId = props.id,\n      _a = props.queryOptions,\n      queryOptions = _a === void 0 ? {} : _a;\n  useAuthenticated({\n    enabled: !disableAuthentication\n  });\n  var resource = useResourceContext(props);\n  var getRecordRepresentation = useGetRecordRepresentation(resource);\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n  var routeId = useParams().id;\n  var id = propsId != null ? propsId : decodeURIComponent(routeId);\n\n  var meta = queryOptions.meta,\n      otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n\n  var _b = useGetOne(resource, {\n    id: id,\n    meta: meta\n  }, __assign({\n    onError: function () {\n      notify('ra.notification.item_doesnt_exist', {\n        type: 'error'\n      });\n      redirect('list', resource);\n      refresh();\n    },\n    retry: false\n  }, otherQueryOptions)),\n      record = _b.data,\n      error = _b.error,\n      isLoading = _b.isLoading,\n      isFetching = _b.isFetching,\n      refetch = _b.refetch; // eslint-disable-next-line eqeqeq\n\n\n  if (record && record.id && record.id != id) {\n    throw new Error(\"useShowController: Fetched record's id attribute (\".concat(record.id, \") must match the requested 'id' (\").concat(id, \")\"));\n  }\n\n  var getResourceLabel = useGetResourceLabel();\n  var recordRepresentation = getRecordRepresentation(record);\n  var defaultTitle = translate('ra.page.show', {\n    name: getResourceLabel(resource, 1),\n    id: id,\n    record: record,\n    recordRepresentation: typeof recordRepresentation === 'string' ? recordRepresentation : ''\n  });\n  return {\n    defaultTitle: defaultTitle,\n    error: error,\n    isLoading: isLoading,\n    isFetching: isFetching,\n    record: record,\n    refetch: refetch,\n    resource: resource\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,kBAA1B;AAGA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,SAASC,SAAT,EAAoBC,UAApB,QAA0D,oBAA1D;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SACIC,kBADJ,EAEIC,mBAFJ,EAGIC,0BAHJ,QAIO,YAJP;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAO,IAAMC,iBAAiB,GAAG,UAC7BC,KAD6B,EACc;EAA3C;IAAAA;EAA2C;;EAEnC,yBAAqB,GAAqCA,KAAK,sBAA/D;EAAA,IAA2BC,OAAO,GAAwBD,KAAK,GAA/D;EAAA,IAAoCE,KAAsBF,KAAK,aAA/D;EAAA,IAAoCG,YAAY,mBAAG,EAAH,GAAKD,EAArD;EACRZ,gBAAgB,CAAC;IAAEc,OAAO,EAAE,CAACC;EAAZ,CAAD,CAAhB;EACA,IAAMC,QAAQ,GAAGV,kBAAkB,CAACI,KAAD,CAAnC;EACA,IAAMO,uBAAuB,GAAGT,0BAA0B,CAACQ,QAAD,CAA1D;EACA,IAAME,SAAS,GAAGf,YAAY,EAA9B;EACA,IAAMgB,MAAM,GAAGd,SAAS,EAAxB;EACA,IAAMe,QAAQ,GAAGhB,WAAW,EAA5B;EACA,IAAMiB,OAAO,GAAGnB,UAAU,EAA1B;EACQ,IAAIoB,OAAO,GAAKvB,SAAS,GAAQwB,EAAjC;EACR,IAAMA,EAAE,GAAGZ,OAAO,IAAI,IAAX,GAAkBA,OAAlB,GAA4Ba,kBAAkB,CAACF,OAAD,CAAzD;;EACQ,QAAI,GAA2BT,YAAY,KAA3C;EAAA,IAASY,iBAAiB,UAAKZ,YAAL,EAA5B,QAA4B,CAA1B;;EAEF,SAA0DZ,SAAS,CAGrEe,QAHqE,EAIrE;IAAEO,EAAE,IAAJ;IAAMG,IAAI;EAAV,CAJqE,EAIzDC;IAERC,OAAO,EAAE;MACLT,MAAM,CAAC,mCAAD,EAAsC;QACxCU,IAAI,EAAE;MADkC,CAAtC,CAAN;MAGAT,QAAQ,CAAC,MAAD,EAASJ,QAAT,CAAR;MACAK,OAAO;IACV,CARO;IASRS,KAAK,EAAE;EATC,GAULL,iBAVK,CAJyD,CAAnE;EAAA,IAAQM,MAAM,UAAd;EAAA,IAAgBC,KAAK,WAArB;EAAA,IAAuBC,SAAS,eAAhC;EAAA,IAAkCC,UAAU,gBAA5C;EAAA,IAA8CC,OAAO,aAArD,CAdqC,CAgC3C;;;EACA,IAAIJ,MAAM,IAAIA,MAAM,CAACR,EAAjB,IAAuBQ,MAAM,CAACR,EAAP,IAAaA,EAAxC,EAA4C;IACxC,MAAM,IAAIa,KAAJ,CACF,4DAAqDL,MAAM,CAACR,EAA5D,EAA8D,mCAA9D,EAA8Dc,MAA9D,CAAkGd,EAAlG,EAAoG,GAApG,CADE,CAAN;EAGH;;EAED,IAAMe,gBAAgB,GAAG/B,mBAAmB,EAA5C;EACA,IAAMgC,oBAAoB,GAAGtB,uBAAuB,CAACc,MAAD,CAApD;EACA,IAAMS,YAAY,GAAGtB,SAAS,CAAC,cAAD,EAAiB;IAC3CuB,IAAI,EAAEH,gBAAgB,CAACtB,QAAD,EAAW,CAAX,CADqB;IAE3CO,EAAE,IAFyC;IAG3CQ,MAAM,QAHqC;IAI3CQ,oBAAoB,EAChB,OAAOA,oBAAP,KAAgC,QAAhC,GACMA,oBADN,GAEM;EAPiC,CAAjB,CAA9B;EAUA,OAAO;IACHC,YAAY,cADT;IAEHR,KAAK,OAFF;IAGHC,SAAS,WAHN;IAIHC,UAAU,YAJP;IAKHH,MAAM,QALH;IAMHI,OAAO,SANJ;IAOHnB,QAAQ;EAPL,CAAP;AASH,CA7DM","names":["useParams","useAuthenticated","useGetOne","useRefresh","useTranslate","useRedirect","useNotify","useResourceContext","useGetResourceLabel","useGetRecordRepresentation","useShowController","props","propsId","_a","queryOptions","enabled","disableAuthentication","resource","getRecordRepresentation","translate","notify","redirect","refresh","routeId","id","decodeURIComponent","otherQueryOptions","meta","__assign","onError","type","retry","record","error","isLoading","isFetching","refetch","Error","concat","getResourceLabel","recordRepresentation","defaultTitle","name"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/show/useShowController.ts"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { UseQueryOptions } from 'react-query';\n\nimport { useAuthenticated } from '../../auth';\nimport { RaRecord } from '../../types';\nimport { useGetOne, useRefresh, UseGetOneHookValue } from '../../dataProvider';\nimport { useTranslate } from '../../i18n';\nimport { useRedirect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport {\n    useResourceContext,\n    useGetResourceLabel,\n    useGetRecordRepresentation,\n} from '../../core';\n\n/**\n * Prepare data for the Show view.\n *\n * useShowController does a few things:\n * - it grabs the id from the URL and the resource name from the ResourceContext,\n * - it fetches the record via useGetOne,\n * - it prepares the page title.\n *\n * @param {Object} props The props passed to the Show component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Show view\n *\n * @example\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = () => {\n *     const controllerProps = useShowController();\n *     return <ShowView {...controllerProps} />;\n * };\n *\n * @example // useShowController can also take its parameters from props\n *\n * import { useShowController } from 'react-admin';\n * import ShowView from './ShowView';\n *\n * const MyShow = () => {\n *     const controllerProps = useShowController({ resource: 'posts', id: 1234 });\n *     return <ShowView {...controllerProps} />;\n * };\n */\nexport const useShowController = <RecordType extends RaRecord = any>(\n    props: ShowControllerProps<RecordType> = {}\n): ShowControllerResult<RecordType> => {\n    const { disableAuthentication, id: propsId, queryOptions = {} } = props;\n    useAuthenticated({ enabled: !disableAuthentication });\n    const resource = useResourceContext(props);\n    const getRecordRepresentation = useGetRecordRepresentation(resource);\n    const translate = useTranslate();\n    const notify = useNotify();\n    const redirect = useRedirect();\n    const refresh = useRefresh();\n    const { id: routeId } = useParams<'id'>();\n    const id = propsId != null ? propsId : decodeURIComponent(routeId);\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    const { data: record, error, isLoading, isFetching, refetch } = useGetOne<\n        RecordType\n    >(\n        resource,\n        { id, meta },\n        {\n            onError: () => {\n                notify('ra.notification.item_doesnt_exist', {\n                    type: 'error',\n                });\n                redirect('list', resource);\n                refresh();\n            },\n            retry: false,\n            ...otherQueryOptions,\n        }\n    );\n\n    // eslint-disable-next-line eqeqeq\n    if (record && record.id && record.id != id) {\n        throw new Error(\n            `useShowController: Fetched record's id attribute (${record.id}) must match the requested 'id' (${id})`\n        );\n    }\n\n    const getResourceLabel = useGetResourceLabel();\n    const recordRepresentation = getRecordRepresentation(record);\n    const defaultTitle = translate('ra.page.show', {\n        name: getResourceLabel(resource, 1),\n        id,\n        record,\n        recordRepresentation:\n            typeof recordRepresentation === 'string'\n                ? recordRepresentation\n                : '',\n    });\n\n    return {\n        defaultTitle,\n        error,\n        isLoading,\n        isFetching,\n        record,\n        refetch,\n        resource,\n    };\n};\n\nexport interface ShowControllerProps<RecordType extends RaRecord = any> {\n    disableAuthentication?: boolean;\n    id?: RecordType['id'];\n    queryOptions?: UseQueryOptions<RecordType> & { meta?: any };\n    resource?: string;\n}\n\nexport interface ShowControllerResult<RecordType extends RaRecord = any> {\n    defaultTitle: string;\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    data?: RecordType;\n    error?: any;\n    isFetching: boolean;\n    isLoading: boolean;\n    resource: string;\n    record?: RecordType;\n    refetch: UseGetOneHookValue<RecordType>['refetch'];\n}\n"]},"metadata":{},"sourceType":"module"}
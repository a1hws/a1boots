{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useReferenceManyFieldController, ListContextProvider, ResourceContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\n\nexport var ReferenceManyField = function (props) {\n  var children = props.children,\n      filter = props.filter,\n      _a = props.page,\n      page = _a === void 0 ? 1 : _a,\n      _b = props.pagination,\n      pagination = _b === void 0 ? null : _b,\n      perPage = props.perPage,\n      reference = props.reference,\n      resource = props.resource,\n      sort = props.sort,\n      source = props.source,\n      target = props.target;\n  var record = useRecordContext(props);\n  var controllerProps = useReferenceManyFieldController({\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source,\n    target: target\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, children, pagination));\n};\nReferenceManyField.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  label: fieldPropTypes.label,\n  perPage: PropTypes.number,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  target: PropTypes.string.isRequired\n};\nReferenceManyField.defaultProps = {\n  filter: {},\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  source: 'id'\n}; // FIXME kept for backwards compatibility, unused, to be removed in v5\n\nexport var ReferenceManyFieldView = function (props) {\n  var children = props.children,\n      pagination = props.pagination;\n\n  if (process.env.NODE_ENV !== 'production') {\n    console.error('<ReferenceManyFieldView> is deprecated, use <ReferenceManyField> directly');\n  }\n\n  return React.createElement(React.Fragment, null, children, pagination && props.total !== undefined ? pagination : null);\n};\nReferenceManyFieldView.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.any,\n  isLoading: PropTypes.bool,\n  pagination: PropTypes.element,\n  reference: PropTypes.string,\n  setSort: PropTypes.func\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","useReferenceManyFieldController","ListContextProvider","ResourceContextProvider","useRecordContext","fieldPropTypes","ReferenceManyField","props","filter","_a","page","_b","pagination","perPage","reference","resource","sort","source","target","record","controllerProps","value","children","propTypes","node","isRequired","className","string","object","label","number","any","sortBy","sortByOrder","exact","field","order","defaultProps","ReferenceManyFieldView","process","env","NODE_ENV","console","error","total","undefined","element","data","isLoading","bool","setSort","func"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/ReferenceManyField.tsx"],"sourcesContent":["import React, { FC, ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    FilterPayload,\n    SortPayload,\n    useReferenceManyFieldController,\n    ListContextProvider,\n    ListControllerResult,\n    ResourceContextProvider,\n    useRecordContext,\n    RaRecord,\n} from 'ra-core';\n\nimport { fieldPropTypes, FieldProps } from './types';\n\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport const ReferenceManyField = <\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord\n>(\n    props: ReferenceManyFieldProps<RecordType>\n) => {\n    const {\n        children,\n        filter,\n        page = 1,\n        pagination = null,\n        perPage,\n        reference,\n        resource,\n        sort,\n        source,\n        target,\n    } = props;\n    const record = useRecordContext(props);\n\n    const controllerProps = useReferenceManyFieldController<\n        RecordType,\n        ReferenceRecordType\n    >({\n        filter,\n        page,\n        perPage,\n        record,\n        reference,\n        resource,\n        sort,\n        source,\n        target,\n    });\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ListContextProvider value={controllerProps}>\n                {children}\n                {pagination}\n            </ListContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nexport interface ReferenceManyFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType> {\n    children: ReactNode;\n    filter?: FilterPayload;\n    page?: number;\n    pagination?: ReactElement;\n    perPage?: number;\n    reference: string;\n    sort?: SortPayload;\n    target: string;\n}\n\nReferenceManyField.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    filter: PropTypes.object,\n    label: fieldPropTypes.label,\n    perPage: PropTypes.number,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    target: PropTypes.string.isRequired,\n};\n\nReferenceManyField.defaultProps = {\n    filter: {},\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n    source: 'id',\n};\n\n// FIXME kept for backwards compatibility, unused, to be removed in v5\nexport const ReferenceManyFieldView: FC<ReferenceManyFieldViewProps> = props => {\n    const { children, pagination } = props;\n    if (process.env.NODE_ENV !== 'production') {\n        console.error(\n            '<ReferenceManyFieldView> is deprecated, use <ReferenceManyField> directly'\n        );\n    }\n    return (\n        <>\n            {children}\n            {pagination && props.total !== undefined ? pagination : null}\n        </>\n    );\n};\n\nexport interface ReferenceManyFieldViewProps\n    extends Omit<\n            ReferenceManyFieldProps,\n            'resource' | 'page' | 'perPage' | 'sort'\n        >,\n        ListControllerResult {\n    children: ReactElement;\n}\n\nReferenceManyFieldView.propTypes = {\n    children: PropTypes.element,\n    className: PropTypes.string,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.any,\n    isLoading: PropTypes.bool,\n    pagination: PropTypes.element,\n    reference: PropTypes.string,\n    setSort: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}
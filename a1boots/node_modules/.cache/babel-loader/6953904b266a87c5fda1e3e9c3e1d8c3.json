{"ast":null,"code":"import * as React from 'react';\nimport { Children, isValidElement, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useListContext, useResourceContext, useTranslate } from 'ra-core';\nimport { Checkbox, TableCell, TableHead, TableRow } from '@mui/material';\nimport clsx from 'clsx';\nimport DatagridHeaderCell from './DatagridHeaderCell';\nimport { DatagridClasses } from './useDatagridStyles';\nimport ExpandAllButton from './ExpandAllButton';\nimport { useDatagridContext } from './useDatagridContext';\n/**\n * The default Datagrid Header component.\n *\n * Renders select all checkbox as well as column header buttons used for sorting.\n */\n\nexport var DatagridHeader = function DatagridHeader(props) {\n  var children = props.children,\n      className = props.className,\n      _a = props.hasExpand,\n      hasExpand = _a === void 0 ? false : _a,\n      _b = props.hasBulkActions,\n      hasBulkActions = _b === void 0 ? false : _b,\n      isRowSelectable = props.isRowSelectable;\n  var resource = useResourceContext(props);\n  var translate = useTranslate();\n\n  var _c = useListContext(props),\n      sort = _c.sort,\n      data = _c.data,\n      onSelect = _c.onSelect,\n      selectedIds = _c.selectedIds,\n      setSort = _c.setSort;\n\n  var expandSingle = useDatagridContext().expandSingle;\n  var updateSortCallback = useCallback(function (event) {\n    event.stopPropagation();\n    var newField = event.currentTarget.dataset.field;\n    var newOrder = sort.field === newField ? sort.order === 'ASC' ? 'DESC' : 'ASC' : event.currentTarget.dataset.order;\n    setSort({\n      field: newField,\n      order: newOrder\n    });\n  }, [sort.field, sort.order, setSort]);\n  var updateSort = setSort ? updateSortCallback : null;\n  var handleSelectAll = useCallback(function (event) {\n    return onSelect(event.target.checked ? selectedIds.concat(data.filter(function (record) {\n      return !selectedIds.includes(record.id);\n    }).filter(function (record) {\n      return isRowSelectable ? isRowSelectable(record) : true;\n    }).map(function (record) {\n      return record.id;\n    })) : []);\n  }, [data, onSelect, isRowSelectable, selectedIds]);\n  var selectableIds = Array.isArray(data) ? isRowSelectable ? data.filter(function (record) {\n    return isRowSelectable(record);\n  }).map(function (record) {\n    return record.id;\n  }) : data.map(function (record) {\n    return record.id;\n  }) : [];\n  return React.createElement(TableHead, {\n    className: clsx(className, DatagridClasses.thead)\n  }, React.createElement(TableRow, {\n    className: clsx(DatagridClasses.row, DatagridClasses.headerRow)\n  }, hasExpand && React.createElement(TableCell, {\n    padding: \"none\",\n    className: clsx(DatagridClasses.headerCell, DatagridClasses.expandHeader)\n  }, !expandSingle ? React.createElement(ExpandAllButton, {\n    resource: resource,\n    ids: data.map(function (record) {\n      return record.id;\n    })\n  }) : null), hasBulkActions && selectedIds && React.createElement(TableCell, {\n    padding: \"checkbox\",\n    className: DatagridClasses.headerCell\n  }, React.createElement(Checkbox, {\n    \"aria-label\": translate('ra.action.select_all', {\n      _: 'Select all'\n    }),\n    className: \"select-all\",\n    color: \"primary\",\n    checked: selectedIds.length > 0 && selectableIds.length > 0 && selectableIds.every(function (id) {\n      return selectedIds.includes(id);\n    }),\n    onChange: handleSelectAll\n  })), Children.map(children, function (field, index) {\n    return isValidElement(field) ? React.createElement(DatagridHeaderCell, {\n      className: clsx(DatagridClasses.headerCell, \"column-\".concat(field.props.source)),\n      sort: sort,\n      field: field,\n      isSorting: sort.field === (field.props.sortBy || field.props.source),\n      key: field.props.source || index,\n      resource: resource,\n      updateSort: updateSort\n    }) : null;\n  })));\n};\nDatagridHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.arrayOf(PropTypes.any),\n  hasExpand: PropTypes.bool,\n  hasBulkActions: PropTypes.bool,\n  isRowSelectable: PropTypes.func,\n  isRowExpandable: PropTypes.func,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  setSort: PropTypes.func\n};\nDatagridHeader.displayName = 'DatagridHeader';","map":{"version":3,"mappings":"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","names":["React","Children","isValidElement","useCallback","PropTypes","useListContext","useResourceContext","useTranslate","Checkbox","TableCell","TableHead","TableRow","clsx","DatagridHeaderCell","DatagridClasses","ExpandAllButton","useDatagridContext","DatagridHeader","props","className","_a","hasExpand","_b","hasBulkActions","isRowSelectable","resource","translate","sort","data","onSelect","selectedIds","setSort","expandSingle","updateSortCallback","event","stopPropagation","newField","currentTarget","dataset","field","newOrder","order","updateSort","handleSelectAll","target","checked","concat","filter","includes","record","id","map","selectableIds","Array","isArray","thead","row","headerRow","padding","headerCell","expandHeader","ids","_","color","length","every","onChange","children","index","source","isSorting","sortBy","key","propTypes","node","string","exact","arrayOf","any","bool","func","isRowExpandable","onToggleItem","displayName"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/datagrid/DatagridHeader.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Children, isValidElement, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    useListContext,\n    useResourceContext,\n    Identifier,\n    RaRecord,\n    SortPayload,\n    useTranslate,\n} from 'ra-core';\nimport { Checkbox, TableCell, TableHead, TableRow } from '@mui/material';\nimport clsx from 'clsx';\n\nimport DatagridHeaderCell from './DatagridHeaderCell';\nimport { DatagridClasses } from './useDatagridStyles';\nimport ExpandAllButton from './ExpandAllButton';\nimport { useDatagridContext } from './useDatagridContext';\n\n/**\n * The default Datagrid Header component.\n *\n * Renders select all checkbox as well as column header buttons used for sorting.\n */\nexport const DatagridHeader = (props: DatagridHeaderProps) => {\n    const {\n        children,\n        className,\n        hasExpand = false,\n        hasBulkActions = false,\n        isRowSelectable,\n    } = props;\n    const resource = useResourceContext(props);\n    const translate = useTranslate();\n    const { sort, data, onSelect, selectedIds, setSort } = useListContext(\n        props\n    );\n    const { expandSingle } = useDatagridContext();\n\n    const updateSortCallback = useCallback(\n        event => {\n            event.stopPropagation();\n            const newField = event.currentTarget.dataset.field;\n            const newOrder =\n                sort.field === newField\n                    ? sort.order === 'ASC'\n                        ? 'DESC'\n                        : 'ASC'\n                    : event.currentTarget.dataset.order;\n\n            setSort({ field: newField, order: newOrder });\n        },\n        [sort.field, sort.order, setSort]\n    );\n\n    const updateSort = setSort ? updateSortCallback : null;\n\n    const handleSelectAll = useCallback(\n        event =>\n            onSelect(\n                event.target.checked\n                    ? selectedIds.concat(\n                          data\n                              .filter(\n                                  record => !selectedIds.includes(record.id)\n                              )\n                              .filter(record =>\n                                  isRowSelectable\n                                      ? isRowSelectable(record)\n                                      : true\n                              )\n                              .map(record => record.id)\n                      )\n                    : []\n            ),\n        [data, onSelect, isRowSelectable, selectedIds]\n    );\n\n    const selectableIds = Array.isArray(data)\n        ? isRowSelectable\n            ? data\n                  .filter(record => isRowSelectable(record))\n                  .map(record => record.id)\n            : data.map(record => record.id)\n        : [];\n\n    return (\n        <TableHead className={clsx(className, DatagridClasses.thead)}>\n            <TableRow\n                className={clsx(DatagridClasses.row, DatagridClasses.headerRow)}\n            >\n                {hasExpand && (\n                    <TableCell\n                        padding=\"none\"\n                        className={clsx(\n                            DatagridClasses.headerCell,\n                            DatagridClasses.expandHeader\n                        )}\n                    >\n                        {!expandSingle ? (\n                            <ExpandAllButton\n                                resource={resource}\n                                ids={data.map(record => record.id)}\n                            />\n                        ) : null}\n                    </TableCell>\n                )}\n                {hasBulkActions && selectedIds && (\n                    <TableCell\n                        padding=\"checkbox\"\n                        className={DatagridClasses.headerCell}\n                    >\n                        <Checkbox\n                            aria-label={translate('ra.action.select_all', {\n                                _: 'Select all',\n                            })}\n                            className=\"select-all\"\n                            color=\"primary\"\n                            checked={\n                                selectedIds.length > 0 &&\n                                selectableIds.length > 0 &&\n                                selectableIds.every(id =>\n                                    selectedIds.includes(id)\n                                )\n                            }\n                            onChange={handleSelectAll}\n                        />\n                    </TableCell>\n                )}\n                {Children.map(children, (field, index) =>\n                    isValidElement(field) ? (\n                        <DatagridHeaderCell\n                            className={clsx(\n                                DatagridClasses.headerCell,\n                                `column-${(field.props as any).source}`\n                            )}\n                            sort={sort}\n                            field={field}\n                            isSorting={\n                                sort.field ===\n                                ((field.props as any).sortBy ||\n                                    (field.props as any).source)\n                            }\n                            key={(field.props as any).source || index}\n                            resource={resource}\n                            updateSort={updateSort}\n                        />\n                    ) : null\n                )}\n            </TableRow>\n        </TableHead>\n    );\n};\n\nDatagridHeader.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.arrayOf(PropTypes.any),\n    hasExpand: PropTypes.bool,\n    hasBulkActions: PropTypes.bool,\n    isRowSelectable: PropTypes.func,\n    isRowExpandable: PropTypes.func,\n    onSelect: PropTypes.func,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    setSort: PropTypes.func,\n};\n\nexport interface DatagridHeaderProps<RecordType extends RaRecord = any> {\n    children?: React.ReactNode;\n    className?: string;\n    hasExpand?: boolean;\n    hasBulkActions?: boolean;\n    isRowSelectable?: (record: RecordType) => boolean;\n    isRowExpandable?: (record: RecordType) => boolean;\n    size?: 'medium' | 'small';\n    // can be injected when using the component without context\n    sort?: SortPayload;\n    data?: RecordType[];\n    onSelect?: (ids: Identifier[]) => void;\n    onToggleItem?: (id: Identifier) => void;\n    resource?: string;\n    selectedIds?: Identifier[];\n    setSort?: (sort: SortPayload) => void;\n}\n\nDatagridHeader.displayName = 'DatagridHeader';\n"]},"metadata":{},"sourceType":"module"}
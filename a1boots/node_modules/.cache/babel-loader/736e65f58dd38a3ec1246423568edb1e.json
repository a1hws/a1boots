{"ast":null,"code":"import * as React from 'react';\nimport { memo } from 'react';\nimport { IconButton, ListItem, ListItemButton, ListItemText, ListItemSecondaryAction, styled } from '@mui/material';\nimport CancelIcon from '@mui/icons-material/CancelOutlined';\nimport isEqual from 'lodash/isEqual';\nimport { useNavigate } from 'react-router-dom';\nimport { stringify } from 'query-string';\nimport { useListContext } from 'ra-core';\n\nvar arePropsEqual = function arePropsEqual(prevProps, nextProps) {\n  return prevProps.label === nextProps.label && isEqual(prevProps.value, nextProps.value);\n};\n\nexport var SavedQueryFilterListItem = memo(function (props) {\n  var className = props.className,\n      label = props.label,\n      sx = props.sx,\n      value = props.value;\n\n  var _a = useListContext(),\n      filterValues = _a.filterValues,\n      sort = _a.sort,\n      perPage = _a.perPage,\n      displayedFilters = _a.displayedFilters;\n\n  var navigate = useNavigate();\n  var isSelected = isEqual(value, {\n    filter: filterValues,\n    sort: sort,\n    perPage: perPage,\n    displayedFilters: displayedFilters\n  });\n\n  var addFilter = function addFilter() {\n    navigate({\n      search: stringify({\n        filter: JSON.stringify(value.filter),\n        sort: value.sort.field,\n        order: value.sort.order,\n        page: 1,\n        perPage: value.perPage,\n        displayedFilters: JSON.stringify(value.displayedFilters)\n      })\n    });\n  };\n\n  var removeFilter = function removeFilter() {\n    navigate({\n      search: stringify({\n        filter: JSON.stringify({})\n      })\n    });\n  };\n\n  var toggleFilter = function toggleFilter() {\n    return isSelected ? removeFilter() : addFilter();\n  };\n\n  return (// @ts-ignore\n    React.createElement(StyledListItem, {\n      onClick: toggleFilter,\n      selected: isSelected,\n      className: className,\n      sx: sx,\n      disablePadding: true\n    }, React.createElement(ListItemButton, {\n      disableGutters: true,\n      className: SavedQueryFilterListItemClasses.listItemButton\n    }, React.createElement(ListItemText, {\n      primary: label,\n      className: SavedQueryFilterListItemClasses.listItemText\n    }), isSelected && React.createElement(ListItemSecondaryAction, null, React.createElement(IconButton, {\n      size: \"small\",\n      onClick: toggleFilter\n    }, React.createElement(CancelIcon, null)))))\n  );\n}, arePropsEqual);\nvar PREFIX = 'RaSavedQueryFilterListItem';\nexport var SavedQueryFilterListItemClasses = {\n  listItemButton: \"\".concat(PREFIX, \"-listItemButton\"),\n  listItemText: \"\".concat(PREFIX, \"-listItemText\")\n};\nvar StyledListItem = styled(ListItem, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function () {\n  var _a;\n\n  return _a = {}, _a[\"& .\".concat(SavedQueryFilterListItemClasses.listItemButton)] = {\n    paddingRight: '2em',\n    paddingLeft: '2em'\n  }, _a[\"& .\".concat(SavedQueryFilterListItemClasses.listItemText)] = {\n    margin: 0\n  }, _a;\n});","map":{"version":3,"mappings":"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","names":["React","memo","IconButton","ListItem","ListItemButton","ListItemText","ListItemSecondaryAction","styled","CancelIcon","isEqual","useNavigate","stringify","useListContext","arePropsEqual","prevProps","nextProps","label","value","SavedQueryFilterListItem","props","sx","filterValues","sort","perPage","displayedFilters","navigate","isSelected","filter","addFilter","search","JSON","field","order","page","removeFilter","toggleFilter","StyledListItem","onClick","selected","className","disablePadding","disableGutters","SavedQueryFilterListItemClasses","listItemButton","primary","listItemText","size","PREFIX","name","overridesResolver","styles","root","_a","paddingRight","paddingLeft","margin"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/filter/SavedQueryFilterListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, memo } from 'react';\nimport {\n    IconButton,\n    ListItem,\n    ListItemButton,\n    ListItemProps,\n    ListItemText,\n    ListItemSecondaryAction,\n    styled,\n} from '@mui/material';\nimport CancelIcon from '@mui/icons-material/CancelOutlined';\nimport isEqual from 'lodash/isEqual';\nimport { useNavigate } from 'react-router-dom';\nimport { stringify } from 'query-string';\nimport { useListContext } from 'ra-core';\n\nimport { SavedQuery } from './useSavedQueries';\n\nconst arePropsEqual = (\n    prevProps: SavedQueryFilterListItemProps,\n    nextProps: SavedQueryFilterListItemProps\n): boolean =>\n    prevProps.label === nextProps.label &&\n    isEqual(prevProps.value, nextProps.value);\n\nexport const SavedQueryFilterListItem = memo(\n    (props: SavedQueryFilterListItemProps): ReactElement => {\n        const { className, label, sx, value } = props;\n        const {\n            filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        } = useListContext();\n        const navigate = useNavigate();\n\n        const isSelected = isEqual(value, {\n            filter: filterValues,\n            sort,\n            perPage,\n            displayedFilters,\n        });\n\n        const addFilter = (): void => {\n            navigate({\n                search: stringify({\n                    filter: JSON.stringify(value.filter),\n                    sort: value.sort.field,\n                    order: value.sort.order,\n                    page: 1,\n                    perPage: value.perPage,\n                    displayedFilters: JSON.stringify(value.displayedFilters),\n                }),\n            });\n        };\n\n        const removeFilter = (): void => {\n            navigate({\n                search: stringify({\n                    filter: JSON.stringify({}),\n                }),\n            });\n        };\n\n        const toggleFilter = (): void =>\n            isSelected ? removeFilter() : addFilter();\n\n        return (\n            // @ts-ignore\n            <StyledListItem\n                onClick={toggleFilter}\n                selected={isSelected}\n                className={className}\n                sx={sx}\n                disablePadding\n            >\n                <ListItemButton\n                    disableGutters\n                    className={SavedQueryFilterListItemClasses.listItemButton}\n                >\n                    <ListItemText\n                        primary={label}\n                        className={SavedQueryFilterListItemClasses.listItemText}\n                    />\n                    {isSelected && (\n                        <ListItemSecondaryAction>\n                            <IconButton size=\"small\" onClick={toggleFilter}>\n                                <CancelIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    )}\n                </ListItemButton>\n            </StyledListItem>\n        );\n    },\n    arePropsEqual\n);\n\nconst PREFIX = 'RaSavedQueryFilterListItem';\nexport const SavedQueryFilterListItemClasses = {\n    listItemButton: `${PREFIX}-listItemButton`,\n    listItemText: `${PREFIX}-listItemText`,\n};\n\nconst StyledListItem = styled(ListItem, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(() => ({\n    [`& .${SavedQueryFilterListItemClasses.listItemButton}`]: {\n        paddingRight: '2em',\n        paddingLeft: '2em',\n    },\n    [`& .${SavedQueryFilterListItemClasses.listItemText}`]: {\n        margin: 0,\n    },\n}));\n\nexport interface SavedQueryFilterListItemProps\n    extends SavedQuery,\n        Omit<ListItemProps, 'value'> {}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@mui/material';\nimport { useReferenceOneFieldController, useRecordContext, ResourceContextProvider, useCreatePath, useTranslate } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport { ReferenceFieldView } from './ReferenceField';\n/**\n * Render the related record in a one-to-one relationship\n *\n * Expects a single field as child\n *\n * @example // display the bio of the current author\n * <ReferenceOneField reference=\"bios\" target=\"author_id\">\n *     <TextField source=\"body\" />\n * </ReferenceOneField>\n */\n\nexport var ReferenceOneField = function ReferenceOneField(props) {\n  var children = props.children,\n      reference = props.reference,\n      source = props.source,\n      target = props.target,\n      emptyText = props.emptyText,\n      sort = props.sort,\n      filter = props.filter,\n      _a = props.link,\n      link = _a === void 0 ? false : _a,\n      queryOptions = props.queryOptions;\n  var record = useRecordContext(props);\n  var createPath = useCreatePath();\n  var translate = useTranslate();\n\n  var _b = useReferenceOneFieldController({\n    record: record,\n    reference: reference,\n    source: source,\n    target: target,\n    sort: sort,\n    filter: filter,\n    queryOptions: queryOptions\n  }),\n      isLoading = _b.isLoading,\n      isFetching = _b.isFetching,\n      referenceRecord = _b.referenceRecord,\n      error = _b.error,\n      refetch = _b.refetch;\n\n  var resourceLinkPath = link === false ? false : createPath({\n    resource: reference,\n    id: referenceRecord === null || referenceRecord === void 0 ? void 0 : referenceRecord.id,\n    type: typeof link === 'function' ? link(record, reference) : link\n  });\n  return !record || !isLoading && referenceRecord == null ? emptyText ? React.createElement(Typography, {\n    component: \"span\",\n    variant: \"body2\"\n  }, emptyText && translate(emptyText, {\n    _: emptyText\n  })) : null : React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ReferenceFieldView, {\n    isLoading: isLoading,\n    isFetching: isFetching,\n    referenceRecord: referenceRecord,\n    resourceLinkPath: resourceLinkPath,\n    reference: reference,\n    refetch: refetch,\n    error: error\n  }, children));\n};\nReferenceOneField.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  label: fieldPropTypes.label,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  source: PropTypes.string.isRequired,\n  target: PropTypes.string.isRequired,\n  queryOptions: PropTypes.any\n};\nReferenceOneField.defaultProps = {\n  source: 'id',\n  // disable sorting on this field by default as its default source prop ('id')\n  // will match the default sort ({ field: 'id', order: 'DESC'})\n  // leading to an incorrect sort indicator in a datagrid header\n  sortable: false\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","Typography","useReferenceOneFieldController","useRecordContext","ResourceContextProvider","useCreatePath","useTranslate","fieldPropTypes","ReferenceFieldView","ReferenceOneField","props","reference","source","target","emptyText","sort","filter","_a","link","queryOptions","record","createPath","translate","isLoading","isFetching","referenceRecord","error","refetch","resourceLinkPath","resource","id","type","component","variant","_","value","children","propTypes","node","className","string","label","any","isRequired","defaultProps","sortable"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/ReferenceOneField.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { UseQueryOptions } from 'react-query';\nimport { Typography } from '@mui/material';\nimport {\n    useReferenceOneFieldController,\n    useRecordContext,\n    ResourceContextProvider,\n    LinkToType,\n    useCreatePath,\n    useTranslate,\n    SortPayload,\n    RaRecord,\n} from 'ra-core';\n\nimport { fieldPropTypes, FieldProps } from './types';\nimport { ReferenceFieldView } from './ReferenceField';\n\n/**\n * Render the related record in a one-to-one relationship\n *\n * Expects a single field as child\n *\n * @example // display the bio of the current author\n * <ReferenceOneField reference=\"bios\" target=\"author_id\">\n *     <TextField source=\"body\" />\n * </ReferenceOneField>\n */\nexport const ReferenceOneField = <\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord\n>(\n    props: ReferenceOneFieldProps<RecordType, ReferenceRecordType>\n) => {\n    const {\n        children,\n        reference,\n        source,\n        target,\n        emptyText,\n        sort,\n        filter,\n        link = false,\n        queryOptions,\n    } = props;\n    const record = useRecordContext<RecordType>(props);\n    const createPath = useCreatePath();\n    const translate = useTranslate();\n\n    const {\n        isLoading,\n        isFetching,\n        referenceRecord,\n        error,\n        refetch,\n    } = useReferenceOneFieldController<ReferenceRecordType>({\n        record,\n        reference,\n        source,\n        target,\n        sort,\n        filter,\n        queryOptions,\n    });\n\n    const resourceLinkPath =\n        link === false\n            ? false\n            : createPath({\n                  resource: reference,\n                  id: referenceRecord?.id,\n                  type:\n                      typeof link === 'function'\n                          ? link(record, reference)\n                          : link,\n              });\n\n    return !record || (!isLoading && referenceRecord == null) ? (\n        emptyText ? (\n            <Typography component=\"span\" variant=\"body2\">\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null\n    ) : (\n        <ResourceContextProvider value={reference}>\n            <ReferenceFieldView\n                isLoading={isLoading}\n                isFetching={isFetching}\n                referenceRecord={referenceRecord}\n                resourceLinkPath={resourceLinkPath}\n                reference={reference}\n                refetch={refetch}\n                error={error}\n            >\n                {children}\n            </ReferenceFieldView>\n        </ResourceContextProvider>\n    );\n};\n\nexport interface ReferenceOneFieldProps<\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord\n> extends FieldProps<RecordType> {\n    children?: ReactNode;\n    reference: string;\n    target: string;\n    sort?: SortPayload;\n    filter?: any;\n    link?: LinkToType<RecordType>;\n    queryOptions?: UseQueryOptions<{\n        data: ReferenceRecordType[];\n        total: number;\n    }> & { meta?: any };\n}\n\nReferenceOneField.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    label: fieldPropTypes.label,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    source: PropTypes.string.isRequired,\n    target: PropTypes.string.isRequired,\n    queryOptions: PropTypes.any,\n};\n\nReferenceOneField.defaultProps = {\n    source: 'id',\n    // disable sorting on this field by default as its default source prop ('id')\n    // will match the default sort ({ field: 'id', order: 'DESC'})\n    // leading to an incorrect sort indicator in a datagrid header\n    sortable: false,\n};\n"]},"metadata":{},"sourceType":"module"}
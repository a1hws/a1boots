{"ast":null,"code":"import { useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useNotificationContext } from '../notification';\nimport { useBasename } from '../routing';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\n\nvar useLogin = function useLogin() {\n  var authProvider = useAuthProvider();\n  var location = useLocation();\n  var locationState = location.state;\n  var navigate = useNavigate();\n  var basename = useBasename();\n  var resetNotifications = useNotificationContext().resetNotifications;\n  var nextPathName = locationState && locationState.nextPathname;\n  var nextSearch = locationState && locationState.nextSearch;\n  var afterLoginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.afterLoginUrl));\n  var login = useCallback(function (params, pathName) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return authProvider.login(params).then(function (ret) {\n      resetNotifications();\n\n      if (ret && ret.hasOwnProperty('redirectTo')) {\n        if (ret) {\n          navigate(ret.redirectTo);\n        }\n      } else {\n        var redirectUrl = pathName ? pathName : nextPathName + nextSearch || afterLoginUrl;\n        navigate(redirectUrl);\n      }\n\n      return ret;\n    });\n  }, [authProvider, navigate, nextPathName, nextSearch, resetNotifications, afterLoginUrl]);\n  var loginWithoutProvider = useCallback(function (_, __) {\n    resetNotifications();\n    navigate(afterLoginUrl);\n    return Promise.resolve();\n  }, [navigate, resetNotifications, afterLoginUrl]);\n  return authProvider ? login : loginWithoutProvider;\n};\n\nexport default useLogin;","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AAEA,SAASC,sBAAT,QAAuC,iBAAvC;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;EACb,IAAMC,YAAY,GAAGJ,eAAe,EAApC;EACA,IAAMK,QAAQ,GAAGT,WAAW,EAA5B;EACA,IAAMU,aAAa,GAAGD,QAAQ,CAACE,KAA/B;EACA,IAAMC,QAAQ,GAAGX,WAAW,EAA5B;EACA,IAAMY,QAAQ,GAAGV,WAAW,EAA5B;EACQ,sBAAkB,GAAKD,sBAAsB,GAAEY,kBAA/C;EACR,IAAMC,YAAY,GAAGL,aAAa,IAAIA,aAAa,CAACM,YAApD;EACA,IAAMC,UAAU,GAAGP,aAAa,IAAIA,aAAa,CAACO,UAAlD;EACA,IAAMC,aAAa,GAAGZ,mBAAmB,CACrC,UAAGO,QAAH,EAAW,GAAX,EAAWM,MAAX,CAAed,iBAAiB,CAACa,aAAjC,CADqC,CAAzC;EAIA,IAAME,KAAK,GAAGrB,WAAW,CACrB,UAACsB,MAAD,EAAmBC,QAAnB,EAA2B;IAA1B;MAAAD;IAAgB;;IACb,mBAAY,CAACD,KAAb,CAAmBC,MAAnB,EAA2BE,IAA3B,CAAgC,eAAG;MAC/BT,kBAAkB;;MAClB,IAAIU,GAAG,IAAIA,GAAG,CAACC,cAAJ,CAAmB,YAAnB,CAAX,EAA6C;QACzC,IAAID,GAAJ,EAAS;UACLZ,QAAQ,CAACY,GAAG,CAACE,UAAL,CAAR;QACH;MACJ,CAJD,MAIO;QACH,IAAMC,WAAW,GAAGL,QAAQ,GACtBA,QADsB,GAEtBP,YAAY,GAAGE,UAAf,IAA6BC,aAFnC;QAGAN,QAAQ,CAACe,WAAD,CAAR;MACH;;MACD,OAAOH,GAAP;IACH,CAbD;EAaE,CAfe,EAgBrB,CACIhB,YADJ,EAEII,QAFJ,EAGIG,YAHJ,EAIIE,UAJJ,EAKIH,kBALJ,EAMII,aANJ,CAhBqB,CAAzB;EA0BA,IAAMU,oBAAoB,GAAG7B,WAAW,CACpC,UAAC8B,CAAD,EAAIC,EAAJ,EAAM;IACFhB,kBAAkB;IAClBF,QAAQ,CAACM,aAAD,CAAR;IACA,OAAOa,OAAO,CAACC,OAAR,EAAP;EACH,CALmC,EAMpC,CAACpB,QAAD,EAAWE,kBAAX,EAA+BI,aAA/B,CANoC,CAAxC;EASA,OAAOV,YAAY,GAAGY,KAAH,GAAWQ,oBAA9B;AACH,CAjDD;;AA6DA,eAAerB,QAAf","names":["useCallback","useLocation","useNavigate","useNotificationContext","useBasename","useAuthProvider","defaultAuthParams","removeDoubleSlashes","useLogin","authProvider","location","locationState","state","navigate","basename","resetNotifications","nextPathName","nextPathname","nextSearch","afterLoginUrl","concat","login","params","pathName","then","ret","hasOwnProperty","redirectTo","redirectUrl","loginWithoutProvider","_","__","Promise","resolve"],"sources":["/var/www/a1boots/node_modules/ra-core/src/auth/useLogin.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { useNotificationContext } from '../notification';\nimport { useBasename } from '../routing';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n\n/**\n * Get a callback for calling the authProvider.login() method\n * and redirect to the previous authenticated page (or the home page) on success.\n *\n * @see useAuthProvider\n *\n * @returns {Function} login callback\n *\n * @example\n *\n * import { useLogin } from 'react-admin';\n *\n * const LoginButton = () => {\n *     const [loading, setLoading] = useState(false);\n *     const login = useLogin();\n *     const handleClick = {\n *         setLoading(true);\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\n *             .then(() => setLoading(false));\n *     }\n *     return <button onClick={handleClick}>Login</button>;\n * }\n */\nconst useLogin = (): Login => {\n    const authProvider = useAuthProvider();\n    const location = useLocation();\n    const locationState = location.state as any;\n    const navigate = useNavigate();\n    const basename = useBasename();\n    const { resetNotifications } = useNotificationContext();\n    const nextPathName = locationState && locationState.nextPathname;\n    const nextSearch = locationState && locationState.nextSearch;\n    const afterLoginUrl = removeDoubleSlashes(\n        `${basename}/${defaultAuthParams.afterLoginUrl}`\n    );\n\n    const login = useCallback(\n        (params: any = {}, pathName) =>\n            authProvider.login(params).then(ret => {\n                resetNotifications();\n                if (ret && ret.hasOwnProperty('redirectTo')) {\n                    if (ret) {\n                        navigate(ret.redirectTo);\n                    }\n                } else {\n                    const redirectUrl = pathName\n                        ? pathName\n                        : nextPathName + nextSearch || afterLoginUrl;\n                    navigate(redirectUrl);\n                }\n                return ret;\n            }),\n        [\n            authProvider,\n            navigate,\n            nextPathName,\n            nextSearch,\n            resetNotifications,\n            afterLoginUrl,\n        ]\n    );\n\n    const loginWithoutProvider = useCallback(\n        (_, __) => {\n            resetNotifications();\n            navigate(afterLoginUrl);\n            return Promise.resolve();\n        },\n        [navigate, resetNotifications, afterLoginUrl]\n    );\n\n    return authProvider ? login : loginWithoutProvider;\n};\n\n/**\n * Log a user in by calling the authProvider.login() method\n *\n * @param {Object} params Login parameters to pass to the authProvider. May contain username/email, password, etc\n * @param {string} pathName The path to redirect to after login. By default, redirects to the home page, or to the last page visited after disconnection.\n *\n * @return {Promise} The authProvider response\n */\ntype Login = (params: any, pathName?: string) => Promise<any>;\n\nexport default useLogin;\n"]},"metadata":{},"sourceType":"module"}
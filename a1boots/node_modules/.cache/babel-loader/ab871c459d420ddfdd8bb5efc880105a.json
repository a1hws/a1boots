{"ast":null,"code":"import * as React from 'react';\nimport useAuthState from './useAuthState';\n/**\n * Restrict access to children to authenticated users.\n * Redirects anonymous users to the login page.\n *\n * Use it to decorate your custom page components to require\n * authentication.\n *\n * By default this component is optimistic: it does not block\n * rendering children when checking authentication, but this mode\n * can be turned off by setting `requireAuth` to true.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @see useAuthState\n *\n * @example\n *     import { Admin, CustomRoutes, Authenticated } from 'react-admin';\n *\n *     const customRoutes = [\n *         <Route\n *             path=\"/foo\"\n *             element={\n *                 <Authenticated authParams={{ foo: 'bar' }}>\n *                     <Foo />\n *                 </Authenticated>\n *             }\n *         />\n *     ];\n *     const App = () => (\n *         <Admin>\n *             <CustomRoutes>{customRoutes}</CustomRoutes>\n *         </Admin>\n *     );\n */\n\nexport var Authenticated = function Authenticated(props) {\n  var authParams = props.authParams,\n      children = props.children,\n      _a = props.requireAuth,\n      requireAuth = _a === void 0 ? false : _a; // this hook will log out if the authProvider doesn't validate that the user is authenticated\n\n  var _b = useAuthState(authParams, true),\n      isLoading = _b.isLoading,\n      authenticated = _b.authenticated; // in pessimistic mode don't render the children until authenticated\n\n\n  if (requireAuth && isLoading || !authenticated) {\n    return null;\n  } // render the children in optimistic rendering or after authenticated\n\n\n  return React.createElement(React.Fragment, null, children);\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAA0B;EAC3C,cAAU,GAAoCA,KAAK,WAAnD;EAAA,IAAYC,QAAQ,GAA0BD,KAAK,SAAnD;EAAA,IAAsBE,KAAwBF,KAAK,YAAnD;EAAA,IAAsBG,WAAW,mBAAG,KAAH,GAAQD,EAAzC,CAD2C,CAGnD;;EACM,SAA+BJ,YAAY,CAACM,UAAD,EAAa,IAAb,CAA3C;EAAA,IAAEC,SAAS,eAAX;EAAA,IAAaC,aAAa,mBAA1B,CAJ6C,CAMnD;;;EACA,IAAKH,WAAW,IAAIE,SAAhB,IAA8B,CAACC,aAAnC,EAAkD;IAC9C,OAAO,IAAP;EACH,CATkD,CAWnD;;;EACA,OAAOT,0CAAGI,QAAH,CAAP;AACH,CAbM","names":["React","useAuthState","Authenticated","props","children","_a","requireAuth","authParams","isLoading","authenticated"],"sources":["/var/www/a1boots/node_modules/ra-core/src/auth/Authenticated.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\n\nimport useAuthState from './useAuthState';\n\n/**\n * Restrict access to children to authenticated users.\n * Redirects anonymous users to the login page.\n *\n * Use it to decorate your custom page components to require\n * authentication.\n *\n * By default this component is optimistic: it does not block\n * rendering children when checking authentication, but this mode\n * can be turned off by setting `requireAuth` to true.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @see useAuthState\n *\n * @example\n *     import { Admin, CustomRoutes, Authenticated } from 'react-admin';\n *\n *     const customRoutes = [\n *         <Route\n *             path=\"/foo\"\n *             element={\n *                 <Authenticated authParams={{ foo: 'bar' }}>\n *                     <Foo />\n *                 </Authenticated>\n *             }\n *         />\n *     ];\n *     const App = () => (\n *         <Admin>\n *             <CustomRoutes>{customRoutes}</CustomRoutes>\n *         </Admin>\n *     );\n */\nexport const Authenticated = (props: AuthenticatedProps) => {\n    const { authParams, children, requireAuth = false } = props;\n\n    // this hook will log out if the authProvider doesn't validate that the user is authenticated\n    const { isLoading, authenticated } = useAuthState(authParams, true);\n\n    // in pessimistic mode don't render the children until authenticated\n    if ((requireAuth && isLoading) || !authenticated) {\n        return null;\n    }\n\n    // render the children in optimistic rendering or after authenticated\n    return <>{children}</>;\n};\n\nexport interface AuthenticatedProps {\n    children: ReactNode;\n    authParams?: object;\n    requireAuth?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}
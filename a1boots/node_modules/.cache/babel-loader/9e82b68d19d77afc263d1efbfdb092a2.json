{"ast":null,"code":"import React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { ChoicesContextProvider, useReferenceInputController, ResourceContextProvider } from 'ra-core';\nimport { AutocompleteInput } from './AutocompleteInput';\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), then renders an `<AutocompleteInput>`,\n * to which it passes the possible choices via a `ChoicesContext`.\n *\n * You can pass a child select component to customize the way the reference\n * selector is displayed (e.g. using `<SelectInput>` or `<RadioButtonGroupInput>`\n * instead of `<AutocompleteInput>`).\n *\n * @example // default selector: AutocompleteInput\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example // using a SelectInput as selector\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInput source=\"post_id\" reference=\"posts\" perPage={100}/>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}\n * />\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}\n * />\n *\n * The enclosed component may filter results. ReferenceInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\n\nexport var ReferenceInput = function (props) {\n  var children = props.children,\n      reference = props.reference;\n  var controllerProps = useReferenceInputController(props);\n\n  if (Children.count(children) !== 1) {\n    throw new Error('<ReferenceInput> only accepts a single child');\n  }\n\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ChoicesContextProvider, {\n    value: controllerProps\n  }, children));\n};\nReferenceInput.propTypes = {\n  children: PropTypes.element,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  page: PropTypes.number,\n  perPage: PropTypes.number,\n  record: PropTypes.object,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.oneOf(['ASC', 'DESC'])\n  }),\n  source: PropTypes.string\n};\nReferenceInput.defaultProps = {\n  filter: {},\n  page: 1,\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  children: React.createElement(AutocompleteInput, null)\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA8C,OAA9C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACIC,sBADJ,EAEIC,2BAFJ,EAIIC,uBAJJ,QAMO,SANP;AAQA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,OAAO,IAAMC,cAAc,GAAG,UAACC,KAAD,EAA2B;EAC7C,YAAQ,GAAgBA,KAAK,SAA7B;EAAA,IAAUC,SAAS,GAAKD,KAAK,UAA7B;EAER,IAAME,eAAe,GAAGN,2BAA2B,CAACI,KAAD,CAAnD;;EAEA,IAAIP,QAAQ,CAACU,KAAT,CAAeC,QAAf,MAA6B,CAAjC,EAAoC;IAChC,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;EACH;;EAED,OACIb,oBAACK,uBAAD,EAAwB;IAACS,KAAK,EAAEL;EAAR,CAAxB,EACIT,oBAACG,sBAAD,EAAuB;IAACW,KAAK,EAAEJ;EAAR,CAAvB,EACKE,QADL,CADJ,CADJ;AAOH,CAhBM;AAkBPL,cAAc,CAACQ,SAAf,GAA2B;EACvBH,QAAQ,EAAEV,SAAS,CAACc,OADG;EAEvBC,MAAM,EAAEf,SAAS,CAACgB,MAFK;EAGvBC,KAAK,EAAEjB,SAAS,CAACkB,MAHM;EAIvBC,IAAI,EAAEnB,SAAS,CAACoB,MAJO;EAKvBC,OAAO,EAAErB,SAAS,CAACoB,MALI;EAMvBE,MAAM,EAAEtB,SAAS,CAACgB,MANK;EAOvBT,SAAS,EAAEP,SAAS,CAACkB,MAAV,CAAiBK,UAPL;EAQvBC,QAAQ,EAAExB,SAAS,CAACkB,MARG;EASvBO,IAAI,EAAEzB,SAAS,CAAC0B,KAAV,CAAgB;IAClBC,KAAK,EAAE3B,SAAS,CAACkB,MADC;IAElBU,KAAK,EAAE5B,SAAS,CAAC6B,KAAV,CAAgB,CAAC,KAAD,EAAQ,MAAR,CAAhB;EAFW,CAAhB,CATiB;EAavBC,MAAM,EAAE9B,SAAS,CAACkB;AAbK,CAA3B;AAgBAb,cAAc,CAAC0B,YAAf,GAA8B;EAC1BhB,MAAM,EAAE,EADkB;EAE1BI,IAAI,EAAE,CAFoB;EAG1BE,OAAO,EAAE,EAHiB;EAI1BI,IAAI,EAAE;IAAEE,KAAK,EAAE,IAAT;IAAeC,KAAK,EAAE;EAAtB,CAJoB;EAK1BlB,QAAQ,EAAEZ,oBAACM,iBAAD,EAAkB,IAAlB;AALgB,CAA9B","names":["React","Children","PropTypes","ChoicesContextProvider","useReferenceInputController","ResourceContextProvider","AutocompleteInput","ReferenceInput","props","reference","controllerProps","count","children","Error","value","propTypes","element","filter","object","label","string","page","number","perPage","record","isRequired","resource","sort","shape","field","order","oneOf","source","defaultProps"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/ReferenceInput.tsx"],"sourcesContent":["import React, { Children, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    ChoicesContextProvider,\n    useReferenceInputController,\n    InputProps,\n    ResourceContextProvider,\n    UseReferenceInputControllerParams,\n} from 'ra-core';\n\nimport { AutocompleteInput } from './AutocompleteInput';\n\n/**\n * An Input component for choosing a reference record. Useful for foreign keys.\n *\n * This component fetches the possible values in the reference resource\n * (using `dataProvider.getList()`), then renders an `<AutocompleteInput>`,\n * to which it passes the possible choices via a `ChoicesContext`.\n *\n * You can pass a child select component to customize the way the reference\n * selector is displayed (e.g. using `<SelectInput>` or `<RadioButtonGroupInput>`\n * instead of `<AutocompleteInput>`).\n *\n * @example // default selector: AutocompleteInput\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example // using a SelectInput as selector\n * export const CommentEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceInput label=\"Post\" source=\"post_id\" reference=\"posts\">\n *                 <SelectInput optionText=\"title\" />\n *             </ReferenceInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceInput source=\"post_id\" reference=\"posts\" perPage={100}/>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      sort={{ field: 'title', order: 'ASC' }}\n * />\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceInput\n *      source=\"post_id\"\n *      reference=\"posts\"\n *      filter={{ is_published: true }}\n * />\n *\n * The enclosed component may filter results. ReferenceInput create a ChoicesContext which provides\n * a `setFilters` function. You can call this function to filter the results.\n */\nexport const ReferenceInput = (props: ReferenceInputProps) => {\n    const { children, reference } = props;\n\n    const controllerProps = useReferenceInputController(props);\n\n    if (Children.count(children) !== 1) {\n        throw new Error('<ReferenceInput> only accepts a single child');\n    }\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ChoicesContextProvider value={controllerProps}>\n                {children}\n            </ChoicesContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nReferenceInput.propTypes = {\n    children: PropTypes.element,\n    filter: PropTypes.object,\n    label: PropTypes.string,\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n    record: PropTypes.object,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.oneOf(['ASC', 'DESC']),\n    }),\n    source: PropTypes.string,\n};\n\nReferenceInput.defaultProps = {\n    filter: {},\n    page: 1,\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n    children: <AutocompleteInput />,\n};\n\nexport interface ReferenceInputProps\n    extends InputProps,\n        UseReferenceInputControllerParams {\n    children?: ReactElement;\n    label?: string;\n    [key: string]: any;\n}\n"]},"metadata":{},"sourceType":"module"}
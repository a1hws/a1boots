{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar _a;\n\nimport * as React from 'react';\nimport { forwardRef, useCallback } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { InputAdornment, IconButton, TextField as MuiTextField } from '@mui/material';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { useTranslate } from 'ra-core';\n/**\n * An override of the default Material UI TextField which is resettable\n */\n\nexport var ResettableTextField = forwardRef(function (props, ref) {\n  var clearAlwaysVisible = props.clearAlwaysVisible,\n      InputProps = props.InputProps,\n      value = props.value,\n      resettable = props.resettable,\n      disabled = props.disabled,\n      variant = props.variant,\n      margin = props.margin,\n      className = props.className,\n      rest = __rest(props, [\"clearAlwaysVisible\", \"InputProps\", \"value\", \"resettable\", \"disabled\", \"variant\", \"margin\", \"className\"]);\n\n  var translate = useTranslate();\n  var onChange = props.onChange,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur;\n  var handleClickClearButton = useCallback(function (event) {\n    event.preventDefault();\n    onChange('');\n  }, [onChange]);\n  var handleFocus = useCallback(function (event) {\n    onFocus && onFocus(event);\n  }, [onFocus]);\n  var handleBlur = useCallback(function (event) {\n    onBlur && onBlur(event);\n  }, [onBlur]);\n  var clearButton = ResettableTextFieldClasses.clearButton,\n      clearIcon = ResettableTextFieldClasses.clearIcon,\n      inputAdornedEnd = ResettableTextFieldClasses.inputAdornedEnd,\n      selectAdornment = ResettableTextFieldClasses.selectAdornment,\n      visibleClearIcon = ResettableTextFieldClasses.visibleClearIcon;\n\n  var _a = InputProps || {},\n      endAdornment = _a.endAdornment,\n      InputPropsWithoutEndAdornment = __rest(_a, [\"endAdornment\"]);\n\n  if (clearAlwaysVisible && endAdornment) {\n    throw new Error('ResettableTextField cannot display both an endAdornment and a clear button always visible');\n  }\n\n  var getEndAdornment = function () {\n    var _a;\n\n    if (!resettable) {\n      return endAdornment;\n    } else if (!value) {\n      if (clearAlwaysVisible) {\n        // show clear button, inactive\n        return React.createElement(InputAdornment, {\n          position: \"end\",\n          classes: {\n            root: props.select ? selectAdornment : null\n          }\n        }, React.createElement(IconButton, {\n          className: clearButton,\n          \"aria-label\": translate('ra.action.clear_input_value'),\n          title: translate('ra.action.clear_input_value'),\n          disabled: true,\n          size: \"large\"\n        }, React.createElement(ClearIcon, {\n          className: clsx(clearIcon, visibleClearIcon)\n        })));\n      } else {\n        if (endAdornment) {\n          return endAdornment;\n        } else {\n          // show spacer\n          return React.createElement(InputAdornment, {\n            position: \"end\",\n            classes: {\n              root: props.select ? selectAdornment : null\n            }\n          }, React.createElement(\"span\", {\n            className: clearButton\n          }, \"\\u00A0\"));\n        }\n      }\n    } else {\n      // show clear\n      return React.createElement(InputAdornment, {\n        position: \"end\",\n        classes: {\n          root: props.select ? selectAdornment : null\n        }\n      }, React.createElement(IconButton, {\n        className: clearButton,\n        \"aria-label\": translate('ra.action.clear_input_value'),\n        title: translate('ra.action.clear_input_value'),\n        onClick: handleClickClearButton,\n        onMouseDown: handleMouseDownClearButton,\n        disabled: disabled,\n        size: \"large\"\n      }, React.createElement(ClearIcon, {\n        className: clsx(clearIcon, (_a = {}, _a[visibleClearIcon] = clearAlwaysVisible || value, _a))\n      })));\n    }\n  };\n\n  return React.createElement(StyledTextField, __assign({\n    value: value,\n    InputProps: __assign({\n      classes: props.select && variant === 'filled' ? {\n        adornedEnd: inputAdornedEnd\n      } : {},\n      endAdornment: getEndAdornment()\n    }, InputPropsWithoutEndAdornment),\n    disabled: disabled,\n    variant: variant,\n    margin: margin,\n    className: className,\n    size: \"small\"\n  }, rest, {\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    inputRef: ref\n  }));\n});\nResettableTextField.displayName = 'ResettableTextField';\n\nvar handleMouseDownClearButton = function (event) {\n  event.preventDefault();\n};\n\nResettableTextField.propTypes = {\n  clearAlwaysVisible: PropTypes.bool,\n  disabled: PropTypes.bool,\n  InputProps: PropTypes.object,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  resettable: PropTypes.bool,\n  value: PropTypes.any\n};\nvar PREFIX = 'RaResettableTextField';\nexport var ResettableTextFieldClasses = {\n  clearIcon: \"\".concat(PREFIX, \"-clearIcon\"),\n  visibleClearIcon: \"\".concat(PREFIX, \"-visibleClearIcon\"),\n  clearButton: \"\".concat(PREFIX, \"-clearButton\"),\n  selectAdornment: \"\".concat(PREFIX, \"-selectAdornment\"),\n  inputAdornedEnd: \"\".concat(PREFIX, \"-inputAdornedEnd\")\n};\nexport var ResettableTextFieldStyles = (_a = {}, _a[\"& .\".concat(ResettableTextFieldClasses.clearIcon)] = {\n  height: 16,\n  width: 0\n}, _a[\"& .\".concat(ResettableTextFieldClasses.visibleClearIcon)] = {\n  width: 16\n}, _a[\"& .\".concat(ResettableTextFieldClasses.clearButton)] = {\n  height: 24,\n  width: 24,\n  padding: 0\n}, _a[\"& .\".concat(ResettableTextFieldClasses.selectAdornment)] = {\n  position: 'absolute',\n  right: 24\n}, _a[\"& .\".concat(ResettableTextFieldClasses.inputAdornedEnd)] = {\n  paddingRight: 0\n}, _a);\nvar StyledTextField = styled(MuiTextField, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(ResettableTextFieldStyles);","map":{"version":3,"mappings":"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","names":["React","forwardRef","useCallback","styled","PropTypes","clsx","InputAdornment","IconButton","TextField","MuiTextField","ClearIcon","useTranslate","ResettableTextField","props","ref","InputProps","value","resettable","disabled","variant","margin","className","rest","translate","onFocus","onBlur","handleClickClearButton","event","preventDefault","onChange","handleFocus","handleBlur","ResettableTextFieldClasses","clearIcon","inputAdornedEnd","selectAdornment","visibleClearIcon","_a","endAdornment","InputPropsWithoutEndAdornment","clearAlwaysVisible","Error","getEndAdornment","position","classes","root","select","clearButton","title","size","onClick","onMouseDown","handleMouseDownClearButton","StyledTextField","__assign","adornedEnd","inputRef","displayName","propTypes","bool","object","func","isRequired","any","PREFIX","ResettableTextFieldStyles","height","width","padding","right","paddingRight","name","overridesResolver","styles"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/ResettableTextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { forwardRef, useCallback } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    InputAdornment,\n    IconButton,\n    TextField as MuiTextField,\n    TextFieldProps,\n} from '@mui/material';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { useTranslate } from 'ra-core';\n\n/**\n * An override of the default Material UI TextField which is resettable\n */\nexport const ResettableTextField = forwardRef(\n    (props: ResettableTextFieldProps, ref) => {\n        const {\n            clearAlwaysVisible,\n            InputProps,\n            value,\n            resettable,\n            disabled,\n            variant,\n            margin,\n            className,\n            ...rest\n        } = props;\n\n        const translate = useTranslate();\n\n        const { onChange, onFocus, onBlur } = props;\n        const handleClickClearButton = useCallback(\n            event => {\n                event.preventDefault();\n                onChange('');\n            },\n            [onChange]\n        );\n\n        const handleFocus = useCallback(\n            event => {\n                onFocus && onFocus(event);\n            },\n            [onFocus]\n        );\n\n        const handleBlur = useCallback(\n            event => {\n                onBlur && onBlur(event);\n            },\n            [onBlur]\n        );\n\n        const {\n            clearButton,\n            clearIcon,\n            inputAdornedEnd,\n            selectAdornment,\n            visibleClearIcon,\n        } = ResettableTextFieldClasses;\n\n        const { endAdornment, ...InputPropsWithoutEndAdornment } =\n            InputProps || {};\n\n        if (clearAlwaysVisible && endAdornment) {\n            throw new Error(\n                'ResettableTextField cannot display both an endAdornment and a clear button always visible'\n            );\n        }\n\n        const getEndAdornment = () => {\n            if (!resettable) {\n                return endAdornment;\n            } else if (!value) {\n                if (clearAlwaysVisible) {\n                    // show clear button, inactive\n                    return (\n                        <InputAdornment\n                            position=\"end\"\n                            classes={{\n                                root: props.select ? selectAdornment : null,\n                            }}\n                        >\n                            <IconButton\n                                className={clearButton}\n                                aria-label={translate(\n                                    'ra.action.clear_input_value'\n                                )}\n                                title={translate('ra.action.clear_input_value')}\n                                disabled={true}\n                                size=\"large\"\n                            >\n                                <ClearIcon\n                                    className={clsx(\n                                        clearIcon,\n                                        visibleClearIcon\n                                    )}\n                                />\n                            </IconButton>\n                        </InputAdornment>\n                    );\n                } else {\n                    if (endAdornment) {\n                        return endAdornment;\n                    } else {\n                        // show spacer\n                        return (\n                            <InputAdornment\n                                position=\"end\"\n                                classes={{\n                                    root: props.select ? selectAdornment : null,\n                                }}\n                            >\n                                <span className={clearButton}>&nbsp;</span>\n                            </InputAdornment>\n                        );\n                    }\n                }\n            } else {\n                // show clear\n                return (\n                    <InputAdornment\n                        position=\"end\"\n                        classes={{\n                            root: props.select ? selectAdornment : null,\n                        }}\n                    >\n                        <IconButton\n                            className={clearButton}\n                            aria-label={translate(\n                                'ra.action.clear_input_value'\n                            )}\n                            title={translate('ra.action.clear_input_value')}\n                            onClick={handleClickClearButton}\n                            onMouseDown={handleMouseDownClearButton}\n                            disabled={disabled}\n                            size=\"large\"\n                        >\n                            <ClearIcon\n                                className={clsx(clearIcon, {\n                                    [visibleClearIcon]:\n                                        clearAlwaysVisible || value,\n                                })}\n                            />\n                        </IconButton>\n                    </InputAdornment>\n                );\n            }\n        };\n\n        return (\n            <StyledTextField\n                value={value}\n                InputProps={{\n                    classes:\n                        props.select && variant === 'filled'\n                            ? { adornedEnd: inputAdornedEnd }\n                            : {},\n                    endAdornment: getEndAdornment(),\n                    ...InputPropsWithoutEndAdornment,\n                }}\n                disabled={disabled}\n                variant={variant}\n                margin={margin}\n                className={className}\n                size=\"small\"\n                {...rest}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n                inputRef={ref}\n            />\n        );\n    }\n);\n\nResettableTextField.displayName = 'ResettableTextField';\n\nconst handleMouseDownClearButton = event => {\n    event.preventDefault();\n};\n\nResettableTextField.propTypes = {\n    clearAlwaysVisible: PropTypes.bool,\n    disabled: PropTypes.bool,\n    InputProps: PropTypes.object,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func.isRequired,\n    onFocus: PropTypes.func,\n    resettable: PropTypes.bool,\n    value: PropTypes.any,\n};\n\ninterface Props {\n    clearAlwaysVisible?: boolean;\n    resettable?: boolean;\n}\n\nexport type ResettableTextFieldProps = Props &\n    Omit<TextFieldProps, 'onChange'> & {\n        onChange?: (eventOrValue: any) => void;\n    };\n\nconst PREFIX = 'RaResettableTextField';\n\nexport const ResettableTextFieldClasses = {\n    clearIcon: `${PREFIX}-clearIcon`,\n    visibleClearIcon: `${PREFIX}-visibleClearIcon`,\n    clearButton: `${PREFIX}-clearButton`,\n    selectAdornment: `${PREFIX}-selectAdornment`,\n    inputAdornedEnd: `${PREFIX}-inputAdornedEnd`,\n};\n\nexport const ResettableTextFieldStyles = {\n    [`& .${ResettableTextFieldClasses.clearIcon}`]: {\n        height: 16,\n        width: 0,\n    },\n    [`& .${ResettableTextFieldClasses.visibleClearIcon}`]: {\n        width: 16,\n    },\n    [`& .${ResettableTextFieldClasses.clearButton}`]: {\n        height: 24,\n        width: 24,\n        padding: 0,\n    },\n    [`& .${ResettableTextFieldClasses.selectAdornment}`]: {\n        position: 'absolute',\n        right: 24,\n    },\n    [`& .${ResettableTextFieldClasses.inputAdornedEnd}`]: {\n        paddingRight: 0,\n    },\n};\n\nconst StyledTextField = styled(MuiTextField, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(ResettableTextFieldStyles);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as React from 'react';\nimport { useRef, useEffect, useState, cloneElement } from 'react';\nimport { usePreferencesEditor, PreferenceKeyContextProvider, useTranslate } from 'ra-core';\nimport { alpha, Popover } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport clsx from 'clsx';\n/**\n * Wrap any component with this component to make it configurable\n *\n * When the edit mode is enabled, users will see a button to edit the component;\n * when clicked, the inspector will show the editor element.\n *\n * Creates a context for the preference key, so that both the child component\n * and the editor can access it using usePreferenceKey();\n *\n * @example\n * const ConfigurableTextBlock = ({ preferenceKey = \"TextBlock\", ...props }) => (\n *     <Configurable editor={<TextBlockInspector />} preferenceKey={preferenceKey}>\n *         <TextBlock {...props} />\n *     </Configurable>\n * );\n */\n\nexport var Configurable = function Configurable(props) {\n  var children = props.children,\n      editor = props.editor,\n      preferenceKey = props.preferenceKey,\n      _a = props.openButtonLabel,\n      openButtonLabel = _a === void 0 ? 'ra.configurable.customize' : _a,\n      sx = props.sx;\n  var prefixedPreferenceKey = \"preferences.\".concat(preferenceKey);\n  var preferencesEditorContext = usePreferencesEditor();\n  var hasPreferencesEditorContext = !!preferencesEditorContext;\n  var translate = useTranslate();\n\n  var _b = preferencesEditorContext || {},\n      isEnabled = _b.isEnabled,\n      setEditor = _b.setEditor,\n      currentPreferenceKey = _b.preferenceKey,\n      setPreferenceKey = _b.setPreferenceKey;\n\n  var isEditorOpen = prefixedPreferenceKey === currentPreferenceKey;\n  var editorOpenRef = useRef(isEditorOpen);\n  var wrapperRef = useRef(null);\n\n  var _c = useState(false),\n      isCustomizeButtonVisible = _c[0],\n      setIsCustomizeButtonVisible = _c[1];\n\n  useEffect(function () {\n    editorOpenRef.current = isEditorOpen;\n  }, [isEditorOpen]); // on unmount, if selected, remove the editor\n\n  useEffect(function () {\n    return function () {\n      if (!editorOpenRef.current) return;\n      setPreferenceKey && setPreferenceKey(null);\n      setEditor && setEditor(null);\n    };\n  }, [setEditor, setPreferenceKey]);\n\n  if (!hasPreferencesEditorContext) {\n    return children;\n  }\n\n  var handleOpenEditor = function handleOpenEditor() {\n    // include the editorKey as key to force destroy and mount\n    // when switching between two identical editors with different editor keys\n    // otherwise the editor will see an update and its useStore will return one tick later\n    // which would forbid the usage of uncontrolled inputs in the editor\n    setEditor(cloneElement(editor, {\n      preferenceKey: prefixedPreferenceKey,\n      key: prefixedPreferenceKey\n    })); // as we modify the editor, isEditorOpen cannot compare the editor element\n    // we'll compare the editor key instead\n\n    setPreferenceKey(prefixedPreferenceKey);\n  };\n\n  var handleShowButton = function handleShowButton(event) {\n    setIsCustomizeButtonVisible(true);\n  };\n\n  var handleHideButton = function handleHideButton() {\n    setIsCustomizeButtonVisible(false);\n  };\n\n  return React.createElement(PreferenceKeyContextProvider, {\n    value: prefixedPreferenceKey\n  }, React.createElement(Root, {\n    className: clsx(isEnabled && ConfigurableClasses.editMode, isEditorOpen && ConfigurableClasses.editorActive),\n    sx: sx,\n    ref: wrapperRef,\n    onMouseEnter: isEnabled ? handleShowButton : undefined,\n    onMouseLeave: isEnabled ? handleHideButton : undefined\n  }, children), React.createElement(Popover, {\n    open: isEnabled && (isCustomizeButtonVisible || isEditorOpen),\n    sx: {\n      pointerEvents: 'none',\n      '& .MuiPaper-root': {\n        pointerEvents: 'auto',\n        borderRadius: 10,\n        padding: '2px',\n        lineHeight: 0,\n        backgroundColor: 'warning.light',\n        color: 'warning.contrastText',\n        '&:hover': {\n          cursor: 'pointer'\n        }\n      }\n    },\n    anchorEl: wrapperRef.current,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    transformOrigin: {\n      vertical: 'center',\n      horizontal: 'center'\n    },\n    onClose: handleHideButton,\n    PaperProps: {\n      elevation: 1,\n      onMouseEnter: handleShowButton,\n      onMouseLeave: handleHideButton,\n      title: translate(openButtonLabel),\n      onClick: handleOpenEditor\n    },\n    disableAutoFocus: true,\n    disableRestoreFocus: true,\n    disableEnforceFocus: true,\n    disableScrollLock: true,\n    marginThreshold: 8\n  }, React.createElement(SettingsIcon // @ts-ignore\n  , {\n    // @ts-ignore\n    fontSize: \"12px\"\n  })));\n};\nvar PREFIX = 'RaConfigurable';\nexport var ConfigurableClasses = {\n  editMode: \"\".concat(PREFIX, \"-editMode\"),\n  editorActive: \"\".concat(PREFIX, \"-editorActive\")\n};\nvar Root = styled('span', {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {\n    position: 'relative',\n    display: 'inline-block'\n  }, _b[\"&.\".concat(ConfigurableClasses.editMode)] = {\n    transition: theme.transitions.create('outline'),\n    outline: \"\".concat(alpha(theme.palette.warning.main, 0.3), \" solid 2px\")\n  }, _b[\"&.\".concat(ConfigurableClasses.editMode, \":hover \")] = {\n    outline: \"\".concat(alpha(theme.palette.warning.main, 0.5), \" solid 2px\")\n  }, _b[\"&.\".concat(ConfigurableClasses.editMode, \".\").concat(ConfigurableClasses.editorActive, \" , &.\").concat(ConfigurableClasses.editMode, \".\").concat(ConfigurableClasses.editorActive, \":hover \")] = {\n    outline: \"\".concat(theme.palette.warning.main, \" solid 2px\")\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","useRef","useEffect","useState","cloneElement","usePreferencesEditor","PreferenceKeyContextProvider","useTranslate","alpha","Popover","styled","SettingsIcon","clsx","Configurable","props","editor","preferenceKey","_a","openButtonLabel","sx","prefixedPreferenceKey","preferencesEditorContext","hasPreferencesEditorContext","translate","isEnabled","setEditor","currentPreferenceKey","setPreferenceKey","isEditorOpen","editorOpenRef","wrapperRef","isCustomizeButtonVisible","setIsCustomizeButtonVisible","current","children","handleOpenEditor","key","handleShowButton","handleHideButton","value","Root","className","ConfigurableClasses","editMode","editorActive","ref","onMouseEnter","undefined","onMouseLeave","open","pointerEvents","borderRadius","padding","lineHeight","backgroundColor","color","cursor","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","onClose","PaperProps","elevation","title","onClick","disableAutoFocus","disableRestoreFocus","disableEnforceFocus","disableScrollLock","marginThreshold","fontSize","PREFIX","name","overridesResolver","styles","root","theme","position","display","_b","transition","transitions","create","outline","palette","warning","main","concat"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/preferences/Configurable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useRef, useEffect, useState, cloneElement, ReactElement } from 'react';\nimport {\n    usePreferencesEditor,\n    PreferenceKeyContextProvider,\n    useTranslate,\n} from 'ra-core';\nimport { alpha, Popover } from '@mui/material';\nimport { styled, SxProps } from '@mui/material/styles';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport clsx from 'clsx';\n\n/**\n * Wrap any component with this component to make it configurable\n *\n * When the edit mode is enabled, users will see a button to edit the component;\n * when clicked, the inspector will show the editor element.\n *\n * Creates a context for the preference key, so that both the child component\n * and the editor can access it using usePreferenceKey();\n *\n * @example\n * const ConfigurableTextBlock = ({ preferenceKey = \"TextBlock\", ...props }) => (\n *     <Configurable editor={<TextBlockInspector />} preferenceKey={preferenceKey}>\n *         <TextBlock {...props} />\n *     </Configurable>\n * );\n */\nexport const Configurable = (props: ConfigurableProps) => {\n    const {\n        children,\n        editor,\n        preferenceKey,\n        openButtonLabel = 'ra.configurable.customize',\n        sx,\n    } = props;\n\n    const prefixedPreferenceKey = `preferences.${preferenceKey}`;\n    const preferencesEditorContext = usePreferencesEditor();\n    const hasPreferencesEditorContext = !!preferencesEditorContext;\n\n    const translate = useTranslate();\n\n    const {\n        isEnabled,\n        setEditor,\n        preferenceKey: currentPreferenceKey,\n        setPreferenceKey,\n    } = preferencesEditorContext || {};\n\n    const isEditorOpen = prefixedPreferenceKey === currentPreferenceKey;\n    const editorOpenRef = useRef(isEditorOpen);\n    const wrapperRef = useRef(null);\n    const [isCustomizeButtonVisible, setIsCustomizeButtonVisible] = useState(\n        false\n    );\n\n    useEffect(() => {\n        editorOpenRef.current = isEditorOpen;\n    }, [isEditorOpen]);\n\n    // on unmount, if selected, remove the editor\n    useEffect(() => {\n        return () => {\n            if (!editorOpenRef.current) return;\n            setPreferenceKey && setPreferenceKey(null);\n            setEditor && setEditor(null);\n        };\n    }, [setEditor, setPreferenceKey]);\n\n    if (!hasPreferencesEditorContext) {\n        return children;\n    }\n\n    const handleOpenEditor = () => {\n        // include the editorKey as key to force destroy and mount\n        // when switching between two identical editors with different editor keys\n        // otherwise the editor will see an update and its useStore will return one tick later\n        // which would forbid the usage of uncontrolled inputs in the editor\n        setEditor(\n            cloneElement(editor, {\n                preferenceKey: prefixedPreferenceKey,\n                key: prefixedPreferenceKey,\n            })\n        );\n        // as we modify the editor, isEditorOpen cannot compare the editor element\n        // we'll compare the editor key instead\n        setPreferenceKey(prefixedPreferenceKey);\n    };\n\n    const handleShowButton = event => {\n        setIsCustomizeButtonVisible(true);\n    };\n\n    const handleHideButton = () => {\n        setIsCustomizeButtonVisible(false);\n    };\n\n    return (\n        <PreferenceKeyContextProvider value={prefixedPreferenceKey}>\n            <Root\n                className={clsx(\n                    isEnabled && ConfigurableClasses.editMode,\n                    isEditorOpen && ConfigurableClasses.editorActive\n                )}\n                sx={sx}\n                ref={wrapperRef}\n                onMouseEnter={isEnabled ? handleShowButton : undefined}\n                onMouseLeave={isEnabled ? handleHideButton : undefined}\n            >\n                {children}\n            </Root>\n            <Popover\n                open={isEnabled && (isCustomizeButtonVisible || isEditorOpen)}\n                sx={{\n                    pointerEvents: 'none',\n                    '& .MuiPaper-root': {\n                        pointerEvents: 'auto',\n                        borderRadius: 10,\n                        padding: '2px',\n                        lineHeight: 0,\n                        backgroundColor: 'warning.light',\n                        color: 'warning.contrastText',\n                        '&:hover': {\n                            cursor: 'pointer',\n                        },\n                    },\n                }}\n                anchorEl={wrapperRef.current}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                }}\n                transformOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                onClose={handleHideButton}\n                PaperProps={{\n                    elevation: 1,\n                    onMouseEnter: handleShowButton,\n                    onMouseLeave: handleHideButton,\n                    title: translate(openButtonLabel),\n                    onClick: handleOpenEditor,\n                }}\n                disableAutoFocus\n                disableRestoreFocus\n                disableEnforceFocus\n                disableScrollLock\n                marginThreshold={8}\n            >\n                <SettingsIcon\n                    // @ts-ignore\n                    fontSize=\"12px\"\n                />\n            </Popover>\n        </PreferenceKeyContextProvider>\n    );\n};\n\nexport interface ConfigurableProps {\n    children: ReactElement;\n    editor: ReactElement;\n    preferenceKey: string;\n    openButtonLabel?: string;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaConfigurable';\n\nexport const ConfigurableClasses = {\n    editMode: `${PREFIX}-editMode`,\n    editorActive: `${PREFIX}-editorActive`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    position: 'relative',\n    display: 'inline-block',\n    [`&.${ConfigurableClasses.editMode}`]: {\n        transition: theme.transitions.create('outline'),\n        outline: `${alpha(theme.palette.warning.main, 0.3)} solid 2px`,\n    },\n    [`&.${ConfigurableClasses.editMode}:hover `]: {\n        outline: `${alpha(theme.palette.warning.main, 0.5)} solid 2px`,\n    },\n    [`&.${ConfigurableClasses.editMode}.${ConfigurableClasses.editorActive} , &.${ConfigurableClasses.editMode}.${ConfigurableClasses.editorActive}:hover `]: {\n        outline: `${theme.palette.warning.main} solid 2px`,\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
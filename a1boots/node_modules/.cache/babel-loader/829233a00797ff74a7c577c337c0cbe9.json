{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, isValidElement, useMemo } from 'react';\nimport { Typography } from '@mui/material';\nimport clsx from 'clsx';\nimport { SimpleFormIteratorClasses } from './useSimpleFormIteratorStyles';\nimport { useSimpleFormIterator } from './useSimpleFormIterator';\nimport { SimpleFormIteratorItemContext } from './SimpleFormIteratorItemContext';\nexport var SimpleFormIteratorItem = React.forwardRef(function (props, ref) {\n  var children = props.children,\n      disabled = props.disabled,\n      disableReordering = props.disableReordering,\n      disableRemove = props.disableRemove,\n      getItemLabel = props.getItemLabel,\n      index = props.index,\n      _a = props.inline,\n      inline = _a === void 0 ? false : _a,\n      member = props.member,\n      record = props.record,\n      removeButton = props.removeButton,\n      reOrderButtons = props.reOrderButtons,\n      resource = props.resource,\n      source = props.source;\n\n  var _b = useSimpleFormIterator(),\n      total = _b.total,\n      reOrder = _b.reOrder,\n      remove = _b.remove; // Returns a boolean to indicate whether to disable the remove button for certain fields.\n  // If disableRemove is a function, then call the function with the current record to\n  // determining if the button should be disabled. Otherwise, use a boolean property that\n  // enables or disables the button for all of the fields.\n\n\n  var disableRemoveField = function (record) {\n    if (typeof disableRemove === 'boolean') {\n      return disableRemove;\n    }\n\n    return disableRemove && disableRemove(record);\n  }; // remove field and call the onClick event of the button passed as removeButton prop\n\n\n  var handleRemoveButtonClick = function (originalOnClickHandler, index) {\n    return function (event) {\n      remove(index);\n\n      if (originalOnClickHandler) {\n        originalOnClickHandler(event);\n      }\n    };\n  };\n\n  var context = useMemo(function () {\n    return {\n      index: index,\n      total: total,\n      reOrder: function (newIndex) {\n        return reOrder(index, newIndex);\n      },\n      remove: function () {\n        return remove(index);\n      }\n    };\n  }, [index, total, reOrder, remove]);\n  var label = typeof getItemLabel === 'function' ? getItemLabel(index) : getItemLabel;\n  return React.createElement(SimpleFormIteratorItemContext.Provider, {\n    value: context\n  }, React.createElement(\"li\", {\n    className: SimpleFormIteratorClasses.line,\n    ref: ref\n  }, label && React.createElement(Typography, {\n    variant: \"body2\",\n    className: SimpleFormIteratorClasses.index\n  }, label), React.createElement(\"section\", {\n    className: clsx(SimpleFormIteratorClasses.form, inline && SimpleFormIteratorClasses.inline)\n  }, Children.map(children, function (input, index2) {\n    if (!isValidElement(input)) {\n      return null;\n    }\n\n    var _a = input.props,\n        source = _a.source,\n        inputProps = __rest(_a, [\"source\"]);\n\n    return cloneElement(input, __assign({\n      source: source ? \"\".concat(member, \".\").concat(source) : member,\n      index: source ? undefined : index2,\n      resource: resource,\n      disabled: disabled\n    }, inputProps));\n  })), !disabled && React.createElement(\"span\", {\n    className: SimpleFormIteratorClasses.action\n  }, !disableReordering && cloneElement(reOrderButtons, {\n    index: index,\n    max: total,\n    reOrder: reOrder,\n    className: clsx('button-reorder', \"button-reorder-\".concat(source, \"-\").concat(index))\n  }), !disableRemoveField(record) && cloneElement(removeButton, {\n    onClick: handleRemoveButtonClick(removeButton.props.onClick, index),\n    className: clsx('button-remove', \"button-remove-\".concat(source, \"-\").concat(index))\n  }))));\n});","map":{"version":3,"mappings":"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","names":["React","Children","cloneElement","isValidElement","useMemo","Typography","clsx","SimpleFormIteratorClasses","useSimpleFormIterator","SimpleFormIteratorItemContext","SimpleFormIteratorItem","forwardRef","props","ref","disabled","disableReordering","disableRemove","getItemLabel","index","_a","inline","member","record","removeButton","reOrderButtons","resource","source","total","reOrder","remove","disableRemoveField","handleRemoveButtonClick","originalOnClickHandler","event","context","newIndex","label","Provider","value","className","line","variant","form","map","children","input","index2","inputProps","__assign","concat","undefined","action","max","onClick"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/ArrayInput/SimpleFormIteratorItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    cloneElement,\n    MouseEvent,\n    MouseEventHandler,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    useMemo,\n} from 'react';\nimport { Typography } from '@mui/material';\nimport clsx from 'clsx';\nimport { RaRecord } from 'ra-core';\n\nimport { SimpleFormIteratorClasses } from './useSimpleFormIteratorStyles';\nimport { useSimpleFormIterator } from './useSimpleFormIterator';\nimport { ArrayInputContextValue } from './ArrayInputContext';\nimport {\n    SimpleFormIteratorItemContext,\n    SimpleFormIteratorItemContextValue,\n} from './SimpleFormIteratorItemContext';\n\nexport const SimpleFormIteratorItem = React.forwardRef(\n    (props: SimpleFormIteratorItemProps, ref: any) => {\n        const {\n            children,\n            disabled,\n            disableReordering,\n            disableRemove,\n            getItemLabel,\n            index,\n            inline = false,\n            member,\n            record,\n            removeButton,\n            reOrderButtons,\n            resource,\n            source,\n        } = props;\n\n        const { total, reOrder, remove } = useSimpleFormIterator();\n        // Returns a boolean to indicate whether to disable the remove button for certain fields.\n        // If disableRemove is a function, then call the function with the current record to\n        // determining if the button should be disabled. Otherwise, use a boolean property that\n        // enables or disables the button for all of the fields.\n        const disableRemoveField = (record: RaRecord) => {\n            if (typeof disableRemove === 'boolean') {\n                return disableRemove;\n            }\n            return disableRemove && disableRemove(record);\n        };\n\n        // remove field and call the onClick event of the button passed as removeButton prop\n        const handleRemoveButtonClick = (\n            originalOnClickHandler: MouseEventHandler,\n            index: number\n        ) => (event: MouseEvent) => {\n            remove(index);\n            if (originalOnClickHandler) {\n                originalOnClickHandler(event);\n            }\n        };\n\n        const context = useMemo<SimpleFormIteratorItemContextValue>(\n            () => ({\n                index,\n                total,\n                reOrder: newIndex => reOrder(index, newIndex),\n                remove: () => remove(index),\n            }),\n            [index, total, reOrder, remove]\n        );\n\n        const label =\n            typeof getItemLabel === 'function'\n                ? getItemLabel(index)\n                : getItemLabel;\n\n        return (\n            <SimpleFormIteratorItemContext.Provider value={context}>\n                <li className={SimpleFormIteratorClasses.line} ref={ref}>\n                    {label && (\n                        <Typography\n                            variant=\"body2\"\n                            className={SimpleFormIteratorClasses.index}\n                        >\n                            {label}\n                        </Typography>\n                    )}\n                    <section\n                        className={clsx(\n                            SimpleFormIteratorClasses.form,\n                            inline && SimpleFormIteratorClasses.inline\n                        )}\n                    >\n                        {Children.map(\n                            children,\n                            (input: ReactElement, index2) => {\n                                if (!isValidElement<any>(input)) {\n                                    return null;\n                                }\n                                const { source, ...inputProps } = input.props;\n                                return cloneElement(input, {\n                                    source: source\n                                        ? `${member}.${source}`\n                                        : member,\n                                    index: source ? undefined : index2,\n                                    resource,\n                                    disabled,\n                                    ...inputProps,\n                                });\n                            }\n                        )}\n                    </section>\n                    {!disabled && (\n                        <span className={SimpleFormIteratorClasses.action}>\n                            {!disableReordering &&\n                                cloneElement(reOrderButtons, {\n                                    index,\n                                    max: total,\n                                    reOrder,\n                                    className: clsx(\n                                        'button-reorder',\n                                        `button-reorder-${source}-${index}`\n                                    ),\n                                })}\n\n                            {!disableRemoveField(record) &&\n                                cloneElement(removeButton, {\n                                    onClick: handleRemoveButtonClick(\n                                        removeButton.props.onClick,\n                                        index\n                                    ),\n                                    className: clsx(\n                                        'button-remove',\n                                        `button-remove-${source}-${index}`\n                                    ),\n                                })}\n                        </span>\n                    )}\n                </li>\n            </SimpleFormIteratorItemContext.Provider>\n        );\n    }\n);\n\nexport type DisableRemoveFunction = (record: RaRecord) => boolean;\n\ntype GetItemLabelFunc = (index: number) => string | ReactElement;\n\nexport type SimpleFormIteratorItemProps = Partial<ArrayInputContextValue> & {\n    children?: ReactNode;\n    disabled?: boolean;\n    disableRemove?: boolean | DisableRemoveFunction;\n    disableReordering?: boolean;\n    getItemLabel?: boolean | GetItemLabelFunc;\n    index: number;\n    inline?: boolean;\n    member: string;\n    onRemoveField: (index: number) => void;\n    onReorder: (origin: number, destination: number) => void;\n    record: RaRecord;\n    removeButton?: ReactElement;\n    reOrderButtons?: ReactElement;\n    resource: string;\n    source: string;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as React from 'react';\nimport { CoreAdminContext } from './CoreAdminContext';\nimport { CoreAdminUI } from './CoreAdminUI';\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </CoreAdmin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </CoreAdmin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <CoreAdmin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\n * import { useEffect, useState } from 'react';\n * import {\n *     CoreAdminContext,\n *     CoreAdminUI,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdminContext dataProvider={myDataProvider}>\n *         <UI />\n *     </CoreAdminContext>\n * );\n *\n * const UI = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <CoreAdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </CoreAdminUI>\n *     );\n * };\n */\n\nexport var CoreAdmin = function CoreAdmin(props) {\n  var authProvider = props.authProvider,\n      basename = props.basename,\n      catchAll = props.catchAll,\n      children = props.children,\n      dashboard = props.dashboard,\n      dataProvider = props.dataProvider,\n      disableTelemetry = props.disableTelemetry,\n      history = props.history,\n      i18nProvider = props.i18nProvider,\n      queryClient = props.queryClient,\n      layout = props.layout,\n      loading = props.loading,\n      loginPage = props.loginPage,\n      menu = props.menu,\n      // deprecated, use a custom layout instead\n  ready = props.ready,\n      requireAuth = props.requireAuth,\n      store = props.store,\n      _a = props.title,\n      title = _a === void 0 ? 'React Admin' : _a;\n  return React.createElement(CoreAdminContext, {\n    authProvider: authProvider,\n    basename: basename,\n    dataProvider: dataProvider,\n    i18nProvider: i18nProvider,\n    queryClient: queryClient,\n    history: history,\n    store: store\n  }, React.createElement(CoreAdminUI, {\n    layout: layout,\n    dashboard: dashboard,\n    disableTelemetry: disableTelemetry,\n    menu: menu,\n    catchAll: catchAll,\n    title: title,\n    loading: loading,\n    loginPage: loginPage,\n    requireAuth: requireAuth,\n    ready: ready\n  }, children));\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,gBAAT,QAAwD,oBAAxD;AACA,SAASC,WAAT,QAA8C,eAA9C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAsB;EAEvC,gBAAY,GAkBZA,KAAK,aAlBL;EAAA,IACAC,QAAQ,GAiBRD,KAAK,SAlBL;EAAA,IAEAE,QAAQ,GAgBRF,KAAK,SAlBL;EAAA,IAGAG,QAAQ,GAeRH,KAAK,SAlBL;EAAA,IAIAI,SAAS,GAcTJ,KAAK,UAlBL;EAAA,IAKAK,YAAY,GAaZL,KAAK,aAlBL;EAAA,IAMAM,gBAAgB,GAYhBN,KAAK,iBAlBL;EAAA,IAOAO,OAAO,GAWPP,KAAK,QAlBL;EAAA,IAQAQ,YAAY,GAUZR,KAAK,aAlBL;EAAA,IASAS,WAAW,GASXT,KAAK,YAlBL;EAAA,IAUAU,MAAM,GAQNV,KAAK,OAlBL;EAAA,IAWAW,OAAO,GAOPX,KAAK,QAlBL;EAAA,IAYAY,SAAS,GAMTZ,KAAK,UAlBL;EAAA,IAaAa,IAAI,GAKJb,KAAK,KAlBL;EAAA,IAaM;EACNc,KAAK,GAILd,KAAK,MAlBL;EAAA,IAeAe,WAAW,GAGXf,KAAK,YAlBL;EAAA,IAgBAgB,KAAK,GAELhB,KAAK,MAlBL;EAAA,IAiBAiB,KACAjB,KAAK,MAlBL;EAAA,IAiBAkB,KAAK,mBAAG,aAAH,GAAgBD,EAjBrB;EAmBJ,OACIrB,oBAACC,gBAAD,EAAiB;IACbsB,YAAY,EAAEA,YADD;IAEblB,QAAQ,EAAEA,QAFG;IAGbI,YAAY,EAAEA,YAHD;IAIbG,YAAY,EAAEA,YAJD;IAKbC,WAAW,EAAEA,WALA;IAMbF,OAAO,EAAEA,OANI;IAObS,KAAK,EAAEA;EAPM,CAAjB,EASIpB,oBAACE,WAAD,EAAY;IACRY,MAAM,EAAEA,MADA;IAERN,SAAS,EAAEA,SAFH;IAGRE,gBAAgB,EAAEA,gBAHV;IAIRO,IAAI,EAAEA,IAJE;IAKRX,QAAQ,EAAEA,QALF;IAMRgB,KAAK,EAAEA,KANC;IAORP,OAAO,EAAEA,OAPD;IAQRC,SAAS,EAAEA,SARH;IASRG,WAAW,EAAEA,WATL;IAURD,KAAK,EAAEA;EAVC,CAAZ,EAYKX,QAZL,CATJ,CADJ;AA0BH,CA/CM","names":["React","CoreAdminContext","CoreAdminUI","CoreAdmin","props","basename","catchAll","children","dashboard","dataProvider","disableTelemetry","history","i18nProvider","queryClient","layout","loading","loginPage","menu","ready","requireAuth","store","_a","title","authProvider"],"sources":["/var/www/a1boots/node_modules/ra-core/src/core/CoreAdmin.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { CoreAdminContext, CoreAdminContextProps } from './CoreAdminContext';\nimport { CoreAdminUI, CoreAdminUIProps } from './CoreAdminUI';\n\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </CoreAdmin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     CoreAdmin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdmin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </CoreAdmin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <CoreAdmin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\n * import { useEffect, useState } from 'react';\n * import {\n *     CoreAdminContext,\n *     CoreAdminUI,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'ra-core';\n *\n * const App = () => (\n *     <CoreAdminContext dataProvider={myDataProvider}>\n *         <UI />\n *     </CoreAdminContext>\n * );\n *\n * const UI = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <CoreAdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </CoreAdminUI>\n *     );\n * };\n */\nexport const CoreAdmin = (props: CoreAdminProps) => {\n    const {\n        authProvider,\n        basename,\n        catchAll,\n        children,\n        dashboard,\n        dataProvider,\n        disableTelemetry,\n        history,\n        i18nProvider,\n        queryClient,\n        layout,\n        loading,\n        loginPage,\n        menu, // deprecated, use a custom layout instead\n        ready,\n        requireAuth,\n        store,\n        title = 'React Admin',\n    } = props;\n    return (\n        <CoreAdminContext\n            authProvider={authProvider}\n            basename={basename}\n            dataProvider={dataProvider}\n            i18nProvider={i18nProvider}\n            queryClient={queryClient}\n            history={history}\n            store={store}\n        >\n            <CoreAdminUI\n                layout={layout}\n                dashboard={dashboard}\n                disableTelemetry={disableTelemetry}\n                menu={menu}\n                catchAll={catchAll}\n                title={title}\n                loading={loading}\n                loginPage={loginPage}\n                requireAuth={requireAuth}\n                ready={ready}\n            >\n                {children}\n            </CoreAdminUI>\n        </CoreAdminContext>\n    );\n};\n\nexport type CoreAdminProps = CoreAdminContextProps & CoreAdminUIProps;\n"]},"metadata":{},"sourceType":"module"}
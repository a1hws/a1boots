{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, isValidElement, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/material/styles';\nimport { Divider } from '@mui/material';\nimport { Outlet, Routes, Route } from 'react-router-dom';\nimport { useRecordContext, OptionalRecordContextProvider } from 'ra-core';\nimport { TabbedShowLayoutTabs, getShowLayoutTabFullPath } from './TabbedShowLayoutTabs';\nimport { Tab } from './Tab';\n/**\n * Layout for a Show view showing fields grouped in tabs and laid out in a single column.\n *\n * It pulls the record from the RecordContext. It renders a set of `<Tabs>`,\n * each of which contains a list of record fields in a single-column layout\n * (via Material UI's `<Stack>` component).\n * `<TabbedShowLayout>` delegates the actual rendering of fields to its children,\n * which should be `<TabbedShowLayout.Tab>` components.\n * `<TabbedShowLayout.Tab>` wraps each field inside a `<Labeled>` component to add a label.\n *\n * @example\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, TabbedShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <TabbedShowLayout>\n *             <TabbedShowLayout.Tab label=\"Content\">\n *                 <TextField source=\"title\" />\n *                 <TextField source=\"subtitle\" />\n *            </TabbedShowLayout.Tab>\n *             <TabbedShowLayout.Tab label=\"Metadata\">\n *                 <TextField source=\"category\" />\n *            </TabbedShowLayout.Tab>\n *         </TabbedShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n *\n * @param {TabbedShowLayoutProps} props\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {ReactNode} props.divider An optional divider between each field, passed to `<Stack>`.\n * @param {number} props.spacing The spacing to use between each field, passed to `<Stack>`. Defaults to 1.\n * @param {Object} props.sx Custom style object.\n * @param {boolean} props.syncWithLocation Whether to update the URL when the tab changes. Defaults to true.\n * @param {ElementType} props.tabs A custom component for rendering tabs.\n */\n\nexport var TabbedShowLayout = function (props) {\n  var children = props.children,\n      className = props.className,\n      spacing = props.spacing,\n      divider = props.divider,\n      _a = props.syncWithLocation,\n      syncWithLocation = _a === void 0 ? true : _a,\n      _b = props.tabs,\n      tabs = _b === void 0 ? DefaultTabs : _b,\n      value = props.value,\n      rest = __rest(props, [\"children\", \"className\", \"spacing\", \"divider\", \"syncWithLocation\", \"tabs\", \"value\"]);\n\n  var record = useRecordContext(props);\n  var nonNullChildren = Children.toArray(children).filter(function (child) {\n    return child !== null;\n  });\n\n  var _c = useState(0),\n      tabValue = _c[0],\n      setTabValue = _c[1];\n\n  var handleTabChange = function (event, value) {\n    if (!syncWithLocation) {\n      setTabValue(value);\n    }\n  };\n\n  if (!record) {\n    return null;\n  }\n\n  var renderTabHeaders = function () {\n    return cloneElement(tabs, {\n      onChange: handleTabChange,\n      syncWithLocation: syncWithLocation,\n      value: tabValue\n    }, nonNullChildren);\n  };\n\n  return React.createElement(OptionalRecordContextProvider, {\n    value: props.record\n  }, React.createElement(Root, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), syncWithLocation ? React.createElement(Routes, null, React.createElement(Route, {\n    path: \"/*\",\n    element: React.createElement(React.Fragment, null, renderTabHeaders(), React.createElement(Divider, null), React.createElement(\"div\", {\n      className: TabbedShowLayoutClasses.content\n    }, React.createElement(Outlet, null)))\n  }, Children.map(nonNullChildren, function (tab, index) {\n    return isValidElement(tab) ? React.createElement(Route, {\n      path: getShowLayoutTabFullPath(tab, index),\n      element: cloneElement(tab, {\n        context: 'content',\n        spacing: spacing,\n        divider: divider\n      })\n    }) : null;\n  }))) : React.createElement(React.Fragment, null, renderTabHeaders(), React.createElement(Divider, null), React.createElement(\"div\", {\n    className: TabbedShowLayoutClasses.content\n  }, Children.map(nonNullChildren, function (tab, index) {\n    if (!isValidElement(tab) || tabValue !== index) {\n      return null;\n    }\n\n    return cloneElement(tab, {\n      context: 'content',\n      spacing: spacing,\n      divider: divider\n    });\n  })))));\n};\nTabbedShowLayout.Tab = Tab;\nTabbedShowLayout.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  record: PropTypes.object,\n  spacing: PropTypes.any,\n  sx: PropTypes.any,\n  syncWithLocation: PropTypes.bool,\n  tabs: PropTypes.element,\n  value: PropTypes.number\n};\nvar DefaultTabs = React.createElement(TabbedShowLayoutTabs, null);\nvar PREFIX = 'RaTabbedShowLayout';\nexport var TabbedShowLayoutClasses = {\n  content: \"\".concat(PREFIX, \"-content\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {\n    flex: 1\n  }, _b[\"& .\".concat(TabbedShowLayoutClasses.content)] = {\n    padding: \"\".concat(theme.spacing(1), \" \").concat(theme.spacing(2))\n  }, _b;\n});\n\nvar sanitizeRestProps = function (_a) {\n  var record = _a.record,\n      resource = _a.resource,\n      initialValues = _a.initialValues,\n      staticContext = _a.staticContext,\n      translate = _a.translate,\n      tabs = _a.tabs,\n      rest = __rest(_a, [\"record\", \"resource\", \"initialValues\", \"staticContext\", \"translate\", \"tabs\"]);\n\n  return rest;\n};","map":{"version":3,"mappings":"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","names":["React","Children","cloneElement","isValidElement","useState","PropTypes","styled","Divider","Outlet","Routes","Route","useRecordContext","OptionalRecordContextProvider","TabbedShowLayoutTabs","getShowLayoutTabFullPath","Tab","TabbedShowLayout","props","className","spacing","divider","_a","syncWithLocation","_b","tabs","DefaultTabs","value","rest","record","nonNullChildren","toArray","children","filter","tabValue","setTabValue","handleTabChange","event","renderTabHeaders","onChange","Root","__assign","sanitizeRestProps","path","element","TabbedShowLayoutClasses","content","map","tab","index","context","propTypes","node","string","object","any","sx","bool","number","PREFIX","name","overridesResolver","styles","root","theme","flex","padding","concat","resource","initialValues","staticContext","translate"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/detail/TabbedShowLayout.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    ChangeEvent,\n    Children,\n    cloneElement,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { ResponsiveStyleValue, SxProps } from '@mui/system';\nimport { styled } from '@mui/material/styles';\nimport { Divider } from '@mui/material';\nimport { Outlet, Routes, Route } from 'react-router-dom';\nimport {\n    RaRecord,\n    useRecordContext,\n    OptionalRecordContextProvider,\n} from 'ra-core';\n\nimport {\n    TabbedShowLayoutTabs,\n    getShowLayoutTabFullPath,\n} from './TabbedShowLayoutTabs';\nimport { Tab } from './Tab';\n\n/**\n * Layout for a Show view showing fields grouped in tabs and laid out in a single column.\n *\n * It pulls the record from the RecordContext. It renders a set of `<Tabs>`,\n * each of which contains a list of record fields in a single-column layout\n * (via Material UI's `<Stack>` component).\n * `<TabbedShowLayout>` delegates the actual rendering of fields to its children,\n * which should be `<TabbedShowLayout.Tab>` components.\n * `<TabbedShowLayout.Tab>` wraps each field inside a `<Labeled>` component to add a label.\n *\n * @example\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, TabbedShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <TabbedShowLayout>\n *             <TabbedShowLayout.Tab label=\"Content\">\n *                 <TextField source=\"title\" />\n *                 <TextField source=\"subtitle\" />\n *            </TabbedShowLayout.Tab>\n *             <TabbedShowLayout.Tab label=\"Metadata\">\n *                 <TextField source=\"category\" />\n *            </TabbedShowLayout.Tab>\n *         </TabbedShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n *\n * @param {TabbedShowLayoutProps} props\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {ReactNode} props.divider An optional divider between each field, passed to `<Stack>`.\n * @param {number} props.spacing The spacing to use between each field, passed to `<Stack>`. Defaults to 1.\n * @param {Object} props.sx Custom style object.\n * @param {boolean} props.syncWithLocation Whether to update the URL when the tab changes. Defaults to true.\n * @param {ElementType} props.tabs A custom component for rendering tabs.\n */\nexport const TabbedShowLayout = (props: TabbedShowLayoutProps) => {\n    const {\n        children,\n        className,\n        spacing,\n        divider,\n        syncWithLocation = true,\n        tabs = DefaultTabs,\n        value,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const nonNullChildren = Children.toArray(children).filter(\n        child => child !== null\n    ) as ReactElement<{\n        context?: string;\n        spacing?: ResponsiveStyleValue<number | string>;\n        divider?: ReactNode;\n    }>[];\n    const [tabValue, setTabValue] = useState(0);\n\n    const handleTabChange = (event: ChangeEvent<{}>, value: any): void => {\n        if (!syncWithLocation) {\n            setTabValue(value);\n        }\n    };\n\n    if (!record) {\n        return null;\n    }\n\n    const renderTabHeaders = () =>\n        cloneElement(\n            tabs,\n            {\n                onChange: handleTabChange,\n                syncWithLocation,\n                value: tabValue,\n            },\n            nonNullChildren\n        );\n\n    return (\n        <OptionalRecordContextProvider value={props.record}>\n            <Root className={className} {...sanitizeRestProps(rest)}>\n                {syncWithLocation ? (\n                    <Routes>\n                        <Route\n                            path=\"/*\"\n                            element={\n                                <>\n                                    {renderTabHeaders()}\n                                    <Divider />\n                                    <div\n                                        className={\n                                            TabbedShowLayoutClasses.content\n                                        }\n                                    >\n                                        <Outlet />\n                                    </div>\n                                </>\n                            }\n                        >\n                            {Children.map(nonNullChildren, (tab, index) =>\n                                isValidElement(tab) ? (\n                                    <Route\n                                        path={getShowLayoutTabFullPath(\n                                            tab,\n                                            index\n                                        )}\n                                        element={cloneElement(tab, {\n                                            context: 'content',\n                                            spacing,\n                                            divider,\n                                        })}\n                                    />\n                                ) : null\n                            )}\n                        </Route>\n                    </Routes>\n                ) : (\n                    <>\n                        {renderTabHeaders()}\n                        <Divider />\n                        <div className={TabbedShowLayoutClasses.content}>\n                            {Children.map(nonNullChildren, (tab, index) => {\n                                if (\n                                    !isValidElement(tab) ||\n                                    tabValue !== index\n                                ) {\n                                    return null;\n                                }\n                                return cloneElement(tab, {\n                                    context: 'content',\n                                    spacing,\n                                    divider,\n                                });\n                            })}\n                        </div>\n                    </>\n                )}\n            </Root>\n        </OptionalRecordContextProvider>\n    );\n};\n\nTabbedShowLayout.Tab = Tab;\n\nexport interface TabbedShowLayoutProps {\n    children: ReactNode;\n    className?: string;\n    divider?: ReactNode;\n    record?: RaRecord;\n    rootPath?: string;\n    spacing?: ResponsiveStyleValue<number | string>;\n    sx?: SxProps;\n    syncWithLocation?: boolean;\n    tabs?: ReactElement;\n    value?: any;\n}\n\nTabbedShowLayout.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    record: PropTypes.object,\n    spacing: PropTypes.any,\n    sx: PropTypes.any,\n    syncWithLocation: PropTypes.bool,\n    tabs: PropTypes.element,\n    value: PropTypes.number,\n};\n\nconst DefaultTabs = <TabbedShowLayoutTabs />;\n\nconst PREFIX = 'RaTabbedShowLayout';\n\nexport const TabbedShowLayoutClasses = {\n    content: `${PREFIX}-content`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flex: 1,\n    [`& .${TabbedShowLayoutClasses.content}`]: {\n        padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    },\n}));\n\nconst sanitizeRestProps = ({\n    record,\n    resource,\n    initialValues,\n    staticContext,\n    translate,\n    tabs,\n    ...rest\n}: any) => rest;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useResourceContext, useGetList, useTimeout, useCreatePath } from 'ra-core';\nimport { Typography, CircularProgress } from '@mui/material';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { Link } from '../Link';\n/**\n * Fetch and render the number of records of a given resource\n *\n * Relies on dataProvider.getList() returning a total property\n *\n * @example // Display the number of recorfds in the current resource (based on RezsourceContext)\n * <Count />\n *\n * @example // Display the number of posts\n * <Count resource=\"posts\" />\n *\n * @example // Display the number of published posts\n * <Count resource=\"posts\" filter={{ is_published: true }}/>\n *\n * @example // Display the number of posts, with a custom Typography variant\n * <Count resource=\"posts\" variant=\"h1\" />\n *\n * @see ReferenceManyCount for a similar component which fetches the number of records related to the current one\n */\n\nexport var Count = function Count(props) {\n  var filter = props.filter,\n      sort = props.sort,\n      link = props.link,\n      resourceFromProps = props.resource,\n      _a = props.timeout,\n      timeout = _a === void 0 ? 1000 : _a,\n      rest = __rest(props, [\"filter\", \"sort\", \"link\", \"resource\", \"timeout\"]);\n\n  var resource = useResourceContext(props);\n  var oneSecondHasPassed = useTimeout(timeout);\n  var createPath = useCreatePath();\n\n  var _b = useGetList(resource, {\n    filter: filter,\n    sort: sort,\n    pagination: {\n      perPage: 1,\n      page: 1\n    }\n  }),\n      total = _b.total,\n      isLoading = _b.isLoading,\n      error = _b.error;\n\n  var body = isLoading ? oneSecondHasPassed ? React.createElement(CircularProgress, {\n    size: 14\n  }) : '' : error ? React.createElement(ErrorIcon, {\n    color: \"error\",\n    fontSize: \"small\",\n    titleAccess: \"error\"\n  }) : total;\n  return link ? // @ts-ignore TypeScript complains that the props for <a> aren't the same as for <span>\n  React.createElement(Link, __assign({\n    to: {\n      pathname: createPath({\n        resource: resource,\n        type: 'list'\n      }),\n      search: filter ? \"filter=\".concat(JSON.stringify(filter)) : undefined\n    },\n    variant: \"body2\",\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    }\n  }, rest), body) : React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\"\n  }, rest), body);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACIC,kBADJ,EAEIC,UAFJ,EAGIC,UAHJ,EAIIC,aAJJ,QAMO,SANP;AAOA,SAASC,UAAT,EAAsCC,gBAAtC,QAA8D,eAA9D;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AAEA,SAASC,IAAT,QAAqB,SAArB;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAkB;EAE/B,UAAM,GAMNA,KAAK,OANL;EAAA,IACAC,IAAI,GAKJD,KAAK,KANL;EAAA,IAEAE,IAAI,GAIJF,KAAK,KANL;EAAA,IAGUG,iBAAiB,GAG3BH,KAAK,SANL;EAAA,IAIAI,KAEAJ,KAAK,QANL;EAAA,IAIAK,OAAO,mBAAG,IAAH,GAAOD,EAJd;EAAA,IAKGE,IAAI,UACPN,KADO,EANL,iDAMK,CALP;;EAOJ,IAAMO,QAAQ,GAAGhB,kBAAkB,CAACS,KAAD,CAAnC;EACA,IAAMQ,kBAAkB,GAAGf,UAAU,CAACY,OAAD,CAArC;EACA,IAAMI,UAAU,GAAGf,aAAa,EAAhC;;EAEM,SAA8BF,UAAU,CAACe,QAAD,EAAW;IACrDG,MAAM,QAD+C;IAErDT,IAAI,MAFiD;IAGrDU,UAAU,EAAE;MAAEC,OAAO,EAAE,CAAX;MAAcC,IAAI,EAAE;IAApB;EAHyC,CAAX,CAAxC;EAAA,IAAEC,KAAK,WAAP;EAAA,IAASC,SAAS,eAAlB;EAAA,IAAoBC,KAAK,WAAzB;;EAMN,IAAMC,IAAI,GAAGF,SAAS,GAClBP,kBAAkB,GACdlB,oBAACM,gBAAD,EAAiB;IAACsB,IAAI,EAAE;EAAP,CAAjB,CADc,GAGd,EAJc,GAMlBF,KAAK,GACL1B,oBAACO,SAAD,EAAU;IAACsB,KAAK,EAAC,OAAP;IAAeC,QAAQ,EAAC,OAAxB;IAAgCC,WAAW,EAAC;EAA5C,CAAV,CADK,GAGLP,KATJ;EAYA,OAAOZ,IAAI,GACP;EACAZ,oBAACQ,IAAD,EAAKwB;IACDC,EAAE,EAAE;MACAC,QAAQ,EAAEf,UAAU,CAAC;QAAEF,QAAQ,UAAV;QAAYkB,IAAI,EAAE;MAAlB,CAAD,CADpB;MAEAC,MAAM,EAAEhB,MAAM,GAAG,iBAAUiB,IAAI,CAACC,SAAL,CAAelB,MAAf,CAAV,CAAH,GAAwCmB;IAFtD,CADH;IAKDC,OAAO,EAAC,OALP;IAMDC,OAAO,EAAE,oBAAC;MAAI,QAAC,CAACC,eAAF;IAAmB;EANhC,GAOG1B,IAPH,CAAL,EASKW,IATL,CAFO,GAcP3B,oBAACK,UAAD,EAAW2B;IAACW,SAAS,EAAC,MAAX;IAAkBH,OAAO,EAAC;EAA1B,GAAsCxB,IAAtC,CAAX,EACKW,IADL,CAdJ;AAkBH,CAjDM","names":["React","useResourceContext","useGetList","useTimeout","useCreatePath","Typography","CircularProgress","ErrorIcon","Link","Count","props","sort","link","resourceFromProps","_a","timeout","rest","resource","oneSecondHasPassed","createPath","filter","pagination","perPage","page","total","isLoading","error","body","size","color","fontSize","titleAccess","__assign","to","pathname","type","search","JSON","stringify","undefined","variant","onClick","stopPropagation","component"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/Count.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    useResourceContext,\n    useGetList,\n    useTimeout,\n    useCreatePath,\n    SortPayload,\n} from 'ra-core';\nimport { Typography, TypographyProps, CircularProgress } from '@mui/material';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport { Link } from '../Link';\n\n/**\n * Fetch and render the number of records of a given resource\n *\n * Relies on dataProvider.getList() returning a total property\n *\n * @example // Display the number of recorfds in the current resource (based on RezsourceContext)\n * <Count />\n *\n * @example // Display the number of posts\n * <Count resource=\"posts\" />\n *\n * @example // Display the number of published posts\n * <Count resource=\"posts\" filter={{ is_published: true }}/>\n *\n * @example // Display the number of posts, with a custom Typography variant\n * <Count resource=\"posts\" variant=\"h1\" />\n *\n * @see ReferenceManyCount for a similar component which fetches the number of records related to the current one\n */\nexport const Count = (props: CountProps) => {\n    const {\n        filter,\n        sort,\n        link,\n        resource: resourceFromProps,\n        timeout = 1000,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const oneSecondHasPassed = useTimeout(timeout);\n    const createPath = useCreatePath();\n\n    const { total, isLoading, error } = useGetList(resource, {\n        filter,\n        sort,\n        pagination: { perPage: 1, page: 1 },\n    });\n\n    const body = isLoading ? (\n        oneSecondHasPassed ? (\n            <CircularProgress size={14} />\n        ) : (\n            ''\n        )\n    ) : error ? (\n        <ErrorIcon color=\"error\" fontSize=\"small\" titleAccess=\"error\" />\n    ) : (\n        total\n    );\n\n    return link ? (\n        // @ts-ignore TypeScript complains that the props for <a> aren't the same as for <span>\n        <Link\n            to={{\n                pathname: createPath({ resource, type: 'list' }),\n                search: filter ? `filter=${JSON.stringify(filter)}` : undefined,\n            }}\n            variant=\"body2\"\n            onClick={e => e.stopPropagation()}\n            {...rest}\n        >\n            {body}\n        </Link>\n    ) : (\n        <Typography component=\"span\" variant=\"body2\" {...rest}>\n            {body}\n        </Typography>\n    );\n};\n\nexport interface CountProps extends TypographyProps {\n    filter?: any;\n    sort?: SortPayload;\n    link?: Boolean;\n    resource?: string;\n    timeout?: number;\n}\n"]},"metadata":{},"sourceType":"module"}
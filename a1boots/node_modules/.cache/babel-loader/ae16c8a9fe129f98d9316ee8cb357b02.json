{"ast":null,"code":"import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { useLocaleState } from './useLocaleState';\nimport { useTranslateLabel } from './useTranslateLabel';\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabel: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\n\nexport var useTranslatable = function useTranslatable(options) {\n  var localeFromUI = useLocaleState()[0];\n  var _a = options.defaultLocale,\n      defaultLocale = _a === void 0 ? localeFromUI : _a,\n      locales = options.locales;\n\n  var _b = useState(defaultLocale),\n      selectedLocale = _b[0],\n      setSelectedLocale = _b[1];\n\n  var resource = useResourceContext({});\n  var translateLabel = useTranslateLabel();\n  var context = useMemo(function () {\n    return {\n      getSource: function getSource(source, locale) {\n        if (locale === void 0) {\n          locale = selectedLocale;\n        }\n\n        return \"\".concat(source, \".\").concat(locale);\n      },\n      getLabel: function getLabel(source, label) {\n        return translateLabel({\n          source: source,\n          resource: resource,\n          label: label\n        });\n      },\n      locales: locales,\n      selectedLocale: selectedLocale,\n      selectLocale: setSelectedLocale\n    };\n  }, [locales, resource, selectedLocale, translateLabel]);\n  return context;\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA;;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAC3BC,OAD2B,EACI;EAExB,gBAAY,GAAIH,cAAc,GAAE,CAAF,CAA9B;EACC,SAA0CG,OAAO,cAAjD;EAAA,iBAAa,mBAAGC,YAAH,GAAeC,EAA5B;EAAA,IAA8BC,OAAO,GAAKH,OAAO,QAAjD;;EACF,SAAsCN,QAAQ,CAACU,aAAD,CAA9C;EAAA,IAACC,cAAc,QAAf;EAAA,IAAiBC,iBAAiB,QAAlC;;EACN,IAAMC,QAAQ,GAAGX,kBAAkB,CAAC,EAAD,CAAnC;EACA,IAAMY,cAAc,GAAGV,iBAAiB,EAAxC;EAEA,IAAMW,OAAO,GAAGd,OAAO,CACnB;IAAM,OAAC;MACHe,SAAS,EAAE,mBAACC,MAAD,EAAiBC,MAAjB,EAAgD;QAA/B;UAAAA;QAA+B;;QACvD,iBAAGD,MAAH,EAAS,GAAT,EAASE,MAAT,CAAaD,MAAb;MAAqB,CAFtB;MAGHE,QAAQ,EAAE,kBAACH,MAAD,EAAiBI,KAAjB,EAA+B;QACrC,qBAAc,CAAC;UAAEJ,MAAM,QAAR;UAAUJ,QAAQ,UAAlB;UAAoBQ,KAAK;QAAzB,CAAD,CAAd;MAAqD,CAJtD;MAKHZ,OAAO,SALJ;MAMHE,cAAc,gBANX;MAOHW,YAAY,EAAEV;IAPX,CAAD;EAQJ,CATiB,EAUnB,CAACH,OAAD,EAAUI,QAAV,EAAoBF,cAApB,EAAoCG,cAApC,CAVmB,CAAvB;EAaA,OAAOC,OAAP;AACH,CAvBM","names":["useState","useMemo","useResourceContext","useLocaleState","useTranslateLabel","useTranslatable","options","localeFromUI","_a","locales","defaultLocale","selectedLocale","setSelectedLocale","resource","translateLabel","context","getSource","source","locale","concat","getLabel","label","selectLocale"],"sources":["/var/www/a1boots/node_modules/ra-core/src/i18n/useTranslatable.ts"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { TranslatableContextValue } from './TranslatableContext';\nimport { useLocaleState } from './useLocaleState';\nimport { useTranslateLabel } from './useTranslateLabel';\n\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabel: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\nexport const useTranslatable = (\n    options: UseTranslatableOptions\n): TranslatableContextValue => {\n    const [localeFromUI] = useLocaleState();\n    const { defaultLocale = localeFromUI, locales } = options;\n    const [selectedLocale, setSelectedLocale] = useState(defaultLocale);\n    const resource = useResourceContext({});\n    const translateLabel = useTranslateLabel();\n\n    const context = useMemo<TranslatableContextValue>(\n        () => ({\n            getSource: (source: string, locale: string = selectedLocale) =>\n                `${source}.${locale}`,\n            getLabel: (source: string, label?: string) =>\n                translateLabel({ source, resource, label }) as string,\n            locales,\n            selectedLocale,\n            selectLocale: setSelectedLocale,\n        }),\n        [locales, resource, selectedLocale, translateLabel]\n    );\n\n    return context;\n};\n\nexport type UseTranslatableOptions = {\n    defaultLocale?: string;\n    locales: string[];\n};\n"]},"metadata":{},"sourceType":"module"}
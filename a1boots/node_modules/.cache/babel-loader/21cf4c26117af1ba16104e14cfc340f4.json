{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { removeEmpty, useSafeSetState } from '../../util';\nimport { useResourceContext } from '../../core';\nimport usePaginationState from '../usePaginationState';\nimport useSortState from '../useSortState';\nimport { useRecordSelection } from './useRecordSelection';\nimport { flattenObject } from '../../dataProvider/fetch';\n\nvar refetch = function () {\n  throw new Error('refetch is not available for a ListContext built from useList based on local data');\n};\n/**\n * Handle filtering, sorting and pagination on local data.\n *\n * Returns the data and callbacks expected by <ListContext>.\n *\n * @example\n * const data = [\n *     { id: 1, name: 'Arnold' },\n *     { id: 2, name: 'Sylvester' },\n *     { id: 3, name: 'Jean-Claude' },\n * ]\n *\n * const MyComponent = () => {\n *     const listContext = useList({ data });\n *     return (\n *         <ListContextProvider value={listContext}>\n *             <Datagrid>\n *                 <TextField source=\"id\" />\n *                 <TextField source=\"name\" />\n *             </Datagrid>\n *         </ListContextProvider>\n *     );\n * };\n *\n * @param {UseListOptions} props\n * @param {RaRecord[]} props.data An array of records\n * @param {Boolean} props.isFetching: Optional. A boolean indicating whether the data is being loaded\n * @param {Boolean} props.isLoading: Optional. A boolean indicating whether the data has been loaded at least once\n * @param {Error | String} props.error: Optional. The error if any occurred while loading the data\n * @param {Object} props.filter: Optional. An object containing the filters applied on the data\n * @param {Number} props.page: Optional. The initial page index\n * @param {Number} props.perPage: Optional. The initial page size\n * @param {SortPayload} props.sort: Optional. The initial sort (field and order)\n * @param {filterCallback} prop.filterCallback Optional. A function that allows you to make a custom filter\n */\n\n\nexport var useList = function (props) {\n  var data = props.data,\n      error = props.error,\n      _a = props.filter,\n      filter = _a === void 0 ? defaultFilter : _a,\n      _b = props.isFetching,\n      isFetching = _b === void 0 ? false : _b,\n      _c = props.isLoading,\n      isLoading = _c === void 0 ? false : _c,\n      _d = props.page,\n      initialPage = _d === void 0 ? 1 : _d,\n      _e = props.perPage,\n      initialPerPage = _e === void 0 ? 1000 : _e,\n      initialSort = props.sort,\n      _f = props.filterCallback,\n      filterCallback = _f === void 0 ? function (record) {\n    return Boolean(record);\n  } : _f;\n  var resource = useResourceContext(props);\n\n  var _g = useSafeSetState(isFetching),\n      fetchingState = _g[0],\n      setFetchingState = _g[1];\n\n  var _h = useSafeSetState(isLoading),\n      loadingState = _h[0],\n      setLoadingState = _h[1];\n\n  var _j = useSafeSetState(function () {\n    return {\n      data: data,\n      total: data ? data.length : undefined\n    };\n  }),\n      finalItems = _j[0],\n      setFinalItems = _j[1]; // pagination logic\n\n\n  var _k = usePaginationState({\n    page: initialPage,\n    perPage: initialPerPage\n  }),\n      page = _k.page,\n      setPage = _k.setPage,\n      perPage = _k.perPage,\n      setPerPage = _k.setPerPage; // sort logic\n\n\n  var _l = useSortState(initialSort),\n      sort = _l.sort,\n      setSortState = _l.setSort;\n\n  var setSort = useCallback(function (sort) {\n    setSortState(sort);\n    setPage(1);\n  }, [setPage, setSortState]); // selection logic\n\n  var _m = useRecordSelection(resource),\n      selectedIds = _m[0],\n      selectionModifiers = _m[1]; // filter logic\n\n\n  var filterRef = useRef(filter);\n\n  var _o = useSafeSetState({}),\n      displayedFilters = _o[0],\n      setDisplayedFilters = _o[1];\n\n  var _p = useSafeSetState(filter),\n      filterValues = _p[0],\n      setFilterValues = _p[1];\n\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n          _b = filterName,\n          _ = _a[_b],\n          newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n          _b = filterName,\n          _ = _a[_b],\n          newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n\n      return removeEmpty(__assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a)));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var setFilters = useCallback(function (filters, displayedFilters) {\n    setFilterValues(removeEmpty(filters));\n\n    if (displayedFilters) {\n      setDisplayedFilters(displayedFilters);\n    }\n\n    setPage(1);\n  }, [setDisplayedFilters, setFilterValues, setPage]); // handle filter prop change\n\n  useEffect(function () {\n    if (!isEqual(filter, filterRef.current)) {\n      filterRef.current = filter;\n      setFilterValues(filter);\n    }\n  }); // We do all the data processing (filtering, sorting, paginating) client-side\n\n  useEffect(function () {\n    if (isLoading || !data) return;\n    var tempData = data; // 1. filter\n\n    if (filterValues) {\n      var flattenFilterValues_1 = flattenObject(filterValues);\n      tempData = data.filter(function (record) {\n        return Object.entries(flattenFilterValues_1).every(function (_a) {\n          var filterName = _a[0],\n              filterValue = _a[1];\n          var recordValue = get(record, filterName);\n          var result = Array.isArray(recordValue) ? Array.isArray(filterValue) ? recordValue.some(function (item) {\n            return filterValue.includes(item);\n          }) : recordValue.includes(filterValue) : Array.isArray(filterValue) ? filterValue.includes(recordValue) : filterValue == recordValue; // eslint-disable-line eqeqeq\n\n          return result;\n        });\n      }).filter(filterCallback);\n    }\n\n    var filteredLength = tempData.length; // 2. sort\n\n    if (sort.field) {\n      tempData = tempData.sort(function (a, b) {\n        if (get(a, sort.field) > get(b, sort.field)) {\n          return sort.order === 'ASC' ? 1 : -1;\n        }\n\n        if (get(a, sort.field) < get(b, sort.field)) {\n          return sort.order === 'ASC' ? -1 : 1;\n        }\n\n        return 0;\n      });\n    } // 3. paginate\n\n\n    tempData = tempData.slice((page - 1) * perPage, page * perPage);\n    setFinalItems({\n      data: tempData,\n      total: filteredLength\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(data), filterValues, isLoading, page, perPage, setFinalItems, sort.field, sort.order]);\n  useEffect(function () {\n    if (isFetching !== fetchingState) {\n      setFetchingState(isFetching);\n    }\n  }, [isFetching, fetchingState, setFetchingState]);\n  useEffect(function () {\n    if (isLoading !== loadingState) {\n      setLoadingState(isLoading);\n    }\n  }, [isLoading, loadingState, setLoadingState]);\n  return {\n    sort: sort,\n    data: finalItems === null || finalItems === void 0 ? void 0 : finalItems.data,\n    defaultTitle: '',\n    error: error,\n    displayedFilters: displayedFilters,\n    filterValues: filterValues,\n    hasNextPage: (finalItems === null || finalItems === void 0 ? void 0 : finalItems.total) == null ? false : page * perPage < finalItems.total,\n    hasPreviousPage: page > 1,\n    hideFilter: hideFilter,\n    isFetching: fetchingState,\n    isLoading: loadingState,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: page,\n    perPage: perPage,\n    resource: undefined,\n    refetch: refetch,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: finalItems === null || finalItems === void 0 ? void 0 : finalItems.total\n  };\n};\nvar defaultFilter = {};","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useRef","get","isEqual","removeEmpty","useSafeSetState","useResourceContext","usePaginationState","useSortState","useRecordSelection","flattenObject","refetch","Error","useList","props","error","_a","filter","defaultFilter","_b","isFetching","_c","isLoading","_d","initialPage","_e","initialPerPage","initialSort","_f","filterCallback","record","resource","fetchingState","setFetchingState","loadingState","setLoadingState","data","total","length","undefined","finalItems","setFinalItems","page","perPage","setPage","setPerPage","sort","setSortState","setSort","selectedIds","selectionModifiers","filterRef","displayedFilters","setDisplayedFilters","filterValues","setFilterValues","hideFilter","filterName","_","newState","showFilter","defaultValue","previousState","setFilters","filters","current","tempData","flattenFilterValues_1","entries","every","filterValue","recordValue","result","Array","isArray","some","includes","item","filteredLength","field","a","b","order","slice","JSON","stringify","defaultTitle","hasNextPage","hasPreviousPage","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/list/useList.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { removeEmpty, useSafeSetState } from '../../util';\nimport { FilterPayload, RaRecord, SortPayload } from '../../types';\nimport { useResourceContext } from '../../core';\nimport usePaginationState from '../usePaginationState';\nimport useSortState from '../useSortState';\nimport { useRecordSelection } from './useRecordSelection';\nimport { ListControllerResult } from './useListController';\nimport { flattenObject } from '../../dataProvider/fetch';\n\nconst refetch = () => {\n    throw new Error(\n        'refetch is not available for a ListContext built from useList based on local data'\n    );\n};\n\n/**\n * Handle filtering, sorting and pagination on local data.\n *\n * Returns the data and callbacks expected by <ListContext>.\n *\n * @example\n * const data = [\n *     { id: 1, name: 'Arnold' },\n *     { id: 2, name: 'Sylvester' },\n *     { id: 3, name: 'Jean-Claude' },\n * ]\n *\n * const MyComponent = () => {\n *     const listContext = useList({ data });\n *     return (\n *         <ListContextProvider value={listContext}>\n *             <Datagrid>\n *                 <TextField source=\"id\" />\n *                 <TextField source=\"name\" />\n *             </Datagrid>\n *         </ListContextProvider>\n *     );\n * };\n *\n * @param {UseListOptions} props\n * @param {RaRecord[]} props.data An array of records\n * @param {Boolean} props.isFetching: Optional. A boolean indicating whether the data is being loaded\n * @param {Boolean} props.isLoading: Optional. A boolean indicating whether the data has been loaded at least once\n * @param {Error | String} props.error: Optional. The error if any occurred while loading the data\n * @param {Object} props.filter: Optional. An object containing the filters applied on the data\n * @param {Number} props.page: Optional. The initial page index\n * @param {Number} props.perPage: Optional. The initial page size\n * @param {SortPayload} props.sort: Optional. The initial sort (field and order)\n * @param {filterCallback} prop.filterCallback Optional. A function that allows you to make a custom filter\n */\nexport const useList = <RecordType extends RaRecord = any>(\n    props: UseListOptions<RecordType>\n): UseListValue<RecordType> => {\n    const {\n        data,\n        error,\n        filter = defaultFilter,\n        isFetching = false,\n        isLoading = false,\n        page: initialPage = 1,\n        perPage: initialPerPage = 1000,\n        sort: initialSort,\n        filterCallback = (record: RecordType) => Boolean(record),\n    } = props;\n    const resource = useResourceContext(props);\n\n    const [fetchingState, setFetchingState] = useSafeSetState<boolean>(\n        isFetching\n    ) as [boolean, (isFetching: boolean) => void];\n\n    const [loadingState, setLoadingState] = useSafeSetState<boolean>(\n        isLoading\n    ) as [boolean, (isFetching: boolean) => void];\n\n    const [finalItems, setFinalItems] = useSafeSetState<{\n        data?: RecordType[];\n        total?: number;\n    }>(() => ({\n        data,\n        total: data ? data.length : undefined,\n    }));\n\n    // pagination logic\n    const { page, setPage, perPage, setPerPage } = usePaginationState({\n        page: initialPage,\n        perPage: initialPerPage,\n    });\n\n    // sort logic\n    const { sort, setSort: setSortState } = useSortState(initialSort);\n    const setSort = useCallback(\n        (sort: SortPayload) => {\n            setSortState(sort);\n            setPage(1);\n        },\n        [setPage, setSortState]\n    );\n\n    // selection logic\n    const [selectedIds, selectionModifiers] = useRecordSelection(resource);\n\n    // filter logic\n    const filterRef = useRef(filter);\n    const [displayedFilters, setDisplayedFilters] = useSafeSetState<{\n        [key: string]: boolean;\n    }>({});\n    const [filterValues, setFilterValues] = useSafeSetState<{\n        [key: string]: any;\n    }>(filter);\n    const hideFilter = useCallback(\n        (filterName: string) => {\n            setDisplayedFilters(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n            setFilterValues(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const showFilter = useCallback(\n        (filterName: string, defaultValue: any) => {\n            setDisplayedFilters(previousState => ({\n                ...previousState,\n                [filterName]: true,\n            }));\n            setFilterValues(previousState =>\n                removeEmpty({\n                    ...previousState,\n                    [filterName]: defaultValue,\n                })\n            );\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const setFilters = useCallback(\n        (filters, displayedFilters) => {\n            setFilterValues(removeEmpty(filters));\n            if (displayedFilters) {\n                setDisplayedFilters(displayedFilters);\n            }\n            setPage(1);\n        },\n        [setDisplayedFilters, setFilterValues, setPage]\n    );\n    // handle filter prop change\n    useEffect(() => {\n        if (!isEqual(filter, filterRef.current)) {\n            filterRef.current = filter;\n            setFilterValues(filter);\n        }\n    });\n\n    // We do all the data processing (filtering, sorting, paginating) client-side\n    useEffect(\n        () => {\n            if (isLoading || !data) return;\n            let tempData = data;\n\n            // 1. filter\n            if (filterValues) {\n                const flattenFilterValues = flattenObject(filterValues);\n                tempData = data\n                    .filter(record =>\n                        Object.entries(flattenFilterValues).every(\n                            ([filterName, filterValue]) => {\n                                const recordValue = get(record, filterName);\n                                const result = Array.isArray(recordValue)\n                                    ? Array.isArray(filterValue)\n                                        ? recordValue.some(item =>\n                                              filterValue.includes(item)\n                                          )\n                                        : recordValue.includes(filterValue)\n                                    : Array.isArray(filterValue)\n                                    ? filterValue.includes(recordValue)\n                                    : filterValue == recordValue; // eslint-disable-line eqeqeq\n                                return result;\n                            }\n                        )\n                    )\n                    .filter(filterCallback);\n            }\n            const filteredLength = tempData.length;\n\n            // 2. sort\n            if (sort.field) {\n                tempData = tempData.sort((a, b) => {\n                    if (get(a, sort.field) > get(b, sort.field)) {\n                        return sort.order === 'ASC' ? 1 : -1;\n                    }\n                    if (get(a, sort.field) < get(b, sort.field)) {\n                        return sort.order === 'ASC' ? -1 : 1;\n                    }\n                    return 0;\n                });\n            }\n\n            // 3. paginate\n            tempData = tempData.slice((page - 1) * perPage, page * perPage);\n\n            setFinalItems({\n                data: tempData,\n                total: filteredLength,\n            });\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            JSON.stringify(data),\n            filterValues,\n            isLoading,\n            page,\n            perPage,\n            setFinalItems,\n            sort.field,\n            sort.order,\n        ]\n    );\n\n    useEffect(() => {\n        if (isFetching !== fetchingState) {\n            setFetchingState(isFetching);\n        }\n    }, [isFetching, fetchingState, setFetchingState]);\n\n    useEffect(() => {\n        if (isLoading !== loadingState) {\n            setLoadingState(isLoading);\n        }\n    }, [isLoading, loadingState, setLoadingState]);\n\n    return {\n        sort,\n        data: finalItems?.data,\n        defaultTitle: '',\n        error,\n        displayedFilters,\n        filterValues,\n        hasNextPage:\n            finalItems?.total == null\n                ? false\n                : page * perPage < finalItems.total,\n        hasPreviousPage: page > 1,\n        hideFilter,\n        isFetching: fetchingState,\n        isLoading: loadingState,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page,\n        perPage,\n        resource: undefined,\n        refetch,\n        selectedIds,\n        setFilters,\n        setPage,\n        setPerPage,\n        setSort,\n        showFilter,\n        total: finalItems?.total,\n    };\n};\n\nexport interface UseListOptions<RecordType extends RaRecord = any> {\n    data?: RecordType[];\n    error?: any;\n    filter?: FilterPayload;\n    isFetching?: boolean;\n    isLoading?: boolean;\n    page?: number;\n    perPage?: number;\n    sort?: SortPayload;\n    resource?: string;\n    filterCallback?: (record: RecordType) => boolean;\n}\n\nexport type UseListValue<\n    RecordType extends RaRecord = any\n> = ListControllerResult<RecordType>;\n\nconst defaultFilter = {};\n"]},"metadata":{},"sourceType":"module"}
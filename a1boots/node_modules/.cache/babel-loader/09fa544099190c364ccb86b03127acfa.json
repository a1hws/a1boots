{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { createElement } from 'react';\n\nvar InferredElement =\n/** @class */\nfunction () {\n  function InferredElement(type, props, children) {\n    this.type = type;\n    this.props = props;\n    this.children = children;\n    this.type = type;\n    this.props = props;\n    this.children = children;\n  }\n\n  InferredElement.prototype.getElement = function (props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (!this.type || !this.type.component) {\n      return;\n    }\n\n    return this.children ? createElement(this.type.component, __assign(__assign({}, this.props), props), this.children.length > 0 ? this.children.map(function (child, index) {\n      return child.getElement({\n        key: index\n      });\n    }) : this.children.getElement()) : createElement(this.type.component, __assign(__assign({}, this.props), props));\n  };\n\n  InferredElement.prototype.getProps = function () {\n    return this.props;\n  };\n\n  InferredElement.prototype.isDefined = function () {\n    return !!this.type;\n  };\n\n  InferredElement.prototype.getRepresentation = function () {\n    if (!this.type) {\n      return;\n    }\n\n    if (this.type.representation) {\n      return this.type.representation(this.props, this.children);\n    }\n\n    if (this.type.component) {\n      return \"<\".concat(this.type.component.displayName || this.type.component.name, \" source=\\\"\").concat(this.props.source, \"\\\" />\");\n    }\n  };\n\n  return InferredElement;\n}();\n\nexport default InferredElement;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,OAA9B;;AAGA;AAAA;AAAA;EACI,yBACYC,IADZ,EAEYC,KAFZ,EAGYC,QAHZ,EAG0B;IAFd;IACA;IACA;IAER,KAAKF,IAAL,GAAYA,IAAZ;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,QAAL,GAAgBA,QAAhB;EACH;;EAEDC,iDAAWF,KAAX,EAAqB;IAAV;MAAAA;IAAU;;IACjB,IAAI,CAAC,KAAKD,IAAN,IAAc,CAAC,KAAKA,IAAL,CAAUI,SAA7B,EAAwC;MACpC;IACH;;IACD,OAAO,KAAKF,QAAL,GACDH,aAAa,CACT,KAAKC,IAAL,CAAUI,SADD,EACUC,sBACd,KAAKJ,KADS,GACCA,KADD,CADV,EAGT,KAAKC,QAAL,CAAcI,MAAd,GAAuB,CAAvB,GACM,KAAKJ,QAAL,CAAcK,GAAd,CAAkB,UAACC,KAAD,EAAQC,KAAR,EAAa;MAC3B,YAAK,CAACC,UAAN,CAAiB;QAAEC,GAAG,EAAEF;MAAP,CAAjB;IAAgC,CADpC,CADN,GAIM,KAAKP,QAAL,CAAcQ,UAAd,EAPG,CADZ,GAUDX,aAAa,CAAC,KAAKC,IAAL,CAAUI,SAAX,EAAoBC,sBAAO,KAAKJ,KAAZ,GAAsBA,KAAtB,CAApB,CAVnB;EAWH,CAfD;;EAiBAE;IACI,OAAO,KAAKF,KAAZ;EACH,CAFD;;EAIAE;IACI,OAAO,CAAC,CAAC,KAAKH,IAAd;EACH,CAFD;;EAIAG;IACI,IAAI,CAAC,KAAKH,IAAV,EAAgB;MACZ;IACH;;IACD,IAAI,KAAKA,IAAL,CAAUY,cAAd,EAA8B;MAC1B,OAAO,KAAKZ,IAAL,CAAUY,cAAV,CAAyB,KAAKX,KAA9B,EAAqC,KAAKC,QAA1C,CAAP;IACH;;IACD,IAAI,KAAKF,IAAL,CAAUI,SAAd,EAAyB;MACrB,OAAO,WACH,KAAKJ,IAAL,CAAUI,SAAV,CAAoBS,WAApB,IAAmC,KAAKb,IAAL,CAAUI,SAAV,CAAoBU,IADpD,EACwD,YADxD,EACwDC,MADxD,CAEK,KAAKd,KAAL,CAAWe,MAFhB,EAEsB,OAFtB,CAAP;IAGH;EACJ,CAZD;;EAaJ;AAAC,CAjDD;;AAmDA,eAAeb,eAAf","names":["createElement","type","props","children","InferredElement","component","__assign","length","map","child","index","getElement","key","representation","displayName","name","concat","source"],"sources":["/var/www/a1boots/node_modules/ra-core/src/inference/InferredElement.ts"],"sourcesContent":["import { createElement } from 'react';\nimport { InferredType } from './types';\n\nclass InferredElement {\n    constructor(\n        private type?: InferredType,\n        private props?: any,\n        private children?: any\n    ) {\n        this.type = type;\n        this.props = props;\n        this.children = children;\n    }\n\n    getElement(props = {}) {\n        if (!this.type || !this.type.component) {\n            return;\n        }\n        return this.children\n            ? createElement(\n                  this.type.component,\n                  { ...this.props, ...props },\n                  this.children.length > 0\n                      ? this.children.map((child, index) =>\n                            child.getElement({ key: index })\n                        )\n                      : this.children.getElement()\n              )\n            : createElement(this.type.component, { ...this.props, ...props });\n    }\n\n    getProps() {\n        return this.props;\n    }\n\n    isDefined() {\n        return !!this.type;\n    }\n\n    getRepresentation() {\n        if (!this.type) {\n            return;\n        }\n        if (this.type.representation) {\n            return this.type.representation(this.props, this.children);\n        }\n        if (this.type.component) {\n            return `<${\n                this.type.component.displayName || this.type.component.name\n            } source=\"${this.props.source}\" />`;\n        }\n    }\n}\n\nexport default InferredElement;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { useReference, ResourceContextProvider, RecordContextProvider, useRecordContext, useCreatePath, useGetRecordRepresentation, useResourceDefinition, useTranslate } from 'ra-core';\nimport { LinearProgress } from '../layout';\nimport { Link } from '../Link';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n/**\n * Fetch reference record, and render its representation, or delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example // using recordRepresentation\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" />\n *\n * @example // using a Field component to represent the record\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @example // By default, includes a link to the <Edit> page of the related record\n * // (`/users/:userId` in the previous example).\n * // Set the `link` prop to \"show\" to link to the <Show> page instead.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\" />\n *\n * @example // You can also prevent `<ReferenceField>` from adding link to children\n * // by setting `link` to false.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={false} />\n *\n * @example // Alternatively, you can also pass a custom function to `link`.\n * // It must take reference and record as arguments and return a string\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"} />\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\n\nexport var ReferenceField = function (props) {\n  var source = props.source,\n      emptyText = props.emptyText,\n      rest = __rest(props, [\"source\", \"emptyText\"]);\n\n  var record = useRecordContext(props);\n  var id = get(record, source);\n  var translate = useTranslate();\n  return id == null ? emptyText ? React.createElement(Typography, {\n    component: \"span\",\n    variant: \"body2\"\n  }, emptyText && translate(emptyText, {\n    _: emptyText\n  })) : null : React.createElement(NonEmptyReferenceField, __assign({}, rest, {\n    emptyText: emptyText,\n    record: record,\n    id: id\n  }));\n};\nReferenceField.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cellClassName: PropTypes.string,\n  headerClassName: PropTypes.string,\n  label: fieldPropTypes.label,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired,\n  translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  // @ts-ignore\n  link: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]).isRequired\n};\nReferenceField.defaultProps = {\n  link: 'edit'\n};\n/**\n * This intermediate component is made necessary by the useReference hook,\n * which cannot be called conditionally when get(record, source) is empty.\n */\n\nexport var NonEmptyReferenceField = function (_a) {\n  var children = _a.children,\n      id = _a.id,\n      reference = _a.reference,\n      queryOptions = _a.queryOptions,\n      link = _a.link,\n      props = __rest(_a, [\"children\", \"id\", \"reference\", \"queryOptions\", \"link\"]);\n\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(PureReferenceFieldView, __assign({\n    reference: reference\n  }, props, useReference({\n    reference: reference,\n    id: id,\n    options: queryOptions\n  }), {\n    resourceLinkPath: link\n  }), children));\n}; // useful to prevent click bubbling in a datagrid with rowClick\n\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};\n\nexport var ReferenceFieldView = function (props) {\n  var children = props.children,\n      className = props.className,\n      emptyText = props.emptyText,\n      error = props.error,\n      isLoading = props.isLoading,\n      reference = props.reference,\n      referenceRecord = props.referenceRecord,\n      resourceLinkPath = props.resourceLinkPath,\n      sx = props.sx;\n  var getRecordRepresentation = useGetRecordRepresentation(reference);\n  var translate = useTranslate();\n  var createPath = useCreatePath();\n  var resourceDefinition = useResourceDefinition({\n    resource: reference\n  });\n\n  if (error) {\n    return (\n      /* eslint-disable jsx-a11y/role-supports-aria-props */\n      React.createElement(ErrorIcon, {\n        \"aria-errormessage\": error.message ? error.message : error,\n        role: \"presentation\",\n        color: \"error\",\n        fontSize: \"small\"\n      })\n      /* eslint-enable */\n\n    );\n  }\n\n  if (isLoading) {\n    return React.createElement(LinearProgress, null);\n  }\n\n  if (!referenceRecord) {\n    return emptyText ? React.createElement(React.Fragment, null, emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n\n  var link = resourceLinkPath === false || resourceLinkPath === 'edit' && !resourceDefinition.hasEdit || resourceLinkPath === 'show' && !resourceDefinition.hasShow ? false : createPath({\n    resource: reference,\n    id: referenceRecord.id,\n    type: typeof resourceLinkPath === 'function' ? resourceLinkPath(referenceRecord, reference) : resourceLinkPath\n  });\n  var child = children || React.createElement(Typography, {\n    component: \"span\",\n    variant: \"body2\"\n  }, getRecordRepresentation(referenceRecord));\n\n  if (link) {\n    return React.createElement(Root, {\n      className: className,\n      sx: sx\n    }, React.createElement(RecordContextProvider, {\n      value: referenceRecord\n    }, React.createElement(Link, {\n      to: link,\n      className: ReferenceFieldClasses.link,\n      onClick: stopPropagation\n    }, child)));\n  }\n\n  return React.createElement(RecordContextProvider, {\n    value: referenceRecord\n  }, child);\n};\nReferenceFieldView.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n  isLoading: PropTypes.bool,\n  record: PropTypes.any,\n  reference: PropTypes.string,\n  referenceRecord: PropTypes.any,\n  resource: PropTypes.string,\n  // @ts-ignore\n  resourceLinkPath: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]).isRequired,\n  source: PropTypes.string,\n  translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool])\n};\nvar PureReferenceFieldView = genericMemo(ReferenceFieldView);\nvar PREFIX = 'RaReferenceField';\nexport var ReferenceFieldClasses = {\n  link: \"\".concat(PREFIX, \"-link\")\n};\nvar Root = styled('span', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(ReferenceFieldClasses.link)] = {\n    '& > *': {\n      color: theme.palette.primary.main\n    }\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","PropTypes","get","Typography","styled","ErrorIcon","useReference","ResourceContextProvider","RecordContextProvider","useRecordContext","useCreatePath","useGetRecordRepresentation","useResourceDefinition","useTranslate","LinearProgress","Link","fieldPropTypes","genericMemo","ReferenceField","props","emptyText","rest","record","id","source","translate","component","variant","_","NonEmptyReferenceField","__assign","propTypes","children","node","className","string","cellClassName","headerClassName","label","any","reference","isRequired","resource","sortBy","sortByOrder","translateChoice","oneOfType","func","bool","link","defaultProps","_a","queryOptions","value","PureReferenceFieldView","options","resourceLinkPath","stopPropagation","ReferenceFieldView","error","isLoading","referenceRecord","sx","getRecordRepresentation","createPath","resourceDefinition","message","role","color","fontSize","hasEdit","hasShow","type","child","Root","to","ReferenceFieldClasses","onClick","element","PREFIX","name","overridesResolver","styles","root","theme","_b","palette","primary","main"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/ReferenceField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography, SxProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport {\n    useReference,\n    UseReferenceResult,\n    LinkToType,\n    ResourceContextProvider,\n    RecordContextProvider,\n    useRecordContext,\n    useCreatePath,\n    Identifier,\n    useGetRecordRepresentation,\n    useResourceDefinition,\n    useTranslate,\n    RaRecord,\n} from 'ra-core';\nimport { UseQueryOptions } from 'react-query';\n\nimport { LinearProgress } from '../layout';\nimport { Link } from '../Link';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Fetch reference record, and render its representation, or delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example // using recordRepresentation\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" />\n *\n * @example // using a Field component to represent the record\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @example // By default, includes a link to the <Edit> page of the related record\n * // (`/users/:userId` in the previous example).\n * // Set the `link` prop to \"show\" to link to the <Show> page instead.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\" />\n *\n * @example // You can also prevent `<ReferenceField>` from adding link to children\n * // by setting `link` to false.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={false} />\n *\n * @example // Alternatively, you can also pass a custom function to `link`.\n * // It must take reference and record as arguments and return a string\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"} />\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\nexport const ReferenceField = <\n    RecordType extends Record<string, unknown> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord\n>(\n    props: ReferenceFieldProps<RecordType, ReferenceRecordType>\n) => {\n    const { source, emptyText, ...rest } = props;\n    const record = useRecordContext<RecordType>(props);\n    const id = get(record, source);\n    const translate = useTranslate();\n\n    return id == null ? (\n        emptyText ? (\n            <Typography component=\"span\" variant=\"body2\">\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null\n    ) : (\n        <NonEmptyReferenceField<RecordType, ReferenceRecordType>\n            {...rest}\n            emptyText={emptyText}\n            record={record}\n            id={id as Identifier}\n        />\n    );\n};\n\nReferenceField.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    cellClassName: PropTypes.string,\n    headerClassName: PropTypes.string,\n    label: fieldPropTypes.label,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n    translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    // @ts-ignore\n    link: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]).isRequired,\n};\n\nReferenceField.defaultProps = {\n    link: 'edit',\n};\n\nexport interface ReferenceFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord\n> extends Omit<FieldProps<RecordType>, 'source'>,\n        Required<Pick<FieldProps<RecordType>, 'source'>> {\n    children?: ReactNode;\n    queryOptions?: UseQueryOptions<ReferenceRecordType[], Error> & {\n        meta?: any;\n    };\n    reference: string;\n    translateChoice?: Function | boolean;\n    link?: LinkToType<ReferenceRecordType>;\n    sx?: SxProps;\n}\n\n/**\n * This intermediate component is made necessary by the useReference hook,\n * which cannot be called conditionally when get(record, source) is empty.\n */\nexport const NonEmptyReferenceField = <\n    RecordType extends Record<string, unknown> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord\n>({\n    children,\n    id,\n    reference,\n    queryOptions,\n    link,\n    ...props\n}: Omit<ReferenceFieldProps<RecordType, ReferenceRecordType>, 'source'> & {\n    id: Identifier;\n}) => {\n    return (\n        <ResourceContextProvider value={reference}>\n            {/* @ts-ignore */}\n            <PureReferenceFieldView<RecordType, ReferenceRecordType>\n                reference={reference}\n                {...props}\n                {...useReference<ReferenceRecordType>({\n                    reference,\n                    id,\n                    options: queryOptions,\n                })}\n                resourceLinkPath={link}\n            >\n                {children}\n            </PureReferenceFieldView>\n        </ResourceContextProvider>\n    );\n};\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\nexport const ReferenceFieldView = <\n    RecordType extends Record<string, any> = Record<string, any>\n>(\n    props: ReferenceFieldViewProps<RecordType>\n) => {\n    const {\n        children,\n        className,\n        emptyText,\n        error,\n        isLoading,\n        reference,\n        referenceRecord,\n        resourceLinkPath,\n        sx,\n    } = props;\n    const getRecordRepresentation = useGetRecordRepresentation(reference);\n    const translate = useTranslate();\n    const createPath = useCreatePath();\n    const resourceDefinition = useResourceDefinition({ resource: reference });\n\n    if (error) {\n        return (\n            /* eslint-disable jsx-a11y/role-supports-aria-props */\n            <ErrorIcon\n                aria-errormessage={error.message ? error.message : error}\n                role=\"presentation\"\n                color=\"error\"\n                fontSize=\"small\"\n            />\n            /* eslint-enable */\n        );\n    }\n    if (isLoading) {\n        return <LinearProgress />;\n    }\n    if (!referenceRecord) {\n        return emptyText ? (\n            <>{emptyText && translate(emptyText, { _: emptyText })}</>\n        ) : null;\n    }\n\n    const link =\n        resourceLinkPath === false ||\n        (resourceLinkPath === 'edit' && !resourceDefinition.hasEdit) ||\n        (resourceLinkPath === 'show' && !resourceDefinition.hasShow)\n            ? false\n            : createPath({\n                  resource: reference,\n                  id: referenceRecord.id,\n                  type:\n                      typeof resourceLinkPath === 'function'\n                          ? resourceLinkPath(referenceRecord, reference)\n                          : resourceLinkPath,\n              });\n\n    let child = children || (\n        <Typography component=\"span\" variant=\"body2\">\n            {getRecordRepresentation(referenceRecord)}\n        </Typography>\n    );\n\n    if (link) {\n        return (\n            <Root className={className} sx={sx}>\n                <RecordContextProvider value={referenceRecord}>\n                    <Link\n                        to={link}\n                        className={ReferenceFieldClasses.link}\n                        onClick={stopPropagation}\n                    >\n                        {child}\n                    </Link>\n                </RecordContextProvider>\n            </Root>\n        );\n    }\n\n    return (\n        <RecordContextProvider value={referenceRecord}>\n            {child}\n        </RecordContextProvider>\n    );\n};\n\nReferenceFieldView.propTypes = {\n    children: PropTypes.element,\n    className: PropTypes.string,\n    isLoading: PropTypes.bool,\n    record: PropTypes.any,\n    reference: PropTypes.string,\n    referenceRecord: PropTypes.any,\n    resource: PropTypes.string,\n    // @ts-ignore\n    resourceLinkPath: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]).isRequired,\n    source: PropTypes.string,\n    translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n};\n\nexport interface ReferenceFieldViewProps<\n    RecordType extends Record<string, unknown> = Record<string, any>,\n    ReferenceRecordType extends RaRecord = RaRecord\n> extends FieldProps<RecordType>,\n        UseReferenceResult {\n    children?: ReactNode;\n    reference: string;\n    resource?: string;\n    translateChoice?: Function | boolean;\n    resourceLinkPath?: LinkToType<ReferenceRecordType>;\n    sx?: SxProps;\n}\n\nconst PureReferenceFieldView = genericMemo(ReferenceFieldView);\n\nconst PREFIX = 'RaReferenceField';\n\nexport const ReferenceFieldClasses = {\n    link: `${PREFIX}-link`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ReferenceFieldClasses.link}`]: {\n        '& > *': {\n            color: theme.palette.primary.main,\n        },\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\n\nvar checkMinimumRequiredProps = function (displayName, requiredProps) {\n  return function (WrappedComponent) {\n    return function (props) {\n      useCheckMinimumRequiredProps(displayName, requiredProps, props);\n      return React.createElement(WrappedComponent, __assign({}, props));\n    };\n  };\n};\n\nexport default checkMinimumRequiredProps; // Not a hook but named that way to avoid conflicts with the old one\n\nexport var useCheckMinimumRequiredProps = function (displayName, requiredProps, props) {\n  var propNames = Object.keys(props);\n  var missingProps = requiredProps.filter(function (prop) {\n    return !propNames.includes(prop);\n  });\n\n  if (missingProps.length > 0) {\n    throw new Error(\"<\".concat(displayName, \"> component is not properly configured, some essential props are missing.\\nBe sure to pass the props from the parent. Example:\\n\\nconst My\").concat(displayName, \" = props => (\\n    <\").concat(displayName, \" {...props}></\").concat(displayName, \">\\n);\\n\\nThe missing props are: \").concat(missingProps.join(', ')));\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAGA,IAAMC,yBAAyB,GAAG,UAC9BC,WAD8B,EAE9BC,aAF8B,EAEP;EACtB,iBAACC,gBAAD,EAAgC;IAAK,iBAACC,KAAD,EAAW;MACjDC,4BAA4B,CAACJ,WAAD,EAAcC,aAAd,EAA6BE,KAA7B,CAA5B;MACA,OAAOL,oBAACI,gBAAD,EAAiBG,aAAKF,KAAL,CAAjB,CAAP;IACH,CAHyC;EAGzC,CAHI;AAGJ,CAND;;AAQA,eAAeJ,yBAAf,C,CAEA;;AACA,OAAO,IAAMK,4BAA4B,GAAG,UACxCJ,WADwC,EAExCC,aAFwC,EAGxCE,KAHwC,EAG9B;EAEV,IAAMG,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYL,KAAZ,CAAlB;EACA,IAAMM,YAAY,GAAGR,aAAa,CAACS,MAAd,CACjB,gBAAI;IAAI,QAACJ,SAAS,CAACK,QAAV,CAAmBC,IAAnB,CAAD;EAAyB,CADhB,CAArB;;EAIA,IAAIH,YAAY,CAACI,MAAb,GAAsB,CAA1B,EAA6B;IACzB,MAAM,IAAIC,KAAJ,CACF,WAAId,WAAJ,EAAe,4IAAf,EAAee,MAAf,CAGFf,WAHE,EAGS,sBAHT,EAGSe,MAHT,CAILf,WAJK,EAIM,gBAJN,EAIMe,MAJN,CAIuBf,WAJvB,EAIkC,kCAJlC,EAIkCe,MAJlC,CAOaN,YAAY,CAACO,IAAb,CAAkB,IAAlB,CAPb,CADE,CAAN;EAUH;AACJ,CAtBM","names":["React","checkMinimumRequiredProps","displayName","requiredProps","WrappedComponent","props","useCheckMinimumRequiredProps","__assign","propNames","Object","keys","missingProps","filter","includes","prop","length","Error","concat","join"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/checkMinimumRequiredProps.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ComponentType } from 'react';\n\nconst checkMinimumRequiredProps = (\n    displayName: string,\n    requiredProps: string[]\n) => (WrappedComponent: ComponentType) => (props: any) => {\n    useCheckMinimumRequiredProps(displayName, requiredProps, props);\n    return <WrappedComponent {...props} />;\n};\n\nexport default checkMinimumRequiredProps;\n\n// Not a hook but named that way to avoid conflicts with the old one\nexport const useCheckMinimumRequiredProps = (\n    displayName: string,\n    requiredProps: string[],\n    props: any\n): void => {\n    const propNames = Object.keys(props);\n    const missingProps = requiredProps.filter(\n        prop => !propNames.includes(prop)\n    );\n\n    if (missingProps.length > 0) {\n        throw new Error(\n            `<${displayName}> component is not properly configured, some essential props are missing.\nBe sure to pass the props from the parent. Example:\n\nconst My${displayName} = props => (\n    <${displayName} {...props}></${displayName}>\n);\n\nThe missing props are: ${missingProps.join(', ')}`\n        );\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
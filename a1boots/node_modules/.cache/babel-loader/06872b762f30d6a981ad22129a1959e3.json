{"ast":null,"code":"/**\n * Replace tokens by their value in the given string\n *\n * @param {string} template The template with interpolation tokens, e.g. 'Hello, %{name}'\n * @param {object} data The data to interpolate, e.g. { name: 'John' }\n * @returns {string} The interpolated string, e.g. 'Hello, John'\n */\nexport var substituteTokens = function (template, data) {\n  return template && data ? String.prototype.replace.call(template, defaultTokenRegex, function (expression, argument) {\n    if (!data.hasOwnProperty(argument) || data[argument] == null) {\n      return expression;\n    }\n\n    return data[argument];\n  }) : template;\n}; // tokens are like 'Hello, %{name}'\n\nvar defaultTokenRegex = /%\\{(.*?)\\}/g;","map":{"version":3,"mappings":"AAAA;;;;;;;AAOA,OAAO,IAAMA,gBAAgB,GAAG,UAACC,QAAD,EAAWC,IAAX,EAAe;EAC3C,eAAQ,IAAIA,IAAZ,GACMC,MAAM,CAACC,SAAP,CAAiBC,OAAjB,CAAyBC,IAAzB,CAA8BL,QAA9B,EAAwCM,iBAAxC,EAA2D,UACvDC,UADuD,EAEvDC,QAFuD,EAE/C;IAER,IAAI,CAACP,IAAI,CAACQ,cAAL,CAAoBD,QAApB,CAAD,IAAkCP,IAAI,CAACO,QAAD,CAAJ,IAAkB,IAAxD,EAA8D;MAC1D,OAAOD,UAAP;IACH;;IACD,OAAON,IAAI,CAACO,QAAD,CAAX;EACH,CARD,CADN,GAUMR,QAVN;AAUc,CAXX,C,CAaP;;AACA,IAAMM,iBAAiB,GAAG,aAA1B","names":["substituteTokens","template","data","String","prototype","replace","call","defaultTokenRegex","expression","argument","hasOwnProperty"],"sources":["/var/www/a1boots/node_modules/ra-core/src/i18n/substituteTokens.ts"],"sourcesContent":["/**\n * Replace tokens by their value in the given string\n *\n * @param {string} template The template with interpolation tokens, e.g. 'Hello, %{name}'\n * @param {object} data The data to interpolate, e.g. { name: 'John' }\n * @returns {string} The interpolated string, e.g. 'Hello, John'\n */\nexport const substituteTokens = (template, data) =>\n    template && data\n        ? String.prototype.replace.call(template, defaultTokenRegex, function (\n              expression,\n              argument\n          ) {\n              if (!data.hasOwnProperty(argument) || data[argument] == null) {\n                  return expression;\n              }\n              return data[argument];\n          })\n        : template;\n\n// tokens are like 'Hello, %{name}'\nconst defaultTokenRegex = /%\\{(.*?)\\}/g;\n"]},"metadata":{},"sourceType":"module"}
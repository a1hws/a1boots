{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport * as React from 'react';\nimport { Children, Fragment, useCallback, useEffect, useState } from 'react';\nimport { useLogout, usePermissions } from '../auth';\nimport { useSafeSetState } from '../util';\nimport { useResourceDefinitionContext } from './useResourceDefinitionContext';\n/**\n * This hook inspects the CoreAdminRouter children and returns them separated in three groups:\n * - Custom routes without layout\n * - Custom routes with layout\n * - Resources\n *\n * It also returns a status:\n * - loading: still loading children from a function child\n * - empty: no resources were provided among children\n * - ready: admin is ready to be rendered\n *\n * @example\n * const {\n *    customRoutesWithLayout,\n *    customRoutesWithoutLayout,\n *    resources,\n *    status,\n * } = useConfigureAdminRouterFromChildren(children);\n */\n\nexport var useConfigureAdminRouterFromChildren = function (children) {\n  var _a = usePermissions(),\n      permissions = _a.permissions,\n      isLoading = _a.isLoading; // Whenever children are updated, update our custom routes and resources\n\n\n  var _b = useRoutesAndResourcesFromChildren(children, permissions, isLoading),\n      routesAndResources = _b[0],\n      status = _b[1]; // Whenever the resources change, we must ensure they're all registered\n\n\n  useRegisterResources(routesAndResources.resources, permissions);\n  return {\n    customRoutesWithLayout: routesAndResources.customRoutesWithLayout,\n    customRoutesWithoutLayout: routesAndResources.customRoutesWithoutLayout,\n    status: status,\n    resources: routesAndResources.resources\n  };\n};\n/**\n * A hook that determine the routes and resources from React nodes and permissions.\n * Returns a tuple with the routes and resources as a single object, and the status.\n * @param children React nodes to inspect\n * @param permissions The permissions\n */\n\nvar useRoutesAndResourcesFromChildren = function (children, permissions, isLoading) {\n  // Gather custom routes and resources that were declared as direct children of CoreAdminRouter\n  // e.g. Not returned from the child function (if any)\n  // We need to know right away wether some resources were declared to correctly\n  // initialize the status at the next stop\n  var doLogout = useLogout();\n\n  var _a = useRoutesAndResourcesState(getRoutesAndResourceFromNodes(children)),\n      routesAndResources = _a[0],\n      setRoutesAndResources = _a[1],\n      mergeRoutesAndResources = _a[2];\n\n  var _b = useSafeSetState(function () {\n    return getStatus(__assign({\n      children: children\n    }, routesAndResources));\n  }),\n      status = _b[0],\n      setStatus = _b[1];\n\n  useEffect(function () {\n    var resolveChildFunction = function (childFunc) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var childrenFuncResult;\n        return __generator(this, function (_a) {\n          try {\n            childrenFuncResult = childFunc(permissions);\n\n            if (childrenFuncResult === null || childrenFuncResult === void 0 ? void 0 : childrenFuncResult.then) {\n              childrenFuncResult.then(function (resolvedChildren) {\n                mergeRoutesAndResources(getRoutesAndResourceFromNodes(resolvedChildren));\n                setStatus('ready');\n              });\n            } else {\n              mergeRoutesAndResources(getRoutesAndResourceFromNodes(childrenFuncResult));\n              setStatus('ready');\n            }\n          } catch (error) {\n            console.error(error);\n            doLogout();\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    var updateFromChildren = function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var functionChild, newRoutesAndResources;\n        return __generator(this, function (_a) {\n          functionChild = getSingleChildFunction(children);\n          newRoutesAndResources = getRoutesAndResourceFromNodes(children);\n          setRoutesAndResources(newRoutesAndResources);\n          setStatus(!!functionChild ? 'loading' : newRoutesAndResources.resources.length > 0 || newRoutesAndResources.customRoutesWithLayout.length > 0 || newRoutesAndResources.customRoutesWithoutLayout.length > 0 ? 'ready' : 'empty');\n\n          if (functionChild) {\n            resolveChildFunction(functionChild);\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    if (!isLoading) {\n      updateFromChildren();\n    }\n  }, [children, doLogout, isLoading, mergeRoutesAndResources, permissions, setRoutesAndResources, setStatus]);\n  return [routesAndResources, status];\n};\n/*\n * A hook that store the routes and resources just like setState but also provides an additional function\n * to merge new routes and resources with the existing ones.\n */\n\n\nvar useRoutesAndResourcesState = function (initialState) {\n  var _a = useState(initialState),\n      routesAndResources = _a[0],\n      setRoutesAndResources = _a[1];\n\n  var mergeRoutesAndResources = useCallback(function (newRoutesAndResources) {\n    setRoutesAndResources(function (previous) {\n      return {\n        customRoutesWithLayout: previous.customRoutesWithLayout.concat(newRoutesAndResources.customRoutesWithLayout),\n        customRoutesWithoutLayout: previous.customRoutesWithoutLayout.concat(newRoutesAndResources.customRoutesWithoutLayout),\n        resources: previous.resources.concat(newRoutesAndResources.resources)\n      };\n    });\n  }, []);\n  return [routesAndResources, setRoutesAndResources, mergeRoutesAndResources];\n};\n/**\n * A hook that register resources and unregister them when the calling component is unmounted.\n * @param resources: An array of Resource elements\n * @param permissions: The permissions\n */\n\n\nvar useRegisterResources = function (resources, permissions) {\n  var _a = useResourceDefinitionContext(),\n      register = _a.register,\n      unregister = _a.unregister;\n\n  useEffect(function () {\n    resources.forEach(function (resource) {\n      if (typeof resource.type.registerResource === 'function') {\n        var definition = resource.type.registerResource(resource.props, permissions);\n        register(definition);\n      } else {\n        throw new Error('When using a custom Resource element, it must have a static registerResource method accepting its props and returning a ResourceDefinition');\n      }\n    });\n    return function () {\n      resources.forEach(function (resource) {\n        if (typeof resource.type.registerResource === 'function') {\n          var definition = resource.type.registerResource(resource.props, permissions);\n          unregister(definition);\n        } else {\n          throw new Error('When using a custom Resource element, it must have a static registerResource method accepting its props and returning a ResourceDefinition');\n        }\n      });\n    };\n  }, [permissions, register, resources, unregister]);\n};\n\nvar getStatus = function (_a) {\n  var children = _a.children,\n      resources = _a.resources,\n      customRoutesWithLayout = _a.customRoutesWithLayout,\n      customRoutesWithoutLayout = _a.customRoutesWithoutLayout;\n  return getSingleChildFunction(children) ? 'loading' : resources.length > 0 || customRoutesWithLayout.length > 0 || customRoutesWithoutLayout.length > 0 ? 'ready' : 'empty';\n};\n/**\n * Inspect the children of a CoreAdminRouter to see if one of them is a function.\n * Throws an error if there are more than one function child.\n * Returns the function child if one was provided, or null otherwise.\n */\n\n\nvar getSingleChildFunction = function (children) {\n  var childrenArray = Array.isArray(children) ? children : [children];\n  var functionChildren = childrenArray.filter(function (child) {\n    return typeof child === 'function';\n  });\n\n  if (functionChildren.length > 1) {\n    throw new Error('You can only provide one function child to AdminRouter');\n  }\n\n  if (functionChildren.length === 0) {\n    return null;\n  }\n\n  return functionChildren[0];\n};\n/**\n * Inspect the children and return an object with the following keys:\n * - customRoutesWithLayout: an array of the custom routes to render inside the layout\n * - customRoutesWithoutLayout: an array of custom routes to render outside the layout\n * - resources: an array of resources elements\n */\n\n\nvar getRoutesAndResourceFromNodes = function (children) {\n  var customRoutesWithLayout = [];\n  var customRoutesWithoutLayout = [];\n  var resources = [];\n  Children.forEach(children, function (element) {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === Fragment) {\n      var customRoutesFromFragment = getRoutesAndResourceFromNodes(element.props.children);\n      customRoutesWithLayout.push.apply(customRoutesWithLayout, customRoutesFromFragment.customRoutesWithLayout);\n      customRoutesWithoutLayout.push.apply(customRoutesWithoutLayout, customRoutesFromFragment.customRoutesWithoutLayout);\n      resources.push.apply(resources, customRoutesFromFragment.resources);\n    }\n\n    if (element.type.raName === 'CustomRoutes') {\n      var customRoutesElement = element;\n\n      if (customRoutesElement.props.noLayout) {\n        customRoutesWithoutLayout.push(customRoutesElement.props.children);\n      } else {\n        customRoutesWithLayout.push(customRoutesElement.props.children);\n      }\n    } else if (element.type.raName === 'Resource') {\n      resources.push(element);\n    }\n  });\n  return {\n    customRoutesWithLayout: customRoutesWithLayout,\n    customRoutesWithoutLayout: customRoutesWithoutLayout,\n    resources: resources\n  };\n};","map":{"version":3,"mappings":"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","names":["React","Children","Fragment","useCallback","useEffect","useState","useLogout","usePermissions","useSafeSetState","useResourceDefinitionContext","useConfigureAdminRouterFromChildren","children","permissions","isLoading","useRoutesAndResourcesFromChildren","routesAndResources","status","useRegisterResources","resources","customRoutesWithLayout","customRoutesWithoutLayout","doLogout","useRoutesAndResourcesState","getRoutesAndResourceFromNodes","setRoutesAndResources","mergeRoutesAndResources","setStatus","resolveChildFunction","childFunc","childrenFuncResult","then","resolvedChildren","error","console","updateFromChildren","functionChild","getSingleChildFunction","newRoutesAndResources","length","initialState","previous","concat","register","unregister","forEach","resource","type","registerResource","definition","props","Error","getStatus","_a","childrenArray","Array","isArray","functionChildren","filter","child","isValidElement","element","customRoutesFromFragment","push","apply","raName","customRoutesElement","noLayout"],"sources":["/var/www/a1boots/node_modules/ra-core/src/core/useConfigureAdminRouterFromChildren.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    Dispatch,\n    Fragment,\n    ReactElement,\n    ReactNode,\n    SetStateAction,\n    useCallback,\n    useEffect,\n    useState,\n} from 'react';\nimport { useLogout, usePermissions } from '../auth';\nimport { useSafeSetState } from '../util';\nimport {\n    AdminChildren,\n    RenderResourcesFunction,\n    ResourceDefinition,\n    ResourceProps,\n} from '../types';\nimport { CustomRoutesProps } from './CustomRoutes';\nimport { useResourceDefinitionContext } from './useResourceDefinitionContext';\n\n/**\n * This hook inspects the CoreAdminRouter children and returns them separated in three groups:\n * - Custom routes without layout\n * - Custom routes with layout\n * - Resources\n *\n * It also returns a status:\n * - loading: still loading children from a function child\n * - empty: no resources were provided among children\n * - ready: admin is ready to be rendered\n *\n * @example\n * const {\n *    customRoutesWithLayout,\n *    customRoutesWithoutLayout,\n *    resources,\n *    status,\n * } = useConfigureAdminRouterFromChildren(children);\n */\nexport const useConfigureAdminRouterFromChildren = (\n    children: AdminChildren\n): RoutesAndResources & { status: AdminRouterStatus } => {\n    const { permissions, isLoading } = usePermissions();\n\n    // Whenever children are updated, update our custom routes and resources\n    const [routesAndResources, status] = useRoutesAndResourcesFromChildren(\n        children,\n        permissions,\n        isLoading\n    );\n\n    // Whenever the resources change, we must ensure they're all registered\n    useRegisterResources(routesAndResources.resources, permissions);\n\n    return {\n        customRoutesWithLayout: routesAndResources.customRoutesWithLayout,\n        customRoutesWithoutLayout: routesAndResources.customRoutesWithoutLayout,\n        status,\n        resources: routesAndResources.resources,\n    };\n};\n\n/**\n * A hook that determine the routes and resources from React nodes and permissions.\n * Returns a tuple with the routes and resources as a single object, and the status.\n * @param children React nodes to inspect\n * @param permissions The permissions\n */\nconst useRoutesAndResourcesFromChildren = (\n    children: ReactNode,\n    permissions: any,\n    isLoading: boolean\n): [RoutesAndResources, AdminRouterStatus] => {\n    // Gather custom routes and resources that were declared as direct children of CoreAdminRouter\n    // e.g. Not returned from the child function (if any)\n    // We need to know right away wether some resources were declared to correctly\n    // initialize the status at the next stop\n    const doLogout = useLogout();\n    const [\n        routesAndResources,\n        setRoutesAndResources,\n        mergeRoutesAndResources,\n    ] = useRoutesAndResourcesState(getRoutesAndResourceFromNodes(children));\n\n    const [status, setStatus] = useSafeSetState<AdminRouterStatus>(() =>\n        getStatus({\n            children,\n            ...routesAndResources,\n        })\n    );\n\n    useEffect(() => {\n        const resolveChildFunction = async (\n            childFunc: RenderResourcesFunction\n        ) => {\n            try {\n                const childrenFuncResult = childFunc(permissions);\n                if ((childrenFuncResult as Promise<ReactNode>)?.then) {\n                    (childrenFuncResult as Promise<ReactNode>).then(\n                        resolvedChildren => {\n                            mergeRoutesAndResources(\n                                getRoutesAndResourceFromNodes(resolvedChildren)\n                            );\n                            setStatus('ready');\n                        }\n                    );\n                } else {\n                    mergeRoutesAndResources(\n                        getRoutesAndResourceFromNodes(childrenFuncResult)\n                    );\n                    setStatus('ready');\n                }\n            } catch (error) {\n                console.error(error);\n                doLogout();\n            }\n        };\n\n        const updateFromChildren = async () => {\n            const functionChild = getSingleChildFunction(children);\n            const newRoutesAndResources = getRoutesAndResourceFromNodes(\n                children\n            );\n            setRoutesAndResources(newRoutesAndResources);\n            setStatus(\n                !!functionChild\n                    ? 'loading'\n                    : newRoutesAndResources.resources.length > 0 ||\n                      newRoutesAndResources.customRoutesWithLayout.length > 0 ||\n                      newRoutesAndResources.customRoutesWithoutLayout.length > 0\n                    ? 'ready'\n                    : 'empty'\n            );\n\n            if (functionChild) {\n                resolveChildFunction(functionChild);\n            }\n        };\n        if (!isLoading) {\n            updateFromChildren();\n        }\n    }, [\n        children,\n        doLogout,\n        isLoading,\n        mergeRoutesAndResources,\n        permissions,\n        setRoutesAndResources,\n        setStatus,\n    ]);\n\n    return [routesAndResources, status];\n};\n\n/*\n * A hook that store the routes and resources just like setState but also provides an additional function\n * to merge new routes and resources with the existing ones.\n */\nconst useRoutesAndResourcesState = (\n    initialState: RoutesAndResources\n): [\n    RoutesAndResources,\n    Dispatch<SetStateAction<RoutesAndResources>>,\n    (newRoutesAndResources: RoutesAndResources) => void\n] => {\n    const [routesAndResources, setRoutesAndResources] = useState(initialState);\n\n    const mergeRoutesAndResources = useCallback(\n        (newRoutesAndResources: RoutesAndResources) => {\n            setRoutesAndResources(previous => ({\n                customRoutesWithLayout: previous.customRoutesWithLayout.concat(\n                    newRoutesAndResources.customRoutesWithLayout\n                ),\n                customRoutesWithoutLayout: previous.customRoutesWithoutLayout.concat(\n                    newRoutesAndResources.customRoutesWithoutLayout\n                ),\n                resources: previous.resources.concat(\n                    newRoutesAndResources.resources\n                ),\n            }));\n        },\n        []\n    );\n\n    return [routesAndResources, setRoutesAndResources, mergeRoutesAndResources];\n};\n\n/**\n * A hook that register resources and unregister them when the calling component is unmounted.\n * @param resources: An array of Resource elements\n * @param permissions: The permissions\n */\nconst useRegisterResources = (\n    resources: (ReactElement<ResourceProps> & ResourceWithRegisterFunction)[],\n    permissions: any\n) => {\n    const { register, unregister } = useResourceDefinitionContext();\n\n    useEffect(() => {\n        resources.forEach(resource => {\n            if (\n                typeof ((resource.type as unknown) as ResourceWithRegisterFunction)\n                    .registerResource === 'function'\n            ) {\n                const definition = ((resource.type as unknown) as ResourceWithRegisterFunction).registerResource(\n                    resource.props,\n                    permissions\n                );\n                register(definition);\n            } else {\n                throw new Error(\n                    'When using a custom Resource element, it must have a static registerResource method accepting its props and returning a ResourceDefinition'\n                );\n            }\n        });\n        return () => {\n            resources.forEach(resource => {\n                if (\n                    typeof ((resource.type as unknown) as ResourceWithRegisterFunction)\n                        .registerResource === 'function'\n                ) {\n                    const definition = ((resource.type as unknown) as ResourceWithRegisterFunction).registerResource(\n                        resource.props,\n                        permissions\n                    );\n                    unregister(definition);\n                } else {\n                    throw new Error(\n                        'When using a custom Resource element, it must have a static registerResource method accepting its props and returning a ResourceDefinition'\n                    );\n                }\n            });\n        };\n    }, [permissions, register, resources, unregister]);\n};\n\nconst getStatus = ({\n    children,\n    resources,\n    customRoutesWithLayout,\n    customRoutesWithoutLayout,\n}: {\n    children: ReactNode;\n    resources: ReactElement<ResourceProps>[];\n    customRoutesWithLayout: ReactElement<CustomRoutesProps>[];\n    customRoutesWithoutLayout: ReactElement<CustomRoutesProps>[];\n}) => {\n    return getSingleChildFunction(children)\n        ? 'loading'\n        : resources.length > 0 ||\n          customRoutesWithLayout.length > 0 ||\n          customRoutesWithoutLayout.length > 0\n        ? 'ready'\n        : 'empty';\n};\n\n/**\n * Inspect the children of a CoreAdminRouter to see if one of them is a function.\n * Throws an error if there are more than one function child.\n * Returns the function child if one was provided, or null otherwise.\n */\nconst getSingleChildFunction = (\n    children: ReactNode\n): RenderResourcesFunction | null => {\n    const childrenArray = Array.isArray(children) ? children : [children];\n\n    const functionChildren = childrenArray.filter(\n        child => typeof child === 'function'\n    );\n\n    if (functionChildren.length > 1) {\n        throw new Error(\n            'You can only provide one function child to AdminRouter'\n        );\n    }\n\n    if (functionChildren.length === 0) {\n        return null;\n    }\n\n    return functionChildren[0] as RenderResourcesFunction;\n};\n\n/**\n * Inspect the children and return an object with the following keys:\n * - customRoutesWithLayout: an array of the custom routes to render inside the layout\n * - customRoutesWithoutLayout: an array of custom routes to render outside the layout\n * - resources: an array of resources elements\n */\nconst getRoutesAndResourceFromNodes = (\n    children: ReactNode\n): RoutesAndResources => {\n    const customRoutesWithLayout = [];\n    const customRoutesWithoutLayout = [];\n    const resources = [];\n    Children.forEach(children, element => {\n        if (!React.isValidElement(element)) {\n            // Ignore non-elements. This allows people to more easily inline\n            // conditionals in their route config.\n            return;\n        }\n        if (element.type === Fragment) {\n            const customRoutesFromFragment = getRoutesAndResourceFromNodes(\n                element.props.children\n            );\n            customRoutesWithLayout.push(\n                ...customRoutesFromFragment.customRoutesWithLayout\n            );\n            customRoutesWithoutLayout.push(\n                ...customRoutesFromFragment.customRoutesWithoutLayout\n            );\n            resources.push(...customRoutesFromFragment.resources);\n        }\n\n        if ((element.type as any).raName === 'CustomRoutes') {\n            const customRoutesElement = element as ReactElement<\n                CustomRoutesProps\n            >;\n\n            if (customRoutesElement.props.noLayout) {\n                customRoutesWithoutLayout.push(\n                    customRoutesElement.props.children\n                );\n            } else {\n                customRoutesWithLayout.push(customRoutesElement.props.children);\n            }\n        } else if ((element.type as any).raName === 'Resource') {\n            resources.push(element as ReactElement<ResourceProps>);\n        }\n    });\n\n    return {\n        customRoutesWithLayout,\n        customRoutesWithoutLayout,\n        resources,\n    };\n};\n\ntype RoutesAndResources = {\n    customRoutesWithLayout: ReactElement<CustomRoutesProps>[];\n    customRoutesWithoutLayout: ReactElement<CustomRoutesProps>[];\n    resources: (ReactElement<ResourceProps> & ResourceWithRegisterFunction)[];\n};\n\ntype ResourceWithRegisterFunction = {\n    registerResource: (\n        props: ResourceProps,\n        permissions: any\n    ) => ResourceDefinition;\n};\n\ntype AdminRouterStatus = 'loading' | 'empty' | 'ready';\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { LinearProgress, styled } from '@mui/material';\nimport { cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useResourceContext, RecordContextProvider, ComponentPropType, useCreatePath } from 'ra-core';\nimport { Link } from '../Link';\n/**\n * Iterator component to be used to display a list of entities, using a single field\n *\n * @example Display all the books by the current author\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, it includes a link to the <Edit> page of the related record\n * (`/books/:id` in the previous example).\n *\n * Set the linkType prop to \"show\" to link to the <Show> page instead.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType=\"show\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * You can also prevent `<SingleFieldList>` from adding link to children by setting\n * `linkType` to false.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType={false}>\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n */\n\nexport var SingleFieldList = function SingleFieldList(props) {\n  var className = props.className,\n      children = props.children,\n      _a = props.linkType,\n      linkType = _a === void 0 ? 'edit' : _a,\n      _b = props.component,\n      Component = _b === void 0 ? Root : _b,\n      rest = __rest(props, [\"className\", \"children\", \"linkType\", \"component\"]);\n\n  var _c = useListContext(props),\n      data = _c.data,\n      isLoading = _c.isLoading;\n\n  var resource = useResourceContext(props);\n  var createPath = useCreatePath();\n\n  if (isLoading === true) {\n    return React.createElement(LinearProgress, null);\n  }\n\n  return React.createElement(Component, __assign({\n    className: className\n  }, sanitizeListRestProps(rest)), data.map(function (record, rowIndex) {\n    var _a, _b;\n\n    var resourceLinkPath = !linkType ? false : createPath({\n      resource: resource,\n      type: linkType,\n      id: record.id\n    });\n\n    if (resourceLinkPath) {\n      return React.createElement(RecordContextProvider, {\n        value: record,\n        key: (_a = record.id) !== null && _a !== void 0 ? _a : \"row\".concat(rowIndex)\n      }, React.createElement(Link, {\n        className: SingleFieldListClasses.link,\n        to: resourceLinkPath,\n        onClick: stopPropagation\n      }, cloneElement(Children.only(children), {\n        record: record,\n        resource: resource,\n        // Workaround to force ChipField to be clickable\n        onClick: handleClick\n      })));\n    }\n\n    return React.createElement(RecordContextProvider, {\n      value: record,\n      key: (_b = record.id) !== null && _b !== void 0 ? _b : \"row\".concat(rowIndex)\n    }, children);\n  }));\n};\nSingleFieldList.propTypes = {\n  children: PropTypes.element.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  component: ComponentPropType,\n  data: PropTypes.any,\n  ids: PropTypes.array,\n  // @ts-ignore\n  linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  resource: PropTypes.string,\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n};\nvar PREFIX = 'RaSingleFieldList';\nexport var SingleFieldListClasses = {\n  link: \"\".concat(PREFIX, \"-link\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {\n    display: 'flex',\n    flexWrap: 'wrap'\n  }, _b[\"& .\".concat(SingleFieldListClasses.link)] = {\n    textDecoration: 'none'\n  }, _b;\n}); // useful to prevent click bubbling in a datagrid with rowClick\n\nvar stopPropagation = function stopPropagation(e) {\n  return e.stopPropagation();\n}; // Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from Material UI.\n// The Material UI Chip requires an onClick handler to behave like a clickable element.\n\n\nvar handleClick = function handleClick() {};","map":{"version":3,"mappings":"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","names":["React","LinearProgress","styled","cloneElement","Children","PropTypes","sanitizeListRestProps","useListContext","useResourceContext","RecordContextProvider","ComponentPropType","useCreatePath","Link","SingleFieldList","props","children","_a","linkType","_b","Component","Root","rest","data","isLoading","resource","createPath","__assign","className","map","record","rowIndex","resourceLinkPath","type","id","value","key","SingleFieldListClasses","link","to","onClick","stopPropagation","only","handleClick","propTypes","element","isRequired","classes","object","string","component","any","ids","array","oneOfType","bool","sx","arrayOf","func","PREFIX","name","overridesResolver","styles","root","theme","display","flexWrap","textDecoration"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/SingleFieldList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { LinearProgress, styled, SxProps } from '@mui/material';\nimport {\n    cloneElement,\n    Children,\n    HtmlHTMLAttributes,\n    ComponentType,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    sanitizeListRestProps,\n    useListContext,\n    useResourceContext,\n    RaRecord,\n    RecordContextProvider,\n    ComponentPropType,\n    useCreatePath,\n} from 'ra-core';\n\nimport { Link } from '../Link';\n\n/**\n * Iterator component to be used to display a list of entities, using a single field\n *\n * @example Display all the books by the current author\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, it includes a link to the <Edit> page of the related record\n * (`/books/:id` in the previous example).\n *\n * Set the linkType prop to \"show\" to link to the <Show> page instead.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType=\"show\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * You can also prevent `<SingleFieldList>` from adding link to children by setting\n * `linkType` to false.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType={false}>\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n */\nexport const SingleFieldList = (props: SingleFieldListProps) => {\n    const {\n        className,\n        children,\n        linkType = 'edit',\n        component: Component = Root,\n        ...rest\n    } = props;\n    const { data, isLoading } = useListContext(props);\n    const resource = useResourceContext(props);\n    const createPath = useCreatePath();\n\n    if (isLoading === true) {\n        return <LinearProgress />;\n    }\n\n    return (\n        <Component className={className} {...sanitizeListRestProps(rest)}>\n            {data.map((record, rowIndex) => {\n                const resourceLinkPath = !linkType\n                    ? false\n                    : createPath({\n                          resource,\n                          type: linkType,\n                          id: record.id,\n                      });\n\n                if (resourceLinkPath) {\n                    return (\n                        <RecordContextProvider\n                            value={record}\n                            key={record.id ?? `row${rowIndex}`}\n                        >\n                            <Link\n                                className={SingleFieldListClasses.link}\n                                to={resourceLinkPath}\n                                onClick={stopPropagation}\n                            >\n                                {cloneElement(Children.only(children), {\n                                    record,\n                                    resource,\n                                    // Workaround to force ChipField to be clickable\n                                    onClick: handleClick,\n                                })}\n                            </Link>\n                        </RecordContextProvider>\n                    );\n                }\n\n                return (\n                    <RecordContextProvider\n                        value={record}\n                        key={record.id ?? `row${rowIndex}`}\n                    >\n                        {children}\n                    </RecordContextProvider>\n                );\n            })}\n        </Component>\n    );\n};\n\nSingleFieldList.propTypes = {\n    children: PropTypes.element.isRequired,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    component: ComponentPropType,\n    data: PropTypes.any,\n    ids: PropTypes.array,\n    // @ts-ignore\n    linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    resource: PropTypes.string,\n    sx: PropTypes.oneOfType([\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([\n                PropTypes.func,\n                PropTypes.object,\n                PropTypes.bool,\n            ])\n        ),\n        PropTypes.func,\n        PropTypes.object,\n    ]),\n};\n\nexport interface SingleFieldListProps<RecordType extends RaRecord = any>\n    extends HtmlHTMLAttributes<HTMLDivElement> {\n    className?: string;\n\n    component?: string | ComponentType<any>;\n    linkType?: string | false;\n    children: React.ReactElement;\n    // can be injected when using the component without context\n    data?: RecordType[];\n    total?: number;\n    loaded?: boolean;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaSingleFieldList';\n\nexport const SingleFieldListClasses = {\n    link: `${PREFIX}-link`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexWrap: 'wrap',\n\n    [`& .${SingleFieldListClasses.link}`]: {\n        textDecoration: 'none',\n    },\n}));\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from Material UI.\n// The Material UI Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport { alpha } from '@mui/material/styles';\nimport { useUpdateMany, useRefresh, useNotify, useUnselectAll, useResourceContext, useListContext } from 'ra-core';\nimport { Button } from './Button';\nexport var BulkUpdateWithUndoButton = function BulkUpdateWithUndoButton(props) {\n  var selectedIds = useListContext(props).selectedIds;\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  var unselectAll = useUnselectAll(resource);\n  var refresh = useRefresh();\n\n  var data = props.data,\n      _a = props.label,\n      label = _a === void 0 ? 'ra.action.update' : _a,\n      _b = props.icon,\n      icon = _b === void 0 ? defaultIcon : _b,\n      onClick = props.onClick,\n      _c = props.onSuccess,\n      onSuccess = _c === void 0 ? function () {\n    notify('ra.notification.updated', {\n      type: 'info',\n      messageArgs: {\n        smart_count: selectedIds.length\n      },\n      undoable: true\n    });\n    unselectAll();\n    refresh();\n  } : _c,\n      _d = props.onError,\n      onError = _d === void 0 ? function (error) {\n    notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n      type: 'error',\n      messageArgs: {\n        _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n      }\n    });\n    refresh();\n  } : _d,\n      rest = __rest(props, [\"data\", \"label\", \"icon\", \"onClick\", \"onSuccess\", \"onError\"]);\n\n  var _e = useUpdateMany(resource, {\n    ids: selectedIds,\n    data: data\n  }, {\n    onSuccess: onSuccess,\n    onError: onError,\n    mutationMode: 'undoable'\n  }),\n      updateMany = _e[0],\n      isLoading = _e[1].isLoading;\n\n  var handleClick = function handleClick(e) {\n    updateMany();\n\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n\n  return React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label,\n    disabled: isLoading\n  }, sanitizeRestProps(rest)), icon);\n};\nvar defaultIcon = React.createElement(ActionUpdate, null);\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var filterValues = _a.filterValues,\n      label = _a.label,\n      selectedIds = _a.selectedIds,\n      onSuccess = _a.onSuccess,\n      onError = _a.onError,\n      rest = __rest(_a, [\"filterValues\", \"label\", \"selectedIds\", \"onSuccess\", \"onError\"]);\n\n  return rest;\n};\n\nBulkUpdateWithUndoButton.propTypes = {\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  icon: PropTypes.element,\n  data: PropTypes.any.isRequired\n};\nvar PREFIX = 'RaBulkUpdateWithUndoButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SACIC,aADJ,EAEIC,UAFJ,EAGIC,SAHJ,EAIIC,cAJJ,EAKIC,kBALJ,EAMIC,cANJ,QAOO,SAPP;AASA,SAASC,MAAT,QAAoC,UAApC;AAGA,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CACpCC,KADoC,EACA;EAE5B,eAAW,GAAKH,cAAc,CAACG,KAAD,CAAd,CAAqBC,WAArC;EAER,IAAMC,MAAM,GAAGR,SAAS,EAAxB;EACA,IAAMS,QAAQ,GAAGP,kBAAkB,CAACI,KAAD,CAAnC;EACA,IAAMI,WAAW,GAAGT,cAAc,CAACQ,QAAD,CAAlC;EACA,IAAME,OAAO,GAAGZ,UAAU,EAA1B;;EAGI,QAAI,GAiCJO,KAAK,KAjCL;EAAA,IACAM,KAgCAN,KAAK,MAjCL;EAAA,IACAO,KAAK,mBAAG,kBAAH,GAAqBD,EAD1B;EAAA,IAEAE,KA+BAR,KAAK,KAjCL;EAAA,IAEAS,IAAI,mBAAGC,WAAH,GAAcF,EAFlB;EAAA,IAGAG,OAAO,GA8BPX,KAAK,QAjCL;EAAA,IAIAY,KA6BAZ,KAAK,UAjCL;EAAA,IAIAa,SAAS,mBAAG;IACRX,MAAM,CAAC,yBAAD,EAA4B;MAC9BY,IAAI,EAAE,MADwB;MAE9BC,WAAW,EAAE;QAAEC,WAAW,EAAEf,WAAW,CAACgB;MAA3B,CAFiB;MAG9BC,QAAQ,EAAE;IAHoB,CAA5B,CAAN;IAKAd,WAAW;IACXC,OAAO;EACV,CARQ,GAQRO,EAZD;EAAA,IAaAO,KAoBAnB,KAAK,QAjCL;EAAA,IAaAoB,OAAO,mBAAG,UAACC,KAAD,EAAsB;IAC5BnB,MAAM,CACF,OAAOmB,KAAP,KAAiB,QAAjB,GACMA,KADN,GAEMA,KAAK,CAACC,OAAN,IAAiB,4BAHrB,EAIF;MACIR,IAAI,EAAE,OADV;MAEIC,WAAW,EAAE;QACTQ,CAAC,EACG,OAAOF,KAAP,KAAiB,QAAjB,GACMA,KADN,GAEMA,KAAK,IAAIA,KAAK,CAACC,OAAf,GACAD,KAAK,CAACC,OADN,GAEAE;MAND;IAFjB,CAJE,CAAN;IAgBAnB,OAAO;EACV,CAlBM,GAkBNc,EA/BD;EAAA,IAgCGM,IAAI,UACPzB,KADO,EAjCL,4DAiCK,CAhCP;;EAmCE,SAA8BR,aAAa,CAC7CW,QAD6C,EAE7C;IAAEuB,GAAG,EAAEzB,WAAP;IAAoB0B,IAAI;EAAxB,CAF6C,EAG7C;IACId,SAAS,WADb;IAEIO,OAAO,SAFX;IAGIQ,YAAY,EAAE;EAHlB,CAH6C,CAA3C;EAAA,IAACC,UAAU,QAAX;EAAA,IAAeC,SAAS,kBAAxB;;EAUN,IAAMC,WAAW,GAAG,SAAdA,WAAc,IAAC;IACjBF,UAAU;;IACV,IAAI,OAAOlB,OAAP,KAAmB,UAAvB,EAAmC;MAC/BA,OAAO,CAACqB,CAAD,CAAP;IACH;EACJ,CALD;;EAOA,OACI7C,oBAAC8C,YAAD,EAAaC;IACTvB,OAAO,EAAEoB,WADA;IAETxB,KAAK,EAAEA,KAFE;IAGT4B,QAAQ,EAAEL;EAHD,GAILM,iBAAiB,CAACX,IAAD,CAJZ,CAAb,EAMKhB,IANL,CADJ;AAUH,CAzEM;AA2EP,IAAMC,WAAW,GAAGvB,oBAACG,YAAD,EAAa,IAAb,CAApB;;AAEA,IAAM8C,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC9B,EAAD,EAO0C;EANhE,gBAAY,kBAAZ;EAAA,IACAC,KAAK,WADL;EAAA,IAEAN,WAAW,iBAFX;EAAA,IAGAY,SAAS,eAHT;EAAA,IAIAO,OAAO,aAJP;EAAA,IAKGK,IAAI,cANgB,gEAMhB,CALP;;EAMqE;AAAI,CAP7E;;AAkBA1B,wBAAwB,CAACsC,SAAzB,GAAqC;EACjC9B,KAAK,EAAElB,SAAS,CAACiD,MADgB;EAEjCnC,QAAQ,EAAEd,SAAS,CAACiD,MAFa;EAGjCrC,WAAW,EAAEZ,SAAS,CAACkD,OAAV,CAAkBlD,SAAS,CAACmD,GAA5B,CAHoB;EAIjC/B,IAAI,EAAEpB,SAAS,CAACoD,OAJiB;EAKjCd,IAAI,EAAEtC,SAAS,CAACmD,GAAV,CAAcE;AALa,CAArC;AAQA,IAAMC,MAAM,GAAG,4BAAf;AAEA,IAAMV,YAAY,GAAG7C,MAAM,CAACU,MAAD,EAAS;EAChC8C,IAAI,EAAED,MAD0B;EAEhCE,iBAAiB,EAAE,2BAAC7C,KAAD,EAAQ8C,MAAR,EAAc;IAAK,aAAM,CAACC,IAAP;EAAW;AAFjB,CAAT,CAAN,CAGlB,UAACzC,EAAD,EAAU;MAAP0C,KAAK;EAAO,OAAC;IACfC,KAAK,EAAED,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,IADd;IAEf,WAAW;MACPC,eAAe,EAAE9D,KAAK,CAACyD,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,IAAvB,EAA6B,IAA7B,CADf;MAEP;MACA,wBAAwB;QACpBC,eAAe,EAAE;MADG;IAHjB;EAFI,CAAD;AAShB,CAZmB,CAArB","names":["React","styled","PropTypes","ActionUpdate","alpha","useUpdateMany","useRefresh","useNotify","useUnselectAll","useResourceContext","useListContext","Button","BulkUpdateWithUndoButton","props","selectedIds","notify","resource","unselectAll","refresh","_a","label","_b","icon","defaultIcon","onClick","_c","onSuccess","type","messageArgs","smart_count","length","undoable","_d","onError","error","message","_","undefined","rest","ids","data","mutationMode","updateMany","isLoading","handleClick","e","StyledButton","__assign","disabled","sanitizeRestProps","propTypes","string","arrayOf","any","element","isRequired","PREFIX","name","overridesResolver","styles","root","theme","color","palette","primary","main","backgroundColor"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/BulkUpdateWithUndoButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport { alpha } from '@mui/material/styles';\nimport {\n    useUpdateMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n    useResourceContext,\n    useListContext,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\n\nexport const BulkUpdateWithUndoButton = (\n    props: BulkUpdateWithUndoButtonProps\n) => {\n    const { selectedIds } = useListContext(props);\n\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const unselectAll = useUnselectAll(resource);\n    const refresh = useRefresh();\n\n    const {\n        data,\n        label = 'ra.action.update',\n        icon = defaultIcon,\n        onClick,\n        onSuccess = () => {\n            notify('ra.notification.updated', {\n                type: 'info',\n                messageArgs: { smart_count: selectedIds.length },\n                undoable: true,\n            });\n            unselectAll();\n            refresh();\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'error',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                ? error.message\n                                : undefined,\n                    },\n                }\n            );\n            refresh();\n        },\n        ...rest\n    } = props;\n\n    const [updateMany, { isLoading }] = useUpdateMany(\n        resource,\n        { ids: selectedIds, data },\n        {\n            onSuccess,\n            onError,\n            mutationMode: 'undoable',\n        }\n    );\n\n    const handleClick = e => {\n        updateMany();\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <StyledButton\n            onClick={handleClick}\n            label={label}\n            disabled={isLoading}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionUpdate />;\n\nconst sanitizeRestProps = ({\n    filterValues,\n    label,\n    selectedIds,\n    onSuccess,\n    onError,\n    ...rest\n}: Omit<BulkUpdateWithUndoButtonProps, 'resource' | 'icon' | 'data'>) => rest;\n\nexport interface BulkUpdateWithUndoButtonProps\n    extends BulkActionProps,\n        ButtonProps {\n    icon?: ReactElement;\n    data: any;\n    onSuccess?: () => void;\n    onError?: (error: any) => void;\n}\n\nBulkUpdateWithUndoButton.propTypes = {\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    icon: PropTypes.element,\n    data: PropTypes.any.isRequired,\n};\n\nconst PREFIX = 'RaBulkUpdateWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
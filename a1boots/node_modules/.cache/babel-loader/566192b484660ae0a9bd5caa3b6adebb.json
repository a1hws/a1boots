{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useQuery } from 'react-query';\nimport { useLocation } from 'react-router';\nimport { useRedirect } from '../routing';\nimport useAuthProvider from './useAuthProvider';\n/**\n * This hook calls the `authProvider.handleCallback()` method on mount. This is meant to be used in a route called\n * by an external authentication service (e.g. Auth0) after the user has logged in.\n * By default, it redirects to application home page upon success, or to the `redirectTo` location returned by `authProvider. handleCallback`.\n *\n * @returns An object containing { isLoading, data, error, refetch }.\n */\n\nexport var useHandleAuthCallback = function useHandleAuthCallback(options) {\n  var authProvider = useAuthProvider();\n  var redirect = useRedirect();\n  var location = useLocation();\n  var locationState = location.state;\n  var nextPathName = locationState && locationState.nextPathname;\n  var nextSearch = locationState && locationState.nextSearch;\n  var defaultRedirectUrl = nextPathName ? nextPathName + nextSearch : '/';\n  return useQuery(['auth', 'handleCallback'], function () {\n    return authProvider.handleCallback();\n  }, __assign({\n    retry: false,\n    onSuccess: function onSuccess(data) {\n      var _a; // AuthProviders relying on a third party services redirect back to the app can't\n      // use the location state to store the path on which the user was before the login.\n      // So we support a fallback on the localStorage.\n\n\n      var previousLocation = localStorage.getItem(PreviousLocationStorageKey);\n      var redirectTo = (_a = data === null || data === void 0 ? void 0 : data.redirectTo) !== null && _a !== void 0 ? _a : previousLocation;\n\n      if (redirectTo === false) {\n        return;\n      }\n\n      redirect(redirectTo !== null && redirectTo !== void 0 ? redirectTo : defaultRedirectUrl);\n    }\n  }, options));\n};\n/**\n * Key used to store the previous location in localStorage.\n * Used by the useHandleAuthCallback hook to redirect the user to their previous location after a successful login.\n */\n\nexport var PreviousLocationStorageKey = '@react-admin/nextPathname';","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAA0C,aAA1C;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA;;;;;;;;AAOA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CACjCC,OADiC,EACoC;EAErE,IAAMC,YAAY,GAAGH,eAAe,EAApC;EACA,IAAMI,QAAQ,GAAGL,WAAW,EAA5B;EACA,IAAMM,QAAQ,GAAGP,WAAW,EAA5B;EACA,IAAMQ,aAAa,GAAGD,QAAQ,CAACE,KAA/B;EACA,IAAMC,YAAY,GAAGF,aAAa,IAAIA,aAAa,CAACG,YAApD;EACA,IAAMC,UAAU,GAAGJ,aAAa,IAAIA,aAAa,CAACI,UAAlD;EACA,IAAMC,kBAAkB,GAAGH,YAAY,GAAGA,YAAY,GAAGE,UAAlB,GAA+B,GAAtE;EAEA,OAAOb,QAAQ,CACX,CAAC,MAAD,EAAS,gBAAT,CADW,EAEX;IAAM,mBAAY,CAACe,cAAb;EAA6B,CAFxB,EAEwBC;IAE/BC,KAAK,EAAE,KAFwB;IAG/BC,SAAS,EAAE,yBAAI;aAAA,CACX;MACA;MACA;;;MACA,IAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAb,CACrBC,0BADqB,CAAzB;MAGA,IAAMC,UAAU,GACZ,MAACC,IAA2B,SAA3B,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAyBD,UAA9B,MAAwC,IAAxC,IAAwCE,aAAxC,GAAwCA,EAAxC,GACAN,gBAFJ;;MAIA,IAAII,UAAU,KAAK,KAAnB,EAA0B;QACtB;MACH;;MAEDhB,QAAQ,CAACgB,UAAU,SAAV,cAAU,WAAV,gBAAcT,kBAAf,CAAR;IACH;EAnB8B,GAoB5BT,OApB4B,CAFxB,CAAf;AAyBH,CApCM;AAsCP;;;;;AAIA,OAAO,IAAMiB,0BAA0B,GAAG,2BAAnC","names":["useQuery","useLocation","useRedirect","useAuthProvider","useHandleAuthCallback","options","authProvider","redirect","location","locationState","state","nextPathName","nextPathname","nextSearch","defaultRedirectUrl","handleCallback","__assign","retry","onSuccess","previousLocation","localStorage","getItem","PreviousLocationStorageKey","redirectTo","data","_a"],"sources":["/var/www/a1boots/node_modules/ra-core/src/auth/useHandleAuthCallback.ts"],"sourcesContent":["import { useQuery, UseQueryOptions } from 'react-query';\nimport { useLocation } from 'react-router';\nimport { useRedirect } from '../routing';\nimport { AuthProvider, AuthRedirectResult } from '../types';\nimport useAuthProvider from './useAuthProvider';\n\n/**\n * This hook calls the `authProvider.handleCallback()` method on mount. This is meant to be used in a route called\n * by an external authentication service (e.g. Auth0) after the user has logged in.\n * By default, it redirects to application home page upon success, or to the `redirectTo` location returned by `authProvider. handleCallback`.\n *\n * @returns An object containing { isLoading, data, error, refetch }.\n */\nexport const useHandleAuthCallback = (\n    options?: UseQueryOptions<ReturnType<AuthProvider['handleCallback']>>\n) => {\n    const authProvider = useAuthProvider();\n    const redirect = useRedirect();\n    const location = useLocation();\n    const locationState = location.state as any;\n    const nextPathName = locationState && locationState.nextPathname;\n    const nextSearch = locationState && locationState.nextSearch;\n    const defaultRedirectUrl = nextPathName ? nextPathName + nextSearch : '/';\n\n    return useQuery(\n        ['auth', 'handleCallback'],\n        () => authProvider.handleCallback(),\n        {\n            retry: false,\n            onSuccess: data => {\n                // AuthProviders relying on a third party services redirect back to the app can't\n                // use the location state to store the path on which the user was before the login.\n                // So we support a fallback on the localStorage.\n                const previousLocation = localStorage.getItem(\n                    PreviousLocationStorageKey\n                );\n                const redirectTo =\n                    (data as AuthRedirectResult)?.redirectTo ??\n                    previousLocation;\n\n                if (redirectTo === false) {\n                    return;\n                }\n\n                redirect(redirectTo ?? defaultRedirectUrl);\n            },\n            ...options,\n        }\n    );\n};\n\n/**\n * Key used to store the previous location in localStorage.\n * Used by the useHandleAuthCallback hook to redirect the user to their previous location after a successful login.\n */\nexport const PreviousLocationStorageKey = '@react-admin/nextPathname';\n"]},"metadata":{},"sourceType":"module"}
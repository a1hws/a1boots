{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useResourceContext, usePreference, useStore, useTranslate } from 'ra-core';\nimport { Configurable } from '../../preferences';\nimport { Datagrid } from './Datagrid';\nimport { DatagridEditor } from './DatagridEditor';\n/**\n * A Datagrid that users can customize in configuration mode\n *\n * @example\n * import {\n *     List,\n *     DatagridConfigurable,\n *     TextField,\n * } from 'react-admin';\n *\n * export const PostList = () => (\n *     <List>\n *         <DatagridConfigurable>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"author\" />\n *             <TextField source=\"year\" />\n *         </DatagridConfigurable>\n *     </List>\n * );\n */\n\nexport var DatagridConfigurable = function DatagridConfigurable(_a) {\n  var preferenceKey = _a.preferenceKey,\n      omit = _a.omit,\n      props = __rest(_a, [\"preferenceKey\", \"omit\"]);\n\n  if (props.optimized) {\n    throw new Error('DatagridConfigurable does not support the optimized prop');\n  }\n\n  var translate = useTranslate();\n  var resource = useResourceContext(props);\n  var finalPreferenceKey = preferenceKey || \"\".concat(resource, \".datagrid\");\n\n  var _b = useStore(\"preferences.\".concat(finalPreferenceKey, \".availableColumns\"), []),\n      availableColumns = _b[0],\n      setAvailableColumns = _b[1]; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  var _c = useStore(\"preferences.\".concat(finalPreferenceKey, \".omit\"), omit),\n      _ = _c[0],\n      setOmit = _c[1];\n\n  React.useEffect(function () {\n    // first render, or the preference have been cleared\n    var columns = React.Children.toArray(props.children).filter(function (child) {\n      return React.isValidElement(child);\n    }).map(function (child, index) {\n      return {\n        index: String(index),\n        source: child.props.source,\n        label: child.props.label && typeof child.props.label === 'string' // this list is serializable, so we can't store ReactElement in it\n        ? child.props.label : child.props.source ? //  force the label to be the source\n        undefined : // no source or label, generate a label\n        translate('ra.configurable.Datagrid.unlabeled', {\n          column: index,\n          _: \"Unlabeled column #%{column}\"\n        })\n      };\n    });\n\n    if (columns.length !== availableColumns.length) {\n      setAvailableColumns(columns);\n      setOmit(omit);\n    }\n  }, [availableColumns]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return React.createElement(Configurable, {\n    editor: React.createElement(DatagridEditor, null),\n    preferenceKey: finalPreferenceKey,\n    sx: {\n      display: 'block',\n      minHeight: 2\n    }\n  }, React.createElement(DatagridWithPreferences, __assign({}, props)));\n};\nDatagridConfigurable.propTypes = Datagrid.propTypes;\n/**\n * This Datagrid filters its children depending on preferences\n */\n\nvar DatagridWithPreferences = function DatagridWithPreferences(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  var availableColumns = usePreference('availableColumns', [])[0];\n  var omit = usePreference('omit', [])[0];\n  var columns = usePreference('columns', availableColumns.filter(function (column) {\n    return !(omit === null || omit === void 0 ? void 0 : omit.includes(column.source));\n  }).map(function (column) {\n    return column.index;\n  }))[0];\n  var childrenArray = React.Children.toArray(children);\n  return React.createElement(Datagrid, __assign({}, props), columns === undefined ? children : columns.map(function (index) {\n    return childrenArray[index];\n  }));\n};","map":{"version":3,"mappings":"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","names":["React","useResourceContext","usePreference","useStore","useTranslate","Configurable","Datagrid","DatagridEditor","DatagridConfigurable","_a","omit","props","optimized","Error","translate","resource","finalPreferenceKey","preferenceKey","availableColumns","setAvailableColumns","_","setOmit","useEffect","columns","Children","toArray","children","filter","isValidElement","child","map","index","String","source","label","undefined","column","length","editor","sx","display","minHeight","DatagridWithPreferences","__assign","propTypes","includes","childrenArray"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/datagrid/DatagridConfigurable.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    useResourceContext,\n    usePreference,\n    useStore,\n    useTranslate,\n} from 'ra-core';\n\nimport { Configurable } from '../../preferences';\nimport { Datagrid, DatagridProps } from './Datagrid';\nimport { DatagridEditor } from './DatagridEditor';\n\n/**\n * A Datagrid that users can customize in configuration mode\n *\n * @example\n * import {\n *     List,\n *     DatagridConfigurable,\n *     TextField,\n * } from 'react-admin';\n *\n * export const PostList = () => (\n *     <List>\n *         <DatagridConfigurable>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"author\" />\n *             <TextField source=\"year\" />\n *         </DatagridConfigurable>\n *     </List>\n * );\n */\nexport const DatagridConfigurable = ({\n    preferenceKey,\n    omit,\n    ...props\n}: DatagridConfigurableProps) => {\n    if (props.optimized) {\n        throw new Error(\n            'DatagridConfigurable does not support the optimized prop'\n        );\n    }\n\n    const translate = useTranslate();\n    const resource = useResourceContext(props);\n    const finalPreferenceKey = preferenceKey || `${resource}.datagrid`;\n\n    const [availableColumns, setAvailableColumns] = useStore<\n        ConfigurableDatagridColumn[]\n    >(`preferences.${finalPreferenceKey}.availableColumns`, []);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, setOmit] = useStore<string[]>(\n        `preferences.${finalPreferenceKey}.omit`,\n        omit\n    );\n\n    React.useEffect(() => {\n        // first render, or the preference have been cleared\n        const columns = React.Children.toArray(props.children)\n            .filter(child => React.isValidElement(child))\n            .map((child: React.ReactElement, index) => ({\n                index: String(index),\n                source: child.props.source,\n                label:\n                    child.props.label && typeof child.props.label === 'string' // this list is serializable, so we can't store ReactElement in it\n                        ? child.props.label\n                        : child.props.source\n                        ? //  force the label to be the source\n                          undefined\n                        : // no source or label, generate a label\n                          translate('ra.configurable.Datagrid.unlabeled', {\n                              column: index,\n                              _: `Unlabeled column #%{column}`,\n                          }),\n            }));\n        if (columns.length !== availableColumns.length) {\n            setAvailableColumns(columns);\n            setOmit(omit);\n        }\n    }, [availableColumns]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <Configurable\n            editor={<DatagridEditor />}\n            preferenceKey={finalPreferenceKey}\n            sx={{ display: 'block', minHeight: 2 }}\n        >\n            <DatagridWithPreferences {...props} />\n        </Configurable>\n    );\n};\n\nexport interface DatagridConfigurableProps extends DatagridProps {\n    /**\n     * Key to use to store the user's preferences for this datagrid.\n     *\n     * Set to '[resource].datagrid' by default. Pass a custom key if you need\n     * to display more than one ConfigurableDatagrid per resource.\n     */\n    preferenceKey?: string;\n    /**\n     * columns to hide by default\n     *\n     * @example\n     * // by default, hide the id and author columns\n     * // users can choose to show show them in configuration mode\n     * const PostList = () => (\n     *     <List>\n     *         <DatagridConfigurable omit={['id', 'author']}>\n     *             <TextField source=\"id\" />\n     *             <TextField source=\"title\" />\n     *             <TextField source=\"author\" />\n     *             <TextField source=\"year\" />\n     *         </DatagridConfigurable>\n     *     </List>\n     * );\n     */\n    omit?: string[];\n}\n\nexport interface ConfigurableDatagridColumn {\n    index: string;\n    source?: string;\n    label?: string;\n}\n\nDatagridConfigurable.propTypes = Datagrid.propTypes;\n\n/**\n * This Datagrid filters its children depending on preferences\n */\nconst DatagridWithPreferences = ({ children, ...props }: DatagridProps) => {\n    const [availableColumns] = usePreference('availableColumns', []);\n    const [omit] = usePreference('omit', []);\n    const [columns] = usePreference(\n        'columns',\n        availableColumns\n            .filter(column => !omit?.includes(column.source))\n            .map(column => column.index)\n    );\n    const childrenArray = React.Children.toArray(children);\n    return (\n        <Datagrid {...props}>\n            {columns === undefined\n                ? children\n                : columns.map(index => childrenArray[index])}\n        </Datagrid>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
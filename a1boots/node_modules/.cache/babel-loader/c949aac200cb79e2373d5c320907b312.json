{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n/**\n * Test utility to simulate a device form factor for server-side mediaQueries\n *\n * Do not use inside a browser.\n *\n * @example\n *\n * <DeviceTestWrapper width=\"sm\">\n *     <MyResponsiveComponent />\n * <DeviceTestWrapper>\n */\n\nexport var DeviceTestWrapper = function (_a) {\n  var _b = _a.width,\n      width = _b === void 0 ? 'md' : _b,\n      children = _a.children;\n  var theme = createTheme(); // Use https://github.com/ericf/css-mediaquery as polyfill.\n\n  var ssrMatchMedia = function (query) {\n    return {\n      matches: mediaQuery.match(query, {\n        // The estimated CSS width of the browser.\n        // For the sake of this demo, we are using a fixed value.\n        // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\n        // or user-agent resolution.\n        width: theme.breakpoints.values[width]\n      })\n    };\n  };\n\n  return React.createElement(ThemeProvider, {\n    theme: __assign(__assign({}, theme), {\n      components: {\n        MuiUseMediaQuery: {\n          defaultProps: {\n            ssrMatchMedia: ssrMatchMedia,\n            matchMedia: ssrMatchMedia\n          }\n        }\n      }\n    })\n  }, children);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,sBAA3C;AAEA;;;;;;;;;;;;AAWA,OAAO,IAAMC,iBAAiB,GAAG,UAACC,EAAD,EAGR;MAFrBC;MAAAC,KAAK,mBAAG,IAAH,GAAOD;MACZE,QAAQ;EAER,IAAMC,KAAK,GAAGP,WAAW,EAAzB,CADqB,CAErB;;EACA,IAAMQ,aAAa,GAAG,iBAAK;IAAI,OAAC;MAC5BC,OAAO,EAAEV,UAAU,CAACW,KAAX,CAAiBC,KAAjB,EAAwB;QAC7B;QACA;QACA;QACA;QACAN,KAAK,EAAEE,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAyBR,KAAzB;MALsB,CAAxB;IADmB,CAAD;EAQ7B,CARF;;EAUA,OACIP,oBAACG,aAAD,EAAc;IACVM,KAAK,wBACEA,KADF,GACO;MACRO,UAAU,EAAE;QACRC,gBAAgB,EAAE;UACdC,YAAY,EAAE;YACVR,aAAa,eADH;YAEVS,UAAU,EAAET;UAFF;QADA;MADV;IADJ,CADP;EADK,CAAd,EAaKF,QAbL,CADJ;AAiBH,CAjCM","names":["React","mediaQuery","createTheme","ThemeProvider","DeviceTestWrapper","_a","_b","width","children","theme","ssrMatchMedia","matches","match","query","breakpoints","values","components","MuiUseMediaQuery","defaultProps","matchMedia"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/layout/DeviceTestWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\n/**\n * Test utility to simulate a device form factor for server-side mediaQueries\n *\n * Do not use inside a browser.\n *\n * @example\n *\n * <DeviceTestWrapper width=\"sm\">\n *     <MyResponsiveComponent />\n * <DeviceTestWrapper>\n */\nexport const DeviceTestWrapper = ({\n    width = 'md',\n    children,\n}: DeviceTestWrapperProps): JSX.Element => {\n    const theme = createTheme();\n    // Use https://github.com/ericf/css-mediaquery as polyfill.\n    const ssrMatchMedia = query => ({\n        matches: mediaQuery.match(query, {\n            // The estimated CSS width of the browser.\n            // For the sake of this demo, we are using a fixed value.\n            // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\n            // or user-agent resolution.\n            width: theme.breakpoints.values[width],\n        }),\n    });\n\n    return (\n        <ThemeProvider\n            theme={{\n                ...theme,\n                components: {\n                    MuiUseMediaQuery: {\n                        defaultProps: {\n                            ssrMatchMedia,\n                            matchMedia: ssrMatchMedia,\n                        },\n                    },\n                },\n            }}\n        >\n            {children}\n        </ThemeProvider>\n    );\n};\n\nexport interface DeviceTestWrapperProps {\n    width: 'md' | 'xs' | 'sm' | 'lg' | 'xl';\n    children: JSX.Element;\n}\n"]},"metadata":{},"sourceType":"module"}
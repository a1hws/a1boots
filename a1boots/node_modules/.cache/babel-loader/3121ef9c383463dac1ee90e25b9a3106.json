{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useRef, useEffect } from 'react';\n/**\n * Debug hook showing which props updated between two renders\n * @example\n *\n * const MyComponent = React.memo(props => {\n *   useWhyDidYouUpdate('MyComponent', props);\n *   return <div...;\n * });\n *\n * @link https://usehooks.com/useWhyDidYouUpdate/\n */\n\nexport default function useWhyDidYouUpdate(name, props) {\n  // Get a mutable ref object where we can store props ...\n  // ... for comparison next time this hook runs.\n  var previousProps = useRef();\n  useEffect(function () {\n    if (previousProps.current) {\n      // Get all keys from previous and current props\n      var allKeys = Object.keys(__assign(__assign({}, previousProps.current), props)); // Use this object to keep track of changed props\n\n      var changesObj_1 = {}; // Iterate through keys\n\n      allKeys.forEach(function (key) {\n        // If previous is different from current\n        if (previousProps.current[key] !== props[key]) {\n          // Add to changesObj\n          changesObj_1[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      }); // If changesObj not empty then output to console\n\n      if (Object.keys(changesObj_1).length) {\n        console.log('[why-did-you-update]', name, changesObj_1);\n      }\n    } // Finally update previousProps with current props for next hook call\n\n\n    previousProps.current = props;\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AAEA;;;;;;;;;;;;AAWA,eAAc,SAAUC,kBAAV,CAA6BC,IAA7B,EAAmCC,KAAnC,EAAwC;EAClD;EACA;EACA,IAAMC,aAAa,GAAGL,MAAM,EAA5B;EAEAC,SAAS,CAAC;IACN,IAAII,aAAa,CAACC,OAAlB,EAA2B;MACvB;MACA,IAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAWC,sBAAML,aAAa,CAACC,OAApB,GAAgCF,KAAhC,CAAX,CAAhB,CAFuB,CAGvB;;MACA,IAAMO,YAAU,GAAG,EAAnB,CAJuB,CAKvB;;MACAJ,OAAO,CAACK,OAAR,CAAgB,eAAG;QACf;QACA,IAAIP,aAAa,CAACC,OAAd,CAAsBO,GAAtB,MAA+BT,KAAK,CAACS,GAAD,CAAxC,EAA+C;UAC3C;UACAF,YAAU,CAACE,GAAD,CAAV,GAAkB;YACdC,IAAI,EAAET,aAAa,CAACC,OAAd,CAAsBO,GAAtB,CADQ;YAEdE,EAAE,EAAEX,KAAK,CAACS,GAAD;UAFK,CAAlB;QAIH;MACJ,CATD,EANuB,CAiBvB;;MACA,IAAIL,MAAM,CAACC,IAAP,CAAYE,YAAZ,EAAwBK,MAA5B,EAAoC;QAChCC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCf,IAApC,EAA0CQ,YAA1C;MACH;IACJ,CAtBK,CAwBN;;;IACAN,aAAa,CAACC,OAAd,GAAwBF,KAAxB;EACH,CA1BQ,CAAT;AA2BH","names":["useRef","useEffect","useWhyDidYouUpdate","name","props","previousProps","current","allKeys","Object","keys","__assign","changesObj_1","forEach","key","from","to","length","console","log"],"sources":["/var/www/a1boots/node_modules/ra-core/src/util/useWhyDidYouUpdate.ts"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\n/**\n * Debug hook showing which props updated between two renders\n * @example\n *\n * const MyComponent = React.memo(props => {\n *   useWhyDidYouUpdate('MyComponent', props);\n *   return <div...;\n * });\n *\n * @link https://usehooks.com/useWhyDidYouUpdate/\n */\nexport default function useWhyDidYouUpdate(name, props) {\n    // Get a mutable ref object where we can store props ...\n    // ... for comparison next time this hook runs.\n    const previousProps = useRef() as any;\n\n    useEffect(() => {\n        if (previousProps.current) {\n            // Get all keys from previous and current props\n            const allKeys = Object.keys({ ...previousProps.current, ...props });\n            // Use this object to keep track of changed props\n            const changesObj = {};\n            // Iterate through keys\n            allKeys.forEach(key => {\n                // If previous is different from current\n                if (previousProps.current[key] !== props[key]) {\n                    // Add to changesObj\n                    changesObj[key] = {\n                        from: previousProps.current[key],\n                        to: props[key],\n                    };\n                }\n            });\n\n            // If changesObj not empty then output to console\n            if (Object.keys(changesObj).length) {\n                console.log('[why-did-you-update]', name, changesObj);\n            }\n        }\n\n        // Finally update previousProps with current props for next hook call\n        previousProps.current = props;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}
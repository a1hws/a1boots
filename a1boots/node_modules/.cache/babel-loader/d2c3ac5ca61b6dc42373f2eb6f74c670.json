{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext, useList } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n/**\n * Renders an embedded array of objects.\n *\n * ArrayField creates a ListContext with the field value, and renders its children components -\n * usually iterator components like Datagrid, SingleFieldList, or SimpleList.\n *\n * @example // Display all the tags of the current post as `<Chip>` components\n * // const post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // };\n * const PostShow = () => (\n *    <Show>\n *       <SimpleShowLayout>\n *           <ArrayField source=\"tags\">\n *               <SingleFieldList>\n *                   <ChipField source=\"name\" />\n *               </SingleFieldList>\n *           </ArrayField>\n *      </SimpleShowLayout>\n *   </Show>\n * );\n *\n * @example // Display all the backlinks of the current post as a `<Datagrid>`\n * // const post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // };\n * <ArrayField source=\"backlinks\">\n *     <Datagrid>\n *         <DateField source=\"date\" />\n *         <UrlField source=\"url\" />\n *     </Datagrid>\n * </ArrayField>\n *\n * @example // If you need to render a collection of strings, it's often simpler to write your own component\n * const TagsField = () => {\n *     const record = useRecordContext();\n *     return (\n *         <ul>\n *             {record.tags.map(item => (\n *                 <li key={item.name}>{item.name}</li>\n *             ))}\n *         </ul>\n *     );\n * };\n *\n * @see useListContext\n */\n\nvar ArrayFieldImpl = function (props) {\n  var children = props.children,\n      resource = props.resource,\n      source = props.source,\n      perPage = props.perPage,\n      sort = props.sort,\n      filter = props.filter;\n  var record = useRecordContext(props);\n  var data = get(record, source, emptyArray) || emptyArray;\n  var listContext = useList({\n    data: data,\n    resource: resource,\n    perPage: perPage,\n    sort: sort,\n    filter: filter\n  });\n  return React.createElement(ListContextProvider, {\n    value: listContext\n  }, children);\n};\n\nArrayFieldImpl.propTypes = __assign({}, fieldPropTypes);\nArrayFieldImpl.displayName = 'ArrayFieldImpl';\nexport var ArrayField = genericMemo(ArrayFieldImpl);\nvar emptyArray = [];","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SACIC,mBADJ,EAEIC,gBAFJ,EAGIC,OAHJ,QAMO,SANP;AAQA,SAAqBC,cAArB,QAA2C,SAA3C;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA,IAAMC,cAAc,GAAG,UAGnBC,KAHmB,EAGe;EAE1B,YAAQ,GAA8CA,KAAK,SAA3D;EAAA,IAAUC,QAAQ,GAAoCD,KAAK,SAA3D;EAAA,IAAoBE,MAAM,GAA4BF,KAAK,OAA3D;EAAA,IAA4BG,OAAO,GAAmBH,KAAK,QAA3D;EAAA,IAAqCI,IAAI,GAAaJ,KAAK,KAA3D;EAAA,IAA2CK,MAAM,GAAKL,KAAK,OAA3D;EACR,IAAMM,MAAM,GAAGX,gBAAgB,CAACK,KAAD,CAA/B;EACA,IAAMO,IAAI,GACLd,GAAG,CAACa,MAAD,EAASJ,MAAT,EAAiBM,UAAjB,CAAH,IACDA,UAFJ;EAGA,IAAMC,WAAW,GAAGb,OAAO,CAAC;IAAEW,IAAI,MAAN;IAAQN,QAAQ,UAAhB;IAAkBE,OAAO,SAAzB;IAA2BC,IAAI,MAA/B;IAAiCC,MAAM;EAAvC,CAAD,CAA3B;EACA,OACIb,oBAACE,mBAAD,EAAoB;IAACgB,KAAK,EAAED;EAAR,CAApB,EACKE,QADL,CADJ;AAKH,CAhBD;;AAiBAZ,cAAc,CAACa,SAAf,GAAwBC,aAAQhB,cAAR,CAAxB;AACAE,cAAc,CAACe,WAAf,GAA6B,gBAA7B;AAEA,OAAO,IAAMC,UAAU,GAAGjB,WAAW,CAACC,cAAD,CAA9B;AAWP,IAAMS,UAAU,GAAG,EAAnB","names":["React","get","ListContextProvider","useRecordContext","useList","fieldPropTypes","genericMemo","ArrayFieldImpl","props","resource","source","perPage","sort","filter","record","data","emptyArray","listContext","value","children","propTypes","__assign","displayName","ArrayField"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/ArrayField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport get from 'lodash/get';\nimport {\n    ListContextProvider,\n    useRecordContext,\n    useList,\n    SortPayload,\n    FilterPayload,\n} from 'ra-core';\n\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Renders an embedded array of objects.\n *\n * ArrayField creates a ListContext with the field value, and renders its children components -\n * usually iterator components like Datagrid, SingleFieldList, or SimpleList.\n *\n * @example // Display all the tags of the current post as `<Chip>` components\n * // const post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // };\n * const PostShow = () => (\n *    <Show>\n *       <SimpleShowLayout>\n *           <ArrayField source=\"tags\">\n *               <SingleFieldList>\n *                   <ChipField source=\"name\" />\n *               </SingleFieldList>\n *           </ArrayField>\n *      </SimpleShowLayout>\n *   </Show>\n * );\n *\n * @example // Display all the backlinks of the current post as a `<Datagrid>`\n * // const post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // };\n * <ArrayField source=\"backlinks\">\n *     <Datagrid>\n *         <DateField source=\"date\" />\n *         <UrlField source=\"url\" />\n *     </Datagrid>\n * </ArrayField>\n *\n * @example // If you need to render a collection of strings, it's often simpler to write your own component\n * const TagsField = () => {\n *     const record = useRecordContext();\n *     return (\n *         <ul>\n *             {record.tags.map(item => (\n *                 <li key={item.name}>{item.name}</li>\n *             ))}\n *         </ul>\n *     );\n * };\n *\n * @see useListContext\n */\nconst ArrayFieldImpl = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: ArrayFieldProps<RecordType>\n) => {\n    const { children, resource, source, perPage, sort, filter } = props;\n    const record = useRecordContext(props);\n    const data =\n        (get(record, source, emptyArray) as Record<string, any>[]) ||\n        emptyArray;\n    const listContext = useList({ data, resource, perPage, sort, filter });\n    return (\n        <ListContextProvider value={listContext}>\n            {children}\n        </ListContextProvider>\n    );\n};\nArrayFieldImpl.propTypes = { ...fieldPropTypes };\nArrayFieldImpl.displayName = 'ArrayFieldImpl';\n\nexport const ArrayField = genericMemo(ArrayFieldImpl);\n\nexport interface ArrayFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType> {\n    children: ReactNode;\n    perPage?: number;\n    sort?: SortPayload;\n    filter?: FilterPayload;\n}\n\nconst emptyArray = [];\n"]},"metadata":{},"sourceType":"module"}
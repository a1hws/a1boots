{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { Button, CardContent, CircularProgress } from '@mui/material';\nimport { Form, required, useTranslate, useLogin, useNotify, useSafeSetState } from 'ra-core';\nimport { TextInput } from '../input';\nexport var LoginForm = function (props) {\n  var redirectTo = props.redirectTo,\n      className = props.className;\n\n  var _a = useSafeSetState(false),\n      loading = _a[0],\n      setLoading = _a[1];\n\n  var login = useLogin();\n  var translate = useTranslate();\n  var notify = useNotify();\n\n  var submit = function (values) {\n    setLoading(true);\n    login(values, redirectTo).then(function () {\n      setLoading(false);\n    }).catch(function (error) {\n      setLoading(false);\n      notify(typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? 'ra.auth.sign_in_error' : error.message, {\n        type: 'error',\n        messageArgs: {\n          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n        }\n      });\n    });\n  };\n\n  return React.createElement(StyledForm, {\n    onSubmit: submit,\n    mode: \"onChange\",\n    noValidate: true,\n    className: className\n  }, React.createElement(CardContent, {\n    className: LoginFormClasses.content\n  }, React.createElement(TextInput, {\n    autoFocus: true,\n    source: \"username\",\n    label: translate('ra.auth.username'),\n    autoComplete: \"username\",\n    validate: required(),\n    fullWidth: true\n  }), React.createElement(TextInput, {\n    source: \"password\",\n    label: translate('ra.auth.password'),\n    type: \"password\",\n    autoComplete: \"current-password\",\n    validate: required(),\n    fullWidth: true\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    disabled: loading,\n    fullWidth: true,\n    className: LoginFormClasses.button\n  }, loading ? React.createElement(CircularProgress, {\n    className: LoginFormClasses.icon,\n    size: 19,\n    thickness: 3\n  }) : translate('ra.auth.sign_in'))));\n};\nvar PREFIX = 'RaLoginForm';\nexport var LoginFormClasses = {\n  content: \"\".concat(PREFIX, \"-content\"),\n  button: \"\".concat(PREFIX, \"-button\"),\n  icon: \"\".concat(PREFIX, \"-icon\")\n};\nvar StyledForm = styled(Form, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(LoginFormClasses.content)] = {\n    width: 300\n  }, _b[\"& .\".concat(LoginFormClasses.button)] = {\n    marginTop: theme.spacing(2)\n  }, _b[\"& .\".concat(LoginFormClasses.icon)] = {\n    margin: theme.spacing(0.3)\n  }, _b;\n});\nLoginForm.propTypes = {\n  redirectTo: PropTypes.string\n};","map":{"version":3,"mappings":"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","names":["React","styled","PropTypes","Button","CardContent","CircularProgress","Form","required","useTranslate","useLogin","useNotify","useSafeSetState","TextInput","LoginForm","props","className","loading","setLoading","login","translate","notify","submit","values","redirectTo","then","catch","error","message","type","messageArgs","_","undefined","StyledForm","onSubmit","mode","noValidate","LoginFormClasses","content","autoFocus","source","label","autoComplete","validate","fullWidth","variant","color","disabled","button","icon","size","thickness","PREFIX","name","overridesResolver","styles","root","_a","theme","_b","width","marginTop","spacing","margin","propTypes","string"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/auth/LoginForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { Button, CardContent, CircularProgress } from '@mui/material';\nimport {\n    Form,\n    required,\n    useTranslate,\n    useLogin,\n    useNotify,\n    useSafeSetState,\n} from 'ra-core';\nimport { TextInput } from '../input';\n\nexport const LoginForm = (props: LoginFormProps) => {\n    const { redirectTo, className } = props;\n    const [loading, setLoading] = useSafeSetState(false);\n    const login = useLogin();\n    const translate = useTranslate();\n    const notify = useNotify();\n\n    const submit = (values: FormData) => {\n        setLoading(true);\n        login(values, redirectTo)\n            .then(() => {\n                setLoading(false);\n            })\n            .catch(error => {\n                setLoading(false);\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : typeof error === 'undefined' || !error.message\n                        ? 'ra.auth.sign_in_error'\n                        : error.message,\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                );\n            });\n    };\n\n    return (\n        <StyledForm\n            onSubmit={submit}\n            mode=\"onChange\"\n            noValidate\n            className={className}\n        >\n            <CardContent className={LoginFormClasses.content}>\n                <TextInput\n                    autoFocus\n                    source=\"username\"\n                    label={translate('ra.auth.username')}\n                    autoComplete=\"username\"\n                    validate={required()}\n                    fullWidth\n                />\n                <TextInput\n                    source=\"password\"\n                    label={translate('ra.auth.password')}\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    validate={required()}\n                    fullWidth\n                />\n\n                <Button\n                    variant=\"contained\"\n                    type=\"submit\"\n                    color=\"primary\"\n                    disabled={loading}\n                    fullWidth\n                    className={LoginFormClasses.button}\n                >\n                    {loading ? (\n                        <CircularProgress\n                            className={LoginFormClasses.icon}\n                            size={19}\n                            thickness={3}\n                        />\n                    ) : (\n                        translate('ra.auth.sign_in')\n                    )}\n                </Button>\n            </CardContent>\n        </StyledForm>\n    );\n};\n\nconst PREFIX = 'RaLoginForm';\n\nexport const LoginFormClasses = {\n    content: `${PREFIX}-content`,\n    button: `${PREFIX}-button`,\n    icon: `${PREFIX}-icon`,\n};\n\nconst StyledForm = styled(Form, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${LoginFormClasses.content}`]: {\n        width: 300,\n    },\n    [`& .${LoginFormClasses.button}`]: {\n        marginTop: theme.spacing(2),\n    },\n    [`& .${LoginFormClasses.icon}`]: {\n        margin: theme.spacing(0.3),\n    },\n}));\n\nexport interface LoginFormProps {\n    redirectTo?: string;\n    className?: string;\n}\n\ninterface FormData {\n    username: string;\n    password: string;\n}\nLoginForm.propTypes = {\n    redirectTo: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}
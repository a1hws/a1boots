{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { FormProvider } from 'react-hook-form';\nimport { FormGroupsProvider } from './FormGroupsProvider';\nimport { useRecordContext, OptionalRecordContextProvider } from '../controller';\nimport { useResourceContext } from '../core';\nimport { LabelPrefixContextProvider } from '../util';\nimport { useAugmentedForm } from './useAugmentedForm';\n/**\n * Creates a form element, initialized with the current record, calling the saveContext on submit\n *\n * Wrapper around react-hook-form's useForm, FormContextProvider, and <form>.\n * Also sets up a FormGroupContext, and handles submission validation.\n *\n * @example\n *\n * const MyForm = ({ record, defaultValues, validate }) => (\n *    <Form record={record} defaultValues={defaultValues} validate={validate}>\n *        <Stack>\n *            <TextInput source=\"title\" />\n *            <SaveButton />\n *        </Stack>\n *    </Form>\n * );\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} defaultValues\n * @prop {Function} validate\n * @prop {Function} save\n *\n * @see useForm\n * @see FormGroupContext\n *\n * @link https://react-hook-form.com/api/useformcontext\n */\n\nexport var Form = function Form(props) {\n  var children = props.children,\n      id = props.id,\n      className = props.className,\n      _a = props.noValidate,\n      noValidate = _a === void 0 ? false : _a;\n  var record = useRecordContext(props);\n  var resource = useResourceContext(props);\n\n  var _b = useAugmentedForm(props),\n      form = _b.form,\n      formHandleSubmit = _b.formHandleSubmit;\n\n  return React.createElement(OptionalRecordContextProvider, {\n    value: record\n  }, React.createElement(LabelPrefixContextProvider, {\n    prefix: \"resources.\".concat(resource, \".fields\")\n  }, React.createElement(FormProvider, __assign({}, form), React.createElement(FormGroupsProvider, null, React.createElement(\"form\", {\n    onSubmit: formHandleSubmit,\n    noValidate: noValidate,\n    id: id,\n    className: className\n  }, children)))));\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SACIC,YADJ,QAKO,iBALP;AAOA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,SAASC,gBAAT,EAA2BC,6BAA3B,QAAgE,eAAhE;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,0BAAT,QAA2C,SAA3C;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAiB;EACzB,YAAQ,GAAwCA,KAAK,SAArD;EAAA,IAAUC,EAAE,GAAoCD,KAAK,GAArD;EAAA,IAAcE,SAAS,GAAyBF,KAAK,UAArD;EAAA,IAAyBG,KAAuBH,KAAK,WAArD;EAAA,IAAyBI,UAAU,mBAAG,KAAH,GAAQD,EAA3C;EACR,IAAME,MAAM,GAAGX,gBAAgB,CAACM,KAAD,CAA/B;EACA,IAAMM,QAAQ,GAAGV,kBAAkB,CAACI,KAAD,CAAnC;;EACM,SAA6BF,gBAAgB,CAACE,KAAD,CAA7C;EAAA,IAAEO,IAAI,UAAN;EAAA,IAAQC,gBAAgB,sBAAxB;;EAEN,OACIjB,oBAACI,6BAAD,EAA8B;IAACc,KAAK,EAAEJ;EAAR,CAA9B,EACId,oBAACM,0BAAD,EAA2B;IAACa,MAAM,EAAE,oBAAaJ,QAAb,EAAqB,SAArB;EAAT,CAA3B,EACIf,oBAACC,YAAD,EAAamB,aAAKJ,IAAL,CAAb,EACIhB,oBAACE,kBAAD,EAAmB,IAAnB,EACIF;IACIqB,QAAQ,EAAEJ,gBADd;IAEIJ,UAAU,EAAEA,UAFhB;IAGIH,EAAE,EAAEA,EAHR;IAIIC,SAAS,EAAEA;EAJf,GAMKW,QANL,CADJ,CADJ,CADJ,CADJ,CADJ;AAkBH,CAxBM","names":["React","FormProvider","FormGroupsProvider","useRecordContext","OptionalRecordContextProvider","useResourceContext","LabelPrefixContextProvider","useAugmentedForm","Form","props","id","className","_a","noValidate","record","resource","form","formHandleSubmit","value","prefix","__assign","onSubmit","children"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/Form.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport {\n    FormProvider,\n    FieldValues,\n    UseFormProps,\n    SubmitHandler,\n} from 'react-hook-form';\n\nimport { FormGroupsProvider } from './FormGroupsProvider';\nimport { RaRecord } from '../types';\nimport { useRecordContext, OptionalRecordContextProvider } from '../controller';\nimport { useResourceContext } from '../core';\nimport { LabelPrefixContextProvider } from '../util';\nimport { ValidateForm } from './getSimpleValidationResolver';\nimport { useAugmentedForm } from './useAugmentedForm';\n\n/**\n * Creates a form element, initialized with the current record, calling the saveContext on submit\n *\n * Wrapper around react-hook-form's useForm, FormContextProvider, and <form>.\n * Also sets up a FormGroupContext, and handles submission validation.\n *\n * @example\n *\n * const MyForm = ({ record, defaultValues, validate }) => (\n *    <Form record={record} defaultValues={defaultValues} validate={validate}>\n *        <Stack>\n *            <TextInput source=\"title\" />\n *            <SaveButton />\n *        </Stack>\n *    </Form>\n * );\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} defaultValues\n * @prop {Function} validate\n * @prop {Function} save\n *\n * @see useForm\n * @see FormGroupContext\n *\n * @link https://react-hook-form.com/api/useformcontext\n */\nexport const Form = (props: FormProps) => {\n    const { children, id, className, noValidate = false } = props;\n    const record = useRecordContext(props);\n    const resource = useResourceContext(props);\n    const { form, formHandleSubmit } = useAugmentedForm(props);\n\n    return (\n        <OptionalRecordContextProvider value={record}>\n            <LabelPrefixContextProvider prefix={`resources.${resource}.fields`}>\n                <FormProvider {...form}>\n                    <FormGroupsProvider>\n                        <form\n                            onSubmit={formHandleSubmit}\n                            noValidate={noValidate}\n                            id={id}\n                            className={className}\n                        >\n                            {children}\n                        </form>\n                    </FormGroupsProvider>\n                </FormProvider>\n            </LabelPrefixContextProvider>\n        </OptionalRecordContextProvider>\n    );\n};\n\nexport type FormProps = FormOwnProps &\n    Omit<UseFormProps, 'onSubmit'> & {\n        validate?: ValidateForm;\n        noValidate?: boolean;\n    };\n\nexport interface FormOwnProps {\n    children: ReactNode;\n    className?: string;\n    defaultValues?: any;\n    formRootPathname?: string;\n    id?: string;\n    record?: Partial<RaRecord>;\n    resource?: string;\n    onSubmit?: SubmitHandler<FieldValues>;\n    warnWhenUnsavedChanges?: boolean;\n    sanitizeEmptyValues?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}
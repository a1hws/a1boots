{"ast":null,"code":"import * as React from 'react';\nimport lodashGet from 'lodash/get';\nimport { I18nContextProvider } from './I18nContextProvider';\nexport var TestTranslationProvider = function (_a) {\n  var translate = _a.translate,\n      messages = _a.messages,\n      children = _a.children;\n  return React.createElement(I18nContextProvider, {\n    value: {\n      translate: messages ? function (key, options) {\n        var message = lodashGet(messages, key);\n        return message ? typeof message === 'function' ? message(options) : message : options._;\n      } : translate,\n      changeLocale: function () {\n        return Promise.resolve();\n      },\n      getLocale: function () {\n        return 'en';\n      }\n    }\n  }, children);\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,OAAO,IAAMC,uBAAuB,GAAG,UAACC,EAAD,EAIjC;MAHFC,SAAS;MACTC,QAAQ;MACRC,QAAQ;EACD,OACPP,oBAACE,mBAAD,EAAoB;IAChBM,KAAK,EAAE;MACHH,SAAS,EAAEC,QAAQ,GACb,UAACG,GAAD,EAAcC,OAAd,EAA2B;QACvB,IAAMC,OAAO,GAAGV,SAAS,CAACK,QAAD,EAAWG,GAAX,CAAzB;QACA,OAAOE,OAAO,GACR,OAAOA,OAAP,KAAmB,UAAnB,GACIA,OAAO,CAACD,OAAD,CADX,GAEIC,OAHI,GAIRD,OAAO,CAACE,CAJd;MAKH,CARY,GASbP,SAVH;MAWHQ,YAAY,EAAE;QAAM,cAAO,CAACC,OAAR;MAAiB,CAXlC;MAYHC,SAAS,EAAE;QAAM;MAAI;IAZlB;EADS,CAApB,EAgBKR,QAhBL,CADO;AAmBV,CAvBM","names":["React","lodashGet","I18nContextProvider","TestTranslationProvider","_a","translate","messages","children","value","key","options","message","_","changeLocale","resolve","getLocale"],"sources":["/var/www/a1boots/node_modules/ra-core/src/i18n/TestTranslationProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport lodashGet from 'lodash/get';\n\nimport { I18nContextProvider } from './I18nContextProvider';\n\nexport const TestTranslationProvider = ({\n    translate,\n    messages,\n    children,\n}: any) => (\n    <I18nContextProvider\n        value={{\n            translate: messages\n                ? (key: string, options?: any) => {\n                      const message = lodashGet(messages, key);\n                      return message\n                          ? typeof message === 'function'\n                              ? message(options)\n                              : message\n                          : options._;\n                  }\n                : translate,\n            changeLocale: () => Promise.resolve(),\n            getLocale: () => 'en',\n        }}\n    >\n        {children}\n    </I18nContextProvider>\n);\n"]},"metadata":{},"sourceType":"module"}
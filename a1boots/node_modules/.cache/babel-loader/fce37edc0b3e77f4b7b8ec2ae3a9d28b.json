{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Select, MenuItem, InputLabel, FormHelperText, FormControl, Chip, OutlinedInput } from '@mui/material';\nimport { FieldTitle, useInput, useChoicesContext, useChoices } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { LinearProgress } from '../layout';\nimport { Labeled } from '../Labeled';\nimport { useSupportCreateSuggestion } from './useSupportCreateSuggestion';\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<span>{record.first_name} {record.last_name}</span>)\n * };\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\n\nexport var SelectArrayInput = function SelectArrayInput(props) {\n  var _a;\n\n  var choicesProp = props.choices,\n      className = props.className,\n      create = props.create,\n      createLabel = props.createLabel,\n      createValue = props.createValue,\n      disableValue = props.disableValue,\n      format = props.format,\n      helperText = props.helperText,\n      label = props.label,\n      isFetchingProp = props.isFetching,\n      isLoadingProp = props.isLoading,\n      margin = props.margin,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onCreate = props.onCreate,\n      options = props.options,\n      optionText = props.optionText,\n      optionValue = props.optionValue,\n      parse = props.parse,\n      resourceProp = props.resource,\n      _b = props.size,\n      size = _b === void 0 ? 'small' : _b,\n      sourceProp = props.source,\n      translateChoice = props.translateChoice,\n      validate = props.validate,\n      variant = props.variant,\n      rest = __rest(props, [\"choices\", \"className\", \"create\", \"createLabel\", \"createValue\", \"disableValue\", \"format\", \"helperText\", \"label\", \"isFetching\", \"isLoading\", \"margin\", \"onBlur\", \"onChange\", \"onCreate\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"size\", \"source\", \"translateChoice\", \"validate\", \"variant\"]);\n\n  var inputLabel = useRef(null);\n\n  var _c = useChoicesContext({\n    choices: choicesProp,\n    isLoading: isLoadingProp,\n    isFetching: isFetchingProp,\n    resource: resourceProp,\n    source: sourceProp\n  }),\n      allChoices = _c.allChoices,\n      isLoading = _c.isLoading,\n      fetchError = _c.error,\n      source = _c.source,\n      resource = _c.resource;\n\n  var _d = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    disableValue: disableValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _d.getChoiceText,\n      getChoiceValue = _d.getChoiceValue,\n      getDisableValue = _d.getDisableValue;\n\n  var _e = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      field = _e.field,\n      isRequired = _e.isRequired,\n      _f = _e.fieldState,\n      error = _f.error,\n      invalid = _f.invalid,\n      isTouched = _f.isTouched,\n      isSubmitted = _e.formState.isSubmitted;\n\n  var handleChange = useCallback(function (eventOrChoice) {\n    // We might receive an event from the mui component\n    // In this case, it will be the choice id\n    if (eventOrChoice === null || eventOrChoice === void 0 ? void 0 : eventOrChoice.target) {\n      // when used with different IDs types, unselection leads to double selection with both types\n      // instead of the value being removed from the array\n      // e.g. we receive eventOrChoice.target.value = [1, '2', 2] instead of [1] after removing 2\n      // this snippet removes a value if it is present twice\n      eventOrChoice.target.value = eventOrChoice.target.value.reduce(function (acc, value) {\n        // eslint-disable-next-line eqeqeq\n        var index = acc.findIndex(function (v) {\n          return v == value;\n        });\n        return index < 0 ? __spreadArray(__spreadArray([], acc, true), [value], false) : __spreadArray(__spreadArray([], acc.slice(0, index), true), acc.slice(index + 1), true);\n      }, []);\n      field.onChange(eventOrChoice);\n    } else {\n      // Or we might receive a choice directly, for instance a newly created one\n      field.onChange(__spreadArray(__spreadArray([], field.value || [], true), [getChoiceValue(eventOrChoice)], false));\n    }\n  }, [field, getChoiceValue]);\n\n  var _g = useSupportCreateSuggestion({\n    create: create,\n    createLabel: createLabel,\n    createValue: createValue,\n    handleChange: handleChange,\n    onCreate: onCreate,\n    optionText: optionText\n  }),\n      getCreateItem = _g.getCreateItem,\n      handleChangeWithCreateSupport = _g.handleChange,\n      createElement = _g.createElement;\n\n  var createItem = create || onCreate ? getCreateItem() : null;\n  var finalChoices = create || onCreate ? __spreadArray(__spreadArray([], allChoices || [], true), [createItem], false) : allChoices || [];\n  var renderMenuItemOption = useCallback(function (choice) {\n    return !!createItem && (choice === null || choice === void 0 ? void 0 : choice.id) === createItem.id && typeof optionText === 'function' ? createItem.name : getChoiceText(choice);\n  }, [createItem, getChoiceText, optionText]);\n  var renderMenuItem = useCallback(function (choice) {\n    return choice ? React.createElement(MenuItem, {\n      key: getChoiceValue(choice),\n      value: getChoiceValue(choice),\n      disabled: getDisableValue(choice)\n    }, renderMenuItemOption(!!createItem && (choice === null || choice === void 0 ? void 0 : choice.id) === createItem.id ? createItem : choice)) : null;\n  }, [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]);\n\n  if (isLoading) {\n    return React.createElement(Labeled, {\n      label: label,\n      source: source,\n      resource: resource,\n      className: clsx('ra-input', \"ra-input-\".concat(source), className),\n      isRequired: isRequired\n    }, React.createElement(LinearProgress, null));\n  } // Here wen ensure we always have an array and this array does not contain the default value (empty string)\n\n\n  var finalValue = Array.isArray((_a = field.value) !== null && _a !== void 0 ? _a : []) ? field.value : field.value ? [field.value] : [];\n  var outlinedInputProps = variant === 'outlined' ? {\n    input: React.createElement(OutlinedInput, {\n      id: \"select-multiple-chip\",\n      label: React.createElement(FieldTitle, {\n        label: label,\n        source: source,\n        resource: resource,\n        isRequired: isRequired\n      })\n    })\n  } : {};\n  return React.createElement(React.Fragment, null, React.createElement(StyledFormControl, __assign({\n    margin: margin,\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    error: fetchError || (isTouched || isSubmitted) && invalid,\n    variant: variant\n  }, sanitizeRestProps(rest)), React.createElement(InputLabel, {\n    ref: inputLabel,\n    id: \"\".concat(label, \"-outlined-label\")\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(Select, __assign({\n    autoWidth: true,\n    labelId: \"\".concat(label, \"-outlined-label\"),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    multiple: true,\n    error: !!fetchError || (isTouched || isSubmitted) && invalid,\n    renderValue: function renderValue(selected) {\n      return React.createElement(\"div\", {\n        className: SelectArrayInputClasses.chips\n      }, (Array.isArray(selected) ? selected : []).map(function (item) {\n        return (allChoices || []).find( // eslint-disable-next-line eqeqeq\n        function (choice) {\n          return getChoiceValue(choice) == item;\n        });\n      }).filter(function (item) {\n        return !!item;\n      }).map(function (item) {\n        return React.createElement(Chip, {\n          key: getChoiceValue(item),\n          label: renderMenuItemOption(item),\n          className: SelectArrayInputClasses.chip,\n          size: \"small\"\n        });\n      }));\n    },\n    \"data-testid\": \"selectArray\",\n    size: size\n  }, field, options, {\n    onChange: handleChangeWithCreateSupport,\n    value: finalValue\n  }, outlinedInputProps), finalChoices.map(renderMenuItem)), React.createElement(FormHelperText, {\n    error: fetchError || isTouched && !!error\n  }, React.createElement(InputHelperText, {\n    touched: isTouched || isSubmitted || fetchError,\n    error: (error === null || error === void 0 ? void 0 : error.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n    helperText: helperText\n  }))), createElement);\n};\nSelectArrayInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).isRequired,\n  optionValue: PropTypes.string.isRequired,\n  disableValue: PropTypes.string,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nSelectArrayInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  disableValue: 'disabled',\n  translateChoice: true\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var alwaysOn = _a.alwaysOn,\n      choices = _a.choices,\n      classNamInputWithOptionsPropse = _a.classNamInputWithOptionsPropse,\n      componenInputWithOptionsPropst = _a.componenInputWithOptionsPropst,\n      crudGetMInputWithOptionsPropsatching = _a.crudGetMInputWithOptionsPropsatching,\n      crudGetOInputWithOptionsPropsne = _a.crudGetOInputWithOptionsPropsne,\n      defaultValue = _a.defaultValue,\n      disableValue = _a.disableValue,\n      emptyText = _a.emptyText,\n      enableGetChoices = _a.enableGetChoices,\n      filter = _a.filter,\n      filterToQuery = _a.filterToQuery,\n      formClassName = _a.formClassName,\n      initializeForm = _a.initializeForm,\n      initialValue = _a.initialValue,\n      input = _a.input,\n      isRequired = _a.isRequired,\n      label = _a.label,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      loaded = _a.loaded,\n      locale = _a.locale,\n      meta = _a.meta,\n      onChange = _a.onChange,\n      options = _a.options,\n      optionValue = _a.optionValue,\n      optionText = _a.optionText,\n      perPage = _a.perPage,\n      record = _a.record,\n      reference = _a.reference,\n      resource = _a.resource,\n      setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      sort = _a.sort,\n      source = _a.source,\n      textAlign = _a.textAlign,\n      translate = _a.translate,\n      translateChoice = _a.translateChoice,\n      validation = _a.validation,\n      rest = __rest(_a, [\"alwaysOn\", \"choices\", \"classNamInputWithOptionsPropse\", \"componenInputWithOptionsPropst\", \"crudGetMInputWithOptionsPropsatching\", \"crudGetOInputWithOptionsPropsne\", \"defaultValue\", \"disableValue\", \"emptyText\", \"enableGetChoices\", \"filter\", \"filterToQuery\", \"formClassName\", \"initializeForm\", \"initialValue\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"loaded\", \"locale\", \"meta\", \"onChange\", \"options\", \"optionValue\", \"optionText\", \"perPage\", \"record\", \"reference\", \"resource\", \"setFilter\", \"setPagination\", \"setSort\", \"sort\", \"source\", \"textAlign\", \"translate\", \"translateChoice\", \"validation\"]);\n\n  return rest;\n};\n\nvar PREFIX = 'RaSelectArrayInput';\nexport var SelectArrayInputClasses = {\n  chips: \"\".concat(PREFIX, \"-chips\"),\n  chip: \"\".concat(PREFIX, \"-chip\")\n};\nvar StyledFormControl = styled(FormControl, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {\n    minWidth: theme.spacing(20)\n  }, _b[\"& .\".concat(SelectArrayInputClasses.chips)] = {\n    display: 'flex',\n    flexWrap: 'wrap'\n  }, _b[\"& .\".concat(SelectArrayInputClasses.chip)] = {\n    marginTop: theme.spacing(0.5),\n    marginRight: theme.spacing(0.5)\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","styled","useCallback","useRef","PropTypes","clsx","Select","MenuItem","InputLabel","FormHelperText","FormControl","Chip","OutlinedInput","FieldTitle","useInput","useChoicesContext","useChoices","InputHelperText","LinearProgress","Labeled","useSupportCreateSuggestion","SelectArrayInput","props","choicesProp","className","create","createLabel","createValue","disableValue","format","helperText","label","isFetchingProp","isLoadingProp","margin","onBlur","onChange","onCreate","options","optionText","optionValue","parse","resourceProp","_b","size","sourceProp","translateChoice","validate","variant","rest","inputLabel","choices","isLoading","isFetching","resource","source","allChoices","fetchError","getChoiceText","getChoiceValue","getDisableValue","field","isRequired","_f","error","invalid","isTouched","isSubmitted","handleChange","eventOrChoice","target","value","reduce","acc","index","findIndex","__spreadArray","slice","getCreateItem","handleChangeWithCreateSupport","createElement","createItem","finalChoices","renderMenuItemOption","id","name","choice","renderMenuItem","key","disabled","finalValue","Array","isArray","_a","outlinedInputProps","input","StyledFormControl","__assign","sanitizeRestProps","ref","autoWidth","labelId","multiple","renderValue","selected","SelectArrayInputClasses","chips","map","find","item","filter","chip","touched","message","propTypes","arrayOf","object","string","children","node","oneOfType","bool","element","func","defaultProps","classNamInputWithOptionsPropse","componenInputWithOptionsPropst","crudGetMInputWithOptionsPropsatching","crudGetOInputWithOptionsPropsne","defaultValue","emptyText","enableGetChoices","filterToQuery","formClassName","initializeForm","initialValue","limitChoicesToValue","loaded","locale","meta","perPage","record","reference","setFilter","setPagination","setSort","sort","textAlign","translate","validation","PREFIX","overridesResolver","styles","root","theme","minWidth","spacing","display","flexWrap","marginTop","marginRight"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/SelectArrayInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, useRef, ChangeEvent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    Select,\n    SelectProps,\n    MenuItem,\n    InputLabel,\n    FormHelperText,\n    FormControl,\n    Chip,\n    OutlinedInput,\n} from '@mui/material';\nimport {\n    ChoicesProps,\n    FieldTitle,\n    useInput,\n    useChoicesContext,\n    useChoices,\n    RaRecord,\n} from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { FormControlProps } from '@mui/material/FormControl';\n\nimport { LinearProgress } from '../layout';\nimport { CommonInputProps } from './CommonInputProps';\nimport { Labeled } from '../Labeled';\nimport {\n    SupportCreateSuggestionOptions,\n    useSupportCreateSuggestion,\n} from './useSupportCreateSuggestion';\n\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<span>{record.first_name} {record.last_name}</span>)\n * };\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\nexport const SelectArrayInput = (props: SelectArrayInputProps) => {\n    const {\n        choices: choicesProp,\n        className,\n        create,\n        createLabel,\n        createValue,\n        disableValue,\n        format,\n        helperText,\n        label,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        margin,\n        onBlur,\n        onChange,\n        onCreate,\n        options,\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        size = 'small',\n        source: sourceProp,\n        translateChoice,\n        validate,\n        variant,\n        ...rest\n    } = props;\n\n    const inputLabel = useRef(null);\n\n    const {\n        allChoices,\n        isLoading,\n        error: fetchError,\n        source,\n        resource,\n    } = useChoicesContext({\n        choices: choicesProp,\n        isLoading: isLoadingProp,\n        isFetching: isFetchingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    const { getChoiceText, getChoiceValue, getDisableValue } = useChoices({\n        optionText,\n        optionValue,\n        disableValue,\n        translateChoice,\n    });\n\n    const {\n        field,\n        isRequired,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n    } = useInput({\n        format,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const handleChange = useCallback(\n        (eventOrChoice: ChangeEvent<HTMLInputElement> | RaRecord) => {\n            // We might receive an event from the mui component\n            // In this case, it will be the choice id\n            if (eventOrChoice?.target) {\n                // when used with different IDs types, unselection leads to double selection with both types\n                // instead of the value being removed from the array\n                // e.g. we receive eventOrChoice.target.value = [1, '2', 2] instead of [1] after removing 2\n                // this snippet removes a value if it is present twice\n                eventOrChoice.target.value = eventOrChoice.target.value.reduce(\n                    (acc, value) => {\n                        // eslint-disable-next-line eqeqeq\n                        const index = acc.findIndex(v => v == value);\n                        return index < 0\n                            ? [...acc, value]\n                            : [...acc.slice(0, index), ...acc.slice(index + 1)];\n                    },\n                    []\n                );\n                field.onChange(eventOrChoice);\n            } else {\n                // Or we might receive a choice directly, for instance a newly created one\n                field.onChange([\n                    ...(field.value || []),\n                    getChoiceValue(eventOrChoice),\n                ]);\n            }\n        },\n        [field, getChoiceValue]\n    );\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createValue,\n        handleChange,\n        onCreate,\n        optionText,\n    });\n\n    const createItem = create || onCreate ? getCreateItem() : null;\n    const finalChoices =\n        create || onCreate\n            ? [...(allChoices || []), createItem]\n            : allChoices || [];\n\n    const renderMenuItemOption = useCallback(\n        choice =>\n            !!createItem &&\n            choice?.id === createItem.id &&\n            typeof optionText === 'function'\n                ? createItem.name\n                : getChoiceText(choice),\n        [createItem, getChoiceText, optionText]\n    );\n\n    const renderMenuItem = useCallback(\n        choice => {\n            return choice ? (\n                <MenuItem\n                    key={getChoiceValue(choice)}\n                    value={getChoiceValue(choice)}\n                    disabled={getDisableValue(choice)}\n                >\n                    {renderMenuItemOption(\n                        !!createItem && choice?.id === createItem.id\n                            ? createItem\n                            : choice\n                    )}\n                </MenuItem>\n            ) : null;\n        },\n        [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]\n    );\n\n    if (isLoading) {\n        return (\n            <Labeled\n                label={label}\n                source={source}\n                resource={resource}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                isRequired={isRequired}\n            >\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n\n    // Here wen ensure we always have an array and this array does not contain the default value (empty string)\n    const finalValue = Array.isArray(field.value ?? [])\n        ? field.value\n        : field.value\n        ? [field.value]\n        : [];\n\n    const outlinedInputProps =\n        variant === 'outlined'\n            ? {\n                  input: (\n                      <OutlinedInput\n                          id=\"select-multiple-chip\"\n                          label={\n                              <FieldTitle\n                                  label={label}\n                                  source={source}\n                                  resource={resource}\n                                  isRequired={isRequired}\n                              />\n                          }\n                      />\n                  ),\n              }\n            : {};\n\n    return (\n        <>\n            <StyledFormControl\n                margin={margin}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                error={fetchError || ((isTouched || isSubmitted) && invalid)}\n                variant={variant}\n                {...sanitizeRestProps(rest)}\n            >\n                <InputLabel ref={inputLabel} id={`${label}-outlined-label`}>\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                        isRequired={isRequired}\n                    />\n                </InputLabel>\n                <Select\n                    autoWidth\n                    labelId={`${label}-outlined-label`}\n                    label={\n                        <FieldTitle\n                            label={label}\n                            source={source}\n                            resource={resource}\n                            isRequired={isRequired}\n                        />\n                    }\n                    multiple\n                    error={\n                        !!fetchError || ((isTouched || isSubmitted) && invalid)\n                    }\n                    renderValue={(selected: any[]) => (\n                        <div className={SelectArrayInputClasses.chips}>\n                            {(Array.isArray(selected) ? selected : [])\n                                .map(item =>\n                                    (allChoices || []).find(\n                                        // eslint-disable-next-line eqeqeq\n                                        choice => getChoiceValue(choice) == item\n                                    )\n                                )\n                                .filter(item => !!item)\n                                .map(item => (\n                                    <Chip\n                                        key={getChoiceValue(item)}\n                                        label={renderMenuItemOption(item)}\n                                        className={SelectArrayInputClasses.chip}\n                                        size=\"small\"\n                                    />\n                                ))}\n                        </div>\n                    )}\n                    data-testid=\"selectArray\"\n                    size={size}\n                    {...field}\n                    {...options}\n                    onChange={handleChangeWithCreateSupport}\n                    value={finalValue}\n                    {...outlinedInputProps}\n                >\n                    {finalChoices.map(renderMenuItem)}\n                </Select>\n                <FormHelperText error={fetchError || (isTouched && !!error)}>\n                    <InputHelperText\n                        touched={isTouched || isSubmitted || fetchError}\n                        error={error?.message || fetchError?.message}\n                        helperText={helperText}\n                    />\n                </FormHelperText>\n            </StyledFormControl>\n            {createElement}\n        </>\n    );\n};\n\nexport type SelectArrayInputProps = ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    Omit<CommonInputProps, 'source'> &\n    Omit<FormControlProps, 'defaultValue' | 'onBlur' | 'onChange'> & {\n        options?: SelectProps;\n        disableValue?: string;\n        source?: string;\n        onChange?: (event: ChangeEvent<HTMLInputElement> | RaRecord) => void;\n    };\n\nSelectArrayInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.object),\n    className: PropTypes.string,\n    children: PropTypes.node,\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]).isRequired,\n    optionValue: PropTypes.string.isRequired,\n    disableValue: PropTypes.string,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nSelectArrayInput.defaultProps = {\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    disableValue: 'disabled',\n    translateChoice: true,\n};\n\nconst sanitizeRestProps = ({\n    alwaysOn,\n    choices,\n    classNamInputWithOptionsPropse,\n    componenInputWithOptionsPropst,\n    crudGetMInputWithOptionsPropsatching,\n    crudGetOInputWithOptionsPropsne,\n    defaultValue,\n    disableValue,\n    emptyText,\n    enableGetChoices,\n    filter,\n    filterToQuery,\n    formClassName,\n    initializeForm,\n    initialValue,\n    input,\n    isRequired,\n    label,\n    limitChoicesToValue,\n    loaded,\n    locale,\n    meta,\n    onChange,\n    options,\n    optionValue,\n    optionText,\n    perPage,\n    record,\n    reference,\n    resource,\n    setFilter,\n    setPagination,\n    setSort,\n    sort,\n    source,\n    textAlign,\n    translate,\n    translateChoice,\n    validation,\n    ...rest\n}: any) => rest;\n\nconst PREFIX = 'RaSelectArrayInput';\n\nexport const SelectArrayInputClasses = {\n    chips: `${PREFIX}-chips`,\n    chip: `${PREFIX}-chip`,\n};\n\nconst StyledFormControl = styled(FormControl, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    minWidth: theme.spacing(20),\n    [`& .${SelectArrayInputClasses.chips}`]: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n\n    [`& .${SelectArrayInputClasses.chip}`]: {\n        marginTop: theme.spacing(0.5),\n        marginRight: theme.spacing(0.5),\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
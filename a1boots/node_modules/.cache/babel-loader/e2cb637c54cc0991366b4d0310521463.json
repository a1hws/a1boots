{"ast":null,"code":"import set from 'lodash/set';\nimport unset from 'lodash/unset';\nimport get from 'lodash/get';\n/**\n * Store using memory\n *\n * @example\n *\n * import { memoryStore } from 'react-admin';\n *\n * const App = () => (\n *    <Admin store={memoryStore()}>\n *       ...\n *   </Admin>\n * );\n */\n\nexport var memoryStore = function (storage) {\n  if (storage === void 0) {\n    storage = {};\n  }\n\n  var subscriptions = {};\n\n  var publish = function (key, value) {\n    Object.keys(subscriptions).forEach(function (id) {\n      if (!subscriptions[id]) return; // may happen if a component unmounts after a first subscriber was notified\n\n      if (subscriptions[id].key === key) {\n        subscriptions[id].callback(value);\n      }\n    });\n  };\n\n  return {\n    setup: function () {},\n    teardown: function () {\n      Object.keys(storage).forEach(function (key) {\n        return delete storage[key];\n      });\n    },\n    getItem: function (key, defaultValue) {\n      return get(storage, key, defaultValue);\n    },\n    setItem: function (key, value) {\n      set(storage, key, value);\n      publish(key, value);\n    },\n    removeItem: function (key) {\n      unset(storage, key);\n      publish(key, undefined);\n    },\n    removeItems: function (keyPrefix) {\n      var flatStorage = flatten(storage);\n      Object.keys(flatStorage).forEach(function (key) {\n        if (!key.startsWith(keyPrefix)) {\n          return;\n        }\n\n        unset(storage, key);\n        publish(key, undefined);\n      });\n    },\n    reset: function () {\n      var flatStorage = flatten(storage);\n      Object.keys(flatStorage).forEach(function (key) {\n        unset(storage, key);\n        publish(key, undefined);\n      });\n    },\n    subscribe: function (key, callback) {\n      var id = Math.random().toString();\n      subscriptions[id] = {\n        key: key,\n        callback: callback\n      };\n      return function () {\n        delete subscriptions[id];\n      };\n    }\n  };\n}; // taken from https://stackoverflow.com/a/19101235/1333479\n\nvar flatten = function (data) {\n  var result = {};\n\n  function doFlatten(current, prop) {\n    if (Object(current) !== current) {\n      // scalar value\n      result[prop] = current;\n    } else if (Array.isArray(current)) {\n      // array\n      result[prop] = current;\n    } else {\n      // object\n      var isEmpty = true;\n\n      for (var p in current) {\n        isEmpty = false;\n        doFlatten(current[p], prop ? prop + '.' + p : p);\n      }\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  doFlatten(data, '');\n  return result;\n};","map":{"version":3,"mappings":"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","names":["set","unset","get","memoryStore","storage","subscriptions","publish","key","value","Object","keys","forEach","id","callback","setup","teardown","getItem","defaultValue","setItem","removeItem","undefined","removeItems","keyPrefix","flatStorage","flatten","startsWith","reset","subscribe","Math","random","toString","data","result","doFlatten","current","prop","Array","isArray","isEmpty","p"],"sources":["/var/www/a1boots/node_modules/ra-core/src/store/memoryStore.tsx"],"sourcesContent":["import set from 'lodash/set';\nimport unset from 'lodash/unset';\nimport get from 'lodash/get';\nimport { Store } from './types';\n\ntype Subscription = {\n    key: string;\n    callback: (value: any) => void;\n};\n\n/**\n * Store using memory\n *\n * @example\n *\n * import { memoryStore } from 'react-admin';\n *\n * const App = () => (\n *    <Admin store={memoryStore()}>\n *       ...\n *   </Admin>\n * );\n */\nexport const memoryStore = (storage: any = {}): Store => {\n    const subscriptions: { [key: string]: Subscription } = {};\n    const publish = (key: string, value: any) => {\n        Object.keys(subscriptions).forEach(id => {\n            if (!subscriptions[id]) return; // may happen if a component unmounts after a first subscriber was notified\n            if (subscriptions[id].key === key) {\n                subscriptions[id].callback(value);\n            }\n        });\n    };\n    return {\n        setup: () => {},\n        teardown: () => {\n            Object.keys(storage).forEach(key => delete storage[key]);\n        },\n        getItem<T = any>(key: string, defaultValue?: T): T {\n            return get(storage, key, defaultValue);\n        },\n        setItem<T = any>(key: string, value: T): void {\n            set(storage, key, value);\n            publish(key, value);\n        },\n        removeItem(key: string): void {\n            unset(storage, key);\n            publish(key, undefined);\n        },\n        removeItems(keyPrefix: string): void {\n            const flatStorage = flatten(storage);\n            Object.keys(flatStorage).forEach(key => {\n                if (!key.startsWith(keyPrefix)) {\n                    return;\n                }\n                unset(storage, key);\n                publish(key, undefined);\n            });\n        },\n        reset(): void {\n            const flatStorage = flatten(storage);\n            Object.keys(flatStorage).forEach(key => {\n                unset(storage, key);\n                publish(key, undefined);\n            });\n        },\n        subscribe: (key: string, callback: (value: string) => void) => {\n            const id = Math.random().toString();\n            subscriptions[id] = {\n                key,\n                callback,\n            };\n            return () => {\n                delete subscriptions[id];\n            };\n        },\n    };\n};\n\n// taken from https://stackoverflow.com/a/19101235/1333479\nconst flatten = (data: any) => {\n    var result = {};\n    function doFlatten(current, prop) {\n        if (Object(current) !== current) {\n            // scalar value\n            result[prop] = current;\n        } else if (Array.isArray(current)) {\n            // array\n            result[prop] = current;\n        } else {\n            // object\n            var isEmpty = true;\n            for (var p in current) {\n                isEmpty = false;\n                doFlatten(current[p], prop ? prop + '.' + p : p);\n            }\n            if (isEmpty && prop) result[prop] = {};\n        }\n    }\n    doFlatten(data, '');\n    return result;\n};\n"]},"metadata":{},"sourceType":"module"}
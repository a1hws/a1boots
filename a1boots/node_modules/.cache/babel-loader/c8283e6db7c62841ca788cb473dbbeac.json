{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport get from 'lodash/get';\nimport { useMemo } from 'react';\nimport { useGetManyAggregate } from '../../dataProvider';\nimport { useList } from '../list';\nimport { useNotify } from '../../notification';\nvar emptyArray = [];\nvar defaultFilter = {};\nvar defaultSort = {\n  field: null,\n  order: null\n};\n/**\n * Hook that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * @example\n *\n * const { data, error, isFetching, isLoading } = useReferenceArrayFieldController({\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} props\n * @param {Object} props.record The current resource record\n * @param {string} props.reference The linked resource name\n * @param {string} props.resource The current resource name\n * @param {string} props.source The key of the linked resource identifier\n *\n * @param {Props} props\n *\n * @returns {ListControllerResult} The reference props\n */\n\nexport var useReferenceArrayFieldController = function (props) {\n  var _a = props.filter,\n      filter = _a === void 0 ? defaultFilter : _a,\n      _b = props.page,\n      page = _b === void 0 ? 1 : _b,\n      _c = props.perPage,\n      perPage = _c === void 0 ? 1000 : _c,\n      record = props.record,\n      reference = props.reference,\n      _d = props.sort,\n      sort = _d === void 0 ? defaultSort : _d,\n      source = props.source;\n  var notify = useNotify();\n  var value = get(record, source);\n  var ids = useMemo(function () {\n    if (Array.isArray(value)) return value;\n    console.warn(\"Value of field '\".concat(source, \"' is not an array.\"), value);\n    return emptyArray;\n  }, [value, source]);\n\n  var _e = useGetManyAggregate(reference, {\n    ids: ids\n  }, {\n    onError: function (error) {\n      return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n        type: 'error',\n        messageArgs: {\n          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n        }\n      });\n    }\n  }),\n      data = _e.data,\n      error = _e.error,\n      isLoading = _e.isLoading,\n      isFetching = _e.isFetching,\n      refetch = _e.refetch;\n\n  var listProps = useList({\n    data: data,\n    error: error,\n    filter: filter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    page: page,\n    perPage: perPage,\n    sort: sort\n  });\n  return __assign(__assign({}, listProps), {\n    defaultTitle: null,\n    refetch: refetch,\n    resource: reference\n  });\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAA+BC,OAA/B,QAA8C,SAA9C;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAeA,IAAMC,UAAU,GAAG,EAAnB;AACA,IAAMC,aAAa,GAAG,EAAtB;AACA,IAAMC,WAAW,GAAG;EAAEC,KAAK,EAAE,IAAT;EAAeC,KAAK,EAAE;AAAtB,CAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,gCAAgC,GAAG,UAI5CC,KAJ4C,EAIa;EAGrD,SAOAA,KAAK,OAPL;EAAA,UAAM,mBAAGL,aAAH,GAAgBM,EAAtB;EAAA,IACAC,KAMAF,KAAK,KAPL;EAAA,IACAG,IAAI,mBAAG,CAAH,GAAID,EADR;EAAA,IAEAE,KAKAJ,KAAK,QAPL;EAAA,IAEAK,OAAO,mBAAG,IAAH,GAAOD,EAFd;EAAA,IAGAE,MAAM,GAINN,KAAK,OAPL;EAAA,IAIAO,SAAS,GAGTP,KAAK,UAPL;EAAA,IAKAQ,KAEAR,KAAK,KAPL;EAAA,IAKAS,IAAI,mBAAGb,WAAH,GAAcY,EALlB;EAAA,IAMAE,MAAM,GACNV,KAAK,OAPL;EAQJ,IAAMW,MAAM,GAAGlB,SAAS,EAAxB;EACA,IAAMmB,KAAK,GAAGvB,GAAG,CAACiB,MAAD,EAASI,MAAT,CAAjB;EAEA,IAAMG,GAAG,GAAGvB,OAAO,CAAC;IAChB,IAAIwB,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B,OAAOA,KAAP;IAC1BI,OAAO,CAACC,IAAR,CAAa,0BAAmBP,MAAnB,EAAyB,oBAAzB,CAAb,EAA4DE,KAA5D;IACA,OAAOlB,UAAP;EACH,CAJkB,EAIhB,CAACkB,KAAD,EAAQF,MAAR,CAJgB,CAAnB;;EAMM,SAAkDnB,mBAAmB,CAGvEgB,SAHuE,EAIvE;IAAEM,GAAG;EAAL,CAJuE,EAKvE;IACIK,OAAO,EAAE,iBAAK;MACV,aAAM,CACF,OAAOC,KAAP,KAAiB,QAAjB,GACMA,KADN,GAEMA,KAAK,CAACC,OAAN,IAAiB,4BAHrB,EAIF;QACIC,IAAI,EAAE,OADV;QAEIC,WAAW,EAAE;UACTC,CAAC,EACG,OAAOJ,KAAP,KAAiB,QAAjB,GACMA,KADN,GAEMA,KAAK,IAAIA,KAAK,CAACC,OAAf,GACAD,KAAK,CAACC,OADN,GAEAI;QAND;MAFjB,CAJE,CAAN;IAeC;EAjBT,CALuE,CAArE;EAAA,IAAEC,IAAI,UAAN;EAAA,IAAQN,KAAK,WAAb;EAAA,IAAeO,SAAS,eAAxB;EAAA,IAA0BC,UAAU,gBAApC;EAAA,IAAsCC,OAAO,aAA7C;;EA0BN,IAAMC,SAAS,GAAGrC,OAAO,CAAsB;IAC3CiC,IAAI,MADuC;IAE3CN,KAAK,OAFsC;IAG3CW,MAAM,QAHqC;IAI3CH,UAAU,YAJiC;IAK3CD,SAAS,WALkC;IAM3CvB,IAAI,MANuC;IAO3CE,OAAO,SAPoC;IAQ3CI,IAAI;EARuC,CAAtB,CAAzB;EAWA,6BACOoB,SADP,GACgB;IACZE,YAAY,EAAE,IADF;IAEZH,OAAO,SAFK;IAGZI,QAAQ,EAAEzB;EAHE,CADhB;AAMH,CAnEM","names":["get","useMemo","useGetManyAggregate","useList","useNotify","emptyArray","defaultFilter","defaultSort","field","order","useReferenceArrayFieldController","props","_a","_b","page","_c","perPage","record","reference","_d","sort","source","notify","value","ids","Array","isArray","console","warn","onError","error","message","type","messageArgs","_","undefined","data","isLoading","isFetching","refetch","listProps","filter","defaultTitle","resource"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/field/useReferenceArrayFieldController.ts"],"sourcesContent":["import get from 'lodash/get';\nimport { useMemo } from 'react';\nimport { RaRecord, SortPayload } from '../../types';\nimport { useGetManyAggregate } from '../../dataProvider';\nimport { ListControllerResult, useList } from '../list';\nimport { useNotify } from '../../notification';\n\nexport interface UseReferenceArrayFieldControllerParams<\n    RecordType extends RaRecord = RaRecord\n> {\n    filter?: any;\n    page?: number;\n    perPage?: number;\n    record?: RecordType;\n    reference: string;\n    resource: string;\n    sort?: SortPayload;\n    source: string;\n}\n\nconst emptyArray = [];\nconst defaultFilter = {};\nconst defaultSort = { field: null, order: null };\n\n/**\n * Hook that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * @example\n *\n * const { data, error, isFetching, isLoading } = useReferenceArrayFieldController({\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} props\n * @param {Object} props.record The current resource record\n * @param {string} props.reference The linked resource name\n * @param {string} props.resource The current resource name\n * @param {string} props.source The key of the linked resource identifier\n *\n * @param {Props} props\n *\n * @returns {ListControllerResult} The reference props\n */\nexport const useReferenceArrayFieldController = <\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord\n>(\n    props: UseReferenceArrayFieldControllerParams<RecordType>\n): ListControllerResult => {\n    const {\n        filter = defaultFilter,\n        page = 1,\n        perPage = 1000,\n        record,\n        reference,\n        sort = defaultSort,\n        source,\n    } = props;\n    const notify = useNotify();\n    const value = get(record, source);\n\n    const ids = useMemo(() => {\n        if (Array.isArray(value)) return value;\n        console.warn(`Value of field '${source}' is not an array.`, value);\n        return emptyArray;\n    }, [value, source]);\n\n    const { data, error, isLoading, isFetching, refetch } = useGetManyAggregate<\n        ReferenceRecordType\n    >(\n        reference,\n        { ids },\n        {\n            onError: error =>\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                ),\n        }\n    );\n\n    const listProps = useList<ReferenceRecordType>({\n        data,\n        error,\n        filter,\n        isFetching,\n        isLoading,\n        page,\n        perPage,\n        sort,\n    });\n\n    return {\n        ...listProps,\n        defaultTitle: null,\n        refetch,\n        resource: reference,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, useCallback, useMemo, useRef, useState } from 'react';\nimport { styled } from '@mui/material';\nimport clsx from 'clsx';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { FormDataConsumer, useRecordContext, useTranslate } from 'ra-core';\nimport { useArrayInput } from './useArrayInput';\nimport { SimpleFormIteratorClasses, SimpleFormIteratorPrefix } from './useSimpleFormIteratorStyles';\nimport { SimpleFormIteratorContext } from './SimpleFormIteratorContext';\nimport { SimpleFormIteratorItem } from './SimpleFormIteratorItem';\nimport { AddItemButton as DefaultAddItemButton } from './AddItemButton';\nimport { RemoveItemButton as DefaultRemoveItemButton } from './RemoveItemButton';\nimport { ReOrderButtons as DefaultReOrderButtons } from './ReOrderButtons';\nimport { ClearArrayButton } from './ClearArrayButton';\nimport { Confirm } from '../../layout';\nexport var SimpleFormIterator = function SimpleFormIterator(props) {\n  var _a = props.addButton,\n      addButton = _a === void 0 ? React.createElement(DefaultAddItemButton, null) : _a,\n      _b = props.removeButton,\n      removeButton = _b === void 0 ? React.createElement(DefaultRemoveItemButton, null) : _b,\n      _c = props.reOrderButtons,\n      reOrderButtons = _c === void 0 ? React.createElement(DefaultReOrderButtons, null) : _c,\n      children = props.children,\n      className = props.className,\n      resource = props.resource,\n      source = props.source,\n      disabled = props.disabled,\n      disableAdd = props.disableAdd,\n      disableClear = props.disableClear,\n      disableRemove = props.disableRemove,\n      disableReordering = props.disableReordering,\n      inline = props.inline,\n      _d = props.getItemLabel,\n      getItemLabel = _d === void 0 ? false : _d,\n      fullWidth = props.fullWidth,\n      sx = props.sx;\n\n  var _e = useState(false),\n      confirmIsOpen = _e[0],\n      setConfirmIsOpen = _e[1];\n\n  var _f = useArrayInput(props),\n      append = _f.append,\n      fields = _f.fields,\n      move = _f.move,\n      remove = _f.remove,\n      replace = _f.replace;\n\n  var translate = useTranslate();\n  var record = useRecordContext(props);\n  var initialDefaultValue = useRef({});\n  var removeField = useCallback(function (index) {\n    remove(index);\n  }, [remove]);\n\n  if (fields.length > 0) {\n    var _g = fields[0],\n        id = _g.id,\n        rest = __rest(_g, [\"id\"]);\n\n    initialDefaultValue.current = rest;\n\n    for (var k in initialDefaultValue.current) {\n      initialDefaultValue.current[k] = null;\n    }\n  }\n\n  var addField = useCallback(function (item) {\n    if (item === void 0) {\n      item = undefined;\n    }\n\n    var defaultValue = item;\n\n    if (item == null) {\n      defaultValue = initialDefaultValue.current;\n\n      if (Children.count(children) === 1 && React.isValidElement(Children.only(children)) && // @ts-ignore\n      !Children.only(children).props.source) {\n        // ArrayInput used for an array of scalar values\n        // (e.g. tags: ['foo', 'bar'])\n        defaultValue = '';\n      } else {\n        // ArrayInput used for an array of objects\n        // (e.g. authors: [{ firstName: 'John', lastName: 'Doe' }, { firstName: 'Jane', lastName: 'Doe' }])\n        defaultValue = defaultValue || {};\n        Children.forEach(children, function (input) {\n          var _a;\n\n          if (React.isValidElement(input) && input.type !== FormDataConsumer && input.props.source) {\n            defaultValue[input.props.source] = (_a = input.props.defaultValue) !== null && _a !== void 0 ? _a : null;\n          }\n        });\n      }\n    }\n\n    append(defaultValue);\n  }, [append, children]); // add field and call the onClick event of the button passed as addButton prop\n\n  var handleAddButtonClick = function handleAddButtonClick(originalOnClickHandler) {\n    return function (event) {\n      addField();\n\n      if (originalOnClickHandler) {\n        originalOnClickHandler(event);\n      }\n    };\n  };\n\n  var handleReorder = useCallback(function (origin, destination) {\n    move(origin, destination);\n  }, [move]);\n  var handleArrayClear = useCallback(function () {\n    replace([]);\n    setConfirmIsOpen(false);\n  }, [replace]);\n  var records = get(record, source);\n  var context = useMemo(function () {\n    return {\n      total: fields.length,\n      add: addField,\n      remove: removeField,\n      reOrder: handleReorder,\n      source: source\n    };\n  }, [addField, fields.length, handleReorder, removeField, source]);\n  return fields ? React.createElement(SimpleFormIteratorContext.Provider, {\n    value: context\n  }, React.createElement(Root, {\n    className: clsx(className, fullWidth && 'fullwidth', disabled && 'disabled'),\n    sx: sx\n  }, React.createElement(\"ul\", {\n    className: SimpleFormIteratorClasses.list\n  }, fields.map(function (member, index) {\n    return React.createElement(SimpleFormIteratorItem, {\n      key: member.id,\n      disabled: disabled,\n      disableRemove: disableRemove,\n      disableReordering: disableReordering,\n      fields: fields,\n      getItemLabel: getItemLabel,\n      index: index,\n      member: \"\".concat(source, \".\").concat(index),\n      onRemoveField: removeField,\n      onReorder: handleReorder,\n      record: records && records[index] || {},\n      removeButton: removeButton,\n      reOrderButtons: reOrderButtons,\n      resource: resource,\n      source: source,\n      inline: inline\n    }, children);\n  })), !disabled && !(disableAdd && (disableClear || disableRemove)) && React.createElement(\"div\", {\n    className: SimpleFormIteratorClasses.buttons\n  }, !disableAdd && React.createElement(\"div\", {\n    className: SimpleFormIteratorClasses.add\n  }, cloneElement(addButton, {\n    className: clsx('button-add', \"button-add-\".concat(source)),\n    onClick: handleAddButtonClick(addButton.props.onClick)\n  })), fields.length > 0 && !disableClear && !disableRemove && React.createElement(\"div\", {\n    className: SimpleFormIteratorClasses.clear\n  }, React.createElement(Confirm, {\n    isOpen: confirmIsOpen,\n    title: translate('ra.action.clear_array_input'),\n    content: translate('ra.message.clear_array_input'),\n    onConfirm: handleArrayClear,\n    onClose: function onClose() {\n      return setConfirmIsOpen(false);\n    }\n  }), React.createElement(ClearArrayButton, {\n    onClick: function onClick() {\n      return setConfirmIsOpen(true);\n    }\n  }))))) : null;\n};\nSimpleFormIterator.defaultProps = {\n  disableAdd: false,\n  disableRemove: false\n};\nSimpleFormIterator.propTypes = {\n  addButton: PropTypes.element,\n  removeButton: PropTypes.element,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  field: PropTypes.object,\n  fields: PropTypes.array,\n  fieldState: PropTypes.object,\n  formState: PropTypes.object,\n  fullWidth: PropTypes.bool,\n  inline: PropTypes.bool,\n  record: PropTypes.object,\n  source: PropTypes.string,\n  resource: PropTypes.string,\n  translate: PropTypes.func,\n  disableAdd: PropTypes.bool,\n  disableRemove: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  TransitionProps: PropTypes.shape({})\n};\nvar Root = styled('div', {\n  name: SimpleFormIteratorPrefix,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b, _c, _d;\n\n  var theme = _a.theme;\n  return _b = {\n    '& > ul': {\n      padding: 0,\n      marginTop: 0,\n      marginBottom: 0\n    },\n    '& > ul > li:last-child': {\n      // hide the last separator\n      borderBottom: 'none'\n    }\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.line)] = (_c = {\n    display: 'flex',\n    listStyleType: 'none',\n    borderBottom: \"solid 1px \".concat(theme.palette.divider)\n  }, _c[theme.breakpoints.down('sm')] = {\n    display: 'block'\n  }, _c), _b[\"& .\".concat(SimpleFormIteratorClasses.index)] = (_d = {\n    display: 'flex',\n    alignItems: 'top',\n    marginRight: theme.spacing(1),\n    marginTop: theme.spacing(1)\n  }, _d[theme.breakpoints.down('md')] = {\n    display: 'none'\n  }, _d), _b[\"& .\".concat(SimpleFormIteratorClasses.form)] = {\n    alignItems: 'flex-start',\n    display: 'flex',\n    flexDirection: 'column'\n  }, _b[\"&.fullwidth > ul > li > .\".concat(SimpleFormIteratorClasses.form)] = {\n    flex: 2\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.inline)] = {\n    flexDirection: 'row',\n    columnGap: '1em',\n    flexWrap: 'wrap'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.action)] = {\n    marginTop: theme.spacing(0.5),\n    visibility: 'hidden',\n    '@media(hover:none)': {\n      visibility: 'visible'\n    }\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.buttons)] = {\n    display: 'flex'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.add)] = {\n    borderBottom: 'none'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.clear)] = {\n    borderBottom: 'none'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.line, \":hover > .\").concat(SimpleFormIteratorClasses.action)] = {\n    visibility: 'visible'\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","Children","cloneElement","useCallback","useMemo","useRef","useState","styled","clsx","get","PropTypes","FormDataConsumer","useRecordContext","useTranslate","useArrayInput","SimpleFormIteratorClasses","SimpleFormIteratorPrefix","SimpleFormIteratorContext","SimpleFormIteratorItem","AddItemButton","DefaultAddItemButton","RemoveItemButton","DefaultRemoveItemButton","ReOrderButtons","DefaultReOrderButtons","ClearArrayButton","Confirm","SimpleFormIterator","props","_a","_b","removeButton","_c","reOrderButtons","children","className","resource","source","disabled","disableAdd","disableClear","disableRemove","disableReordering","inline","_d","getItemLabel","fullWidth","sx","confirmIsOpen","setConfirmIsOpen","append","fields","move","remove","replace","translate","record","initialDefaultValue","removeField","index","length","_g","id","rest","current","k","addField","item","defaultValue","count","isValidElement","only","forEach","input","type","handleAddButtonClick","originalOnClickHandler","event","handleReorder","origin","destination","handleArrayClear","records","context","total","add","reOrder","Provider","value","Root","list","map","member","key","concat","onRemoveField","onReorder","buttons","addButton","onClick","clear","isOpen","title","content","onConfirm","onClose","defaultProps","propTypes","element","node","string","field","object","array","fieldState","formState","bool","func","oneOfType","TransitionProps","shape","name","overridesResolver","styles","root","theme","padding","marginTop","marginBottom","borderBottom","line","display","listStyleType","palette","divider","breakpoints","down","alignItems","marginRight","spacing","form","flexDirection","flex","columnGap","flexWrap","action","visibility"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/ArrayInput/SimpleFormIterator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    cloneElement,\n    MouseEvent,\n    MouseEventHandler,\n    ReactElement,\n    ReactNode,\n    useCallback,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport { styled, SxProps } from '@mui/material';\nimport clsx from 'clsx';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport {\n    FormDataConsumer,\n    RaRecord,\n    useRecordContext,\n    useTranslate,\n} from 'ra-core';\nimport { UseFieldArrayReturn } from 'react-hook-form';\n\nimport { useArrayInput } from './useArrayInput';\nimport {\n    SimpleFormIteratorClasses,\n    SimpleFormIteratorPrefix,\n} from './useSimpleFormIteratorStyles';\nimport { SimpleFormIteratorContext } from './SimpleFormIteratorContext';\nimport {\n    DisableRemoveFunction,\n    SimpleFormIteratorItem,\n} from './SimpleFormIteratorItem';\nimport { AddItemButton as DefaultAddItemButton } from './AddItemButton';\nimport { RemoveItemButton as DefaultRemoveItemButton } from './RemoveItemButton';\nimport { ReOrderButtons as DefaultReOrderButtons } from './ReOrderButtons';\nimport { ClearArrayButton } from './ClearArrayButton';\nimport { Confirm } from '../../layout';\n\nexport const SimpleFormIterator = (props: SimpleFormIteratorProps) => {\n    const {\n        addButton = <DefaultAddItemButton />,\n        removeButton = <DefaultRemoveItemButton />,\n        reOrderButtons = <DefaultReOrderButtons />,\n        children,\n        className,\n        resource,\n        source,\n        disabled,\n        disableAdd,\n        disableClear,\n        disableRemove,\n        disableReordering,\n        inline,\n        getItemLabel = false,\n        fullWidth,\n        sx,\n    } = props;\n    const [confirmIsOpen, setConfirmIsOpen] = useState<boolean>(false);\n    const { append, fields, move, remove, replace } = useArrayInput(props);\n    const translate = useTranslate();\n    const record = useRecordContext(props);\n    const initialDefaultValue = useRef({});\n\n    const removeField = useCallback(\n        (index: number) => {\n            remove(index);\n        },\n        [remove]\n    );\n\n    if (fields.length > 0) {\n        const { id, ...rest } = fields[0];\n        initialDefaultValue.current = rest;\n        for (const k in initialDefaultValue.current)\n            initialDefaultValue.current[k] = null;\n    }\n\n    const addField = useCallback(\n        (item: any = undefined) => {\n            let defaultValue = item;\n            if (item == null) {\n                defaultValue = initialDefaultValue.current;\n                if (\n                    Children.count(children) === 1 &&\n                    React.isValidElement(Children.only(children)) &&\n                    // @ts-ignore\n                    !Children.only(children).props.source\n                ) {\n                    // ArrayInput used for an array of scalar values\n                    // (e.g. tags: ['foo', 'bar'])\n                    defaultValue = '';\n                } else {\n                    // ArrayInput used for an array of objects\n                    // (e.g. authors: [{ firstName: 'John', lastName: 'Doe' }, { firstName: 'Jane', lastName: 'Doe' }])\n                    defaultValue =\n                        defaultValue || ({} as Record<string, unknown>);\n                    Children.forEach(children, input => {\n                        if (\n                            React.isValidElement(input) &&\n                            input.type !== FormDataConsumer &&\n                            input.props.source\n                        ) {\n                            defaultValue[input.props.source] =\n                                input.props.defaultValue ?? null;\n                        }\n                    });\n                }\n            }\n            append(defaultValue);\n        },\n        [append, children]\n    );\n\n    // add field and call the onClick event of the button passed as addButton prop\n    const handleAddButtonClick = (\n        originalOnClickHandler: MouseEventHandler\n    ) => (event: MouseEvent) => {\n        addField();\n        if (originalOnClickHandler) {\n            originalOnClickHandler(event);\n        }\n    };\n\n    const handleReorder = useCallback(\n        (origin: number, destination: number) => {\n            move(origin, destination);\n        },\n        [move]\n    );\n\n    const handleArrayClear = useCallback(() => {\n        replace([]);\n        setConfirmIsOpen(false);\n    }, [replace]);\n\n    const records = get(record, source);\n\n    const context = useMemo(\n        () => ({\n            total: fields.length,\n            add: addField,\n            remove: removeField,\n            reOrder: handleReorder,\n            source,\n        }),\n        [addField, fields.length, handleReorder, removeField, source]\n    );\n    return fields ? (\n        <SimpleFormIteratorContext.Provider value={context}>\n            <Root\n                className={clsx(\n                    className,\n                    fullWidth && 'fullwidth',\n                    disabled && 'disabled'\n                )}\n                sx={sx}\n            >\n                <ul className={SimpleFormIteratorClasses.list}>\n                    {fields.map((member, index) => (\n                        <SimpleFormIteratorItem\n                            key={member.id}\n                            disabled={disabled}\n                            disableRemove={disableRemove}\n                            disableReordering={disableReordering}\n                            fields={fields}\n                            getItemLabel={getItemLabel}\n                            index={index}\n                            member={`${source}.${index}`}\n                            onRemoveField={removeField}\n                            onReorder={handleReorder}\n                            record={(records && records[index]) || {}}\n                            removeButton={removeButton}\n                            reOrderButtons={reOrderButtons}\n                            resource={resource}\n                            source={source}\n                            inline={inline}\n                        >\n                            {children}\n                        </SimpleFormIteratorItem>\n                    ))}\n                </ul>\n                {!disabled && !(disableAdd && (disableClear || disableRemove)) && (\n                    <div className={SimpleFormIteratorClasses.buttons}>\n                        {!disableAdd && (\n                            <div className={SimpleFormIteratorClasses.add}>\n                                {cloneElement(addButton, {\n                                    className: clsx(\n                                        'button-add',\n                                        `button-add-${source}`\n                                    ),\n                                    onClick: handleAddButtonClick(\n                                        addButton.props.onClick\n                                    ),\n                                })}\n                            </div>\n                        )}\n                        {fields.length > 0 && !disableClear && !disableRemove && (\n                            <div className={SimpleFormIteratorClasses.clear}>\n                                <Confirm\n                                    isOpen={confirmIsOpen}\n                                    title={translate(\n                                        'ra.action.clear_array_input'\n                                    )}\n                                    content={translate(\n                                        'ra.message.clear_array_input'\n                                    )}\n                                    onConfirm={handleArrayClear}\n                                    onClose={() => setConfirmIsOpen(false)}\n                                />\n                                <ClearArrayButton\n                                    onClick={() => setConfirmIsOpen(true)}\n                                />\n                            </div>\n                        )}\n                    </div>\n                )}\n            </Root>\n        </SimpleFormIteratorContext.Provider>\n    ) : null;\n};\n\nSimpleFormIterator.defaultProps = {\n    disableAdd: false,\n    disableRemove: false,\n};\n\nSimpleFormIterator.propTypes = {\n    addButton: PropTypes.element,\n    removeButton: PropTypes.element,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    field: PropTypes.object,\n    fields: PropTypes.array,\n    fieldState: PropTypes.object,\n    formState: PropTypes.object,\n    fullWidth: PropTypes.bool,\n    inline: PropTypes.bool,\n    record: PropTypes.object,\n    source: PropTypes.string,\n    resource: PropTypes.string,\n    translate: PropTypes.func,\n    disableAdd: PropTypes.bool,\n    disableRemove: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    TransitionProps: PropTypes.shape({}),\n};\n\ntype GetItemLabelFunc = (index: number) => string | ReactElement;\n\nexport interface SimpleFormIteratorProps extends Partial<UseFieldArrayReturn> {\n    addButton?: ReactElement;\n    children?: ReactNode;\n    className?: string;\n    disabled?: boolean;\n    disableAdd?: boolean;\n    disableClear?: boolean;\n    disableRemove?: boolean | DisableRemoveFunction;\n    disableReordering?: boolean;\n    fullWidth?: boolean;\n    getItemLabel?: boolean | GetItemLabelFunc;\n    inline?: boolean;\n    meta?: {\n        // the type defined in FieldArrayRenderProps says error is boolean, which is wrong.\n        error?: any;\n        submitFailed?: boolean;\n    };\n    record?: RaRecord;\n    removeButton?: ReactElement;\n    reOrderButtons?: ReactElement;\n    resource?: string;\n    source?: string;\n    sx?: SxProps;\n}\n\nconst Root = styled('div', {\n    name: SimpleFormIteratorPrefix,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    '& > ul': {\n        padding: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n    '& > ul > li:last-child': {\n        // hide the last separator\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.line}`]: {\n        display: 'flex',\n        listStyleType: 'none',\n        borderBottom: `solid 1px ${theme.palette.divider}`,\n        [theme.breakpoints.down('sm')]: { display: 'block' },\n    },\n    [`& .${SimpleFormIteratorClasses.index}`]: {\n        display: 'flex',\n        alignItems: 'top',\n        marginRight: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        [theme.breakpoints.down('md')]: { display: 'none' },\n    },\n    [`& .${SimpleFormIteratorClasses.form}`]: {\n        alignItems: 'flex-start',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    [`&.fullwidth > ul > li > .${SimpleFormIteratorClasses.form}`]: {\n        flex: 2,\n    },\n    [`& .${SimpleFormIteratorClasses.inline}`]: {\n        flexDirection: 'row',\n        columnGap: '1em',\n        flexWrap: 'wrap',\n    },\n    [`& .${SimpleFormIteratorClasses.action}`]: {\n        marginTop: theme.spacing(0.5),\n        visibility: 'hidden',\n        '@media(hover:none)': {\n            visibility: 'visible',\n        },\n    },\n    [`& .${SimpleFormIteratorClasses.buttons}`]: {\n        display: 'flex',\n    },\n    [`& .${SimpleFormIteratorClasses.add}`]: {\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.clear}`]: {\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.line}:hover > .${SimpleFormIteratorClasses.action}`]: {\n        visibility: 'visible',\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
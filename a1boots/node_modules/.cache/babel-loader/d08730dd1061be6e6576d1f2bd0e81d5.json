{"ast":null,"code":"import React from 'react';\nimport { Tooltip, IconButton } from '@mui/material';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { useTranslate } from 'ra-core';\nimport { useTheme } from '../layout';\n/**\n * Button toggling the theme (light or dark).\n *\n * @deprecated Set the lightTheme and darkTheme props in the <Admin> component.\n *\n * @example\n * import { AppBar, TitlePortal, ToggleThemeLegacyButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar>\n *         <TitlePortal />\n *         <ToggleThemeButton lightTheme={lightTheme} darkTheme={darkTheme} />\n *     </AppBar>\n * );\n *\n * const MyLayout = props => <Layout {...props} appBar={MyAppBar} />;\n */\n\nexport var ToggleThemeLegacyButton = function (props) {\n  var translate = useTranslate();\n  var darkTheme = props.darkTheme,\n      lightTheme = props.lightTheme;\n\n  var _a = useTheme(),\n      theme = _a[0],\n      setTheme = _a[1]; // @ts-ignore\n\n\n  var isDark = theme === 'dark' || (theme === null || theme === void 0 ? void 0 : theme.palette.mode) === 'dark';\n\n  var handleTogglePaletteType = function () {\n    setTheme(isDark ? lightTheme : darkTheme);\n  };\n\n  var toggleThemeTitle = translate('ra.action.toggle_theme', {\n    _: 'Toggle Theme'\n  });\n  return React.createElement(Tooltip, {\n    title: toggleThemeTitle,\n    enterDelay: 300\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    onClick: handleTogglePaletteType,\n    \"aria-label\": toggleThemeTitle\n  }, isDark ? React.createElement(Brightness7Icon, null) : React.createElement(Brightness4Icon, null)));\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,eAApC;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,QAAT,QAAyB,WAAzB;AAGA;;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAMC,uBAAuB,GAAG,UACnCC,KADmC,EACA;EAEnC,IAAMC,SAAS,GAAGJ,YAAY,EAA9B;EACQ,aAAS,GAAiBG,KAAK,UAA/B;EAAA,IAAWE,UAAU,GAAKF,KAAK,WAA/B;;EACF,SAAoBF,QAAQ,EAA5B;EAAA,IAACK,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB,CAJ6B,CAKnC;;;EACA,IAAMC,MAAM,GAAGF,KAAK,KAAK,MAAV,IAAoB,MAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEG,OAAP,CAAeC,IAAf,MAAwB,MAA3D;;EAEA,IAAMC,uBAAuB,GAAG;IAC5BJ,QAAQ,CAACC,MAAM,GAAGH,UAAH,GAAgBO,SAAvB,CAAR;EACH,CAFD;;EAGA,IAAMC,gBAAgB,GAAGT,SAAS,CAAC,wBAAD,EAA2B;IACzDU,CAAC,EAAE;EADsD,CAA3B,CAAlC;EAIA,OACInB,oBAACC,OAAD,EAAQ;IAACmB,KAAK,EAAEF,gBAAR;IAA0BG,UAAU,EAAE;EAAtC,CAAR,EACIrB,oBAACE,UAAD,EAAW;IACPoB,KAAK,EAAC,SADC;IAEPC,OAAO,EAAEP,uBAFF;IAEyB,cACpBE;EAHL,CAAX,EAKKL,MAAM,GAAGb,oBAACI,eAAD,EAAgB,IAAhB,CAAH,GAAyBJ,oBAACG,eAAD,EAAgB,IAAhB,CALpC,CADJ,CADJ;AAWH,CA3BM","names":["React","Tooltip","IconButton","Brightness4Icon","Brightness7Icon","useTranslate","useTheme","ToggleThemeLegacyButton","props","translate","lightTheme","theme","setTheme","isDark","palette","mode","handleTogglePaletteType","darkTheme","toggleThemeTitle","_","title","enterDelay","color","onClick"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/ToggleThemeLegacyButton.tsx"],"sourcesContent":["import React from 'react';\nimport { Tooltip, IconButton } from '@mui/material';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { useTranslate } from 'ra-core';\nimport { useTheme } from '../layout';\nimport { RaThemeOptions } from '..';\n\n/**\n * Button toggling the theme (light or dark).\n *\n * @deprecated Set the lightTheme and darkTheme props in the <Admin> component.\n *\n * @example\n * import { AppBar, TitlePortal, ToggleThemeLegacyButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar>\n *         <TitlePortal />\n *         <ToggleThemeButton lightTheme={lightTheme} darkTheme={darkTheme} />\n *     </AppBar>\n * );\n *\n * const MyLayout = props => <Layout {...props} appBar={MyAppBar} />;\n */\nexport const ToggleThemeLegacyButton = (\n    props: ToggleThemeLegacyButtonProps\n) => {\n    const translate = useTranslate();\n    const { darkTheme, lightTheme } = props;\n    const [theme, setTheme] = useTheme();\n    // @ts-ignore\n    const isDark = theme === 'dark' || theme?.palette.mode === 'dark';\n\n    const handleTogglePaletteType = (): void => {\n        setTheme(isDark ? lightTheme : darkTheme);\n    };\n    const toggleThemeTitle = translate('ra.action.toggle_theme', {\n        _: 'Toggle Theme',\n    });\n\n    return (\n        <Tooltip title={toggleThemeTitle} enterDelay={300}>\n            <IconButton\n                color=\"inherit\"\n                onClick={handleTogglePaletteType}\n                aria-label={toggleThemeTitle}\n            >\n                {isDark ? <Brightness7Icon /> : <Brightness4Icon />}\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport interface ToggleThemeLegacyButtonProps {\n    darkTheme: RaThemeOptions;\n    lightTheme?: RaThemeOptions;\n}\n"]},"metadata":{},"sourceType":"module"}
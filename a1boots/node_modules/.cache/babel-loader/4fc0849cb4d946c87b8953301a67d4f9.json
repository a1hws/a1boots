{"ast":null,"code":"import { useCallback } from 'react';\nimport { useBasename } from './useBasename';\n/**\n * Get a callback to create a link to a given page in the admin app.\n *\n * The callback expects an object as parameter, containing the following properties:\n *   - type: 'list', 'edit', 'show' or 'create'\n *   - resource\n *   - id (optional), for 'edit' or 'show' pages\n *\n * This is used internally by react-admin to allow default components to work\n * in applications that are mounted on a sub path, e.g. '/admin'. If your app\n * is mounted in the root path, you don't need it, and you can create links by\n * hand, e.g. '/articles/1/show'.\n *\n * @example\n * import { useCreatePath, useRecordContext } from 'react-admin';\n * import { useNavigate } from 'react-router-dom';\n *\n * const PostEditButton = () => {\n *     const createPath = useCreatePath();\n *     const record = useRecordContext();\n *     const navigate = useNavigate();\n *\n *     const handleClick = () => {\n *         const link = createPath({\n *            type: 'edit',\n *            resource: 'posts',\n *            id: record.id\n *         });\n *         navigate(link);\n *     };\n *\n *    return <button onClick={handleClick}>Edit Post</button>;\n * };\n */\n\nexport var useCreatePath = function useCreatePath() {\n  var basename = useBasename();\n  return useCallback(function (_a) {\n    var resource = _a.resource,\n        id = _a.id,\n        type = _a.type;\n\n    switch (type) {\n      case 'list':\n        return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource));\n\n      case 'create':\n        return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource, \"/create\"));\n\n      case 'edit':\n        {\n          if (id == null) {\n            // maybe the id isn't defined yet\n            // instead of throwing an error, fallback to list link\n            return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource));\n          }\n\n          return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource, \"/\").concat(encodeURIComponent(id)));\n        }\n\n      case 'show':\n        {\n          if (id == null) {\n            // maybe the id isn't defined yet\n            // instead of throwing an error, fallback to list link\n            return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource));\n          }\n\n          return removeDoubleSlashes(\"\".concat(basename, \"/\").concat(resource, \"/\").concat(encodeURIComponent(id), \"/show\"));\n        }\n\n      default:\n        return type;\n    }\n  }, [basename]);\n};\nexport var removeDoubleSlashes = function removeDoubleSlashes(path) {\n  return path.replace('//', '/');\n};","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAGA,SAASC,WAAT,QAA4B,eAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;EACzB,IAAMC,QAAQ,GAAGF,WAAW,EAA5B;EACA,OAAOD,WAAW,CACd,UAACI,EAAD,EAAyC;QAAtCC,QAAQ;QAAEC,EAAE;QAAEC,IAAI;;IACjB,QAAQA,IAAR;MACI,KAAK,MAAL;QACI,OAAOC,mBAAmB,CAAC,UAAGL,QAAH,EAAW,GAAX,EAAWM,MAAX,CAAeJ,QAAf,CAAD,CAA1B;;MACJ,KAAK,QAAL;QACI,OAAOG,mBAAmB,CACtB,UAAGL,QAAH,EAAW,GAAX,EAAWM,MAAX,CAAeJ,QAAf,EAAuB,SAAvB,CADsB,CAA1B;;MAGJ,KAAK,MAAL;QAAa;UACT,IAAIC,EAAE,IAAI,IAAV,EAAgB;YACZ;YACA;YACA,OAAOE,mBAAmB,CAAC,UAAGL,QAAH,EAAW,GAAX,EAAWM,MAAX,CAAeJ,QAAf,CAAD,CAA1B;UACH;;UACD,OAAOG,mBAAmB,CACtB,UAAGL,QAAH,EAAW,GAAX,EAAWM,MAAX,CAAeJ,QAAf,EAAuB,GAAvB,EAAuBI,MAAvB,CAA2BC,kBAAkB,CAACJ,EAAD,CAA7C,CADsB,CAA1B;QAGH;;MACD,KAAK,MAAL;QAAa;UACT,IAAIA,EAAE,IAAI,IAAV,EAAgB;YACZ;YACA;YACA,OAAOE,mBAAmB,CAAC,UAAGL,QAAH,EAAW,GAAX,EAAWM,MAAX,CAAeJ,QAAf,CAAD,CAA1B;UACH;;UACD,OAAOG,mBAAmB,CACtB,UAAGL,QAAH,EAAW,GAAX,EAAWM,MAAX,CAAeJ,QAAf,EAAuB,GAAvB,EAAuBI,MAAvB,CAA2BC,kBAAkB,CAACJ,EAAD,CAA7C,EAAiD,OAAjD,CADsB,CAA1B;QAGH;;MACD;QACI,OAAOC,IAAP;IA5BR;EA8BH,CAhCa,EAiCd,CAACJ,QAAD,CAjCc,CAAlB;AAmCH,CArCM;AAgDP,OAAO,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACG,IAAD,EAAa;EAAK,WAAI,CAACC,OAAL,CAAa,IAAb,EAAmB,GAAnB;AAAuB,CAArE","names":["useCallback","useBasename","useCreatePath","basename","_a","resource","id","type","removeDoubleSlashes","concat","encodeURIComponent","path","replace"],"sources":["/var/www/a1boots/node_modules/ra-core/src/routing/useCreatePath.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport { Identifier } from '../types';\nimport { useBasename } from './useBasename';\n\n/**\n * Get a callback to create a link to a given page in the admin app.\n *\n * The callback expects an object as parameter, containing the following properties:\n *   - type: 'list', 'edit', 'show' or 'create'\n *   - resource\n *   - id (optional), for 'edit' or 'show' pages\n *\n * This is used internally by react-admin to allow default components to work\n * in applications that are mounted on a sub path, e.g. '/admin'. If your app\n * is mounted in the root path, you don't need it, and you can create links by\n * hand, e.g. '/articles/1/show'.\n *\n * @example\n * import { useCreatePath, useRecordContext } from 'react-admin';\n * import { useNavigate } from 'react-router-dom';\n *\n * const PostEditButton = () => {\n *     const createPath = useCreatePath();\n *     const record = useRecordContext();\n *     const navigate = useNavigate();\n *\n *     const handleClick = () => {\n *         const link = createPath({\n *            type: 'edit',\n *            resource: 'posts',\n *            id: record.id\n *         });\n *         navigate(link);\n *     };\n *\n *    return <button onClick={handleClick}>Edit Post</button>;\n * };\n */\nexport const useCreatePath = () => {\n    const basename = useBasename();\n    return useCallback(\n        ({ resource, id, type }: CreatePathParams): string => {\n            switch (type) {\n                case 'list':\n                    return removeDoubleSlashes(`${basename}/${resource}`);\n                case 'create':\n                    return removeDoubleSlashes(\n                        `${basename}/${resource}/create`\n                    );\n                case 'edit': {\n                    if (id == null) {\n                        // maybe the id isn't defined yet\n                        // instead of throwing an error, fallback to list link\n                        return removeDoubleSlashes(`${basename}/${resource}`);\n                    }\n                    return removeDoubleSlashes(\n                        `${basename}/${resource}/${encodeURIComponent(id)}`\n                    );\n                }\n                case 'show': {\n                    if (id == null) {\n                        // maybe the id isn't defined yet\n                        // instead of throwing an error, fallback to list link\n                        return removeDoubleSlashes(`${basename}/${resource}`);\n                    }\n                    return removeDoubleSlashes(\n                        `${basename}/${resource}/${encodeURIComponent(id)}/show`\n                    );\n                }\n                default:\n                    return type;\n            }\n        },\n        [basename]\n    );\n};\n\ntype AnyString = string & {};\nexport type CreatePathType = 'list' | 'edit' | 'show' | 'create' | AnyString;\n\nexport interface CreatePathParams {\n    type: CreatePathType;\n    resource: string;\n    id?: Identifier;\n}\n\nexport const removeDoubleSlashes = (path: string) => path.replace('//', '/');\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback } from 'react';\nimport { useAddNotificationContext } from './useAddNotificationContext';\n/**\n * Hook for Notification Side Effect\n *\n * @example\n *\n * const notify = useNotify();\n * // simple message (info level)\n * notify('Level complete');\n * // specify level\n * notify('A problem occurred', { type: 'error' })\n * // pass arguments to the translation function\n * notify('Deleted %{count} elements', { type: 'info', messageArgs: { smart_count: 23 } })\n * // show the action as undoable in the notification\n * notify('Post renamed', { type: 'info', undoable: true })\n */\n\nexport var useNotify = function useNotify() {\n  var addNotification = useAddNotificationContext();\n  return useCallback(function (message, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _a = options.type,\n        messageType = _a === void 0 ? 'info' : _a,\n        notificationOptions = __rest(options, [\"type\"]);\n\n    addNotification({\n      message: message,\n      type: messageType,\n      notificationOptions: notificationOptions\n    });\n  }, [addNotification]);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA,SAASA,WAAT,QAAuC,OAAvC;AAEA,SAASC,yBAAT,QAA0C,6BAA1C;AAGA;;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;EACrB,IAAMC,eAAe,GAAGF,yBAAyB,EAAjD;EACA,OAAOD,WAAW,CACd,UACII,OADJ,EAEIC,OAFJ,EAEmE;IAA/D;MAAAA;IAA+D;;IAG3D,SAEAA,OAAO,KAFP;IAAA,IAAMC,WAAW,mBAAG,MAAH,GAASC,EAA1B;IAAA,IACGC,mBAAmB,UACtBH,OADsB,EAFpB,QAEoB,CADtB;;IAGJF,eAAe,CAAC;MACZC,OAAO,SADK;MAEZK,IAAI,EAAEH,WAFM;MAGZE,mBAAmB;IAHP,CAAD,CAAf;EAKH,CAda,EAed,CAACL,eAAD,CAfc,CAAlB;AAiBH,CAnBM","names":["useCallback","useAddNotificationContext","useNotify","addNotification","message","options","messageType","_a","notificationOptions","type"],"sources":["/var/www/a1boots/node_modules/ra-core/src/notification/useNotify.ts"],"sourcesContent":["import { useCallback, ReactNode } from 'react';\n\nimport { useAddNotificationContext } from './useAddNotificationContext';\nimport { NotificationType, NotificationOptions } from './types';\n\n/**\n * Hook for Notification Side Effect\n *\n * @example\n *\n * const notify = useNotify();\n * // simple message (info level)\n * notify('Level complete');\n * // specify level\n * notify('A problem occurred', { type: 'error' })\n * // pass arguments to the translation function\n * notify('Deleted %{count} elements', { type: 'info', messageArgs: { smart_count: 23 } })\n * // show the action as undoable in the notification\n * notify('Post renamed', { type: 'info', undoable: true })\n */\nexport const useNotify = () => {\n    const addNotification = useAddNotificationContext();\n    return useCallback(\n        (\n            message: string | ReactNode,\n            options: NotificationOptions & { type?: NotificationType } = {}\n        ) => {\n            const {\n                type: messageType = 'info',\n                ...notificationOptions\n            } = options;\n            addNotification({\n                message,\n                type: messageType,\n                notificationOptions,\n            });\n        },\n        [addNotification]\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { cloneElement, createElement, isValidElement, useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext } from 'ra-core';\nimport { Table } from '@mui/material';\nimport clsx from 'clsx';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\nimport { DatagridHeader } from './DatagridHeader';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport DatagridContextProvider from './DatagridContextProvider';\nimport { DatagridClasses, DatagridRoot } from './useDatagridStyles';\nimport { BulkActionsToolbar } from '../BulkActionsToolbar';\nimport { BulkDeleteButton } from '../../button';\nimport { ListNoResults } from '../ListNoResults';\nvar defaultBulkActionButtons = React.createElement(BulkDeleteButton, null);\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - body\n *  - bulkActionButtons\n *  - children\n *  - empty\n *  - expand\n *  - header\n *  - hover\n *  - isRowExpandable\n *  - isRowSelectable\n *  - optimized\n *  - rowStyle\n *  - rowClick\n *  - size\n *  - sx\n *\n * @example // Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = () => (\n *     <List>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example // Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example // Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const sort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { data, total, isLoading } = useGetList(\n *         'posts',\n *         { pagination: { page: 1, perPage: 10 }, sort: sort }\n *     );\n *\n *     return (\n *         <Datagrid\n *             data={data}\n *             total={total}\n *             isLoading={isLoading}\n *             sort={sort}\n *             selectedIds={[]}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\n\nexport var Datagrid = React.forwardRef(function (props, ref) {\n  var _a = props.optimized,\n      optimized = _a === void 0 ? false : _a,\n      _b = props.body,\n      body = _b === void 0 ? optimized ? PureDatagridBody : DatagridBody : _b,\n      _c = props.header,\n      header = _c === void 0 ? DatagridHeader : _c,\n      children = props.children,\n      className = props.className,\n      _d = props.empty,\n      empty = _d === void 0 ? DefaultEmpty : _d,\n      expand = props.expand,\n      _e = props.bulkActionButtons,\n      bulkActionButtons = _e === void 0 ? defaultBulkActionButtons : _e,\n      hover = props.hover,\n      isRowSelectable = props.isRowSelectable,\n      isRowExpandable = props.isRowExpandable,\n      resource = props.resource,\n      rowClick = props.rowClick,\n      rowStyle = props.rowStyle,\n      _f = props.size,\n      size = _f === void 0 ? 'small' : _f,\n      sx = props.sx,\n      _g = props.expandSingle,\n      expandSingle = _g === void 0 ? false : _g,\n      rest = __rest(props, [\"optimized\", \"body\", \"header\", \"children\", \"className\", \"empty\", \"expand\", \"bulkActionButtons\", \"hover\", \"isRowSelectable\", \"isRowExpandable\", \"resource\", \"rowClick\", \"rowStyle\", \"size\", \"sx\", \"expandSingle\"]);\n\n  var _h = useListContext(props),\n      sort = _h.sort,\n      data = _h.data,\n      isLoading = _h.isLoading,\n      onSelect = _h.onSelect,\n      onToggleItem = _h.onToggleItem,\n      selectedIds = _h.selectedIds,\n      setSort = _h.setSort,\n      total = _h.total;\n\n  var hasBulkActions = !!bulkActionButtons !== false;\n  var contextValue = useMemo(function () {\n    return {\n      isRowExpandable: isRowExpandable,\n      expandSingle: expandSingle\n    };\n  }, [isRowExpandable, expandSingle]);\n  var lastSelected = useRef(null);\n  useEffect(function () {\n    if (!selectedIds || selectedIds.length === 0) {\n      lastSelected.current = null;\n    }\n  }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n  // we manage row selection at the datagrid level to allow shift+click to select an array of rows\n\n  var handleToggleItem = useCallback(function (id, event) {\n    var ids = data.map(function (record) {\n      return record.id;\n    });\n    var lastSelectedIndex = ids.indexOf(lastSelected.current);\n    lastSelected.current = event.target.checked ? id : null;\n\n    if (event.shiftKey && lastSelectedIndex !== -1) {\n      var index = ids.indexOf(id);\n      var idsBetweenSelections = ids.slice(Math.min(lastSelectedIndex, index), Math.max(lastSelectedIndex, index) + 1);\n      var newSelectedIds = event.target.checked ? union(selectedIds, idsBetweenSelections) : difference(selectedIds, idsBetweenSelections);\n      onSelect(isRowSelectable ? newSelectedIds.filter(function (id) {\n        return isRowSelectable(data.find(function (record) {\n          return record.id === id;\n        }));\n      }) : newSelectedIds);\n    } else {\n      onToggleItem(id);\n    }\n  }, [data, isRowSelectable, onSelect, onToggleItem, selectedIds]);\n\n  if (isLoading === true) {\n    return React.createElement(DatagridLoading, {\n      className: className,\n      expand: expand,\n      hasBulkActions: hasBulkActions,\n      nbChildren: React.Children.count(children),\n      size: size\n    });\n  }\n  /**\n   * Once loaded, the data for the list may be empty. Instead of\n   * displaying the table header with zero data rows,\n   * the Datagrid displays the empty component.\n   */\n\n\n  if (data == null || data.length === 0 || total === 0) {\n    if (empty) {\n      return empty;\n    }\n\n    return null;\n  }\n  /**\n   * After the initial load, if the data for the list isn't empty,\n   * and even if the data is refreshing (e.g. after a filter change),\n   * the datagrid displays the current data.\n   */\n\n\n  return React.createElement(DatagridContextProvider, {\n    value: contextValue\n  }, React.createElement(DatagridRoot, {\n    sx: sx,\n    className: clsx(DatagridClasses.root, className)\n  }, bulkActionButtons !== false ? React.createElement(BulkActionsToolbar, {\n    selectedIds: selectedIds\n  }, isValidElement(bulkActionButtons) ? bulkActionButtons : defaultBulkActionButtons) : null, React.createElement(\"div\", {\n    className: DatagridClasses.tableWrapper\n  }, React.createElement(Table, __assign({\n    ref: ref,\n    className: DatagridClasses.table,\n    size: size\n  }, sanitizeRestProps(rest)), createOrCloneElement(header, {\n    children: children,\n    sort: sort,\n    data: data,\n    hasExpand: !!expand,\n    hasBulkActions: hasBulkActions,\n    isRowSelectable: isRowSelectable,\n    onSelect: onSelect,\n    resource: resource,\n    selectedIds: selectedIds,\n    setSort: setSort\n  }, children), createOrCloneElement(body, {\n    expand: expand,\n    rowClick: rowClick,\n    data: data,\n    hasBulkActions: hasBulkActions,\n    hover: hover,\n    onToggleItem: handleToggleItem,\n    resource: resource,\n    rowStyle: rowStyle,\n    selectedIds: selectedIds,\n    isRowSelectable: isRowSelectable\n  }, children)))));\n});\n\nvar createOrCloneElement = function createOrCloneElement(element, props, children) {\n  return isValidElement(element) ? cloneElement(element, props, children) : createElement(element, props, children);\n};\n\nDatagrid.propTypes = {\n  // @ts-ignore\n  body: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  // @ts-ignore-line\n  bulkActionButtons: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.arrayOf(PropTypes.any),\n  empty: PropTypes.element,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  // @ts-ignore\n  header: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hover: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  // @ts-ignore\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.bool]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  setSort: PropTypes.func,\n  total: PropTypes.number,\n  isRowSelectable: PropTypes.func,\n  isRowExpandable: PropTypes.func,\n  expandSingle: PropTypes.bool\n};\nvar injectedProps = ['isRequired', 'setFilter', 'setPagination', 'limitChoicesToValue', 'translateChoice', // Datagrid may be used as an alternative to SelectInput\n'field', 'fieldState', 'formState'];\n\nvar sanitizeRestProps = function sanitizeRestProps(props) {\n  return Object.keys(sanitizeListRestProps(props)).filter(function (propName) {\n    return !injectedProps.includes(propName);\n  }).reduce(function (acc, key) {\n    var _a;\n\n    return __assign(__assign({}, acc), (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};\n\nDatagrid.displayName = 'Datagrid';\nvar DefaultEmpty = React.createElement(ListNoResults, null);","map":{"version":3,"mappings":"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","names":["React","cloneElement","createElement","isValidElement","useCallback","useRef","useEffect","useMemo","PropTypes","sanitizeListRestProps","useListContext","Table","clsx","union","difference","DatagridHeader","DatagridLoading","DatagridBody","PureDatagridBody","DatagridContextProvider","DatagridClasses","DatagridRoot","BulkActionsToolbar","BulkDeleteButton","ListNoResults","defaultBulkActionButtons","Datagrid","forwardRef","props","ref","_a","_b","body","optimized","_c","header","children","className","_d","empty","DefaultEmpty","expand","_e","bulkActionButtons","hover","isRowSelectable","isRowExpandable","resource","rowClick","rowStyle","_f","size","sx","_g","expandSingle","rest","sort","data","isLoading","onSelect","onToggleItem","selectedIds","setSort","total","hasBulkActions","contextValue","lastSelected","length","current","JSON","stringify","handleToggleItem","id","event","ids","map","lastSelectedIndex","indexOf","target","checked","shiftKey","index","idsBetweenSelections","slice","Math","min","max","newSelectedIds","filter","find","nbChildren","Children","count","value","root","tableWrapper","__assign","table","sanitizeRestProps","createOrCloneElement","hasExpand","element","propTypes","oneOfType","elementType","bool","node","isRequired","string","exact","field","order","arrayOf","any","func","number","injectedProps","keys","includes","propName","reduce","acc","key","displayName"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/datagrid/Datagrid.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    cloneElement,\n    createElement,\n    isValidElement,\n    useCallback,\n    useRef,\n    useEffect,\n    FC,\n    ComponentType,\n    ReactElement,\n    useMemo,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    sanitizeListRestProps,\n    useListContext,\n    Identifier,\n    RaRecord,\n    SortPayload,\n} from 'ra-core';\nimport { Table, TableProps } from '@mui/material';\nimport clsx from 'clsx';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\n\nimport { DatagridHeader } from './DatagridHeader';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport { RowClickFunction } from './DatagridRow';\nimport DatagridContextProvider from './DatagridContextProvider';\nimport { DatagridClasses, DatagridRoot } from './useDatagridStyles';\nimport { BulkActionsToolbar } from '../BulkActionsToolbar';\nimport { BulkDeleteButton } from '../../button';\nimport { ListNoResults } from '../ListNoResults';\n\nconst defaultBulkActionButtons = <BulkDeleteButton />;\n\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - body\n *  - bulkActionButtons\n *  - children\n *  - empty\n *  - expand\n *  - header\n *  - hover\n *  - isRowExpandable\n *  - isRowSelectable\n *  - optimized\n *  - rowStyle\n *  - rowClick\n *  - size\n *  - sx\n *\n * @example // Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = () => (\n *     <List>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example // Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example // Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const sort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { data, total, isLoading } = useGetList(\n *         'posts',\n *         { pagination: { page: 1, perPage: 10 }, sort: sort }\n *     );\n *\n *     return (\n *         <Datagrid\n *             data={data}\n *             total={total}\n *             isLoading={isLoading}\n *             sort={sort}\n *             selectedIds={[]}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\nexport const Datagrid: FC<DatagridProps> = React.forwardRef((props, ref) => {\n    const {\n        optimized = false,\n        body = optimized ? PureDatagridBody : DatagridBody,\n        header = DatagridHeader,\n        children,\n        className,\n        empty = DefaultEmpty,\n        expand,\n        bulkActionButtons = defaultBulkActionButtons,\n        hover,\n        isRowSelectable,\n        isRowExpandable,\n        resource,\n        rowClick,\n        rowStyle,\n        size = 'small',\n        sx,\n        expandSingle = false,\n        ...rest\n    } = props;\n\n    const {\n        sort,\n        data,\n        isLoading,\n        onSelect,\n        onToggleItem,\n        selectedIds,\n        setSort,\n        total,\n    } = useListContext(props);\n\n    const hasBulkActions = !!bulkActionButtons !== false;\n\n    const contextValue = useMemo(() => ({ isRowExpandable, expandSingle }), [\n        isRowExpandable,\n        expandSingle,\n    ]);\n\n    const lastSelected = useRef(null);\n\n    useEffect(() => {\n        if (!selectedIds || selectedIds.length === 0) {\n            lastSelected.current = null;\n        }\n    }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // we manage row selection at the datagrid level to allow shift+click to select an array of rows\n    const handleToggleItem = useCallback(\n        (id, event) => {\n            const ids = data.map(record => record.id);\n            const lastSelectedIndex = ids.indexOf(lastSelected.current);\n            lastSelected.current = event.target.checked ? id : null;\n\n            if (event.shiftKey && lastSelectedIndex !== -1) {\n                const index = ids.indexOf(id);\n                const idsBetweenSelections = ids.slice(\n                    Math.min(lastSelectedIndex, index),\n                    Math.max(lastSelectedIndex, index) + 1\n                );\n\n                const newSelectedIds = event.target.checked\n                    ? union(selectedIds, idsBetweenSelections)\n                    : difference(selectedIds, idsBetweenSelections);\n\n                onSelect(\n                    isRowSelectable\n                        ? newSelectedIds.filter((id: Identifier) =>\n                              isRowSelectable(\n                                  data.find(record => record.id === id)\n                              )\n                          )\n                        : newSelectedIds\n                );\n            } else {\n                onToggleItem(id);\n            }\n        },\n        [data, isRowSelectable, onSelect, onToggleItem, selectedIds]\n    );\n\n    if (isLoading === true) {\n        return (\n            <DatagridLoading\n                className={className}\n                expand={expand}\n                hasBulkActions={hasBulkActions}\n                nbChildren={React.Children.count(children)}\n                size={size}\n            />\n        );\n    }\n\n    /**\n     * Once loaded, the data for the list may be empty. Instead of\n     * displaying the table header with zero data rows,\n     * the Datagrid displays the empty component.\n     */\n    if (data == null || data.length === 0 || total === 0) {\n        if (empty) {\n            return empty;\n        }\n\n        return null;\n    }\n\n    /**\n     * After the initial load, if the data for the list isn't empty,\n     * and even if the data is refreshing (e.g. after a filter change),\n     * the datagrid displays the current data.\n     */\n    return (\n        <DatagridContextProvider value={contextValue}>\n            <DatagridRoot\n                sx={sx}\n                className={clsx(DatagridClasses.root, className)}\n            >\n                {bulkActionButtons !== false ? (\n                    <BulkActionsToolbar selectedIds={selectedIds}>\n                        {isValidElement(bulkActionButtons)\n                            ? bulkActionButtons\n                            : defaultBulkActionButtons}\n                    </BulkActionsToolbar>\n                ) : null}\n                <div className={DatagridClasses.tableWrapper}>\n                    <Table\n                        ref={ref}\n                        className={DatagridClasses.table}\n                        size={size}\n                        {...sanitizeRestProps(rest)}\n                    >\n                        {createOrCloneElement(\n                            header,\n                            {\n                                children,\n                                sort,\n                                data,\n                                hasExpand: !!expand,\n                                hasBulkActions,\n                                isRowSelectable,\n                                onSelect,\n                                resource,\n                                selectedIds,\n                                setSort,\n                            },\n                            children\n                        )}\n                        {createOrCloneElement(\n                            body,\n                            {\n                                expand,\n                                rowClick,\n                                data,\n                                hasBulkActions,\n                                hover,\n                                onToggleItem: handleToggleItem,\n                                resource,\n                                rowStyle,\n                                selectedIds,\n                                isRowSelectable,\n                            },\n                            children\n                        )}\n                    </Table>\n                </div>\n            </DatagridRoot>\n        </DatagridContextProvider>\n    );\n});\n\nconst createOrCloneElement = (element, props, children) =>\n    isValidElement(element)\n        ? cloneElement(element, props, children)\n        : createElement(element, props, children);\n\nDatagrid.propTypes = {\n    // @ts-ignore\n    body: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    // @ts-ignore-line\n    bulkActionButtons: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.arrayOf(PropTypes.any),\n    empty: PropTypes.element,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    // @ts-ignore\n    header: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hover: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    // @ts-ignore\n    rowClick: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.bool,\n    ]),\n    rowStyle: PropTypes.func,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    setSort: PropTypes.func,\n    total: PropTypes.number,\n    isRowSelectable: PropTypes.func,\n    isRowExpandable: PropTypes.func,\n    expandSingle: PropTypes.bool,\n};\n\nexport interface DatagridProps<RecordType extends RaRecord = any>\n    extends Omit<TableProps, 'size' | 'classes' | 'onSelect'> {\n    body?: ReactElement | ComponentType;\n    className?: string;\n    bulkActionButtons?: ReactElement | false;\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RecordType;\n              resource: string;\n          }>;\n    header?: ReactElement | ComponentType;\n    hover?: boolean;\n    empty?: ReactElement;\n    isRowSelectable?: (record: RecordType) => boolean;\n    isRowExpandable?: (record: RecordType) => boolean;\n    optimized?: boolean;\n    rowClick?: string | RowClickFunction | false;\n    rowStyle?: (record: RecordType, index: number) => any;\n    size?: 'medium' | 'small';\n    // can be injected when using the component without context\n    sort?: SortPayload;\n    data?: RecordType[];\n    isLoading?: boolean;\n    onSelect?: (ids: Identifier[]) => void;\n    onToggleItem?: (id: Identifier) => void;\n    setSort?: (sort: SortPayload) => void;\n    selectedIds?: Identifier[];\n    expandSingle?: boolean;\n    total?: number;\n}\n\nconst injectedProps = [\n    'isRequired',\n    'setFilter',\n    'setPagination',\n    'limitChoicesToValue',\n    'translateChoice',\n    // Datagrid may be used as an alternative to SelectInput\n    'field',\n    'fieldState',\n    'formState',\n];\n\nconst sanitizeRestProps = props =>\n    Object.keys(sanitizeListRestProps(props))\n        .filter(propName => !injectedProps.includes(propName))\n        .reduce((acc, key) => ({ ...acc, [key]: props[key] }), {});\n\nDatagrid.displayName = 'Datagrid';\n\nconst DefaultEmpty = <ListNoResults />;\n"]},"metadata":{},"sourceType":"module"}
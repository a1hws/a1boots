{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { Link } from '@mui/material';\n/**\n * Render a link to a file based on a path contained in a record field\n *\n * @example\n * import { FileField } from 'react-admin';\n *\n * <FileField source=\"url\" title=\"title\" />\n *\n * // renders the record { id: 123, url: 'doc.pdf', title: 'Presentation' } as\n * <div>\n *     <a href=\"doc.pdf\" title=\"Presentation\">Presentation</a>\n * </div>\n */\n\nexport var FileField = function (props) {\n  var _a;\n\n  var className = props.className,\n      emptyText = props.emptyText,\n      source = props.source,\n      title = props.title,\n      src = props.src,\n      target = props.target,\n      download = props.download,\n      ping = props.ping,\n      rel = props.rel,\n      rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"title\", \"src\", \"target\", \"download\", \"ping\", \"rel\"]);\n\n  var record = useRecordContext(props);\n  var sourceValue = get(record, source);\n  var translate = useTranslate();\n\n  if (!sourceValue) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : React.createElement(Root, __assign({\n      className: className\n    }, sanitizeFieldRestProps(rest)));\n  }\n\n  if (Array.isArray(sourceValue)) {\n    return React.createElement(StyledList, __assign({\n      className: className\n    }, sanitizeFieldRestProps(rest)), sourceValue.map(function (file, index) {\n      var fileTitleValue = get(file, title) || title;\n      var srcValue = get(file, src) || title;\n      return React.createElement(\"li\", {\n        key: index\n      }, React.createElement(Link, {\n        href: srcValue,\n        title: fileTitleValue,\n        target: target,\n        download: download,\n        ping: ping,\n        rel: rel,\n        variant: \"body2\"\n      }, fileTitleValue));\n    }));\n  }\n\n  var titleValue = ((_a = get(record, title)) === null || _a === void 0 ? void 0 : _a.toString()) || title;\n  return React.createElement(Root, __assign({\n    className: className\n  }, sanitizeFieldRestProps(rest)), React.createElement(Link, {\n    href: sourceValue === null || sourceValue === void 0 ? void 0 : sourceValue.toString(),\n    title: titleValue,\n    target: target,\n    download: download,\n    ping: ping,\n    rel: rel,\n    variant: \"body2\"\n  }, titleValue));\n};\nFileField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  src: PropTypes.string,\n  title: PropTypes.string,\n  target: PropTypes.string,\n  download: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  ping: PropTypes.string,\n  rel: PropTypes.string\n});\nvar PREFIX = 'RaFileField';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({\n  display: 'inline-block'\n});\nvar StyledList = styled('ul')({\n  display: 'inline-block'\n});","map":{"version":3,"mappings":"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","names":["React","styled","PropTypes","get","Typography","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","Link","FileField","props","emptyText","source","title","src","target","download","ping","rel","rest","record","sourceValue","translate","__assign","component","variant","className","_","Root","Array","isArray","StyledList","map","file","index","fileTitleValue","srcValue","key","href","titleValue","_a","toString","propTypes","string","oneOfType","bool","PREFIX","name","overridesResolver","styles","root","display"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/FileField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { SxProps } from '@mui/system';\nimport { Link } from '@mui/material';\n\n/**\n * Render a link to a file based on a path contained in a record field\n *\n * @example\n * import { FileField } from 'react-admin';\n *\n * <FileField source=\"url\" title=\"title\" />\n *\n * // renders the record { id: 123, url: 'doc.pdf', title: 'Presentation' } as\n * <div>\n *     <a href=\"doc.pdf\" title=\"Presentation\">Presentation</a>\n * </div>\n */\nexport const FileField = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: FileFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        source,\n        title,\n        src,\n        target,\n        download,\n        ping,\n        rel,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const sourceValue = get(record, source);\n    const translate = useTranslate();\n\n    if (!sourceValue) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : (\n            <Root className={className} {...sanitizeFieldRestProps(rest)} />\n        );\n    }\n\n    if (Array.isArray(sourceValue)) {\n        return (\n            <StyledList className={className} {...sanitizeFieldRestProps(rest)}>\n                {sourceValue.map((file, index) => {\n                    const fileTitleValue = get(file, title) || title;\n                    const srcValue = get(file, src) || title;\n\n                    return (\n                        <li key={index}>\n                            <Link\n                                href={srcValue}\n                                title={fileTitleValue}\n                                target={target}\n                                download={download}\n                                ping={ping}\n                                rel={rel}\n                                variant=\"body2\"\n                            >\n                                {fileTitleValue}\n                            </Link>\n                        </li>\n                    );\n                })}\n            </StyledList>\n        );\n    }\n\n    const titleValue = get(record, title)?.toString() || title;\n\n    return (\n        <Root className={className} {...sanitizeFieldRestProps(rest)}>\n            <Link\n                href={sourceValue?.toString()}\n                title={titleValue}\n                target={target}\n                download={download}\n                ping={ping}\n                rel={rel}\n                variant=\"body2\"\n            >\n                {titleValue}\n            </Link>\n        </Root>\n    );\n};\n\nexport interface FileFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType> {\n    src?: string;\n    title?: string;\n    target?: string;\n    download?: boolean | string;\n    ping?: string;\n    rel?: string;\n    sx?: SxProps;\n}\n\nFileField.propTypes = {\n    ...fieldPropTypes,\n    src: PropTypes.string,\n    title: PropTypes.string,\n    target: PropTypes.string,\n    download: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    ping: PropTypes.string,\n    rel: PropTypes.string,\n};\n\nconst PREFIX = 'RaFileField';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    display: 'inline-block',\n});\n\nconst StyledList = styled('ul')({\n    display: 'inline-block',\n});\n"]},"metadata":{},"sourceType":"module"}
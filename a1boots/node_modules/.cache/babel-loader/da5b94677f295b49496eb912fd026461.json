{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport { EditBase, InferredElement, useResourceContext, useEditContext, getElementsFromRecords } from 'ra-core';\nimport { EditView } from './EditView';\nimport { editFieldTypes } from './editFieldTypes';\nexport var EditGuesser = function (props) {\n  var resource = props.resource,\n      id = props.id,\n      mutationMode = props.mutationMode,\n      mutationOptions = props.mutationOptions,\n      queryOptions = props.queryOptions,\n      redirect = props.redirect,\n      transform = props.transform,\n      disableAuthentication = props.disableAuthentication,\n      rest = __rest(props, [\"resource\", \"id\", \"mutationMode\", \"mutationOptions\", \"queryOptions\", \"redirect\", \"transform\", \"disableAuthentication\"]);\n\n  return React.createElement(EditBase, {\n    resource: resource,\n    id: id,\n    mutationMode: mutationMode,\n    mutationOptions: mutationOptions,\n    queryOptions: queryOptions,\n    redirect: redirect,\n    transform: transform,\n    disableAuthentication: disableAuthentication\n  }, React.createElement(EditViewGuesser, __assign({}, rest)));\n};\n\nvar EditViewGuesser = function (props) {\n  var resource = useResourceContext(props);\n  var record = useEditContext().record;\n\n  var _a = useState(null),\n      child = _a[0],\n      setChild = _a[1];\n\n  useEffect(function () {\n    setChild(null);\n  }, [resource]);\n  useEffect(function () {\n    if (record && !child) {\n      var inferredElements = getElementsFromRecords([record], editFieldTypes);\n      var inferredChild = new InferredElement(editFieldTypes.form, null, inferredElements);\n      setChild(inferredChild.getElement());\n      if (process.env.NODE_ENV === 'production') return;\n      var representation = inferredChild.getRepresentation();\n      var components = ['Edit'].concat(Array.from(new Set(Array.from(representation.matchAll(/<([^/\\s>]+)/g)).map(function (match) {\n        return match[1];\n      }).filter(function (component) {\n        return component !== 'span';\n      })))).sort(); // eslint-disable-next-line no-console\n\n      console.log(\"Guessed Edit:\\n\\nimport { \".concat(components.join(', '), \" } from 'react-admin';\\n\\nexport const \").concat(inflection.capitalize(inflection.singularize(resource)), \"Edit = () => (\\n    <Edit>\\n\").concat(representation, \"\\n    </Edit>\\n);\"));\n    }\n  }, [record, child, resource]);\n  return React.createElement(EditView, __assign({}, props), child);\n};\n\nEditViewGuesser.propTypes = EditView.propTypes;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACIC,QADJ,EAEIC,eAFJ,EAGIC,kBAHJ,EAIIC,cAJJ,EAKIC,sBALJ,QAOO,SAPP;AAUA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,IAAMC,WAAW,GAAG,UACvBC,KADuB,EACK;EAGxB,YAAQ,GASRA,KAAK,SATL;EAAA,IACAC,EAAE,GAQFD,KAAK,GATL;EAAA,IAEAE,YAAY,GAOZF,KAAK,aATL;EAAA,IAGAG,eAAe,GAMfH,KAAK,gBATL;EAAA,IAIAI,YAAY,GAKZJ,KAAK,aATL;EAAA,IAKAK,QAAQ,GAIRL,KAAK,SATL;EAAA,IAMAM,SAAS,GAGTN,KAAK,UATL;EAAA,IAOAO,qBAAqB,GAErBP,KAAK,sBATL;EAAA,IAQGQ,IAAI,UACPR,KADO,EATL,uHASK,CARP;;EAUJ,OACIZ,oBAACI,QAAD,EAAS;IACLiB,QAAQ,EAAEA,QADL;IAELR,EAAE,EAAEA,EAFC;IAGLC,YAAY,EAAEA,YAHT;IAILC,eAAe,EAAEA,eAJZ;IAKLC,YAAY,EAAEA,YALT;IAMLC,QAAQ,EAAEA,QANL;IAOLC,SAAS,EAAEA,SAPN;IAQLC,qBAAqB,EAAEA;EARlB,CAAT,EAUInB,oBAACsB,eAAD,EAAgBC,aAAKH,IAAL,CAAhB,CAVJ,CADJ;AAcH,CA5BM;;AA8BP,IAAME,eAAe,GAAG,iBAAK;EACzB,IAAMD,QAAQ,GAAGf,kBAAkB,CAACM,KAAD,CAAnC;EACQ,UAAM,GAAKL,cAAc,GAAEiB,MAA3B;;EACF,SAAoBtB,QAAQ,CAAC,IAAD,CAA5B;EAAA,IAACuB,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB;;EAENzB,SAAS,CAAC;IACNyB,QAAQ,CAAC,IAAD,CAAR;EACH,CAFQ,EAEN,CAACL,QAAD,CAFM,CAAT;EAIApB,SAAS,CAAC;IACN,IAAIuB,MAAM,IAAI,CAACC,KAAf,EAAsB;MAClB,IAAME,gBAAgB,GAAGnB,sBAAsB,CAC3C,CAACgB,MAAD,CAD2C,EAE3Cd,cAF2C,CAA/C;MAIA,IAAMkB,aAAa,GAAG,IAAIvB,eAAJ,CAClBK,cAAc,CAACmB,IADG,EAElB,IAFkB,EAGlBF,gBAHkB,CAAtB;MAKAD,QAAQ,CAACE,aAAa,CAACE,UAAd,EAAD,CAAR;MAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MAE3C,IAAMC,cAAc,GAAGN,aAAa,CAACO,iBAAd,EAAvB;MAEA,IAAMC,UAAU,GAAG,CAAC,MAAD,EACdC,MADc,CAEXC,KAAK,CAACC,IAAN,CACI,IAAIC,GAAJ,CACIF,KAAK,CAACC,IAAN,CAAWL,cAAc,CAACO,QAAf,CAAwB,cAAxB,CAAX,EACKC,GADL,CACS,iBAAK;QAAI,YAAK,CAAC,CAAD,CAAL;MAAQ,CAD1B,EAEKC,MAFL,CAEY,qBAAS;QAAI,gBAAS,KAAK,MAAd;MAAoB,CAF7C,CADJ,CADJ,CAFW,EAUdC,IAVc,EAAnB,CAhBkB,CA4BlB;;MACAC,OAAO,CAACC,GAAR,CACI,oCAELV,UAAU,CAACW,IAAX,CAAgB,IAAhB,CAFK,EAEgB,yCAFhB,EAEgBV,MAFhB,CAIDlC,UAAU,CAAC6C,UAAX,CACK7C,UAAU,CAAC8C,WAAX,CAAuB5B,QAAvB,CADL,CAJC,EAMC,8BAND,EAMCgB,MAND,CAQdH,cARc,EAQA,mBARA,CADJ;IAaH;EACJ,CA5CQ,EA4CN,CAACV,MAAD,EAASC,KAAT,EAAgBJ,QAAhB,CA5CM,CAAT;EA8CA,OAAOrB,oBAACS,QAAD,EAASc,aAAKX,KAAL,CAAT,EAAsBa,KAAtB,CAAP;AACH,CAxDD;;AA0DAH,eAAe,CAAC4B,SAAhB,GAA4BzC,QAAQ,CAACyC,SAArC","names":["React","useEffect","useState","inflection","EditBase","InferredElement","useResourceContext","useEditContext","getElementsFromRecords","EditView","editFieldTypes","EditGuesser","props","id","mutationMode","mutationOptions","queryOptions","redirect","transform","disableAuthentication","rest","resource","EditViewGuesser","__assign","record","child","setChild","inferredElements","inferredChild","form","getElement","process","env","NODE_ENV","representation","getRepresentation","components","concat","Array","from","Set","matchAll","map","filter","sort","console","log","join","capitalize","singularize","propTypes"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/detail/EditGuesser.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport inflection from 'inflection';\nimport {\n    EditBase,\n    InferredElement,\n    useResourceContext,\n    useEditContext,\n    getElementsFromRecords,\n    RaRecord,\n} from 'ra-core';\n\nimport { EditProps } from '../types';\nimport { EditView } from './EditView';\nimport { editFieldTypes } from './editFieldTypes';\n\nexport const EditGuesser = <RecordType extends RaRecord = RaRecord>(\n    props: EditProps<RecordType>\n) => {\n    const {\n        resource,\n        id,\n        mutationMode,\n        mutationOptions,\n        queryOptions,\n        redirect,\n        transform,\n        disableAuthentication,\n        ...rest\n    } = props;\n    return (\n        <EditBase<RecordType>\n            resource={resource}\n            id={id}\n            mutationMode={mutationMode}\n            mutationOptions={mutationOptions}\n            queryOptions={queryOptions}\n            redirect={redirect}\n            transform={transform}\n            disableAuthentication={disableAuthentication}\n        >\n            <EditViewGuesser {...rest} />\n        </EditBase>\n    );\n};\n\nconst EditViewGuesser = props => {\n    const resource = useResourceContext(props);\n    const { record } = useEditContext();\n    const [child, setChild] = useState(null);\n\n    useEffect(() => {\n        setChild(null);\n    }, [resource]);\n\n    useEffect(() => {\n        if (record && !child) {\n            const inferredElements = getElementsFromRecords(\n                [record],\n                editFieldTypes\n            );\n            const inferredChild = new InferredElement(\n                editFieldTypes.form,\n                null,\n                inferredElements\n            );\n            setChild(inferredChild.getElement());\n\n            if (process.env.NODE_ENV === 'production') return;\n\n            const representation = inferredChild.getRepresentation();\n\n            const components = ['Edit']\n                .concat(\n                    Array.from(\n                        new Set(\n                            Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                                .map(match => match[1])\n                                .filter(component => component !== 'span')\n                        )\n                    )\n                )\n                .sort();\n\n            // eslint-disable-next-line no-console\n            console.log(\n                `Guessed Edit:\n\nimport { ${components.join(', ')} } from 'react-admin';\n\nexport const ${inflection.capitalize(\n                    inflection.singularize(resource)\n                )}Edit = () => (\n    <Edit>\n${representation}\n    </Edit>\n);`\n            );\n        }\n    }, [record, child, resource]);\n\n    return <EditView {...props}>{child}</EditView>;\n};\n\nEditViewGuesser.propTypes = EditView.propTypes;\n"]},"metadata":{},"sourceType":"module"}
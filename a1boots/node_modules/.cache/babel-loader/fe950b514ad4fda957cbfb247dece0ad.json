{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useEditContext, useResourceDefinition } from 'ra-core';\nimport { ShowButton } from '../button';\nimport TopToolbar from '../layout/TopToolbar';\n/**\n * Action Toolbar for the Edit view\n *\n * Internal component. If you want to add or remove actions for an Edit view,\n * write your own EditActions Component. Then, in the <Edit> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, EditButton, Edit } from 'react-admin';\n *\n *     const PostEditActions = () => (\n *         <TopToolbar>\n *             <EditButton />\n *             // Add your custom actions here\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostEdit = (props) => (\n *         <Edit actions={<PostEditActions />} {...props}>\n *             ...\n *         </Edit>\n *     );\n */\n\nexport var EditActions = function EditActions(_a) {\n  var className = _a.className,\n      rest = __rest(_a, [\"className\"]);\n\n  var record = useEditContext(rest).record;\n  var hasShow = useResourceDefinition(rest).hasShow;\n  return React.createElement(TopToolbar, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), hasShow && React.createElement(ShowButton, {\n    record: record\n  }));\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var _b = _a.hasCreate,\n      hasCreate = _b === void 0 ? null : _b,\n      _c = _a.hasEdit,\n      hasEdit = _c === void 0 ? null : _c,\n      _d = _a.hasShow,\n      hasShow = _d === void 0 ? null : _d,\n      _e = _a.hasList,\n      hasList = _e === void 0 ? null : _e,\n      rest = __rest(_a, [\"hasCreate\", \"hasEdit\", \"hasShow\", \"hasList\"]);\n\n  return rest;\n};\n\nEditActions.propTypes = {\n  className: PropTypes.string,\n  data: PropTypes.object,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  resource: PropTypes.string\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAAmBC,cAAnB,EAAmCC,qBAAnC,QAAgE,SAAhE;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAyC;EAAtC,aAAS,eAAT;EAAA,IAAcC,IAAI,cAApB,aAAoB,CAAlB;;EAClB,UAAM,GAAKN,cAAc,CAACM,IAAD,CAAd,CAAoBC,MAA/B;EACA,WAAO,GAAKN,qBAAqB,CAACK,IAAD,CAArB,CAA2BE,OAAvC;EAER,OACIV,oBAACK,UAAD,EAAWM;IAACC,SAAS,EAAEA;EAAZ,GAA2BC,iBAAiB,CAACL,IAAD,CAA5C,CAAX,EACKE,OAAO,IAAIV,oBAACI,UAAD,EAAW;IAACK,MAAM,EAAEA;EAAT,CAAX,CADhB,CADJ;AAKH,CATM;;AAWP,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAACN,EAAD,EAMzB;EALG;EAAA,aAAS,mBAAG,IAAH,GAAOO,EAAhB;EAAA,IACAC,eADA;EAAA,IACAC,OAAO,mBAAG,IAAH,GAAOD,EADd;EAAA,IAEAE,eAFA;EAAA,IAEAP,OAAO,mBAAG,IAAH,GAAOO,EAFd;EAAA,IAGAC,eAHA;EAAA,IAGAC,OAAO,mBAAG,IAAH,GAAOD,EAHd;EAAA,IAIGV,IAAI,cALgB,8CAKhB,CAJP;;EAKE;AAAI,CANV;;AAkBAF,WAAW,CAACc,SAAZ,GAAwB;EACpBR,SAAS,EAAEX,SAAS,CAACoB,MADD;EAEpBC,IAAI,EAAErB,SAAS,CAACsB,MAFI;EAGpBC,SAAS,EAAEvB,SAAS,CAACwB,IAHD;EAIpBT,OAAO,EAAEf,SAAS,CAACwB,IAJC;EAKpBf,OAAO,EAAET,SAAS,CAACwB,IALC;EAMpBN,OAAO,EAAElB,SAAS,CAACwB,IANC;EAOpBC,QAAQ,EAAEzB,SAAS,CAACoB;AAPA,CAAxB","names":["React","PropTypes","useEditContext","useResourceDefinition","ShowButton","TopToolbar","EditActions","_a","rest","record","hasShow","__assign","className","sanitizeRestProps","_b","_c","hasEdit","_d","_e","hasList","propTypes","string","data","object","hasCreate","bool","resource"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/detail/EditActions.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { RaRecord, useEditContext, useResourceDefinition } from 'ra-core';\nimport { ShowButton } from '../button';\nimport TopToolbar from '../layout/TopToolbar';\n\n/**\n * Action Toolbar for the Edit view\n *\n * Internal component. If you want to add or remove actions for an Edit view,\n * write your own EditActions Component. Then, in the <Edit> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, EditButton, Edit } from 'react-admin';\n *\n *     const PostEditActions = () => (\n *         <TopToolbar>\n *             <EditButton />\n *             // Add your custom actions here\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostEdit = (props) => (\n *         <Edit actions={<PostEditActions />} {...props}>\n *             ...\n *         </Edit>\n *     );\n */\nexport const EditActions = ({ className, ...rest }: EditActionsProps) => {\n    const { record } = useEditContext(rest);\n    const { hasShow } = useResourceDefinition(rest);\n\n    return (\n        <TopToolbar className={className} {...sanitizeRestProps(rest)}>\n            {hasShow && <ShowButton record={record} />}\n        </TopToolbar>\n    );\n};\n\nconst sanitizeRestProps = ({\n    hasCreate = null,\n    hasEdit = null,\n    hasShow = null,\n    hasList = null,\n    ...rest\n}) => rest;\n\nexport interface EditActionsProps {\n    className?: string;\n    data?: RaRecord;\n    hasCreate?: boolean;\n    hasEdit?: boolean;\n    hasList?: boolean;\n    hasShow?: boolean;\n    resource?: string;\n}\n\nEditActions.propTypes = {\n    className: PropTypes.string,\n    data: PropTypes.object,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    resource: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}
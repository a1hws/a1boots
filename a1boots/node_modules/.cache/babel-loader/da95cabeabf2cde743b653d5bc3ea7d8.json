{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\n\nvar callBound = require('call-bind/callBound');\n\nvar regexTester = require('safe-regex-test');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\n\nvar $trim = require('string.prototype.trim');\n\nvar Type = require('./Type'); // https://262.ecma-international.org/13.0/#sec-stringtonumber\n\n\nmodule.exports = function StringToNumber(argument) {\n  if (Type(argument) !== 'String') {\n    throw new $TypeError('Assertion failed: `argument` is not a String');\n  }\n\n  if (isBinary(argument)) {\n    return $Number($parseInteger($strSlice(argument, 2), 2));\n  }\n\n  if (isOctal(argument)) {\n    return $Number($parseInteger($strSlice(argument, 2), 8));\n  }\n\n  if (hasNonWS(argument) || isInvalidHexLiteral(argument)) {\n    return NaN;\n  }\n\n  var trimmed = $trim(argument);\n\n  if (trimmed !== argument) {\n    return StringToNumber(trimmed);\n  }\n\n  return $Number(argument);\n};","map":{"version":3,"names":["GetIntrinsic","require","$Number","$RegExp","$TypeError","$parseInteger","callBound","regexTester","$strSlice","isBinary","isOctal","isInvalidHexLiteral","nonWS","join","nonWSregex","hasNonWS","$trim","Type","module","exports","StringToNumber","argument","NaN","trimmed"],"sources":["/var/www/a1boots/node_modules/es-abstract/2022/StringToNumber.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\n\nvar callBound = require('call-bind/callBound');\nvar regexTester = require('safe-regex-test');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\n\nvar $trim = require('string.prototype.trim');\n\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/13.0/#sec-stringtonumber\n\nmodule.exports = function StringToNumber(argument) {\n\tif (Type(argument) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `argument` is not a String');\n\t}\n\tif (isBinary(argument)) {\n\t\treturn $Number($parseInteger($strSlice(argument, 2), 2));\n\t}\n\tif (isOctal(argument)) {\n\t\treturn $Number($parseInteger($strSlice(argument, 2), 8));\n\t}\n\tif (hasNonWS(argument) || isInvalidHexLiteral(argument)) {\n\t\treturn NaN;\n\t}\n\tvar trimmed = $trim(argument);\n\tif (trimmed !== argument) {\n\t\treturn StringToNumber(trimmed);\n\t}\n\treturn $Number(argument);\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,OAAO,GAAGF,YAAY,CAAC,UAAD,CAA1B;AACA,IAAIG,OAAO,GAAGH,YAAY,CAAC,UAAD,CAA1B;AACA,IAAII,UAAU,GAAGJ,YAAY,CAAC,aAAD,CAA7B;AACA,IAAIK,aAAa,GAAGL,YAAY,CAAC,YAAD,CAAhC;;AAEA,IAAIM,SAAS,GAAGL,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIM,WAAW,GAAGN,OAAO,CAAC,iBAAD,CAAzB;;AAEA,IAAIO,SAAS,GAAGF,SAAS,CAAC,wBAAD,CAAzB;AACA,IAAIG,QAAQ,GAAGF,WAAW,CAAC,YAAD,CAA1B;AACA,IAAIG,OAAO,GAAGH,WAAW,CAAC,aAAD,CAAzB;AACA,IAAII,mBAAmB,GAAGJ,WAAW,CAAC,oBAAD,CAArC;AACA,IAAIK,KAAK,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+BC,IAA/B,CAAoC,EAApC,CAAZ;AACA,IAAIC,UAAU,GAAG,IAAIX,OAAJ,CAAY,MAAMS,KAAN,GAAc,GAA1B,EAA+B,GAA/B,CAAjB;AACA,IAAIG,QAAQ,GAAGR,WAAW,CAACO,UAAD,CAA1B;;AAEA,IAAIE,KAAK,GAAGf,OAAO,CAAC,uBAAD,CAAnB;;AAEA,IAAIgB,IAAI,GAAGhB,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAiB,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;EAClD,IAAIJ,IAAI,CAACI,QAAD,CAAJ,KAAmB,QAAvB,EAAiC;IAChC,MAAM,IAAIjB,UAAJ,CAAe,8CAAf,CAAN;EACA;;EACD,IAAIK,QAAQ,CAACY,QAAD,CAAZ,EAAwB;IACvB,OAAOnB,OAAO,CAACG,aAAa,CAACG,SAAS,CAACa,QAAD,EAAW,CAAX,CAAV,EAAyB,CAAzB,CAAd,CAAd;EACA;;EACD,IAAIX,OAAO,CAACW,QAAD,CAAX,EAAuB;IACtB,OAAOnB,OAAO,CAACG,aAAa,CAACG,SAAS,CAACa,QAAD,EAAW,CAAX,CAAV,EAAyB,CAAzB,CAAd,CAAd;EACA;;EACD,IAAIN,QAAQ,CAACM,QAAD,CAAR,IAAsBV,mBAAmB,CAACU,QAAD,CAA7C,EAAyD;IACxD,OAAOC,GAAP;EACA;;EACD,IAAIC,OAAO,GAAGP,KAAK,CAACK,QAAD,CAAnB;;EACA,IAAIE,OAAO,KAAKF,QAAhB,EAA0B;IACzB,OAAOD,cAAc,CAACG,OAAD,CAArB;EACA;;EACD,OAAOrB,OAAO,CAACmB,QAAD,CAAd;AACA,CAlBD"},"metadata":{},"sourceType":"script"}
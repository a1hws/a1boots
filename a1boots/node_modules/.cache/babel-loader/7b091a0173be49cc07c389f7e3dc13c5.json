{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/**\n * Extend a dataProvider to execute callbacks before and after read and write calls.\n *\n * @param {DataProvider} dataProvider The dataProvider to wrap\n * @param {ResourceCallbacks[]} handlers An array of ResourceCallbacks\n *\n * @typedef {Object} ResourceCallbacks\n * @property {string} resource The resource name\n * @property {AfterCreate} [afterCreate] A callback executed after create\n * @property {AfterDelete} [afterDelete] A callback executed after delete\n * @property {AfterDeleteMany} [afterDeleteMany] A callback executed after deleteMany\n * @property {AfterGetList} [afterGetList] A callback executed after getList\n * @property {AfterGetMany} [afterGetMany] A callback executed after getMany\n * @property {AfterGetManyReference} [afterGetManyReference] A callback executed after getManyReference\n * @property {AfterGetOne} [afterGetOne] A callback executed after getOne\n * @property {AfterRead} [afterRead] A callback executed after read (getList, getMany, getManyReference, getOne)\n * @property {AfterSave} [afterSave] A callback executed after save (create, update, updateMany)\n * @property {AfterUpdate} [afterUpdate] A callback executed after update\n * @property {AfterUpdateMany} [afterUpdateMany] A callback executed after updateMany\n * @property {BeforeCreate} [beforeCreate] A callback executed before create\n * @property {BeforeDelete} [beforeDelete] A callback executed before delete\n * @property {BeforeDeleteMany} [beforeDeleteMany] A callback executed before deleteMany\n * @property {BeforeGetList} [beforeGetList] A callback executed before getList\n * @property {BeforeGetMany} [beforeGetMany] A callback executed before getMany\n * @property {BeforeGetManyReference} [beforeGetManyReference] A callback executed before getManyReference\n * @property {BeforeGetOne} [beforeGetOne] A callback executed before getOne\n * @property {BeforeSave} [beforeSave] A callback executed before save (create, update, updateMany)\n * @property {BeforeUpdate} [beforeUpdate] A callback executed before update\n * @property {BeforeUpdateMany} [beforeUpdateMany] A callback executed before updateMany\n *\n * Warnings:\n * - As queries issued in the callbacks are not done through react-query,\n *   any change in the data will not be automatically reflected in the UI.\n * - The callbacks are not executed in a transaction. In case of error,\n *   the backend may be left in an inconsistent state.\n * - When calling the API directly using fetch or another client,\n *   the callbacks will not be executed, leaving the backend in a possiblly inconsistent state.\n * - If a callback triggers the query it's listening to, this will lead to a infinite loop.\n *\n * @example\n *\n * const dataProvider = withLifecycleCallbacks(\n *   jsonServerProvider(\"http://localhost:3000\"),\n *   [\n *     {\n *       resource: \"posts\",\n *       afterRead: async (data, dataProvider) => {\n *         // rename field to the record\n *         data.user_id = data.userId;\n *         return data;\n *       },\n *       // executed after create, update and updateMany\n *       afterSave: async (record, dataProvider) => {\n *         // update the author's nb_posts\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: record.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total },\n *           previousData: user,\n *         });\n *         return record;\n *       },\n *       beforeDelete: async (params, dataProvider) => {\n *         // delete all comments linked to the post\n *         const { data: comments } = await dataProvider.getManyReference(\n *           \"comments\",\n *           {\n *             target: \"post_id\",\n *             id: params.id,\n *           }\n *         );\n *         if (comments.length > 0) {\n *           await dataProvider.deleteMany(\"comments\", {\n *             ids: comments.map((comment) => comment.id),\n *           });\n *         }\n *         // update the author's nb_posts\n *         const { data: post } = await dataProvider.getOne(\"posts\", {\n *           id: params.id,\n *         });\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: post.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total - 1 },\n *           previousData: user,\n *         });\n *         return params;\n *       },\n *     },\n *   ]\n * );\n */\n\n\nexport var withLifecycleCallbacks = function (dataProvider, handlers) {\n  return __assign(__assign({}, dataProvider), {\n    getList: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeGetListHandlers, _i, beforeGetListHandlers_1, handler, result, afterGetListHandlers, _a, afterGetListHandlers_1, handler, afterReadHandlers, _loop_1, _b, afterReadHandlers_1, handler;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              newParams = params;\n              beforeGetListHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeGetList;\n              });\n              _i = 0, beforeGetListHandlers_1 = beforeGetListHandlers;\n              _c.label = 1;\n\n            case 1:\n              if (!(_i < beforeGetListHandlers_1.length)) return [3\n              /*break*/\n              , 4];\n              handler = beforeGetListHandlers_1[_i];\n              return [4\n              /*yield*/\n              , handler.beforeGetList(newParams, dataProvider)];\n\n            case 2:\n              newParams = _c.sent();\n              _c.label = 3;\n\n            case 3:\n              _i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              return [4\n              /*yield*/\n              , dataProvider.getList(resource, newParams)];\n\n            case 5:\n              result = _c.sent();\n              afterGetListHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterGetList;\n              });\n              _a = 0, afterGetListHandlers_1 = afterGetListHandlers;\n              _c.label = 6;\n\n            case 6:\n              if (!(_a < afterGetListHandlers_1.length)) return [3\n              /*break*/\n              , 9];\n              handler = afterGetListHandlers_1[_a];\n              return [4\n              /*yield*/\n              , handler.afterGetList(result, dataProvider)];\n\n            case 7:\n              result = _c.sent();\n              _c.label = 8;\n\n            case 8:\n              _a++;\n              return [3\n              /*break*/\n              , 6];\n\n            case 9:\n              afterReadHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterRead;\n              });\n\n              _loop_1 = function (handler) {\n                var _d;\n\n                return __generator(this, function (_e) {\n                  switch (_e.label) {\n                    case 0:\n                      _d = result;\n                      return [4\n                      /*yield*/\n                      , Promise.all(result.data.map(function (record) {\n                        return handler.afterRead(record, dataProvider);\n                      }))];\n\n                    case 1:\n                      _d.data = _e.sent();\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              };\n\n              _b = 0, afterReadHandlers_1 = afterReadHandlers;\n              _c.label = 10;\n\n            case 10:\n              if (!(_b < afterReadHandlers_1.length)) return [3\n              /*break*/\n              , 13];\n              handler = afterReadHandlers_1[_b];\n              return [5\n              /*yield**/\n              , _loop_1(handler)];\n\n            case 11:\n              _c.sent();\n\n              _c.label = 12;\n\n            case 12:\n              _b++;\n              return [3\n              /*break*/\n              , 10];\n\n            case 13:\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    },\n    getOne: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeGetOneHandlers, _i, beforeGetOneHandlers_1, handler, result, afterGetOneHandlers, _a, afterGetOneHandlers_1, handler, afterReadHandlers, _b, afterReadHandlers_2, handler, _c;\n\n        return __generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              newParams = params;\n              beforeGetOneHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeGetOne;\n              });\n              _i = 0, beforeGetOneHandlers_1 = beforeGetOneHandlers;\n              _d.label = 1;\n\n            case 1:\n              if (!(_i < beforeGetOneHandlers_1.length)) return [3\n              /*break*/\n              , 4];\n              handler = beforeGetOneHandlers_1[_i];\n              return [4\n              /*yield*/\n              , handler.beforeGetOne(newParams, dataProvider)];\n\n            case 2:\n              newParams = _d.sent();\n              _d.label = 3;\n\n            case 3:\n              _i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              return [4\n              /*yield*/\n              , dataProvider.getOne(resource, newParams)];\n\n            case 5:\n              result = _d.sent();\n              afterGetOneHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterGetOne;\n              });\n              _a = 0, afterGetOneHandlers_1 = afterGetOneHandlers;\n              _d.label = 6;\n\n            case 6:\n              if (!(_a < afterGetOneHandlers_1.length)) return [3\n              /*break*/\n              , 9];\n              handler = afterGetOneHandlers_1[_a];\n              return [4\n              /*yield*/\n              , handler.afterGetOne(result, dataProvider)];\n\n            case 7:\n              result = _d.sent();\n              _d.label = 8;\n\n            case 8:\n              _a++;\n              return [3\n              /*break*/\n              , 6];\n\n            case 9:\n              afterReadHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterRead;\n              });\n              _b = 0, afterReadHandlers_2 = afterReadHandlers;\n              _d.label = 10;\n\n            case 10:\n              if (!(_b < afterReadHandlers_2.length)) return [3\n              /*break*/\n              , 13];\n              handler = afterReadHandlers_2[_b];\n              _c = result;\n              return [4\n              /*yield*/\n              , handler.afterRead(result.data, dataProvider)];\n\n            case 11:\n              _c.data = _d.sent();\n              _d.label = 12;\n\n            case 12:\n              _b++;\n              return [3\n              /*break*/\n              , 10];\n\n            case 13:\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    },\n    getMany: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeGetManyHandlers, _i, beforeGetManyHandlers_1, handler, result, afterGetManyHandlers, _a, afterGetManyHandlers_1, handler, afterReadHandlers, _loop_2, _b, afterReadHandlers_3, handler;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              newParams = params;\n              beforeGetManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeGetMany;\n              });\n              _i = 0, beforeGetManyHandlers_1 = beforeGetManyHandlers;\n              _c.label = 1;\n\n            case 1:\n              if (!(_i < beforeGetManyHandlers_1.length)) return [3\n              /*break*/\n              , 4];\n              handler = beforeGetManyHandlers_1[_i];\n              return [4\n              /*yield*/\n              , handler.beforeGetMany(newParams, dataProvider)];\n\n            case 2:\n              newParams = _c.sent();\n              _c.label = 3;\n\n            case 3:\n              _i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              return [4\n              /*yield*/\n              , dataProvider.getMany(resource, newParams)];\n\n            case 5:\n              result = _c.sent();\n              afterGetManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterGetMany;\n              });\n              _a = 0, afterGetManyHandlers_1 = afterGetManyHandlers;\n              _c.label = 6;\n\n            case 6:\n              if (!(_a < afterGetManyHandlers_1.length)) return [3\n              /*break*/\n              , 9];\n              handler = afterGetManyHandlers_1[_a];\n              return [4\n              /*yield*/\n              , handler.afterGetMany(result, dataProvider)];\n\n            case 7:\n              result = _c.sent();\n              _c.label = 8;\n\n            case 8:\n              _a++;\n              return [3\n              /*break*/\n              , 6];\n\n            case 9:\n              afterReadHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterRead;\n              });\n\n              _loop_2 = function (handler) {\n                var _d;\n\n                return __generator(this, function (_e) {\n                  switch (_e.label) {\n                    case 0:\n                      _d = result;\n                      return [4\n                      /*yield*/\n                      , Promise.all(result.data.map(function (record) {\n                        return handler.afterRead(record, dataProvider);\n                      }))];\n\n                    case 1:\n                      _d.data = _e.sent();\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              };\n\n              _b = 0, afterReadHandlers_3 = afterReadHandlers;\n              _c.label = 10;\n\n            case 10:\n              if (!(_b < afterReadHandlers_3.length)) return [3\n              /*break*/\n              , 13];\n              handler = afterReadHandlers_3[_b];\n              return [5\n              /*yield**/\n              , _loop_2(handler)];\n\n            case 11:\n              _c.sent();\n\n              _c.label = 12;\n\n            case 12:\n              _b++;\n              return [3\n              /*break*/\n              , 10];\n\n            case 13:\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    },\n    getManyReference: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeGetManyReferenceHandlers, _i, beforeGetManyReferenceHandlers_1, handler, result, afterGetManyReferenceHandlers, _a, afterGetManyReferenceHandlers_1, handler, afterReadHandlers, _loop_3, _b, afterReadHandlers_4, handler;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              newParams = params;\n              beforeGetManyReferenceHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeGetManyReference;\n              });\n              _i = 0, beforeGetManyReferenceHandlers_1 = beforeGetManyReferenceHandlers;\n              _c.label = 1;\n\n            case 1:\n              if (!(_i < beforeGetManyReferenceHandlers_1.length)) return [3\n              /*break*/\n              , 4];\n              handler = beforeGetManyReferenceHandlers_1[_i];\n              return [4\n              /*yield*/\n              , handler.beforeGetManyReference(newParams, dataProvider)];\n\n            case 2:\n              newParams = _c.sent();\n              _c.label = 3;\n\n            case 3:\n              _i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              return [4\n              /*yield*/\n              , dataProvider.getManyReference(resource, newParams)];\n\n            case 5:\n              result = _c.sent();\n              afterGetManyReferenceHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterGetManyReference;\n              });\n              _a = 0, afterGetManyReferenceHandlers_1 = afterGetManyReferenceHandlers;\n              _c.label = 6;\n\n            case 6:\n              if (!(_a < afterGetManyReferenceHandlers_1.length)) return [3\n              /*break*/\n              , 9];\n              handler = afterGetManyReferenceHandlers_1[_a];\n              return [4\n              /*yield*/\n              , handler.afterGetManyReference(result, dataProvider)];\n\n            case 7:\n              result = _c.sent();\n              _c.label = 8;\n\n            case 8:\n              _a++;\n              return [3\n              /*break*/\n              , 6];\n\n            case 9:\n              afterReadHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterRead;\n              });\n\n              _loop_3 = function (handler) {\n                var _d;\n\n                return __generator(this, function (_e) {\n                  switch (_e.label) {\n                    case 0:\n                      _d = result;\n                      return [4\n                      /*yield*/\n                      , Promise.all(result.data.map(function (record) {\n                        return handler.afterRead(record, dataProvider);\n                      }))];\n\n                    case 1:\n                      _d.data = _e.sent();\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              };\n\n              _b = 0, afterReadHandlers_4 = afterReadHandlers;\n              _c.label = 10;\n\n            case 10:\n              if (!(_b < afterReadHandlers_4.length)) return [3\n              /*break*/\n              , 13];\n              handler = afterReadHandlers_4[_b];\n              return [5\n              /*yield**/\n              , _loop_3(handler)];\n\n            case 11:\n              _c.sent();\n\n              _c.label = 12;\n\n            case 12:\n              _b++;\n              return [3\n              /*break*/\n              , 10];\n\n            case 13:\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    },\n    update: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeUpdateHandlers, _i, beforeUpdateHandlers_1, handler, beforeSaveHandlers, _a, beforeSaveHandlers_1, handler, _b, result, afterUpdateHandlers, _c, afterUpdateHandlers_1, handler, afterSaveHandlers, _d, afterSaveHandlers_1, handler, _e;\n\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              newParams = params;\n              beforeUpdateHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeUpdate;\n              });\n              _i = 0, beforeUpdateHandlers_1 = beforeUpdateHandlers;\n              _f.label = 1;\n\n            case 1:\n              if (!(_i < beforeUpdateHandlers_1.length)) return [3\n              /*break*/\n              , 4];\n              handler = beforeUpdateHandlers_1[_i];\n              return [4\n              /*yield*/\n              , handler.beforeUpdate(newParams, dataProvider)];\n\n            case 2:\n              newParams = _f.sent();\n              _f.label = 3;\n\n            case 3:\n              _i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              beforeSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeSave;\n              });\n              _a = 0, beforeSaveHandlers_1 = beforeSaveHandlers;\n              _f.label = 5;\n\n            case 5:\n              if (!(_a < beforeSaveHandlers_1.length)) return [3\n              /*break*/\n              , 8];\n              handler = beforeSaveHandlers_1[_a];\n              _b = newParams;\n              return [4\n              /*yield*/\n              , handler.beforeSave(newParams.data, dataProvider)];\n\n            case 6:\n              _b.data = _f.sent();\n              _f.label = 7;\n\n            case 7:\n              _a++;\n              return [3\n              /*break*/\n              , 5];\n\n            case 8:\n              return [4\n              /*yield*/\n              , dataProvider.update(resource, newParams)];\n\n            case 9:\n              result = _f.sent();\n              afterUpdateHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterUpdate;\n              });\n              _c = 0, afterUpdateHandlers_1 = afterUpdateHandlers;\n              _f.label = 10;\n\n            case 10:\n              if (!(_c < afterUpdateHandlers_1.length)) return [3\n              /*break*/\n              , 13];\n              handler = afterUpdateHandlers_1[_c];\n              return [4\n              /*yield*/\n              , handler.afterUpdate(result, dataProvider)];\n\n            case 11:\n              result = _f.sent();\n              _f.label = 12;\n\n            case 12:\n              _c++;\n              return [3\n              /*break*/\n              , 10];\n\n            case 13:\n              afterSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterSave;\n              });\n              _d = 0, afterSaveHandlers_1 = afterSaveHandlers;\n              _f.label = 14;\n\n            case 14:\n              if (!(_d < afterSaveHandlers_1.length)) return [3\n              /*break*/\n              , 17];\n              handler = afterSaveHandlers_1[_d];\n              _e = result;\n              return [4\n              /*yield*/\n              , handler.afterSave(result.data, dataProvider)];\n\n            case 15:\n              _e.data = _f.sent();\n              _f.label = 16;\n\n            case 16:\n              _d++;\n              return [3\n              /*break*/\n              , 14];\n\n            case 17:\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    },\n    create: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeCreateHandlers, _i, beforeCreateHandlers_1, handler, beforeSaveHandlers, _a, beforeSaveHandlers_2, handler, _b, result, afterCreateHandlers, _c, afterCreateHandlers_1, handler, afterSaveHandlers, _d, afterSaveHandlers_2, handler, _e;\n\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              newParams = params;\n              beforeCreateHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeCreate;\n              });\n              _i = 0, beforeCreateHandlers_1 = beforeCreateHandlers;\n              _f.label = 1;\n\n            case 1:\n              if (!(_i < beforeCreateHandlers_1.length)) return [3\n              /*break*/\n              , 4];\n              handler = beforeCreateHandlers_1[_i];\n              return [4\n              /*yield*/\n              , handler.beforeCreate(newParams, dataProvider)];\n\n            case 2:\n              newParams = _f.sent();\n              _f.label = 3;\n\n            case 3:\n              _i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              beforeSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeSave;\n              });\n              _a = 0, beforeSaveHandlers_2 = beforeSaveHandlers;\n              _f.label = 5;\n\n            case 5:\n              if (!(_a < beforeSaveHandlers_2.length)) return [3\n              /*break*/\n              , 8];\n              handler = beforeSaveHandlers_2[_a];\n              _b = newParams;\n              return [4\n              /*yield*/\n              , handler.beforeSave(newParams.data, dataProvider)];\n\n            case 6:\n              _b.data = _f.sent();\n              _f.label = 7;\n\n            case 7:\n              _a++;\n              return [3\n              /*break*/\n              , 5];\n\n            case 8:\n              return [4\n              /*yield*/\n              , dataProvider.create(resource, newParams)];\n\n            case 9:\n              result = _f.sent();\n              afterCreateHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterCreate;\n              });\n              _c = 0, afterCreateHandlers_1 = afterCreateHandlers;\n              _f.label = 10;\n\n            case 10:\n              if (!(_c < afterCreateHandlers_1.length)) return [3\n              /*break*/\n              , 13];\n              handler = afterCreateHandlers_1[_c];\n              return [4\n              /*yield*/\n              , handler.afterCreate(result, dataProvider)];\n\n            case 11:\n              result = _f.sent();\n              _f.label = 12;\n\n            case 12:\n              _c++;\n              return [3\n              /*break*/\n              , 10];\n\n            case 13:\n              afterSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterSave;\n              });\n              _d = 0, afterSaveHandlers_2 = afterSaveHandlers;\n              _f.label = 14;\n\n            case 14:\n              if (!(_d < afterSaveHandlers_2.length)) return [3\n              /*break*/\n              , 17];\n              handler = afterSaveHandlers_2[_d];\n              _e = result;\n              return [4\n              /*yield*/\n              , handler.afterSave(result.data, dataProvider)];\n\n            case 15:\n              _e.data = _f.sent();\n              _f.label = 16;\n\n            case 16:\n              _d++;\n              return [3\n              /*break*/\n              , 14];\n\n            case 17:\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    },\n    delete: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeDeleteHandlers, _i, beforeDeleteHandlers_1, handler, result, afterDeleteHandlers, _a, afterDeleteHandlers_1, handler;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              newParams = params;\n              beforeDeleteHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeDelete;\n              });\n              _i = 0, beforeDeleteHandlers_1 = beforeDeleteHandlers;\n              _b.label = 1;\n\n            case 1:\n              if (!(_i < beforeDeleteHandlers_1.length)) return [3\n              /*break*/\n              , 4];\n              handler = beforeDeleteHandlers_1[_i];\n              return [4\n              /*yield*/\n              , handler.beforeDelete(newParams, dataProvider)];\n\n            case 2:\n              newParams = _b.sent();\n              _b.label = 3;\n\n            case 3:\n              _i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              return [4\n              /*yield*/\n              , dataProvider.delete(resource, newParams)];\n\n            case 5:\n              result = _b.sent();\n              afterDeleteHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterDelete;\n              });\n              _a = 0, afterDeleteHandlers_1 = afterDeleteHandlers;\n              _b.label = 6;\n\n            case 6:\n              if (!(_a < afterDeleteHandlers_1.length)) return [3\n              /*break*/\n              , 9];\n              handler = afterDeleteHandlers_1[_a];\n              return [4\n              /*yield*/\n              , handler.afterDelete(result, dataProvider)];\n\n            case 7:\n              result = _b.sent();\n              _b.label = 8;\n\n            case 8:\n              _a++;\n              return [3\n              /*break*/\n              , 6];\n\n            case 9:\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    },\n    updateMany: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeUpdateManyHandlers, _i, beforeUpdateManyHandlers_1, handler, beforeSaveHandlers, _a, beforeSaveHandlers_3, handler, _b, result, afterUpdateManyHandlers, _c, afterUpdateManyHandlers_1, handler, afterSaveHandlers, records, _loop_4, _d, afterSaveHandlers_3, handler;\n\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              newParams = params;\n              beforeUpdateManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeUpdateMany;\n              });\n              _i = 0, beforeUpdateManyHandlers_1 = beforeUpdateManyHandlers;\n              _e.label = 1;\n\n            case 1:\n              if (!(_i < beforeUpdateManyHandlers_1.length)) return [3\n              /*break*/\n              , 4];\n              handler = beforeUpdateManyHandlers_1[_i];\n              return [4\n              /*yield*/\n              , handler.beforeUpdateMany(newParams, dataProvider)];\n\n            case 2:\n              newParams = _e.sent();\n              _e.label = 3;\n\n            case 3:\n              _i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              beforeSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeSave;\n              });\n              _a = 0, beforeSaveHandlers_3 = beforeSaveHandlers;\n              _e.label = 5;\n\n            case 5:\n              if (!(_a < beforeSaveHandlers_3.length)) return [3\n              /*break*/\n              , 8];\n              handler = beforeSaveHandlers_3[_a];\n              _b = newParams;\n              return [4\n              /*yield*/\n              , handler.beforeSave(newParams.data, dataProvider)];\n\n            case 6:\n              _b.data = _e.sent();\n              _e.label = 7;\n\n            case 7:\n              _a++;\n              return [3\n              /*break*/\n              , 5];\n\n            case 8:\n              return [4\n              /*yield*/\n              , dataProvider.updateMany(resource, newParams)];\n\n            case 9:\n              result = _e.sent();\n              afterUpdateManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterUpdateMany;\n              });\n              _c = 0, afterUpdateManyHandlers_1 = afterUpdateManyHandlers;\n              _e.label = 10;\n\n            case 10:\n              if (!(_c < afterUpdateManyHandlers_1.length)) return [3\n              /*break*/\n              , 13];\n              handler = afterUpdateManyHandlers_1[_c];\n              return [4\n              /*yield*/\n              , handler.afterUpdateMany(result, dataProvider)];\n\n            case 11:\n              result = _e.sent();\n              _e.label = 12;\n\n            case 12:\n              _c++;\n              return [3\n              /*break*/\n              , 10];\n\n            case 13:\n              afterSaveHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterSave;\n              });\n              if (!(afterSaveHandlers.length > 0)) return [3\n              /*break*/\n              , 18];\n              return [4\n              /*yield*/\n              , dataProvider.getMany(resource, {\n                ids: result.data\n              })];\n\n            case 14:\n              records = _e.sent().data;\n\n              _loop_4 = function (handler) {\n                return __generator(this, function (_f) {\n                  switch (_f.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , Promise.all(records.map(function (record) {\n                        return handler.afterSave(record, dataProvider);\n                      }))];\n\n                    case 1:\n                      _f.sent();\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              };\n\n              _d = 0, afterSaveHandlers_3 = afterSaveHandlers;\n              _e.label = 15;\n\n            case 15:\n              if (!(_d < afterSaveHandlers_3.length)) return [3\n              /*break*/\n              , 18];\n              handler = afterSaveHandlers_3[_d];\n              return [5\n              /*yield**/\n              , _loop_4(handler)];\n\n            case 16:\n              _e.sent();\n\n              _e.label = 17;\n\n            case 17:\n              _d++;\n              return [3\n              /*break*/\n              , 15];\n\n            case 18:\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    },\n    deleteMany: function (resource, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var newParams, beforeDeleteManyHandlers, _i, beforeDeleteManyHandlers_1, handler, result, afterDeleteManyHandlers, _a, afterDeleteManyHandlers_1, handler;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              newParams = params;\n              beforeDeleteManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.beforeDeleteMany;\n              });\n              _i = 0, beforeDeleteManyHandlers_1 = beforeDeleteManyHandlers;\n              _b.label = 1;\n\n            case 1:\n              if (!(_i < beforeDeleteManyHandlers_1.length)) return [3\n              /*break*/\n              , 4];\n              handler = beforeDeleteManyHandlers_1[_i];\n              return [4\n              /*yield*/\n              , handler.beforeDeleteMany(newParams, dataProvider)];\n\n            case 2:\n              newParams = _b.sent();\n              _b.label = 3;\n\n            case 3:\n              _i++;\n              return [3\n              /*break*/\n              , 1];\n\n            case 4:\n              return [4\n              /*yield*/\n              , dataProvider.deleteMany(resource, newParams)];\n\n            case 5:\n              result = _b.sent();\n              afterDeleteManyHandlers = handlers.filter(function (h) {\n                return h.resource === resource && h.afterDeleteMany;\n              });\n              _a = 0, afterDeleteManyHandlers_1 = afterDeleteManyHandlers;\n              _b.label = 6;\n\n            case 6:\n              if (!(_a < afterDeleteManyHandlers_1.length)) return [3\n              /*break*/\n              , 9];\n              handler = afterDeleteManyHandlers_1[_a];\n              return [4\n              /*yield*/\n              , handler.afterDeleteMany(result, dataProvider)];\n\n            case 7:\n              result = _b.sent();\n              _b.label = 8;\n\n            case 8:\n              _a++;\n              return [3\n              /*break*/\n              , 6];\n\n            case 9:\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    }\n  });\n};","map":{"version":3,"mappings":"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","names":["withLifecycleCallbacks","dataProvider","handlers","getList","resource","params","newParams","beforeGetListHandlers","filter","h","beforeGetList","beforeGetListHandlers_1","_i","handler","_c","result","afterGetListHandlers","afterGetList","afterGetListHandlers_1","_a","afterReadHandlers","afterRead","_d","Promise","all","data","map","record","_e","afterReadHandlers_1","_b","getOne","beforeGetOneHandlers","beforeGetOne","beforeGetOneHandlers_1","afterGetOneHandlers","afterGetOne","afterGetOneHandlers_1","afterReadHandlers_2","getMany","beforeGetManyHandlers","beforeGetMany","beforeGetManyHandlers_1","afterGetManyHandlers","afterGetMany","afterGetManyHandlers_1","afterReadHandlers_3","getManyReference","beforeGetManyReferenceHandlers","beforeGetManyReference","beforeGetManyReferenceHandlers_1","afterGetManyReferenceHandlers","afterGetManyReference","afterGetManyReferenceHandlers_1","afterReadHandlers_4","update","beforeUpdateHandlers","beforeUpdate","beforeUpdateHandlers_1","_f","beforeSaveHandlers","beforeSave","beforeSaveHandlers_1","afterUpdateHandlers","afterUpdate","afterUpdateHandlers_1","afterSaveHandlers","afterSave","afterSaveHandlers_1","create","beforeCreateHandlers","beforeCreate","beforeCreateHandlers_1","beforeSaveHandlers_2","afterCreateHandlers","afterCreate","afterCreateHandlers_1","afterSaveHandlers_2","delete","beforeDeleteHandlers","beforeDelete","beforeDeleteHandlers_1","afterDeleteHandlers","afterDelete","afterDeleteHandlers_1","updateMany","beforeUpdateManyHandlers","beforeUpdateMany","beforeUpdateManyHandlers_1","beforeSaveHandlers_3","afterUpdateManyHandlers","afterUpdateMany","afterUpdateManyHandlers_1","length","ids","records","afterSaveHandlers_3","deleteMany","beforeDeleteManyHandlers","beforeDeleteMany","beforeDeleteManyHandlers_1","afterDeleteManyHandlers","afterDeleteMany","afterDeleteManyHandlers_1"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/withLifecycleCallbacks.ts"],"sourcesContent":["import {\n    CreateParams,\n    CreateResult,\n    DataProvider,\n    DeleteManyParams,\n    DeleteManyResult,\n    DeleteParams,\n    DeleteResult,\n    GetListParams,\n    GetListResult,\n    GetManyParams,\n    GetManyReferenceParams,\n    GetManyReferenceResult,\n    GetManyResult,\n    GetOneParams,\n    GetOneResult,\n    RaRecord,\n    UpdateManyParams,\n    UpdateManyResult,\n    UpdateParams,\n    UpdateResult,\n} from '../types';\n\n/**\n * Extend a dataProvider to execute callbacks before and after read and write calls.\n *\n * @param {DataProvider} dataProvider The dataProvider to wrap\n * @param {ResourceCallbacks[]} handlers An array of ResourceCallbacks\n *\n * @typedef {Object} ResourceCallbacks\n * @property {string} resource The resource name\n * @property {AfterCreate} [afterCreate] A callback executed after create\n * @property {AfterDelete} [afterDelete] A callback executed after delete\n * @property {AfterDeleteMany} [afterDeleteMany] A callback executed after deleteMany\n * @property {AfterGetList} [afterGetList] A callback executed after getList\n * @property {AfterGetMany} [afterGetMany] A callback executed after getMany\n * @property {AfterGetManyReference} [afterGetManyReference] A callback executed after getManyReference\n * @property {AfterGetOne} [afterGetOne] A callback executed after getOne\n * @property {AfterRead} [afterRead] A callback executed after read (getList, getMany, getManyReference, getOne)\n * @property {AfterSave} [afterSave] A callback executed after save (create, update, updateMany)\n * @property {AfterUpdate} [afterUpdate] A callback executed after update\n * @property {AfterUpdateMany} [afterUpdateMany] A callback executed after updateMany\n * @property {BeforeCreate} [beforeCreate] A callback executed before create\n * @property {BeforeDelete} [beforeDelete] A callback executed before delete\n * @property {BeforeDeleteMany} [beforeDeleteMany] A callback executed before deleteMany\n * @property {BeforeGetList} [beforeGetList] A callback executed before getList\n * @property {BeforeGetMany} [beforeGetMany] A callback executed before getMany\n * @property {BeforeGetManyReference} [beforeGetManyReference] A callback executed before getManyReference\n * @property {BeforeGetOne} [beforeGetOne] A callback executed before getOne\n * @property {BeforeSave} [beforeSave] A callback executed before save (create, update, updateMany)\n * @property {BeforeUpdate} [beforeUpdate] A callback executed before update\n * @property {BeforeUpdateMany} [beforeUpdateMany] A callback executed before updateMany\n *\n * Warnings:\n * - As queries issued in the callbacks are not done through react-query,\n *   any change in the data will not be automatically reflected in the UI.\n * - The callbacks are not executed in a transaction. In case of error,\n *   the backend may be left in an inconsistent state.\n * - When calling the API directly using fetch or another client,\n *   the callbacks will not be executed, leaving the backend in a possiblly inconsistent state.\n * - If a callback triggers the query it's listening to, this will lead to a infinite loop.\n *\n * @example\n *\n * const dataProvider = withLifecycleCallbacks(\n *   jsonServerProvider(\"http://localhost:3000\"),\n *   [\n *     {\n *       resource: \"posts\",\n *       afterRead: async (data, dataProvider) => {\n *         // rename field to the record\n *         data.user_id = data.userId;\n *         return data;\n *       },\n *       // executed after create, update and updateMany\n *       afterSave: async (record, dataProvider) => {\n *         // update the author's nb_posts\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: record.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total },\n *           previousData: user,\n *         });\n *         return record;\n *       },\n *       beforeDelete: async (params, dataProvider) => {\n *         // delete all comments linked to the post\n *         const { data: comments } = await dataProvider.getManyReference(\n *           \"comments\",\n *           {\n *             target: \"post_id\",\n *             id: params.id,\n *           }\n *         );\n *         if (comments.length > 0) {\n *           await dataProvider.deleteMany(\"comments\", {\n *             ids: comments.map((comment) => comment.id),\n *           });\n *         }\n *         // update the author's nb_posts\n *         const { data: post } = await dataProvider.getOne(\"posts\", {\n *           id: params.id,\n *         });\n *         const { total } = await dataProvider.getList(\"users\", {\n *           filter: { id: post.user_id },\n *           pagination: { page: 1, perPage: 1 },\n *         });\n *         await dataProvider.update(\"users\", {\n *           id: user.id,\n *           data: { nb_posts: total - 1 },\n *           previousData: user,\n *         });\n *         return params;\n *       },\n *     },\n *   ]\n * );\n */\nexport const withLifecycleCallbacks = (\n    dataProvider: DataProvider,\n    handlers: ResourceCallbacks[]\n): DataProvider => {\n    return {\n        ...dataProvider,\n\n        getList: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetListParams\n        ) {\n            let newParams = params;\n            const beforeGetListHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeGetList\n            );\n            for (let handler of beforeGetListHandlers) {\n                newParams = await handler.beforeGetList(\n                    newParams,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.getList<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterGetListHandlers = handlers.filter(\n                h => h.resource === resource && h.afterGetList\n            );\n            for (let handler of afterGetListHandlers) {\n                result = await handler.afterGetList(result, dataProvider);\n            }\n            const afterReadHandlers = handlers.filter(\n                h => h.resource === resource && h.afterRead\n            );\n            for (let handler of afterReadHandlers) {\n                result.data = await Promise.all(\n                    result.data.map(record =>\n                        handler.afterRead(record, dataProvider)\n                    )\n                );\n            }\n\n            return result;\n        },\n\n        getOne: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetOneParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeGetOneHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeGetOne\n            );\n            for (let handler of beforeGetOneHandlers) {\n                newParams = await handler.beforeGetOne(newParams, dataProvider);\n            }\n\n            let result = await dataProvider.getOne<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterGetOneHandlers = handlers.filter(\n                h => h.resource === resource && h.afterGetOne\n            );\n            for (let handler of afterGetOneHandlers) {\n                result = await handler.afterGetOne(result, dataProvider);\n            }\n            const afterReadHandlers = handlers.filter(\n                h => h.resource === resource && h.afterRead\n            );\n            for (let handler of afterReadHandlers) {\n                result.data = await handler.afterRead(\n                    result.data,\n                    dataProvider\n                );\n            }\n\n            return result;\n        },\n\n        getMany: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetManyParams\n        ) {\n            let newParams = params;\n            const beforeGetManyHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeGetMany\n            );\n            for (let handler of beforeGetManyHandlers) {\n                newParams = await handler.beforeGetMany(\n                    newParams,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.getMany<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterGetManyHandlers = handlers.filter(\n                h => h.resource === resource && h.afterGetMany\n            );\n            for (let handler of afterGetManyHandlers) {\n                result = await handler.afterGetMany(result, dataProvider);\n            }\n            const afterReadHandlers = handlers.filter(\n                h => h.resource === resource && h.afterRead\n            );\n            for (let handler of afterReadHandlers) {\n                result.data = await Promise.all(\n                    result.data.map(record =>\n                        handler.afterRead(record, dataProvider)\n                    )\n                );\n            }\n\n            return result;\n        },\n\n        getManyReference: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: GetManyReferenceParams\n        ) {\n            let newParams = params;\n            const beforeGetManyReferenceHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeGetManyReference\n            );\n            for (let handler of beforeGetManyReferenceHandlers) {\n                newParams = await handler.beforeGetManyReference(\n                    newParams,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.getManyReference<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterGetManyReferenceHandlers = handlers.filter(\n                h => h.resource === resource && h.afterGetManyReference\n            );\n            for (let handler of afterGetManyReferenceHandlers) {\n                result = await handler.afterGetManyReference(\n                    result,\n                    dataProvider\n                );\n            }\n            const afterReadHandlers = handlers.filter(\n                h => h.resource === resource && h.afterRead\n            );\n            for (let handler of afterReadHandlers) {\n                result.data = await Promise.all(\n                    result.data.map(record =>\n                        handler.afterRead(record, dataProvider)\n                    )\n                );\n            }\n\n            return result;\n        },\n\n        update: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: UpdateParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeUpdateHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeUpdate\n            );\n            for (let handler of beforeUpdateHandlers) {\n                newParams = await handler.beforeUpdate(newParams, dataProvider);\n            }\n            const beforeSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeSave\n            );\n            for (let handler of beforeSaveHandlers) {\n                newParams.data = await handler.beforeSave(\n                    newParams.data,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.update<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterUpdateHandlers = handlers.filter(\n                h => h.resource === resource && h.afterUpdate\n            );\n            for (let handler of afterUpdateHandlers) {\n                result = await handler.afterUpdate(result, dataProvider);\n            }\n            const afterSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.afterSave\n            );\n            for (let handler of afterSaveHandlers) {\n                result.data = await handler.afterSave(\n                    result.data,\n                    dataProvider\n                );\n            }\n\n            return result;\n        },\n\n        create: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: CreateParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeCreateHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeCreate\n            );\n            for (let handler of beforeCreateHandlers) {\n                newParams = await handler.beforeCreate(newParams, dataProvider);\n            }\n            const beforeSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeSave\n            );\n            for (let handler of beforeSaveHandlers) {\n                newParams.data = await handler.beforeSave(\n                    newParams.data,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.create<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterCreateHandlers = handlers.filter(\n                h => h.resource === resource && h.afterCreate\n            );\n            for (let handler of afterCreateHandlers) {\n                result = await handler.afterCreate(result, dataProvider);\n            }\n            const afterSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.afterSave\n            );\n            for (let handler of afterSaveHandlers) {\n                result.data = await handler.afterSave(\n                    result.data,\n                    dataProvider\n                );\n            }\n\n            return result;\n        },\n\n        delete: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: DeleteParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeDeleteHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeDelete\n            );\n            for (let handler of beforeDeleteHandlers) {\n                newParams = await handler.beforeDelete(newParams, dataProvider);\n            }\n\n            let result = await dataProvider.delete<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterDeleteHandlers = handlers.filter(\n                h => h.resource === resource && h.afterDelete\n            );\n            for (let handler of afterDeleteHandlers) {\n                result = await handler.afterDelete(result, dataProvider);\n            }\n\n            return result;\n        },\n\n        updateMany: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: UpdateManyParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeUpdateManyHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeUpdateMany\n            );\n            for (let handler of beforeUpdateManyHandlers) {\n                newParams = await handler.beforeUpdateMany(\n                    newParams,\n                    dataProvider\n                );\n            }\n            const beforeSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeSave\n            );\n            for (let handler of beforeSaveHandlers) {\n                newParams.data = await handler.beforeSave(\n                    newParams.data,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.updateMany<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterUpdateManyHandlers = handlers.filter(\n                h => h.resource === resource && h.afterUpdateMany\n            );\n            for (let handler of afterUpdateManyHandlers) {\n                result = await handler.afterUpdateMany(result, dataProvider);\n            }\n            const afterSaveHandlers = handlers.filter(\n                h => h.resource === resource && h.afterSave\n            );\n            if (afterSaveHandlers.length > 0) {\n                const { data: records } = await dataProvider.getMany(resource, {\n                    ids: result.data,\n                });\n\n                for (let handler of afterSaveHandlers) {\n                    await Promise.all(\n                        records.map(record =>\n                            handler.afterSave(record, dataProvider)\n                        )\n                    );\n                }\n            }\n\n            return result;\n        },\n\n        deleteMany: async function <RecordType extends RaRecord = any>(\n            resource: string,\n            params: DeleteManyParams<RecordType>\n        ) {\n            let newParams = params;\n            const beforeDeleteManyHandlers = handlers.filter(\n                h => h.resource === resource && h.beforeDeleteMany\n            );\n            for (let handler of beforeDeleteManyHandlers) {\n                newParams = await handler.beforeDeleteMany(\n                    newParams,\n                    dataProvider\n                );\n            }\n\n            let result = await dataProvider.deleteMany<RecordType>(\n                resource,\n                newParams\n            );\n\n            const afterDeleteManyHandlers = handlers.filter(\n                h => h.resource === resource && h.afterDeleteMany\n            );\n            for (let handler of afterDeleteManyHandlers) {\n                result = await handler.afterDeleteMany(result, dataProvider);\n            }\n\n            return result;\n        },\n    };\n};\n\nexport type ResourceCallbacks<T extends RaRecord = any> = {\n    resource: string;\n    afterCreate?: (\n        result: CreateResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<CreateResult<T>>;\n    afterDelete?: (\n        result: DeleteResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<DeleteResult<T>>;\n    afterDeleteMany?: (\n        result: DeleteManyResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<DeleteManyResult<T>>;\n    afterGetList?: (\n        result: GetListResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<GetListResult<T>>;\n    afterGetMany?: (\n        result: GetManyResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<GetManyResult<T>>;\n    afterGetManyReference?: (\n        result: GetManyReferenceResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<GetManyReferenceResult<T>>;\n    afterGetOne?: (\n        result: GetOneResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<GetOneResult<T>>;\n    afterUpdate?: (\n        result: UpdateResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<UpdateResult<T>>;\n    afterUpdateMany?: (\n        result: UpdateManyResult<T>,\n        dataProvider: DataProvider\n    ) => Promise<UpdateManyResult<T>>;\n    beforeCreate?: (\n        params: CreateParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<CreateParams<T>>;\n    beforeDelete?: (\n        params: DeleteParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<DeleteParams<T>>;\n    beforeDeleteMany?: (\n        params: DeleteManyParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<DeleteManyParams<T>>;\n    beforeGetList?: (\n        params: GetListParams,\n        dataProvider: DataProvider\n    ) => Promise<GetListParams>;\n    beforeGetMany?: (\n        params: GetManyParams,\n        dataProvider: DataProvider\n    ) => Promise<GetManyParams>;\n    beforeGetManyReference?: (\n        params: GetManyReferenceParams,\n        dataProvider: DataProvider\n    ) => Promise<GetManyReferenceParams>;\n    beforeGetOne?: (\n        params: GetOneParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<GetOneParams<T>>;\n    beforeUpdate?: (\n        params: UpdateParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<UpdateParams<T>>;\n    beforeUpdateMany?: (\n        params: UpdateManyParams<T>,\n        dataProvider: DataProvider\n    ) => Promise<UpdateManyParams<T>>;\n\n    // The following hooks don't match a dataProvider method\n\n    /**\n     * Modify the data before it is sent to the dataProvider.\n     *\n     * Used in create, update, and updateMany\n     *\n     * Note: This callback doesn't modify the record itself, but the data argument\n     * (which may be a diff, especially when called with updateMany).\n     */\n    beforeSave?: (data: Partial<T>, dataProvider: DataProvider) => Promise<T>;\n    /**\n     * Update a record after it has been read from the dataProvider\n     *\n     * Used in getOne, getList, getMany, and getManyReference\n     */\n    afterRead?: (record: T, dataProvider: DataProvider) => Promise<T>;\n    /**\n     * Use the record after it is returned by the dataProvider.\n     *\n     * Used in create, update, and updateMany\n     */\n    afterSave?: (record: T, dataProvider: DataProvider) => Promise<T>;\n};\n"]},"metadata":{},"sourceType":"module"}
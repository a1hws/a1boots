{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../notification';\nimport { useBasename } from '../routing';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useCheckAuth.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\n\nexport var useCheckAuth = function useCheckAuth() {\n  var authProvider = useAuthProvider();\n  var notify = useNotify();\n  var logout = useLogout();\n  var basename = useBasename();\n  var loginUrl = removeDoubleSlashes(\"\".concat(basename, \"/\").concat(defaultAuthParams.loginUrl));\n  var checkAuth = useCallback(function (params, logoutOnFailure, redirectTo, disableNotification) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (logoutOnFailure === void 0) {\n      logoutOnFailure = true;\n    }\n\n    if (redirectTo === void 0) {\n      redirectTo = loginUrl;\n    }\n\n    if (disableNotification === void 0) {\n      disableNotification = false;\n    }\n\n    return authProvider.checkAuth(params).catch(function (error) {\n      if (logoutOnFailure) {\n        logout({}, error && error.redirectTo != null ? error.redirectTo : redirectTo);\n        var shouldSkipNotify = disableNotification || error && error.message === false;\n        !shouldSkipNotify && notify(getErrorMessage(error, 'ra.auth.auth_check_error'), {\n          type: 'error'\n        });\n      }\n\n      throw error;\n    });\n  }, [authProvider, logout, notify, loginUrl]);\n  return authProvider ? checkAuth : checkAuthWithoutAuthProvider;\n};\n\nvar checkAuthWithoutAuthProvider = function checkAuthWithoutAuthProvider() {\n  return Promise.resolve();\n};\n\nvar getErrorMessage = function getErrorMessage(error, defaultMessage) {\n  return typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? defaultMessage : error.message;\n};","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;EACxB,IAAMC,YAAY,GAAGP,eAAe,EAApC;EACA,IAAMQ,MAAM,GAAGL,SAAS,EAAxB;EACA,IAAMM,MAAM,GAAGP,SAAS,EAAxB;EACA,IAAMQ,QAAQ,GAAGN,WAAW,EAA5B;EACA,IAAMO,QAAQ,GAAGN,mBAAmB,CAChC,UAAGK,QAAH,EAAW,GAAX,EAAWE,MAAX,CAAeX,iBAAiB,CAACU,QAAjC,CADgC,CAApC;EAIA,IAAME,SAAS,GAAGd,WAAW,CACzB,UACIe,MADJ,EAEIC,eAFJ,EAGIC,UAHJ,EAIIC,mBAJJ,EAI+B;IAH3B;MAAAH;IAAgB;;IAChB;MAAAC;IAAsB;;IACtB;MAAAC;IAAqB;;IACrB;MAAAC;IAA2B;;IAE3B,mBAAY,CAACJ,SAAb,CAAuBC,MAAvB,EAA+BI,KAA/B,CAAqC,iBAAK;MACtC,IAAIH,eAAJ,EAAqB;QACjBN,MAAM,CACF,EADE,EAEFU,KAAK,IAAIA,KAAK,CAACH,UAAN,IAAoB,IAA7B,GACMG,KAAK,CAACH,UADZ,GAEMA,UAJJ,CAAN;QAMA,IAAMI,gBAAgB,GAClBH,mBAAmB,IAClBE,KAAK,IAAIA,KAAK,CAACE,OAAN,KAAkB,KAFhC;QAGA,CAACD,gBAAD,IACIZ,MAAM,CACFc,eAAe,CAACH,KAAD,EAAQ,0BAAR,CADb,EAEF;UAAEI,IAAI,EAAE;QAAR,CAFE,CADV;MAKH;;MACD,MAAMJ,KAAN;IACH,CAlBD;EAkBE,CAzBmB,EA0BzB,CAACZ,YAAD,EAAeE,MAAf,EAAuBD,MAAvB,EAA+BG,QAA/B,CA1ByB,CAA7B;EA6BA,OAAOJ,YAAY,GAAGM,SAAH,GAAeW,4BAAlC;AACH,CAvCM;;AAyCP,IAAMA,4BAA4B,GAAG,SAA/BA,4BAA+B;EAAM,cAAO,CAACC,OAAR;AAAiB,CAA5D;;AAqBA,IAAMH,eAAe,GAAG,SAAlBA,eAAkB,CAACH,KAAD,EAAQO,cAAR,EAAsB;EAC1C,cAAOP,KAAP,KAAiB,QAAjB,GACMA,KADN,GAEM,OAAOA,KAAP,KAAiB,WAAjB,IAAgC,CAACA,KAAK,CAACE,OAAvC,GACAK,cADA,GAEAP,KAAK,CAACE,OAJZ;AAImB,CALvB","names":["useCallback","useAuthProvider","defaultAuthParams","useLogout","useNotify","useBasename","removeDoubleSlashes","useCheckAuth","authProvider","notify","logout","basename","loginUrl","concat","checkAuth","params","logoutOnFailure","redirectTo","disableNotification","catch","error","shouldSkipNotify","message","getErrorMessage","type","checkAuthWithoutAuthProvider","resolve","defaultMessage"],"sources":["/var/www/a1boots/node_modules/ra-core/src/auth/useCheckAuth.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../notification';\nimport { useBasename } from '../routing';\nimport { removeDoubleSlashes } from '../routing/useCreatePath';\n\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useCheckAuth.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\nexport const useCheckAuth = (): CheckAuth => {\n    const authProvider = useAuthProvider();\n    const notify = useNotify();\n    const logout = useLogout();\n    const basename = useBasename();\n    const loginUrl = removeDoubleSlashes(\n        `${basename}/${defaultAuthParams.loginUrl}`\n    );\n\n    const checkAuth = useCallback(\n        (\n            params: any = {},\n            logoutOnFailure = true,\n            redirectTo = loginUrl,\n            disableNotification = false\n        ) =>\n            authProvider.checkAuth(params).catch(error => {\n                if (logoutOnFailure) {\n                    logout(\n                        {},\n                        error && error.redirectTo != null\n                            ? error.redirectTo\n                            : redirectTo\n                    );\n                    const shouldSkipNotify =\n                        disableNotification ||\n                        (error && error.message === false);\n                    !shouldSkipNotify &&\n                        notify(\n                            getErrorMessage(error, 'ra.auth.auth_check_error'),\n                            { type: 'error' }\n                        );\n                }\n                throw error;\n            }),\n        [authProvider, logout, notify, loginUrl]\n    );\n\n    return authProvider ? checkAuth : checkAuthWithoutAuthProvider;\n};\n\nconst checkAuthWithoutAuthProvider = () => Promise.resolve();\n\n/**\n * Check if the current user is authenticated by calling authProvider.checkAuth().\n * Logs the user out on failure.\n *\n * @param {Object} params The parameters to pass to the authProvider\n * @param {boolean} logoutOnFailure Whether the user should be logged out if the authProvider fails to authenticate them. True by default.\n * @param {string} redirectTo The login form url. Defaults to '/login'\n * @param {boolean} disableNotification Avoid showing a notification after the user is logged out. false by default.\n *\n * @return {Promise} Resolved to the authProvider response if the user passes the check, or rejected with an error otherwise\n */\nexport type CheckAuth = (\n    params?: any,\n    logoutOnFailure?: boolean,\n    redirectTo?: string,\n    /** @deprecated to disable the notification, authProvider.checkAuth() should return an object with an error property set to true */\n    disableNotification?: boolean\n) => Promise<any>;\n\nconst getErrorMessage = (error, defaultMessage) =>\n    typeof error === 'string'\n        ? error\n        : typeof error === 'undefined' || !error.message\n        ? defaultMessage\n        : error.message;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as React from 'react';\nimport { useState, useEffect, Children } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { WithPermissions, useCheckAuth } from '../auth';\nimport { useTimeout } from '../util';\nimport { useScrollToTop, useCreatePath } from '../routing';\nimport { useConfigureAdminRouterFromChildren } from './useConfigureAdminRouterFromChildren';\nexport var CoreAdminRoutes = function CoreAdminRoutes(props) {\n  var oneSecondHasPassed = useTimeout(1000);\n  useScrollToTop();\n  var createPath = useCreatePath();\n\n  var _a = useConfigureAdminRouterFromChildren(props.children),\n      customRoutesWithLayout = _a.customRoutesWithLayout,\n      customRoutesWithoutLayout = _a.customRoutesWithoutLayout,\n      status = _a.status,\n      resources = _a.resources;\n\n  var Layout = props.layout,\n      CatchAll = props.catchAll,\n      dashboard = props.dashboard,\n      LoadingPage = props.loading,\n      menu = props.menu,\n      requireAuth = props.requireAuth,\n      Ready = props.ready,\n      title = props.title;\n\n  var _b = useState(!requireAuth),\n      canRender = _b[0],\n      setCanRender = _b[1];\n\n  var checkAuth = useCheckAuth();\n  useEffect(function () {\n    if (requireAuth) {\n      checkAuth().then(function () {\n        setCanRender(true);\n      }).catch(function () {});\n    }\n  }, [checkAuth, requireAuth]);\n\n  if (status === 'empty') {\n    return React.createElement(Ready, null);\n  }\n\n  if (status === 'loading' || !canRender) {\n    return React.createElement(Routes, null, customRoutesWithoutLayout, oneSecondHasPassed ? React.createElement(Route, {\n      path: \"*\",\n      element: React.createElement(LoadingPage, null)\n    }) : React.createElement(Route, {\n      path: \"*\",\n      element: null\n    }));\n  }\n\n  return React.createElement(Routes, null, customRoutesWithoutLayout, React.createElement(Route, {\n    path: \"/*\",\n    element: React.createElement(\"div\", null, React.createElement(Layout, {\n      dashboard: dashboard,\n      menu: menu,\n      title: title\n    }, React.createElement(Routes, null, customRoutesWithLayout, Children.map(resources, function (resource) {\n      return React.createElement(Route, {\n        key: resource.props.name,\n        path: \"\".concat(resource.props.name, \"/*\"),\n        element: resource\n      });\n    }), React.createElement(Route, {\n      path: \"/\",\n      element: dashboard ? React.createElement(WithPermissions, {\n        authParams: defaultAuthParams,\n        component: dashboard\n      }) : resources.length > 0 ? React.createElement(Navigate, {\n        to: createPath({\n          resource: resources[0].props.name,\n          type: 'list'\n        })\n      }) : null\n    }), React.createElement(Route, {\n      path: \"*\",\n      element: React.createElement(CatchAll, {\n        title: title\n      })\n    }))))\n  }));\n};\nCoreAdminRoutes.defaultProps = {\n  customRoutes: []\n};\nvar defaultAuthParams = {\n  params: {\n    route: 'dashboard'\n  }\n};","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","Children","Navigate","Route","Routes","WithPermissions","useCheckAuth","useTimeout","useScrollToTop","useCreatePath","useConfigureAdminRouterFromChildren","CoreAdminRoutes","props","oneSecondHasPassed","createPath","children","customRoutesWithLayout","customRoutesWithoutLayout","status","resources","Layout","CatchAll","dashboard","LoadingPage","menu","requireAuth","Ready","title","canRender","setCanRender","checkAuth","then","catch","path","element","map","key","resource","name","authParams","defaultAuthParams","component","length","to","type","defaultProps","customRoutes","params","route"],"sources":["/var/www/a1boots/node_modules/ra-core/src/core/CoreAdminRoutes.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState, useEffect, Children, ComponentType } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { WithPermissions, useCheckAuth } from '../auth';\nimport { useTimeout } from '../util';\nimport { useScrollToTop, useCreatePath } from '../routing';\nimport {\n    AdminChildren,\n    CatchAllComponent,\n    LayoutComponent,\n    LoadingComponent,\n    CoreLayoutProps,\n} from '../types';\nimport { useConfigureAdminRouterFromChildren } from './useConfigureAdminRouterFromChildren';\n\nexport const CoreAdminRoutes = (props: CoreAdminRoutesProps) => {\n    const oneSecondHasPassed = useTimeout(1000);\n    useScrollToTop();\n    const createPath = useCreatePath();\n\n    const {\n        customRoutesWithLayout,\n        customRoutesWithoutLayout,\n        status,\n        resources,\n    } = useConfigureAdminRouterFromChildren(props.children);\n\n    const {\n        layout: Layout,\n        catchAll: CatchAll,\n        dashboard,\n        loading: LoadingPage,\n        menu,\n        requireAuth,\n        ready: Ready,\n        title,\n    } = props;\n\n    const [canRender, setCanRender] = useState(!requireAuth);\n    const checkAuth = useCheckAuth();\n\n    useEffect(() => {\n        if (requireAuth) {\n            checkAuth()\n                .then(() => {\n                    setCanRender(true);\n                })\n                .catch(() => {});\n        }\n    }, [checkAuth, requireAuth]);\n\n    if (status === 'empty') {\n        return <Ready />;\n    }\n\n    if (status === 'loading' || !canRender) {\n        return (\n            <Routes>\n                {customRoutesWithoutLayout}\n                {oneSecondHasPassed ? (\n                    <Route path=\"*\" element={<LoadingPage />} />\n                ) : (\n                    <Route path=\"*\" element={null} />\n                )}\n            </Routes>\n        );\n    }\n\n    return (\n        <Routes>\n            {/*\n                Render the custom routes that were outside the child function.\n            */}\n            {customRoutesWithoutLayout}\n            <Route\n                path=\"/*\"\n                element={\n                    <div>\n                        <Layout dashboard={dashboard} menu={menu} title={title}>\n                            <Routes>\n                                {customRoutesWithLayout}\n                                {Children.map(resources, resource => (\n                                    <Route\n                                        key={resource.props.name}\n                                        path={`${resource.props.name}/*`}\n                                        element={resource}\n                                    />\n                                ))}\n                                <Route\n                                    path=\"/\"\n                                    element={\n                                        dashboard ? (\n                                            <WithPermissions\n                                                authParams={defaultAuthParams}\n                                                component={dashboard}\n                                            />\n                                        ) : resources.length > 0 ? (\n                                            <Navigate\n                                                to={createPath({\n                                                    resource:\n                                                        resources[0].props.name,\n                                                    type: 'list',\n                                                })}\n                                            />\n                                        ) : null\n                                    }\n                                />\n                                <Route\n                                    path=\"*\"\n                                    element={<CatchAll title={title} />}\n                                />\n                            </Routes>\n                        </Layout>\n                    </div>\n                }\n            />\n        </Routes>\n    );\n};\n\nCoreAdminRoutes.defaultProps = {\n    customRoutes: [],\n};\n\nexport interface CoreAdminRoutesProps extends CoreLayoutProps {\n    layout: LayoutComponent;\n    catchAll: CatchAllComponent;\n    children?: AdminChildren;\n    loading: LoadingComponent;\n    requireAuth?: boolean;\n    ready?: ComponentType;\n}\n\nconst defaultAuthParams = { params: { route: 'dashboard' } };\n"]},"metadata":{},"sourceType":"module"}
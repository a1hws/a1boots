{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/**\n * A higher-order function which wraps a dataProvider to handle refreshing authentication.\n * This is useful when the authentication service supports a refresh token mechanism.\n * The wrapped provider will call the refreshAuth function before calling any dataProvider methods.\n *\n * The refreshAuth function should return a Promise that resolves when the authentication token has been refreshed.\n * It might throw an error if the refresh failed. In this case, react-admin will handle the error as usual.\n *\n * @param provider A dataProvider\n * @param refreshAuth A function that refreshes the authentication token if needed and returns a Promise.\n * @returns A wrapped dataProvider.\n *\n * @example\n * import { addRefreshAuthToDataProvider } from 'react-admin';\n * import { jsonServerProvider } from 'ra-data-json-server';\n * import { refreshAuth } from './refreshAuth';\n *\n * const dataProvider = addRefreshAuthToDataProvider(jsonServerProvider('http://localhost:3000'), refreshAuth);\n */\n\n\nexport var addRefreshAuthToDataProvider = function addRefreshAuthToDataProvider(provider, refreshAuth) {\n  var proxy = new Proxy(provider, {\n    get: function get(_, name) {\n      var _this = this;\n\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , refreshAuth()];\n\n              case 1:\n                _a.sent();\n\n                return [2\n                /*return*/\n                , provider[name.toString()].apply(provider, args)];\n            }\n          });\n        });\n      };\n    }\n  });\n  return proxy;\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMA,4BAA4B,GAAG,SAA/BA,4BAA+B,CACxCC,QADwC,EAExCC,WAFwC,EAER;EAEhC,IAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUH,QAAV,EAAoB;IAC9BI,GAAG,eAACC,CAAD,EAAIC,IAAJ,EAAQ;MAAX;;MACI,OAAO;QAAO;;aAAA,yCAAc;UAAdC;;;;;;;gBACV;gBAAA;gBAAA,EAAMN,WAAW,EAAjB;;;gBAAAO;;gBACA;gBAAA;gBAAA,EAAOR,QAAQ,CAACM,IAAI,CAACG,QAAL,EAAD,CAAR,CAAyBC,KAAzB,WAA6BH,IAA7B,CAAP;;;;MACH,CAHD;IAIH;EAN6B,CAApB,CAAd;EASA,OAAOL,KAAP;AACH,CAdM","names":["addRefreshAuthToDataProvider","provider","refreshAuth","proxy","Proxy","get","_","name","args","_a","toString","apply"],"sources":["/var/www/a1boots/node_modules/ra-core/src/auth/addRefreshAuthToDataProvider.ts"],"sourcesContent":["import { DataProvider } from '../types';\n\n/**\n * A higher-order function which wraps a dataProvider to handle refreshing authentication.\n * This is useful when the authentication service supports a refresh token mechanism.\n * The wrapped provider will call the refreshAuth function before calling any dataProvider methods.\n *\n * The refreshAuth function should return a Promise that resolves when the authentication token has been refreshed.\n * It might throw an error if the refresh failed. In this case, react-admin will handle the error as usual.\n *\n * @param provider A dataProvider\n * @param refreshAuth A function that refreshes the authentication token if needed and returns a Promise.\n * @returns A wrapped dataProvider.\n *\n * @example\n * import { addRefreshAuthToDataProvider } from 'react-admin';\n * import { jsonServerProvider } from 'ra-data-json-server';\n * import { refreshAuth } from './refreshAuth';\n *\n * const dataProvider = addRefreshAuthToDataProvider(jsonServerProvider('http://localhost:3000'), refreshAuth);\n */\nexport const addRefreshAuthToDataProvider = (\n    provider: DataProvider,\n    refreshAuth: () => Promise<void>\n): DataProvider => {\n    const proxy = new Proxy(provider, {\n        get(_, name) {\n            return async (...args: any[]) => {\n                await refreshAuth();\n                return provider[name.toString()](...args);\n            };\n        },\n    });\n\n    return proxy;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, LinearProgress as MuiLinearProgress } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { useTimeout } from 'ra-core';\n/**\n * Progress bar formatted to replace an input or a field in a form layout\n *\n * Avoids visual jumps when replaced by value or form input\n *\n * @see ReferenceField\n * @see ReferenceInput\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} classes CSS class names\n * @prop {string} className CSS class applied to the LinearProgress component\n * @prop {integer} timeout Milliseconds to wait before showing the progress bar. One second by default\n *\n * @param {Props} props\n */\n\nexport var LinearProgress = function (_a) {\n  var _b = _a.timeout,\n      timeout = _b === void 0 ? 1000 : _b,\n      props = __rest(_a, [\"timeout\"]);\n\n  var className = props.className,\n      rest = __rest(props, [\"className\"]);\n\n  var oneSecondHasPassed = useTimeout(timeout);\n  return oneSecondHasPassed ? React.createElement(StyledProgress, __assign({\n    className: className\n  }, rest)) : React.createElement(Box, {\n    my: 1,\n    height: 4\n  });\n};\nLinearProgress.propTypes = {\n  className: PropTypes.string,\n  timeout: PropTypes.number\n}; // What? TypeScript loses the displayName if we don't set it explicitly\n\nLinearProgress.displayName = 'LinearProgress';\nvar PREFIX = 'RaLinearProgress';\nvar StyledProgress = styled(MuiLinearProgress, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    margin: \"\".concat(theme.spacing(1), \" 0\"),\n    width: theme.spacing(20)\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SACIC,GADJ,EAEIC,cAAc,IAAIC,iBAFtB,QAIO,eAJP;AAKA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,SAA3B;AAEA;;;;;;;;;;;;;;;;AAeA,OAAO,IAAMH,cAAc,GAAG,UAACI,EAAD,EAGR;EAFlB;EAAA,WAAO,mBAAG,IAAH,GAAOC,EAAd;EAAA,IACGC,KAAK,cAFmB,WAEnB,CADR;;EAGQ,aAAS,GAAcA,KAAK,UAA5B;EAAA,IAAcC,IAAI,UAAKD,KAAL,EAApB,aAAoB,CAAlB;;EAER,IAAME,kBAAkB,GAAGL,UAAU,CAACM,OAAD,CAArC;EAEA,OAAOD,kBAAkB,GACrBX,oBAACa,cAAD,EAAeC;IAACC,SAAS,EAAEA;EAAZ,GAA2BL,IAA3B,CAAf,CADqB,GAGrBV,oBAACE,GAAD,EAAI;IAACc,EAAE,EAAE,CAAL;IAAQC,MAAM,EAAE;EAAhB,CAAJ,CAHJ;AAKH,CAbM;AAePd,cAAc,CAACe,SAAf,GAA2B;EACvBH,SAAS,EAAEV,SAAS,CAACc,MADE;EAEvBP,OAAO,EAAEP,SAAS,CAACe;AAFI,CAA3B,C,CAKA;;AACAjB,cAAc,CAACkB,WAAf,GAA6B,gBAA7B;AAMA,IAAMC,MAAM,GAAG,kBAAf;AAEA,IAAMT,cAAc,GAAGZ,MAAM,CAACG,iBAAD,EAAoB;EAC7CmB,IAAI,EAAED,MADuC;EAE7CE,iBAAiB,EAAE,UAACf,KAAD,EAAQgB,MAAR,EAAc;IAAK,aAAM,CAACC,IAAP;EAAW;AAFJ,CAApB,CAAN,CAGpB,UAACnB,EAAD,EAAU;MAAPoB,KAAK;EAAO,OAAC;IACfC,MAAM,EAAE,UAAGD,KAAK,CAACE,OAAN,CAAc,CAAd,CAAH,EAAmB,IAAnB,CADO;IAEfC,KAAK,EAAEH,KAAK,CAACE,OAAN,CAAc,EAAd;EAFQ,CAAD;AAGhB,CANqB,CAAvB","names":["React","styled","Box","LinearProgress","MuiLinearProgress","PropTypes","useTimeout","_a","_b","props","rest","oneSecondHasPassed","timeout","StyledProgress","__assign","className","my","height","propTypes","string","number","displayName","PREFIX","name","overridesResolver","styles","root","theme","margin","spacing","width"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/layout/LinearProgress.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    Box,\n    LinearProgress as MuiLinearProgress,\n    LinearProgressProps as ProgressProps,\n} from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { useTimeout } from 'ra-core';\n\n/**\n * Progress bar formatted to replace an input or a field in a form layout\n *\n * Avoids visual jumps when replaced by value or form input\n *\n * @see ReferenceField\n * @see ReferenceInput\n *\n * @typedef {Object} Props the props you can use\n * @prop {Object} classes CSS class names\n * @prop {string} className CSS class applied to the LinearProgress component\n * @prop {integer} timeout Milliseconds to wait before showing the progress bar. One second by default\n *\n * @param {Props} props\n */\nexport const LinearProgress = ({\n    timeout = 1000,\n    ...props\n}: LinearProgressProps) => {\n    const { className, ...rest } = props;\n\n    const oneSecondHasPassed = useTimeout(timeout);\n\n    return oneSecondHasPassed ? (\n        <StyledProgress className={className} {...rest} />\n    ) : (\n        <Box my={1} height={4} />\n    );\n};\n\nLinearProgress.propTypes = {\n    className: PropTypes.string,\n    timeout: PropTypes.number,\n};\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nLinearProgress.displayName = 'LinearProgress';\n\nexport interface LinearProgressProps extends ProgressProps {\n    timeout?: number;\n}\n\nconst PREFIX = 'RaLinearProgress';\n\nconst StyledProgress = styled(MuiLinearProgress, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    margin: `${theme.spacing(1)} 0`,\n    width: theme.spacing(20),\n}));\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString, valuesAreUrl, valuesAreImageUrl, valuesAreEmail } from './assertions';\nexport var InferenceTypes = ['array', 'boolean', 'date', 'email', 'id', 'image', 'number', 'reference', 'referenceChild', 'referenceArray', 'referenceArrayChild', 'richText', 'string', 'url', 'object'];\n/**\n * Guesses an element type based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *     );\n *     // { type: 'string', props: { source: 'address' } }\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n */\n\nexport var inferTypeFromValues = function inferTypeFromValues(name, values) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (name === 'id') {\n    return {\n      type: 'id',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (name.substr(name.length - 3) === '_id') {\n    return {\n      type: 'reference',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 3))\n      },\n      children: {\n        type: 'referenceChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 2) === 'Id') {\n    return {\n      type: 'reference',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 2))\n      },\n      children: {\n        type: 'referenceChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 4) === '_ids') {\n    return {\n      type: 'referenceArray',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 4))\n      },\n      children: {\n        type: 'referenceArrayChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 3) === 'Ids') {\n    return {\n      type: 'referenceArray',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 3))\n      },\n      children: {\n        type: 'referenceArrayChild'\n      }\n    };\n  }\n\n  if (values.length === 0) {\n    if (name === 'email') {\n      return {\n        type: 'email',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (name === 'url') {\n      return {\n        type: 'url',\n        props: {\n          source: name\n        }\n      };\n    } // FIXME introspect further using name\n\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreArray(values)) {\n    if (isObject(values[0][0])) {\n      var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) {\n        return acc.concat(vals);\n      }, [])); // FIXME bad visual representation\n\n      return {\n        type: 'array',\n        props: {\n          source: name\n        },\n        children: Object.keys(leafValues_1).map(function (leafName) {\n          return inferTypeFromValues(leafName, leafValues_1[leafName]);\n        })\n      };\n    } // FIXME introspect further\n\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreBoolean(values)) {\n    return {\n      type: 'boolean',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreDate(values)) {\n    return {\n      type: 'date',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreString(values)) {\n    if (name === 'email' || valuesAreEmail(values)) {\n      return {\n        type: 'email',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (name === 'url' || valuesAreUrl(values)) {\n      if (valuesAreImageUrl(values)) {\n        return {\n          type: 'image',\n          props: {\n            source: name\n          }\n        };\n      }\n\n      return {\n        type: 'url',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreDateString(values)) {\n      return {\n        type: 'date',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreHtml(values)) {\n      return {\n        type: 'richText',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n      return {\n        type: 'number',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n    return {\n      type: 'number',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreObject(values)) {\n    /// Arbitrarily, choose the first prop of the first object\n    var propName_1 = Object.keys(values[0]).shift();\n\n    if (!propName_1) {\n      return {\n        type: 'object',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    var leafValues = values.map(function (v) {\n      return v[propName_1];\n    });\n    return inferTypeFromValues(\"\".concat(name, \".\").concat(propName_1), leafValues);\n  }\n\n  return {\n    type: 'string',\n    props: {\n      source: name\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["inflection","getValuesFromRecords","isObject","valuesAreArray","valuesAreBoolean","valuesAreDate","valuesAreDateString","valuesAreHtml","valuesAreInteger","valuesAreNumeric","valuesAreObject","valuesAreString","valuesAreUrl","valuesAreImageUrl","valuesAreEmail","InferenceTypes","inferTypeFromValues","name","values","type","props","source","substr","length","reference","pluralize","children","leafValues_1","reduce","acc","vals","concat","Object","keys","map","leafName","propName_1","shift","leafValues"],"sources":["/var/www/a1boots/node_modules/ra-core/src/inference/inferTypeFromValues.ts"],"sourcesContent":["import inflection from 'inflection';\n\nimport getValuesFromRecords from './getValuesFromRecords';\n\nimport {\n    isObject,\n    valuesAreArray,\n    valuesAreBoolean,\n    valuesAreDate,\n    valuesAreDateString,\n    valuesAreHtml,\n    valuesAreInteger,\n    valuesAreNumeric,\n    valuesAreObject,\n    valuesAreString,\n    valuesAreUrl,\n    valuesAreImageUrl,\n    valuesAreEmail,\n} from './assertions';\n\nexport const InferenceTypes = [\n    'array',\n    'boolean',\n    'date',\n    'email',\n    'id',\n    'image',\n    'number',\n    'reference',\n    'referenceChild',\n    'referenceArray',\n    'referenceArrayChild',\n    'richText',\n    'string',\n    'url',\n    'object',\n] as const;\n\nexport type PossibleInferredElementTypes = typeof InferenceTypes[number];\n\nexport interface InferredElementDescription {\n    type: PossibleInferredElementTypes;\n    props?: any;\n    children?: InferredElementDescription | InferredElementDescription[];\n}\n\n/**\n * Guesses an element type based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *     );\n *     // { type: 'string', props: { source: 'address' } }\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n */\nexport const inferTypeFromValues = (\n    name,\n    values = []\n): InferredElementDescription => {\n    if (name === 'id') {\n        return { type: 'id', props: { source: name } };\n    }\n    if (name.substr(name.length - 3) === '_id') {\n        return {\n            type: 'reference',\n            props: {\n                source: name,\n                reference: inflection.pluralize(\n                    name.substr(0, name.length - 3)\n                ),\n            },\n            children: { type: 'referenceChild' },\n        };\n    }\n    if (name.substr(name.length - 2) === 'Id') {\n        return {\n            type: 'reference',\n            props: {\n                source: name,\n                reference: inflection.pluralize(\n                    name.substr(0, name.length - 2)\n                ),\n            },\n            children: { type: 'referenceChild' },\n        };\n    }\n    if (name.substr(name.length - 4) === '_ids') {\n        return {\n            type: 'referenceArray',\n            props: {\n                source: name,\n                reference: inflection.pluralize(\n                    name.substr(0, name.length - 4)\n                ),\n            },\n            children: { type: 'referenceArrayChild' },\n        };\n    }\n    if (name.substr(name.length - 3) === 'Ids') {\n        return {\n            type: 'referenceArray',\n            props: {\n                source: name,\n                reference: inflection.pluralize(\n                    name.substr(0, name.length - 3)\n                ),\n            },\n            children: { type: 'referenceArrayChild' },\n        };\n    }\n    if (values.length === 0) {\n        if (name === 'email') {\n            return { type: 'email', props: { source: name } };\n        }\n        if (name === 'url') {\n            return { type: 'url', props: { source: name } };\n        }\n        // FIXME introspect further using name\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreArray(values)) {\n        if (isObject(values[0][0])) {\n            const leafValues = getValuesFromRecords(\n                values.reduce((acc, vals) => acc.concat(vals), [])\n            );\n            // FIXME bad visual representation\n            return {\n                type: 'array',\n                props: { source: name },\n                children: Object.keys(leafValues).map(leafName =>\n                    inferTypeFromValues(leafName, leafValues[leafName])\n                ),\n            };\n        }\n        // FIXME introspect further\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreBoolean(values)) {\n        return { type: 'boolean', props: { source: name } };\n    }\n    if (valuesAreDate(values)) {\n        return { type: 'date', props: { source: name } };\n    }\n    if (valuesAreString(values)) {\n        if (name === 'email' || valuesAreEmail(values)) {\n            return { type: 'email', props: { source: name } };\n        }\n        if (name === 'url' || valuesAreUrl(values)) {\n            if (valuesAreImageUrl(values)) {\n                return { type: 'image', props: { source: name } };\n            }\n            return { type: 'url', props: { source: name } };\n        }\n        if (valuesAreDateString(values)) {\n            return { type: 'date', props: { source: name } };\n        }\n        if (valuesAreHtml(values)) {\n            return { type: 'richText', props: { source: name } };\n        }\n        if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n            return { type: 'number', props: { source: name } };\n        }\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n        return { type: 'number', props: { source: name } };\n    }\n    if (valuesAreObject(values)) {\n        /// Arbitrarily, choose the first prop of the first object\n        const propName = Object.keys(values[0]).shift();\n        if (!propName) {\n            return { type: 'object', props: { source: name } };\n        }\n        const leafValues = values.map(v => v[propName]);\n        return inferTypeFromValues(`${name}.${propName}`, leafValues);\n    }\n    return { type: 'string', props: { source: name } };\n};\n"]},"metadata":{},"sourceType":"module"}
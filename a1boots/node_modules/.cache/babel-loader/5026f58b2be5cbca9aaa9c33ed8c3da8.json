{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { AppBar, Tabs } from '@mui/material';\nimport { useTranslatableContext } from 'ra-core';\nimport { TranslatableInputsTab } from './TranslatableInputsTab';\n/**\n * Default locale selector for the TranslatableInputs component. Generates a tab for each specified locale.\n * @see TranslatableInputs\n */\n\nexport var TranslatableInputsTabs = function (props) {\n  var groupKey = props.groupKey,\n      tabsProps = props.TabsProps;\n\n  var _a = useTranslatableContext(),\n      locales = _a.locales,\n      selectLocale = _a.selectLocale,\n      selectedLocale = _a.selectedLocale;\n\n  var handleChange = function (event, newLocale) {\n    selectLocale(newLocale);\n  };\n\n  return React.createElement(StyledAppBar, {\n    color: \"default\",\n    position: \"static\",\n    className: TranslatableInputsTabsClasses.root\n  }, React.createElement(Tabs, __assign({\n    value: selectedLocale,\n    onChange: handleChange,\n    indicatorColor: \"primary\",\n    textColor: \"primary\",\n    className: TranslatableInputsTabsClasses.tabs\n  }, tabsProps), locales.map(function (locale) {\n    return React.createElement(TranslatableInputsTab, {\n      key: locale,\n      value: locale,\n      locale: locale,\n      groupKey: groupKey\n    });\n  })));\n};\nvar PREFIX = 'RaTranslatableInputsTabs';\nexport var TranslatableInputsTabsClasses = {\n  root: \"\".concat(PREFIX, \"-root\"),\n  tabs: \"\".concat(PREFIX, \"-tabs\")\n};\nvar StyledAppBar = styled(AppBar, {\n  name: PREFIX\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"&.\".concat(TranslatableInputsTabsClasses.root)] = {\n    boxShadow: 'none',\n    borderRadius: 0,\n    borderTopLeftRadius: theme.shape.borderRadius,\n    borderTopRightRadius: theme.shape.borderRadius,\n    border: \"1px solid \".concat(theme.palette.divider)\n  }, _b[\"& .\".concat(TranslatableInputsTabsClasses.tabs)] = {\n    minHeight: theme.spacing(3)\n  }, _b;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AAEA,SAASC,MAAT,EAAiBC,IAAjB,QAAwC,eAAxC;AACA,SAASC,sBAAT,QAAuC,SAAvC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AAGA;;;;;AAIA,OAAO,IAAMC,sBAAsB,GAAG,UAClCC,KADkC,EACc;EAExC,YAAQ,GAA2BA,KAAK,SAAxC;EAAA,IAAqBC,SAAS,GAAKD,KAAK,UAAxC;;EACF,SAA4CH,sBAAsB,EAAlE;EAAA,IAAEK,OAAO,aAAT;EAAA,IAAWC,YAAY,kBAAvB;EAAA,IAAyBC,cAAc,oBAAvC;;EAEN,IAAMC,YAAY,GAAG,UAACC,KAAD,EAAQC,SAAR,EAAiB;IAClCJ,YAAY,CAACI,SAAD,CAAZ;EACH,CAFD;;EAIA,OACId,oBAACe,YAAD,EAAa;IACTC,KAAK,EAAC,SADG;IAETC,QAAQ,EAAC,QAFA;IAGTC,SAAS,EAAEC,6BAA6B,CAACC;EAHhC,CAAb,EAKIpB,oBAACG,IAAD,EAAKkB;IACDC,KAAK,EAAEX,cADN;IAEDY,QAAQ,EAAEX,YAFT;IAGDY,cAAc,EAAC,SAHd;IAIDC,SAAS,EAAC,SAJT;IAKDP,SAAS,EAAEC,6BAA6B,CAACO;EALxC,GAMGlB,SANH,CAAL,EAQKC,OAAO,CAACkB,GAAR,CAAY,kBAAM;IAAI,OACnB3B,oBAACK,qBAAD,EAAsB;MAClBuB,GAAG,EAAEC,MADa;MAElBP,KAAK,EAAEO,MAFW;MAGlBA,MAAM,EAAEA,MAHU;MAIlBC,QAAQ,EAAEA;IAJQ,CAAtB,CADmB;EAOtB,CAPA,CARL,CALJ,CADJ;AAyBH,CAnCM;AA0CP,IAAMC,MAAM,GAAG,0BAAf;AAEA,OAAO,IAAMZ,6BAA6B,GAAG;EACzCC,IAAI,EAAE,UAAGW,MAAH,EAAS,OAAT,CADmC;EAEzCL,IAAI,EAAE,UAAGK,MAAH,EAAS,OAAT;AAFmC,CAAtC;AAKP,IAAMhB,YAAY,GAAGd,MAAM,CAACC,MAAD,EAAS;EAAE8B,IAAI,EAAED;AAAR,CAAT,CAAN,CAAiC,UAACE,EAAD,EAAU;;;MAAPC,KAAK;EAAO,gBACjEC,GAAC,YAAKhB,6BAA6B,CAACC,IAAnC,CAAD,IAA6C;IACzCgB,SAAS,EAAE,MAD8B;IAEzCC,YAAY,EAAE,CAF2B;IAGzCC,mBAAmB,EAAEJ,KAAK,CAACK,KAAN,CAAYF,YAHQ;IAIzCG,oBAAoB,EAAEN,KAAK,CAACK,KAAN,CAAYF,YAJO;IAKzCI,MAAM,EAAE,oBAAaP,KAAK,CAACQ,OAAN,CAAcC,OAA3B;EALiC,CADoB,EASjER,GAAC,aAAMhB,6BAA6B,CAACO,IAApC,CAAD,IAA8C;IAC1CkB,SAAS,EAAEV,KAAK,CAACW,OAAN,CAAc,CAAd;EAD+B,CATmB;AAYnE,CAZmB,CAArB","names":["React","styled","AppBar","Tabs","useTranslatableContext","TranslatableInputsTab","TranslatableInputsTabs","props","tabsProps","locales","selectLocale","selectedLocale","handleChange","event","newLocale","StyledAppBar","color","position","className","TranslatableInputsTabsClasses","root","__assign","value","onChange","indicatorColor","textColor","tabs","map","key","locale","groupKey","PREFIX","name","_a","theme","_b","boxShadow","borderRadius","borderTopLeftRadius","shape","borderTopRightRadius","border","palette","divider","minHeight","spacing"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/TranslatableInputsTabs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport { AppBar, Tabs, TabsProps } from '@mui/material';\nimport { useTranslatableContext } from 'ra-core';\nimport { TranslatableInputsTab } from './TranslatableInputsTab';\nimport { AppBarProps } from '../layout';\n\n/**\n * Default locale selector for the TranslatableInputs component. Generates a tab for each specified locale.\n * @see TranslatableInputs\n */\nexport const TranslatableInputsTabs = (\n    props: TranslatableInputsTabsProps & AppBarProps\n): ReactElement => {\n    const { groupKey, TabsProps: tabsProps } = props;\n    const { locales, selectLocale, selectedLocale } = useTranslatableContext();\n\n    const handleChange = (event, newLocale): void => {\n        selectLocale(newLocale);\n    };\n\n    return (\n        <StyledAppBar\n            color=\"default\"\n            position=\"static\"\n            className={TranslatableInputsTabsClasses.root}\n        >\n            <Tabs\n                value={selectedLocale}\n                onChange={handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                className={TranslatableInputsTabsClasses.tabs}\n                {...tabsProps}\n            >\n                {locales.map(locale => (\n                    <TranslatableInputsTab\n                        key={locale}\n                        value={locale}\n                        locale={locale}\n                        groupKey={groupKey}\n                    />\n                ))}\n            </Tabs>\n        </StyledAppBar>\n    );\n};\n\nexport interface TranslatableInputsTabsProps {\n    groupKey?: string;\n    TabsProps?: TabsProps;\n}\n\nconst PREFIX = 'RaTranslatableInputsTabs';\n\nexport const TranslatableInputsTabsClasses = {\n    root: `${PREFIX}-root`,\n    tabs: `${PREFIX}-tabs`,\n};\n\nconst StyledAppBar = styled(AppBar, { name: PREFIX })(({ theme }) => ({\n    [`&.${TranslatableInputsTabsClasses.root}`]: {\n        boxShadow: 'none',\n        borderRadius: 0,\n        borderTopLeftRadius: theme.shape.borderRadius,\n        borderTopRightRadius: theme.shape.borderRadius,\n        border: `1px solid ${theme.palette.divider}`,\n    },\n\n    [`& .${TranslatableInputsTabsClasses.tabs}`]: {\n        minHeight: theme.spacing(3),\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
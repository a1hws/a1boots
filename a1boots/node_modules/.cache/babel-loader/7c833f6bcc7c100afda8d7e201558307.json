{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/**\n * Convert a simple validation function that returns an object matching the form shape with errors\n * to a validation resolver compatible with react-hook-form.\n *\n * @example\n * const validate = (values: any) => {\n *     if (values.username == null || values.username.trim() === '') {\n *         return { username: 'Required' };\n *     }\n * }\n *\n * const validationResolver = getSimpleValidationResolver(validate);\n *\n * const UserForm = () => (\n *     <Form\n *         defaultValues={{ username: 'John' }}\n *         validationResolver={validationResolver}\n *     >\n *         <TextField source=\"username\" />\n *     </Form>\n * );\n */\n\n\nexport var getSimpleValidationResolver = function getSimpleValidationResolver(validate) {\n  return function (data) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var errors, transformedErrors;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , validate(data)];\n\n          case 1:\n            errors = _a.sent(); // If there are no errors, early return the form values\n\n            if (!errors || isEmptyObject(errors)) {\n              return [2\n              /*return*/\n              , {\n                values: data,\n                errors: {}\n              }];\n            }\n\n            transformedErrors = transformErrorFields(errors); // Sometimes we still need to transform the error object to realize there are actually\n            // no errors in it.\n            //   e.g. with an ArrayInput we can get something like: `{backlinks: [{}, {}]}`\n            // If, after transformation, there are no errors, we return the form values\n\n            if (!transformedErrors || isEmptyObject(transformedErrors)) {\n              return [2\n              /*return*/\n              , {\n                values: data,\n                errors: {}\n              }];\n            } // Else return the errors and no values\n\n\n            return [2\n            /*return*/\n            , {\n              values: {},\n              errors: transformedErrors\n            }];\n        }\n      });\n    });\n  };\n};\n\nvar transformErrorFields = function transformErrorFields(error) {\n  return Object.keys(error).reduce(function (acc, field) {\n    var _a, _b, _c; // Handle arrays\n\n\n    if (Array.isArray(error[field])) {\n      var arrayHasErrors_1 = false;\n      var transformedArrayErrors = error[field].map(function (item) {\n        if (!isEmptyObject(item)) {\n          arrayHasErrors_1 = true;\n        }\n\n        return transformErrorFields(item);\n      });\n\n      if (!arrayHasErrors_1) {\n        return acc;\n      }\n\n      return __assign(__assign({}, acc), (_a = {}, _a[field] = transformedArrayErrors, _a));\n    } // Handle objects\n\n\n    if (isEmptyObject(error[field])) {\n      return acc;\n    }\n\n    if (typeof error[field] === 'object' && !isRaTranslationObj(error[field])) {\n      return __assign(__assign({}, acc), (_b = {}, _b[field] = transformErrorFields(error[field]), _b));\n    } // Handle leaf (either primary type or RaTranslationObj)\n\n\n    return __assign(__assign({}, acc), (_c = {}, _c[field] = addTypeAndMessage(error[field]), _c));\n  }, {});\n};\n\nvar addTypeAndMessage = function addTypeAndMessage(error) {\n  return {\n    type: 'manual',\n    message: isRaTranslationObj(error) ? error : {\n      message: error\n    }\n  };\n};\n\nvar isRaTranslationObj = function isRaTranslationObj(obj) {\n  return Object.keys(obj).includes('message') && Object.keys(obj).includes('args');\n};\n\nvar isEmptyObject = function isEmptyObject(obj) {\n  return Object.getOwnPropertyNames(obj).length === 0;\n};","map":{"version":3,"mappings":"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","names":["getSimpleValidationResolver","validate","data","errors","_a","isEmptyObject","values","transformedErrors","transformErrorFields","error","Object","keys","reduce","acc","field","Array","isArray","arrayHasErrors_1","transformedArrayErrors","map","item","isRaTranslationObj","_b","_c","addTypeAndMessage","type","message","obj","includes","getOwnPropertyNames","length"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/getSimpleValidationResolver.ts"],"sourcesContent":["import { FieldValues } from 'react-hook-form';\n\n/**\n * Convert a simple validation function that returns an object matching the form shape with errors\n * to a validation resolver compatible with react-hook-form.\n *\n * @example\n * const validate = (values: any) => {\n *     if (values.username == null || values.username.trim() === '') {\n *         return { username: 'Required' };\n *     }\n * }\n *\n * const validationResolver = getSimpleValidationResolver(validate);\n *\n * const UserForm = () => (\n *     <Form\n *         defaultValues={{ username: 'John' }}\n *         validationResolver={validationResolver}\n *     >\n *         <TextField source=\"username\" />\n *     </Form>\n * );\n */\nexport const getSimpleValidationResolver = (validate: ValidateForm) => async (\n    data: FieldValues\n) => {\n    const errors = await validate(data);\n\n    // If there are no errors, early return the form values\n    if (!errors || isEmptyObject(errors)) {\n        return { values: data, errors: {} };\n    }\n\n    // Else, we return an error object shaped like errors but having for each leaf\n    // `type: 'manual'` and a `message` prop like react-hook-form expects it\n    const transformedErrors = transformErrorFields(errors);\n\n    // Sometimes we still need to transform the error object to realize there are actually\n    // no errors in it.\n    //   e.g. with an ArrayInput we can get something like: `{backlinks: [{}, {}]}`\n    // If, after transformation, there are no errors, we return the form values\n    if (!transformedErrors || isEmptyObject(transformedErrors)) {\n        return { values: data, errors: {} };\n    }\n\n    // Else return the errors and no values\n    return {\n        values: {},\n        errors: transformedErrors,\n    };\n};\n\nconst transformErrorFields = (error: object) => {\n    return Object.keys(error).reduce((acc, field) => {\n        // Handle arrays\n        if (Array.isArray(error[field])) {\n            let arrayHasErrors = false;\n            const transformedArrayErrors = error[field].map(item => {\n                if (!isEmptyObject(item)) {\n                    arrayHasErrors = true;\n                }\n                return transformErrorFields(item);\n            });\n            if (!arrayHasErrors) {\n                return acc;\n            }\n            return {\n                ...acc,\n                [field]: transformedArrayErrors,\n            };\n        }\n\n        // Handle objects\n        if (isEmptyObject(error[field])) {\n            return acc;\n        }\n        if (\n            typeof error[field] === 'object' &&\n            !isRaTranslationObj(error[field])\n        ) {\n            return {\n                ...acc,\n                [field]: transformErrorFields(error[field]),\n            };\n        }\n\n        // Handle leaf (either primary type or RaTranslationObj)\n        return {\n            ...acc,\n            [field]: addTypeAndMessage(error[field]),\n        };\n    }, {} as FieldValues);\n};\n\nconst addTypeAndMessage = (error: object) => ({\n    type: 'manual',\n    message: isRaTranslationObj(error) ? error : { message: error },\n});\n\nconst isRaTranslationObj = (obj: object) =>\n    Object.keys(obj).includes('message') && Object.keys(obj).includes('args');\n\nconst isEmptyObject = (obj: object) =>\n    Object.getOwnPropertyNames(obj).length === 0;\n\nexport type ValidateForm = (\n    data: FieldValues\n) => FieldValues | Promise<FieldValues>;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { isValidElement, useEffect, useMemo } from 'react';\nimport { useAuthenticated } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport { useInfiniteGetList } from '../../dataProvider';\nimport { defaultExporter } from '../../export';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\n/**\n * Prepare data for the InfiniteList view\n *\n * @param {Object} props The props passed to the InfiniteList component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useInfiniteListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useInfiniteListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\n\nexport var useInfiniteListController = function (props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _a = props.debounce,\n      debounce = _a === void 0 ? 500 : _a,\n      disableAuthentication = props.disableAuthentication,\n      disableSyncWithLocation = props.disableSyncWithLocation,\n      _b = props.exporter,\n      exporter = _b === void 0 ? defaultExporter : _b,\n      filter = props.filter,\n      filterDefaultValues = props.filterDefaultValues,\n      _c = props.perPage,\n      perPage = _c === void 0 ? 10 : _c,\n      _d = props.queryOptions,\n      queryOptions = _d === void 0 ? {} : _d,\n      sort = props.sort,\n      storeKey = props.storeKey;\n  useAuthenticated({\n    enabled: !disableAuthentication\n  });\n  var resource = useResourceContext(props);\n\n  var meta = queryOptions.meta,\n      otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n\n  if (!resource) {\n    throw new Error(\"<InfiniteList> was called outside of a ResourceContext and without a resource prop. You must set the resource prop.\");\n  }\n\n  if (filter && isValidElement(filter)) {\n    throw new Error('<InfiniteList> received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.');\n  }\n\n  var translate = useTranslate();\n  var notify = useNotify();\n\n  var _e = useListParams({\n    debounce: debounce,\n    disableSyncWithLocation: disableSyncWithLocation,\n    filterDefaultValues: filterDefaultValues,\n    perPage: perPage,\n    resource: resource,\n    sort: sort,\n    storeKey: storeKey\n  }),\n      query = _e[0],\n      queryModifiers = _e[1];\n\n  var _f = useRecordSelection(resource),\n      selectedIds = _f[0],\n      selectionModifiers = _f[1];\n\n  var _g = useInfiniteGetList(resource, {\n    pagination: {\n      page: query.page,\n      perPage: query.perPage\n    },\n    sort: {\n      field: query.sort,\n      order: query.order\n    },\n    filter: __assign(__assign({}, query.filter), filter),\n    meta: meta\n  }, __assign({\n    keepPreviousData: true,\n    retry: false,\n    onError: function (error) {\n      return notify((error === null || error === void 0 ? void 0 : error.message) || 'ra.notification.http_error', {\n        type: 'error',\n        messageArgs: {\n          _: error === null || error === void 0 ? void 0 : error.message\n        }\n      });\n    }\n  }, otherQueryOptions)),\n      data = _g.data,\n      total = _g.total,\n      error = _g.error,\n      isLoading = _g.isLoading,\n      isFetching = _g.isFetching,\n      hasNextPage = _g.hasNextPage,\n      hasPreviousPage = _g.hasPreviousPage,\n      fetchNextPage = _g.fetchNextPage,\n      isFetchingNextPage = _g.isFetchingNextPage,\n      fetchPreviousPage = _g.fetchPreviousPage,\n      isFetchingPreviousPage = _g.isFetchingPreviousPage,\n      refetch = _g.refetch; // change page if there is no data\n\n\n  useEffect(function () {\n    if (query.page <= 0 || !isFetching && query.page > 1 && (data == null || (data === null || data === void 0 ? void 0 : data.pages.length) === 0)) {\n      // Query for a page that doesn't exist, set page to 1\n      queryModifiers.setPage(1);\n      return;\n    }\n\n    if (total == null) {\n      return;\n    }\n\n    var totalPages = Math.ceil(total / query.perPage) || 1;\n\n    if (!isFetching && query.page > totalPages) {\n      // Query for a page out of bounds, set page to the last existing page\n      // It occurs when deleting the last element of the last page\n      queryModifiers.setPage(totalPages);\n    }\n  }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n  var currentSort = useMemo(function () {\n    return {\n      field: query.sort,\n      order: query.order\n    };\n  }, [query.sort, query.order]);\n  var getResourceLabel = useGetResourceLabel();\n  var defaultTitle = translate('ra.page.list', {\n    name: getResourceLabel(resource, 2)\n  });\n  var unwrappedData = useMemo(function () {\n    var _a;\n\n    return (_a = data === null || data === void 0 ? void 0 : data.pages) === null || _a === void 0 ? void 0 : _a.reduce(function (acc, page) {\n      return __spreadArray(__spreadArray([], acc, true), page.data, true);\n    }, []);\n  }, [data]);\n  return {\n    sort: currentSort,\n    data: unwrappedData,\n    defaultTitle: defaultTitle,\n    displayedFilters: query.displayedFilters,\n    error: error,\n    exporter: exporter,\n    filter: filter,\n    filterValues: query.filterValues,\n    hideFilter: queryModifiers.hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: query.page,\n    perPage: query.perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: queryModifiers.setFilters,\n    setPage: queryModifiers.setPage,\n    setPerPage: queryModifiers.setPerPage,\n    setSort: queryModifiers.setSort,\n    showFilter: queryModifiers.showFilter,\n    total: total,\n    hasNextPage: hasNextPage,\n    hasPreviousPage: hasPreviousPage,\n    fetchNextPage: fetchNextPage,\n    isFetchingNextPage: isFetchingNextPage,\n    fetchPreviousPage: fetchPreviousPage,\n    isFetchingPreviousPage: isFetchingPreviousPage\n  };\n};","map":{"version":3,"mappings":"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","names":["isValidElement","useEffect","useMemo","useAuthenticated","useTranslate","useNotify","useInfiniteGetList","defaultExporter","useResourceContext","useGetResourceLabel","useRecordSelection","useListParams","useInfiniteListController","props","_a","disableAuthentication","disableSyncWithLocation","_b","exporter","filter","filterDefaultValues","_c","perPage","_d","queryOptions","sort","storeKey","enabled","resource","otherQueryOptions","Error","translate","notify","debounce","query","queryModifiers","selectedIds","selectionModifiers","pagination","page","field","order","meta","__assign","keepPreviousData","retry","onError","message","type","messageArgs","_","error","data","total","isLoading","isFetching","hasNextPage","hasPreviousPage","fetchNextPage","isFetchingNextPage","fetchPreviousPage","isFetchingPreviousPage","refetch","pages","length","setPage","totalPages","Math","ceil","currentSort","getResourceLabel","defaultTitle","name","unwrappedData","reduce","acc","displayedFilters","filterValues","hideFilter","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection","setFilters","setPerPage","setSort","showFilter"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/list/useInfiniteListController.ts"],"sourcesContent":["import { isValidElement, useEffect, useMemo } from 'react';\nimport {\n    UseInfiniteQueryOptions,\n    InfiniteQueryObserverBaseResult,\n} from 'react-query';\n\nimport { useAuthenticated } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport { useInfiniteGetList } from '../../dataProvider';\nimport { defaultExporter } from '../../export';\nimport {\n    RaRecord,\n    SortPayload,\n    FilterPayload,\n    Exporter,\n    GetInfiniteListResult,\n} from '../../types';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\n\nimport { ListControllerResult } from './useListController';\n\n/**\n * Prepare data for the InfiniteList view\n *\n * @param {Object} props The props passed to the InfiniteList component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useInfiniteListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useInfiniteListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\nexport const useInfiniteListController = <RecordType extends RaRecord = any>(\n    props: InfiniteListControllerProps<RecordType> = {}\n): InfiniteListControllerResult<RecordType> => {\n    const {\n        debounce = 500,\n        disableAuthentication,\n        disableSyncWithLocation,\n        exporter = defaultExporter,\n        filter,\n        filterDefaultValues,\n        perPage = 10,\n        queryOptions = {},\n        sort,\n        storeKey,\n    } = props;\n    useAuthenticated({ enabled: !disableAuthentication });\n    const resource = useResourceContext(props);\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    if (!resource) {\n        throw new Error(\n            `<InfiniteList> was called outside of a ResourceContext and without a resource prop. You must set the resource prop.`\n        );\n    }\n    if (filter && isValidElement(filter)) {\n        throw new Error(\n            '<InfiniteList> received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.'\n        );\n    }\n\n    const translate = useTranslate();\n    const notify = useNotify();\n\n    const [query, queryModifiers] = useListParams({\n        debounce,\n        disableSyncWithLocation,\n        filterDefaultValues,\n        perPage,\n        resource,\n        sort,\n        storeKey,\n    });\n\n    const [selectedIds, selectionModifiers] = useRecordSelection(resource);\n\n    const {\n        data,\n        total,\n        error,\n        isLoading,\n        isFetching,\n        hasNextPage,\n        hasPreviousPage,\n        fetchNextPage,\n        isFetchingNextPage,\n        fetchPreviousPage,\n        isFetchingPreviousPage,\n        refetch,\n    } = useInfiniteGetList<RecordType>(\n        resource,\n        {\n            pagination: {\n                page: query.page,\n                perPage: query.perPage,\n            },\n            sort: { field: query.sort, order: query.order },\n            filter: { ...query.filter, ...filter },\n            meta,\n        },\n        {\n            keepPreviousData: true,\n            retry: false,\n            onError: error =>\n                notify(error?.message || 'ra.notification.http_error', {\n                    type: 'error',\n                    messageArgs: {\n                        _: error?.message,\n                    },\n                }),\n            ...otherQueryOptions,\n        }\n    );\n\n    // change page if there is no data\n    useEffect(() => {\n        if (\n            query.page <= 0 ||\n            (!isFetching &&\n                query.page > 1 &&\n                (data == null || data?.pages.length === 0))\n        ) {\n            // Query for a page that doesn't exist, set page to 1\n            queryModifiers.setPage(1);\n            return;\n        }\n        if (total == null) {\n            return;\n        }\n        const totalPages = Math.ceil(total / query.perPage) || 1;\n        if (!isFetching && query.page > totalPages) {\n            // Query for a page out of bounds, set page to the last existing page\n            // It occurs when deleting the last element of the last page\n            queryModifiers.setPage(totalPages);\n        }\n    }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n\n    const currentSort = useMemo(\n        () => ({\n            field: query.sort,\n            order: query.order,\n        }),\n        [query.sort, query.order]\n    );\n\n    const getResourceLabel = useGetResourceLabel();\n    const defaultTitle = translate('ra.page.list', {\n        name: getResourceLabel(resource, 2),\n    });\n\n    const unwrappedData = useMemo(\n        () => data?.pages?.reduce((acc, page) => [...acc, ...page.data], []),\n        [data]\n    );\n\n    return {\n        sort: currentSort,\n        data: unwrappedData,\n        defaultTitle,\n        displayedFilters: query.displayedFilters,\n        error,\n        exporter,\n        filter,\n        filterValues: query.filterValues,\n        hideFilter: queryModifiers.hideFilter,\n        isFetching,\n        isLoading,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page: query.page,\n        perPage: query.perPage,\n        refetch,\n        resource,\n        selectedIds,\n        setFilters: queryModifiers.setFilters,\n        setPage: queryModifiers.setPage,\n        setPerPage: queryModifiers.setPerPage,\n        setSort: queryModifiers.setSort,\n        showFilter: queryModifiers.showFilter,\n        total: total,\n        hasNextPage,\n        hasPreviousPage,\n        fetchNextPage,\n        isFetchingNextPage,\n        fetchPreviousPage,\n        isFetchingPreviousPage,\n    };\n};\n\nexport interface InfiniteListControllerProps<\n    RecordType extends RaRecord = any\n> {\n    debounce?: number;\n    disableAuthentication?: boolean;\n    /**\n     * Whether to disable the synchronization of the list parameters with the current location (URL search parameters)\n     */\n    disableSyncWithLocation?: boolean;\n    exporter?: Exporter | false;\n    filter?: FilterPayload;\n    filterDefaultValues?: object;\n    perPage?: number;\n    // FIXME: Make it generic, but Parameters<typeof useInfiniteQuery<RecordType>>[2] doesn't work\n    queryOptions?: UseInfiniteQueryOptions<\n        GetInfiniteListResult<RecordType>,\n        Error\n    >;\n    resource?: string;\n    sort?: SortPayload;\n    storeKey?: string;\n}\n\nexport interface InfiniteListControllerResult<RecordType extends RaRecord = any>\n    extends ListControllerResult<RecordType> {\n    fetchNextPage: InfiniteQueryObserverBaseResult<\n        GetInfiniteListResult<RecordType>\n    >['fetchNextPage'];\n    fetchPreviousPage: InfiniteQueryObserverBaseResult<\n        GetInfiniteListResult<RecordType>\n    >['fetchPreviousPage'];\n    isFetchingNextPage: InfiniteQueryObserverBaseResult<\n        GetInfiniteListResult<RecordType>\n    >['isFetchingNextPage'];\n    isFetchingPreviousPage: InfiniteQueryObserverBaseResult<\n        GetInfiniteListResult<RecordType>\n    >['isFetchingPreviousPage'];\n}\n"]},"metadata":{},"sourceType":"module"}
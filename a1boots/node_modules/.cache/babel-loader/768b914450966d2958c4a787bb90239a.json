{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { cloneElement, Children, useEffect } from 'react';\nimport clsx from 'clsx';\nimport { isRequired, FieldTitle, composeSyncValidators, useApplyInputDefaultValues, useGetValidationErrorMessage, useFormGroupContext, useFormGroups } from 'ra-core';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\nimport { InputLabel, FormControl, FormHelperText, styled } from '@mui/material';\nimport { LinearProgress } from '../../layout';\nimport { InputHelperText } from '../InputHelperText';\nimport { sanitizeInputRestProps } from '../sanitizeInputRestProps';\nimport { Labeled } from '../../Labeled';\nimport { ArrayInputContext } from './ArrayInputContext';\n/**\n * To edit arrays of data embedded inside a record, <ArrayInput> creates a list of sub-forms.\n *\n *  @example\n *\n *      import { ArrayInput, SimpleFormIterator, DateInput, TextInput } from 'react-admin';\n *\n *      <ArrayInput source=\"backlinks\">\n *          <SimpleFormIterator>\n *              <DateInput source=\"date\" />\n *              <TextInput source=\"url\" />\n *          </SimpleFormIterator>\n *      </ArrayInput>\n *\n * <ArrayInput> allows the edition of embedded arrays, like the backlinks field\n * in the following post record:\n *\n * {\n *   id: 123\n *   backlinks: [\n *         {\n *             date: '2012-08-10T00:00:00.000Z',\n *             url: 'http://example.com/foo/bar.html',\n *         },\n *         {\n *             date: '2012-08-14T00:00:00.000Z',\n *             url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n *         }\n *    ]\n * }\n *\n * <ArrayInput> expects a single child, which must be a *form iterator* component.\n * A form iterator is a component accepting a fields object as passed by\n * react-hook-form-arrays's useFieldArray() hook, and defining a layout for\n * an array of fields. For instance, the <SimpleFormIterator> component\n * displays an array of fields in an unordered list (<ul>), one sub-form by\n * list item (<li>). It also provides controls for adding and removing\n * a sub-record (a backlink in this example).\n *\n * @see {@link https://react-hook-form.com/api/usefieldarray}\n */\n\nexport var ArrayInput = function (props) {\n  var _a, _b;\n\n  var className = props.className,\n      defaultValue = props.defaultValue,\n      label = props.label,\n      isFetching = props.isFetching,\n      isLoading = props.isLoading,\n      children = props.children,\n      helperText = props.helperText,\n      record = props.record,\n      resourceFromProps = props.resource,\n      source = props.source,\n      validate = props.validate,\n      variant = props.variant,\n      disabled = props.disabled,\n      _c = props.margin,\n      margin = _c === void 0 ? 'dense' : _c,\n      rest = __rest(props, [\"className\", \"defaultValue\", \"label\", \"isFetching\", \"isLoading\", \"children\", \"helperText\", \"record\", \"resource\", \"source\", \"validate\", \"variant\", \"disabled\", \"margin\"]);\n\n  var formGroupName = useFormGroupContext();\n  var formGroups = useFormGroups();\n  var sanitizedValidate = Array.isArray(validate) ? composeSyncValidators(validate) : validate;\n  var getValidationErrorMessage = useGetValidationErrorMessage();\n\n  var _d = useFormContext(),\n      getFieldState = _d.getFieldState,\n      formState = _d.formState,\n      getValues = _d.getValues,\n      register = _d.register,\n      unregister = _d.unregister;\n\n  var fieldProps = useFieldArray({\n    name: source,\n    rules: {\n      validate: function (value) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var error;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!sanitizedValidate) return [2\n                /*return*/\n                , true];\n                return [4\n                /*yield*/\n                , sanitizedValidate(value, getValues(), props)];\n\n              case 1:\n                error = _a.sent();\n                if (!error) return [2\n                /*return*/\n                , true];\n                return [2\n                /*return*/\n                , getValidationErrorMessage(error)];\n            }\n          });\n        });\n      }\n    }\n  });\n  var isSubmitted = formState.isSubmitted; // We need to register the array itself as a field to enable validation at its level\n\n  useEffect(function () {\n    register(source);\n    formGroups.registerField(source, formGroupName);\n    return function () {\n      unregister(source, {\n        keepValue: true\n      });\n      formGroups.unregisterField(source, formGroupName);\n    };\n  }, [register, unregister, source, formGroups, formGroupName]);\n  useApplyInputDefaultValues(props);\n\n  var _e = getFieldState(source, formState),\n      isDirty = _e.isDirty,\n      error = _e.error;\n\n  if (isLoading) {\n    return React.createElement(Labeled, {\n      label: label,\n      className: className\n    }, React.createElement(LinearProgress, null));\n  }\n\n  return React.createElement(Root, __assign({\n    fullWidth: true,\n    margin: margin,\n    className: clsx('ra-input', \"ra-input-\".concat(source), ArrayInputClasses.root, className),\n    error: (isDirty || isSubmitted) && !!error\n  }, sanitizeInputRestProps(rest)), React.createElement(InputLabel, {\n    htmlFor: source,\n    className: ArrayInputClasses.label,\n    shrink: true,\n    error: (isDirty || isSubmitted) && !!error\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resourceFromProps,\n    isRequired: isRequired(validate)\n  })), React.createElement(ArrayInputContext.Provider, {\n    value: fieldProps\n  }, cloneElement(Children.only(children), __assign(__assign({}, fieldProps), {\n    record: record,\n    resource: resourceFromProps,\n    source: source,\n    variant: variant,\n    margin: margin,\n    disabled: disabled\n  }))), !!((isDirty || isSubmitted) && !!error) || helperText ? React.createElement(FormHelperText, {\n    error: (isDirty || isSubmitted) && !!error\n  }, React.createElement(InputHelperText, {\n    touched: isDirty || isSubmitted,\n    // root property is applicable to built-in validation only,\n    // Resolvers are yet to support useFieldArray root level validation.\n    // Reference: https://react-hook-form.com/api/usefieldarray\n    error: (_b = (_a = error === null || error === void 0 ? void 0 : error.root) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : error === null || error === void 0 ? void 0 : error.message,\n    helperText: helperText\n  })) : null);\n};\nArrayInput.defaultProps = {\n  options: {}\n};\nexport var getArrayInputError = function (error) {\n  if (Array.isArray(error)) {\n    return undefined;\n  }\n\n  return error;\n};\nvar PREFIX = 'RaArrayInput';\nexport var ArrayInputClasses = {\n  root: \"\".concat(PREFIX, \"-root\"),\n  label: \"\".concat(PREFIX, \"-label\")\n};\nvar Root = styled(FormControl, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {\n    marginTop: 0\n  }, _b[\"& .\".concat(ArrayInputClasses.label)] = {\n    position: 'relative',\n    top: theme.spacing(0.5),\n    left: theme.spacing(-1.5)\n  }, _b[\"& .\".concat(ArrayInputClasses.root)] = {\n    // nested ArrayInput\n    paddingLeft: theme.spacing(2)\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","cloneElement","Children","useEffect","clsx","isRequired","FieldTitle","composeSyncValidators","useApplyInputDefaultValues","useGetValidationErrorMessage","useFormGroupContext","useFormGroups","useFieldArray","useFormContext","InputLabel","FormControl","FormHelperText","styled","LinearProgress","InputHelperText","sanitizeInputRestProps","Labeled","ArrayInputContext","ArrayInput","props","defaultValue","label","isFetching","isLoading","children","helperText","record","resourceFromProps","source","validate","variant","disabled","_c","margin","rest","formGroupName","formGroups","sanitizedValidate","Array","isArray","getValidationErrorMessage","getFieldState","formState","getValues","register","unregister","fieldProps","name","rules","value","error","_a","registerField","keepValue","unregisterField","isDirty","className","Root","__assign","fullWidth","ArrayInputClasses","root","isSubmitted","htmlFor","shrink","resource","Provider","only","touched","message","_b","defaultProps","options","getArrayInputError","undefined","PREFIX","overridesResolver","styles","theme","marginTop","position","top","spacing","left","paddingLeft"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/ArrayInput/ArrayInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { cloneElement, Children, ReactElement, useEffect } from 'react';\nimport clsx from 'clsx';\nimport {\n    isRequired,\n    FieldTitle,\n    composeSyncValidators,\n    RaRecord,\n    useApplyInputDefaultValues,\n    useGetValidationErrorMessage,\n    useFormGroupContext,\n    useFormGroups,\n} from 'ra-core';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\nimport {\n    InputLabel,\n    FormControl,\n    FormHelperText,\n    FormControlProps,\n    styled,\n} from '@mui/material';\n\nimport { LinearProgress } from '../../layout';\nimport { CommonInputProps } from '../CommonInputProps';\nimport { InputHelperText } from '../InputHelperText';\nimport { sanitizeInputRestProps } from '../sanitizeInputRestProps';\nimport { Labeled } from '../../Labeled';\nimport { ArrayInputContext } from './ArrayInputContext';\n\n/**\n * To edit arrays of data embedded inside a record, <ArrayInput> creates a list of sub-forms.\n *\n *  @example\n *\n *      import { ArrayInput, SimpleFormIterator, DateInput, TextInput } from 'react-admin';\n *\n *      <ArrayInput source=\"backlinks\">\n *          <SimpleFormIterator>\n *              <DateInput source=\"date\" />\n *              <TextInput source=\"url\" />\n *          </SimpleFormIterator>\n *      </ArrayInput>\n *\n * <ArrayInput> allows the edition of embedded arrays, like the backlinks field\n * in the following post record:\n *\n * {\n *   id: 123\n *   backlinks: [\n *         {\n *             date: '2012-08-10T00:00:00.000Z',\n *             url: 'http://example.com/foo/bar.html',\n *         },\n *         {\n *             date: '2012-08-14T00:00:00.000Z',\n *             url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n *         }\n *    ]\n * }\n *\n * <ArrayInput> expects a single child, which must be a *form iterator* component.\n * A form iterator is a component accepting a fields object as passed by\n * react-hook-form-arrays's useFieldArray() hook, and defining a layout for\n * an array of fields. For instance, the <SimpleFormIterator> component\n * displays an array of fields in an unordered list (<ul>), one sub-form by\n * list item (<li>). It also provides controls for adding and removing\n * a sub-record (a backlink in this example).\n *\n * @see {@link https://react-hook-form.com/api/usefieldarray}\n */\nexport const ArrayInput = (props: ArrayInputProps) => {\n    const {\n        className,\n        defaultValue,\n        label,\n        isFetching,\n        isLoading,\n        children,\n        helperText,\n        record,\n        resource: resourceFromProps,\n        source,\n        validate,\n        variant,\n        disabled,\n        margin = 'dense',\n        ...rest\n    } = props;\n\n    const formGroupName = useFormGroupContext();\n    const formGroups = useFormGroups();\n\n    const sanitizedValidate = Array.isArray(validate)\n        ? composeSyncValidators(validate)\n        : validate;\n    const getValidationErrorMessage = useGetValidationErrorMessage();\n\n    const {\n        getFieldState,\n        formState,\n        getValues,\n        register,\n        unregister,\n    } = useFormContext();\n\n    const fieldProps = useFieldArray({\n        name: source,\n        rules: {\n            validate: async value => {\n                if (!sanitizedValidate) return true;\n                const error = await sanitizedValidate(\n                    value,\n                    getValues(),\n                    props\n                );\n\n                if (!error) return true;\n                return getValidationErrorMessage(error);\n            },\n        },\n    });\n\n    const { isSubmitted } = formState;\n\n    // We need to register the array itself as a field to enable validation at its level\n    useEffect(() => {\n        register(source);\n        formGroups.registerField(source, formGroupName);\n\n        return () => {\n            unregister(source, { keepValue: true });\n            formGroups.unregisterField(source, formGroupName);\n        };\n    }, [register, unregister, source, formGroups, formGroupName]);\n\n    useApplyInputDefaultValues(props);\n\n    const { isDirty, error } = getFieldState(source, formState);\n\n    if (isLoading) {\n        return (\n            <Labeled label={label} className={className}>\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n\n    return (\n        <Root\n            fullWidth\n            margin={margin}\n            className={clsx(\n                'ra-input',\n                `ra-input-${source}`,\n                ArrayInputClasses.root,\n                className\n            )}\n            error={(isDirty || isSubmitted) && !!error}\n            {...sanitizeInputRestProps(rest)}\n        >\n            <InputLabel\n                htmlFor={source}\n                className={ArrayInputClasses.label}\n                shrink\n                error={(isDirty || isSubmitted) && !!error}\n            >\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resourceFromProps}\n                    isRequired={isRequired(validate)}\n                />\n            </InputLabel>\n            <ArrayInputContext.Provider value={fieldProps}>\n                {cloneElement(Children.only(children), {\n                    ...fieldProps,\n                    record,\n                    resource: resourceFromProps,\n                    source,\n                    variant,\n                    margin,\n                    disabled,\n                })}\n            </ArrayInputContext.Provider>\n            {!!((isDirty || isSubmitted) && !!error) || helperText ? (\n                <FormHelperText error={(isDirty || isSubmitted) && !!error}>\n                    <InputHelperText\n                        touched={isDirty || isSubmitted}\n                        // root property is applicable to built-in validation only,\n                        // Resolvers are yet to support useFieldArray root level validation.\n                        // Reference: https://react-hook-form.com/api/usefieldarray\n                        error={error?.root?.message ?? error?.message}\n                        helperText={helperText}\n                    />\n                </FormHelperText>\n            ) : null}\n        </Root>\n    );\n};\n\nArrayInput.defaultProps = {\n    options: {},\n};\n\nexport const getArrayInputError = error => {\n    if (Array.isArray(error)) {\n        return undefined;\n    }\n    return error;\n};\n\nexport interface ArrayInputProps\n    extends CommonInputProps,\n        Omit<FormControlProps, 'defaultValue' | 'onBlur' | 'onChange'> {\n    className?: string;\n    children: ReactElement;\n    disabled?: boolean;\n    isFetching?: boolean;\n    isLoading?: boolean;\n    record?: Partial<RaRecord>;\n}\n\nconst PREFIX = 'RaArrayInput';\n\nexport const ArrayInputClasses = {\n    root: `${PREFIX}-root`,\n    label: `${PREFIX}-label`,\n};\n\nconst Root = styled(FormControl, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    marginTop: 0,\n    [`& .${ArrayInputClasses.label}`]: {\n        position: 'relative',\n        top: theme.spacing(0.5),\n        left: theme.spacing(-1.5),\n    },\n    [`& .${ArrayInputClasses.root}`]: {\n        // nested ArrayInput\n        paddingLeft: theme.spacing(2),\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { memo, isValidElement } from 'react';\nimport { IconButton, ListItem, ListItemButton, ListItemText, ListItemSecondaryAction } from '@mui/material';\nimport CancelIcon from '@mui/icons-material/CancelOutlined';\nimport { useTranslate, useListFilterContext, shallowEqual, useEvent } from 'ra-core';\nimport matches from 'lodash/matches';\nimport pickBy from 'lodash/pickBy';\n\nvar arePropsEqual = function arePropsEqual(prevProps, nextProps) {\n  return prevProps.label === nextProps.label && shallowEqual(prevProps.value, nextProps.value);\n};\n/**\n * Button to enable/disable a list filter.\n *\n * Expects 2 props:\n *\n * - label: The text (or React element) to be displayed for this item.\n *   If it's a string, the component will translate it.\n * - value: An object to be merged into the filter value when enabling the filter\n *   (e.g. { is_published: true, published_at_gte: '2020-07-08' })\n *\n * @example\n *\n * import * as React from 'react';\n * import { Card, CardContent } from '@mui/material';\n * import MailIcon from '@mui/icons-material/MailOutline';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Subscribed to newsletter\"\n *                 icon={<MailIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Yes\"\n *                     value={{ has_newsletter: true }}\n *                  />\n *                 <FilterListItem\n *                     label=\"No\"\n *                     value={{ has_newsletter: false }}\n *                  />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n *\n * @example // The value prop can contain multiple keys\n *\n * import * as React from 'react';\n * import {\n *     endOfYesterday,\n *     startOfWeek,\n *     subWeeks,\n *     startOfMonth,\n *     subMonths,\n * } from 'date-fns';\n * import { Card, CardContent } from '@mui/material';\n * import AccessTimeIcon from '@mui/icons-material/AccessTime';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Last visited\"\n *                 icon={<AccessTimeIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Today\"\n *                     value={{\n *                         last_seen_gte: endOfYesterday().toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This week\"\n *                     value={{\n *                         last_seen_gte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last week\"\n *                     value={{\n *                         last_seen_gte: subWeeks(\n *                             startOfWeek(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This month\"\n *                     value={{\n *                         last_seen_gte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last month\"\n *                     value={{\n *                         last_seen_gte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Earlier\"\n *                     value={{\n *                         last_seen_gte: undefined,\n *                         last_seen_lte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                     }}\n *                 />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n */\n\n\nexport var FilterListItem = memo(function (props) {\n  var label = props.label,\n      value = props.value,\n      _a = props.isSelected,\n      getIsSelected = _a === void 0 ? DefaultIsSelected : _a,\n      _b = props.toggleFilter,\n      userToggleFilter = _b === void 0 ? DefaultToggleFilter : _b,\n      rest = __rest(props, [\"label\", \"value\", \"isSelected\", \"toggleFilter\"]);\n\n  var _c = useListFilterContext(),\n      filterValues = _c.filterValues,\n      setFilters = _c.setFilters;\n\n  var translate = useTranslate();\n  var toggleFilter = useEvent(userToggleFilter); // We can't wrap this function with useEvent as it is called in the render phase\n\n  var isSelected = getIsSelected(value, filterValues);\n\n  var handleClick = function handleClick() {\n    return setFilters(toggleFilter(value, filterValues), null, false);\n  };\n\n  return React.createElement(StyledListItem, __assign({\n    onClick: handleClick,\n    selected: isSelected,\n    disablePadding: true\n  }, rest), React.createElement(ListItemButton, {\n    disableGutters: true,\n    className: FilterListItemClasses.listItemButton\n  }, React.createElement(ListItemText, {\n    primary: isValidElement(label) ? label : translate(label, {\n      _: label\n    }),\n    className: FilterListItemClasses.listItemText,\n    \"data-selected\": isSelected ? 'true' : 'false'\n  }), isSelected && React.createElement(ListItemSecondaryAction, {\n    onClick: function onClick(event) {\n      event.stopPropagation();\n      handleClick();\n    }\n  }, React.createElement(IconButton, {\n    size: \"small\"\n  }, React.createElement(CancelIcon, null)))));\n}, arePropsEqual);\n\nvar DefaultIsSelected = function DefaultIsSelected(value, filters) {\n  return matches(pickBy(value, function (val) {\n    return typeof val !== 'undefined';\n  }))(filters);\n};\n\nvar DefaultToggleFilter = function DefaultToggleFilter(value, filters) {\n  var isSelected = matches(pickBy(value, function (val) {\n    return typeof val !== 'undefined';\n  }))(filters);\n\n  if (isSelected) {\n    var keysToRemove_1 = Object.keys(value);\n    return Object.keys(filters).reduce(function (acc, key) {\n      var _a;\n\n      return keysToRemove_1.includes(key) ? acc : __assign(__assign({}, acc), (_a = {}, _a[key] = filters[key], _a));\n    }, {});\n  }\n\n  return __assign(__assign({}, filters), value);\n};\n\nvar PREFIX = 'RaFilterListItem';\nexport var FilterListItemClasses = {\n  listItemButton: \"\".concat(PREFIX, \"-listItemButton\"),\n  listItemText: \"\".concat(PREFIX, \"-listItemText\")\n};\nvar StyledListItem = styled(ListItem, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(FilterListItemClasses.listItemButton)] = {\n    paddingRight: '2em',\n    paddingLeft: '2em'\n  }, _b[\"& .\".concat(FilterListItemClasses.listItemText)] = {\n    margin: 0\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","styled","memo","isValidElement","IconButton","ListItem","ListItemButton","ListItemText","ListItemSecondaryAction","CancelIcon","useTranslate","useListFilterContext","shallowEqual","useEvent","matches","pickBy","arePropsEqual","prevProps","nextProps","label","value","FilterListItem","props","_a","getIsSelected","DefaultIsSelected","_b","userToggleFilter","DefaultToggleFilter","rest","filterValues","setFilters","translate","toggleFilter","isSelected","handleClick","StyledListItem","__assign","onClick","selected","disablePadding","disableGutters","className","FilterListItemClasses","listItemButton","primary","_","listItemText","event","stopPropagation","size","filters","val","keysToRemove_1","Object","keys","reduce","acc","key","includes","PREFIX","name","overridesResolver","styles","root","theme","paddingRight","paddingLeft","margin"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/filter/FilterListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { memo, isValidElement, ReactElement } from 'react';\nimport {\n    IconButton,\n    ListItem,\n    ListItemButton,\n    ListItemProps,\n    ListItemText,\n    ListItemSecondaryAction,\n} from '@mui/material';\nimport CancelIcon from '@mui/icons-material/CancelOutlined';\nimport {\n    useTranslate,\n    useListFilterContext,\n    shallowEqual,\n    useEvent,\n} from 'ra-core';\nimport matches from 'lodash/matches';\nimport pickBy from 'lodash/pickBy';\n\nconst arePropsEqual = (prevProps, nextProps) =>\n    prevProps.label === nextProps.label &&\n    shallowEqual(prevProps.value, nextProps.value);\n\n/**\n * Button to enable/disable a list filter.\n *\n * Expects 2 props:\n *\n * - label: The text (or React element) to be displayed for this item.\n *   If it's a string, the component will translate it.\n * - value: An object to be merged into the filter value when enabling the filter\n *   (e.g. { is_published: true, published_at_gte: '2020-07-08' })\n *\n * @example\n *\n * import * as React from 'react';\n * import { Card, CardContent } from '@mui/material';\n * import MailIcon from '@mui/icons-material/MailOutline';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Subscribed to newsletter\"\n *                 icon={<MailIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Yes\"\n *                     value={{ has_newsletter: true }}\n *                  />\n *                 <FilterListItem\n *                     label=\"No\"\n *                     value={{ has_newsletter: false }}\n *                  />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n *\n * @example // The value prop can contain multiple keys\n *\n * import * as React from 'react';\n * import {\n *     endOfYesterday,\n *     startOfWeek,\n *     subWeeks,\n *     startOfMonth,\n *     subMonths,\n * } from 'date-fns';\n * import { Card, CardContent } from '@mui/material';\n * import AccessTimeIcon from '@mui/icons-material/AccessTime';\n * import { FilterList, FilterListItem } from 'react-admin';\n *\n * const FilterSidebar = () => (\n *     <Card>\n *         <CardContent>\n *             <FilterList\n *                 label=\"Last visited\"\n *                 icon={<AccessTimeIcon />}\n *             >\n *                 <FilterListItem\n *                     label=\"Today\"\n *                     value={{\n *                         last_seen_gte: endOfYesterday().toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This week\"\n *                     value={{\n *                         last_seen_gte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last week\"\n *                     value={{\n *                         last_seen_gte: subWeeks(\n *                             startOfWeek(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfWeek(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"This month\"\n *                     value={{\n *                         last_seen_gte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                         last_seen_lte: undefined,\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Last month\"\n *                     value={{\n *                         last_seen_gte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                         last_seen_lte: startOfMonth(\n *                             new Date()\n *                         ).toISOString(),\n *                     }}\n *                 />\n *                 <FilterListItem\n *                     label=\"Earlier\"\n *                     value={{\n *                         last_seen_gte: undefined,\n *                         last_seen_lte: subMonths(\n *                             startOfMonth(new Date()),\n *                             1\n *                         ).toISOString(),\n *                     }}\n *                 />\n *             </FilterList>\n *         </CardContent>\n *     </Card>\n * );\n */\nexport const FilterListItem = memo((props: FilterListItemProps) => {\n    const {\n        label,\n        value,\n        isSelected: getIsSelected = DefaultIsSelected,\n        toggleFilter: userToggleFilter = DefaultToggleFilter,\n        ...rest\n    } = props;\n    const { filterValues, setFilters } = useListFilterContext();\n    const translate = useTranslate();\n    const toggleFilter = useEvent(userToggleFilter);\n\n    // We can't wrap this function with useEvent as it is called in the render phase\n    const isSelected = getIsSelected(value, filterValues);\n\n    const handleClick = () =>\n        setFilters(toggleFilter(value, filterValues), null, false);\n\n    return (\n        <StyledListItem\n            onClick={handleClick}\n            selected={isSelected}\n            disablePadding\n            {...rest}\n        >\n            <ListItemButton\n                disableGutters\n                className={FilterListItemClasses.listItemButton}\n            >\n                <ListItemText\n                    primary={\n                        isValidElement(label)\n                            ? label\n                            : translate(label, { _: label })\n                    }\n                    className={FilterListItemClasses.listItemText}\n                    data-selected={isSelected ? 'true' : 'false'}\n                />\n                {isSelected && (\n                    <ListItemSecondaryAction\n                        onClick={event => {\n                            event.stopPropagation();\n                            handleClick();\n                        }}\n                    >\n                        <IconButton size=\"small\">\n                            <CancelIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                )}\n            </ListItemButton>\n        </StyledListItem>\n    );\n}, arePropsEqual);\n\nconst DefaultIsSelected = (value, filters) =>\n    matches(pickBy(value, val => typeof val !== 'undefined'))(filters);\n\nconst DefaultToggleFilter = (value, filters) => {\n    const isSelected = matches(\n        pickBy(value, val => typeof val !== 'undefined')\n    )(filters);\n\n    if (isSelected) {\n        const keysToRemove = Object.keys(value);\n        return Object.keys(filters).reduce(\n            (acc, key) =>\n                keysToRemove.includes(key)\n                    ? acc\n                    : { ...acc, [key]: filters[key] },\n            {}\n        );\n    }\n\n    return { ...filters, ...value };\n};\n\nconst PREFIX = 'RaFilterListItem';\n\nexport const FilterListItemClasses = {\n    listItemButton: `${PREFIX}-listItemButton`,\n    listItemText: `${PREFIX}-listItemText`,\n};\n\nconst StyledListItem = styled(ListItem, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${FilterListItemClasses.listItemButton}`]: {\n        paddingRight: '2em',\n        paddingLeft: '2em',\n    },\n    [`& .${FilterListItemClasses.listItemText}`]: {\n        margin: 0,\n    },\n}));\n\nexport interface FilterListItemProps extends Omit<ListItemProps, 'value'> {\n    label: string | ReactElement;\n    value: any;\n    toggleFilter?: (value: any, filters: any) => any;\n    isSelected?: (value: any, filters: any) => boolean;\n}\n"]},"metadata":{},"sourceType":"module"}
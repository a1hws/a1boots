{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { IconButton, Tooltip } from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { useTranslate } from 'ra-core';\nimport { useSidebarState } from './useSidebarState';\n/**\n * A button that toggles the sidebar. Used by default in the <AppBar>.\n * @param props The component props\n * @param {String} props.className An optional class name to apply to the button\n */\n\nexport var SidebarToggleButton = function (props) {\n  var translate = useTranslate();\n  var className = props.className;\n\n  var _a = useSidebarState(),\n      open = _a[0],\n      setOpen = _a[1];\n\n  return React.createElement(Tooltip, {\n    className: className,\n    title: translate(open ? 'ra.action.close_menu' : 'ra.action.open_menu', {\n      _: 'Open/Close menu'\n    }),\n    enterDelay: 500\n  }, React.createElement(StyledIconButton, {\n    color: \"inherit\",\n    onClick: function () {\n      return setOpen(!open);\n    }\n  }, React.createElement(MenuIcon, {\n    classes: {\n      root: open ? SidebarToggleButtonClasses.menuButtonIconOpen : SidebarToggleButtonClasses.menuButtonIconClosed\n    }\n  })));\n};\nvar PREFIX = 'RaSidebarToggleButton';\nexport var SidebarToggleButtonClasses = {\n  menuButtonIconClosed: \"\".concat(PREFIX, \"-menuButtonIconClosed\"),\n  menuButtonIconOpen: \"\".concat(PREFIX, \"-menuButtonIconOpen\")\n};\nvar StyledIconButton = styled(IconButton, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(SidebarToggleButtonClasses.menuButtonIconClosed)] = {\n    transition: theme.transitions.create(['transform'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    transform: 'rotate(0deg)'\n  }, _b[\"& .\".concat(SidebarToggleButtonClasses.menuButtonIconOpen)] = {\n    transition: theme.transitions.create(['transform'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    transform: 'rotate(180deg)'\n  }, _b;\n});","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,eAApC;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AAEA;;;;;;AAKA,OAAO,IAAMC,mBAAmB,GAAG,UAACC,KAAD,EAAgC;EAC/D,IAAMC,SAAS,GAAGJ,YAAY,EAA9B;EAEQ,aAAS,GAAKG,KAAK,UAAnB;;EACF,SAAkBF,eAAe,EAAjC;EAAA,IAACI,IAAI,QAAL;EAAA,IAAOC,OAAO,QAAd;;EAEN,OACIX,oBAACG,OAAD,EAAQ;IACJS,SAAS,EAAEA,SADP;IAEJC,KAAK,EAAEJ,SAAS,CACZC,IAAI,GAAG,sBAAH,GAA4B,qBADpB,EAEZ;MAAEI,CAAC,EAAE;IAAL,CAFY,CAFZ;IAMJC,UAAU,EAAE;EANR,CAAR,EAQIf,oBAACgB,gBAAD,EAAiB;IAACC,KAAK,EAAC,SAAP;IAAiBC,OAAO,EAAE;MAAM,cAAO,CAAC,CAACR,IAAF,CAAP;IAAc;EAA9C,CAAjB,EACIV,oBAACI,QAAD,EAAS;IACLe,OAAO,EAAE;MACLC,IAAI,EAAEV,IAAI,GACJW,0BAA0B,CAACC,kBADvB,GAEJD,0BAA0B,CAACE;IAH5B;EADJ,CAAT,CADJ,CARJ,CADJ;AAoBH,CA1BM;AAgCP,IAAMC,MAAM,GAAG,uBAAf;AAEA,OAAO,IAAMH,0BAA0B,GAAG;EACtCE,oBAAoB,EAAE,UAAGC,MAAH,EAAS,uBAAT,CADgB;EAEtCF,kBAAkB,EAAE,UAAGE,MAAH,EAAS,qBAAT;AAFkB,CAAnC;AAKP,IAAMR,gBAAgB,GAAGf,MAAM,CAACC,UAAD,EAAa;EACxCuB,IAAI,EAAED,MADkC;EAExCE,iBAAiB,EAAE,UAAClB,KAAD,EAAQmB,MAAR,EAAc;IAAK,aAAM,CAACP,IAAP;EAAW;AAFT,CAAb,CAAN,CAGtB,UAACQ,EAAD,EAAU;;;MAAPC,KAAK;EAAO,gBACdC,GAAC,aAAMT,0BAA0B,CAACE,oBAAjC,CAAD,IAA2D;IACvDQ,UAAU,EAAEF,KAAK,CAACG,WAAN,CAAkBC,MAAlB,CAAyB,CAAC,WAAD,CAAzB,EAAwC;MAChDC,MAAM,EAAEL,KAAK,CAACG,WAAN,CAAkBE,MAAlB,CAAyBC,KADe;MAEhDC,QAAQ,EAAEP,KAAK,CAACG,WAAN,CAAkBI,QAAlB,CAA2BC;IAFW,CAAxC,CAD2C;IAKvDC,SAAS,EAAE;EAL4C,CAD7C,EASdR,GAAC,aAAMT,0BAA0B,CAACC,kBAAjC,CAAD,IAAyD;IACrDS,UAAU,EAAEF,KAAK,CAACG,WAAN,CAAkBC,MAAlB,CAAyB,CAAC,WAAD,CAAzB,EAAwC;MAChDC,MAAM,EAAEL,KAAK,CAACG,WAAN,CAAkBE,MAAlB,CAAyBC,KADe;MAEhDC,QAAQ,EAAEP,KAAK,CAACG,WAAN,CAAkBI,QAAlB,CAA2BC;IAFW,CAAxC,CADyC;IAKrDC,SAAS,EAAE;EAL0C,CAT3C;AAgBhB,CAnBuB,CAAzB","names":["React","styled","IconButton","Tooltip","MenuIcon","useTranslate","useSidebarState","SidebarToggleButton","props","translate","open","setOpen","className","title","_","enterDelay","StyledIconButton","color","onClick","classes","root","SidebarToggleButtonClasses","menuButtonIconOpen","menuButtonIconClosed","PREFIX","name","overridesResolver","styles","_a","theme","_b","transition","transitions","create","easing","sharp","duration","leavingScreen","transform"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/layout/SidebarToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { IconButton, Tooltip } from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport { useTranslate } from 'ra-core';\n\nimport { useSidebarState } from './useSidebarState';\n\n/**\n * A button that toggles the sidebar. Used by default in the <AppBar>.\n * @param props The component props\n * @param {String} props.className An optional class name to apply to the button\n */\nexport const SidebarToggleButton = (props: SidebarToggleButtonProps) => {\n    const translate = useTranslate();\n\n    const { className } = props;\n    const [open, setOpen] = useSidebarState();\n\n    return (\n        <Tooltip\n            className={className}\n            title={translate(\n                open ? 'ra.action.close_menu' : 'ra.action.open_menu',\n                { _: 'Open/Close menu' }\n            )}\n            enterDelay={500}\n        >\n            <StyledIconButton color=\"inherit\" onClick={() => setOpen(!open)}>\n                <MenuIcon\n                    classes={{\n                        root: open\n                            ? SidebarToggleButtonClasses.menuButtonIconOpen\n                            : SidebarToggleButtonClasses.menuButtonIconClosed,\n                    }}\n                />\n            </StyledIconButton>\n        </Tooltip>\n    );\n};\n\nexport type SidebarToggleButtonProps = {\n    className?: string;\n};\n\nconst PREFIX = 'RaSidebarToggleButton';\n\nexport const SidebarToggleButtonClasses = {\n    menuButtonIconClosed: `${PREFIX}-menuButtonIconClosed`,\n    menuButtonIconOpen: `${PREFIX}-menuButtonIconOpen`,\n};\n\nconst StyledIconButton = styled(IconButton, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${SidebarToggleButtonClasses.menuButtonIconClosed}`]: {\n        transition: theme.transitions.create(['transform'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        transform: 'rotate(0deg)',\n    },\n\n    [`& .${SidebarToggleButtonClasses.menuButtonIconOpen}`]: {\n        transition: theme.transitions.create(['transform'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        transform: 'rotate(180deg)',\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
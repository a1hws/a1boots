{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { IconButton, Tooltip } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n/**\n * An IconButton with a tooltip which ensures the tooltip is closed on click to avoid ghost tooltips\n * when the button position changes.\n */\n\nexport var IconButtonWithTooltip = function (_a) {\n  var label = _a.label,\n      onClick = _a.onClick,\n      props = __rest(_a, [\"label\", \"onClick\"]);\n\n  var translate = useTranslate();\n\n  var _b = React.useState(false),\n      open = _b[0],\n      setOpen = _b[1];\n\n  var handleClose = function () {\n    setOpen(false);\n  };\n\n  var handleOpen = function () {\n    setOpen(true);\n  };\n\n  var translatedLabel = translate(label, {\n    _: label\n  });\n\n  var handleClick = function (event) {\n    handleClose();\n    onClick(event);\n  };\n\n  return React.createElement(Tooltip, {\n    title: translatedLabel,\n    open: open,\n    onOpen: handleOpen,\n    onClose: handleClose\n  }, React.createElement(IconButton, __assign({\n    \"aria-label\": translatedLabel,\n    onClick: handleClick\n  }, props)));\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,UAAT,EAAsCC,OAAtC,QAAqD,eAArD;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA;;;;;AAIA,OAAO,IAAMC,qBAAqB,GAAG,UAACC,EAAD,EAIR;EAHzB,SAAK,WAAL;EAAA,IACAC,OAAO,aADP;EAAA,IAEGC,KAAK,cAH0B,oBAG1B,CAFR;;EAIA,IAAMC,SAAS,GAAGL,YAAY,EAA9B;;EACM,SAAkBH,KAAK,CAACS,QAAN,CAAe,KAAf,CAAlB;EAAA,IAACC,IAAI,QAAL;EAAA,IAAOC,OAAO,QAAd;;EAEN,IAAMC,WAAW,GAAG;IAChBD,OAAO,CAAC,KAAD,CAAP;EACH,CAFD;;EAIA,IAAME,UAAU,GAAG;IACfF,OAAO,CAAC,IAAD,CAAP;EACH,CAFD;;EAIA,IAAMG,eAAe,GAAGN,SAAS,CAACO,KAAD,EAAQ;IAAEC,CAAC,EAAED;EAAL,CAAR,CAAjC;;EAEA,IAAME,WAAW,GAAG,UAACC,KAAD,EAAqC;IACrDN,WAAW;IACXN,OAAO,CAACY,KAAD,CAAP;EACH,CAHD;;EAKA,OACIlB,oBAACE,OAAD,EAAQ;IACJiB,KAAK,EAAEL,eADH;IAEJJ,IAAI,EAAEA,IAFF;IAGJU,MAAM,EAAEP,UAHJ;IAIJQ,OAAO,EAAET;EAJL,CAAR,EAMIZ,oBAACC,UAAD,EAAWqB;IAAA,cACKR,eADL;IAEPR,OAAO,EAAEW;EAFF,GAGHV,KAHG,CAAX,CANJ,CADJ;AAcH,CArCM","names":["React","IconButton","Tooltip","useTranslate","IconButtonWithTooltip","_a","onClick","props","translate","useState","open","setOpen","handleClose","handleOpen","translatedLabel","label","_","handleClick","event","title","onOpen","onClose","__assign"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/IconButtonWithTooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { MouseEvent } from 'react';\nimport { IconButton, IconButtonProps, Tooltip } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n\n/**\n * An IconButton with a tooltip which ensures the tooltip is closed on click to avoid ghost tooltips\n * when the button position changes.\n */\nexport const IconButtonWithTooltip = ({\n    label,\n    onClick,\n    ...props\n}: IconButtonWithTooltipProps) => {\n    const translate = useTranslate();\n    const [open, setOpen] = React.useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const translatedLabel = translate(label, { _: label });\n\n    const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n        handleClose();\n        onClick(event);\n    };\n\n    return (\n        <Tooltip\n            title={translatedLabel}\n            open={open}\n            onOpen={handleOpen}\n            onClose={handleClose}\n        >\n            <IconButton\n                aria-label={translatedLabel}\n                onClick={handleClick}\n                {...props}\n            />\n        </Tooltip>\n    );\n};\n\nexport interface IconButtonWithTooltipProps extends IconButtonProps {\n    label: string;\n}\n"]},"metadata":{},"sourceType":"module"}
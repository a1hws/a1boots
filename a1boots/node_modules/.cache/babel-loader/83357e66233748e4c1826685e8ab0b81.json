{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAuthenticated } from '../../auth';\nimport { useRedirect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport { useGetOne, useUpdate, useRefresh } from '../../dataProvider';\nimport { useTranslate } from '../../i18n';\nimport { useResourceContext, useGetResourceLabel, useGetRecordRepresentation } from '../../core';\nimport { useMutationMiddlewares } from '../saveContext';\n/**\n * Prepare data for the Edit view.\n *\n * useEditController does a few things:\n * - it grabs the id from the URL and the resource name from the ResourceContext,\n * - it fetches the record via useGetOne,\n * - it prepares the page title.\n *\n * @param {Object} props The props passed to the Edit component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Edit view\n *\n * @example\n *\n * import { useEditController } from 'react-admin';\n * import EditView from './EditView';\n *\n * const MyEdit = () => {\n *     const controllerProps = useEditController({ resource: 'posts', id: 123 });\n *     return <EditView {...controllerProps} {...props} />;\n * }\n */\n\nexport var useEditController = function (props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var disableAuthentication = props.disableAuthentication,\n      propsId = props.id,\n      _a = props.mutationMode,\n      mutationMode = _a === void 0 ? 'undoable' : _a,\n      _b = props.mutationOptions,\n      mutationOptions = _b === void 0 ? {} : _b,\n      _c = props.queryOptions,\n      queryOptions = _c === void 0 ? {} : _c,\n      _d = props.redirect,\n      redirectTo = _d === void 0 ? DefaultRedirect : _d,\n      transform = props.transform;\n  useAuthenticated({\n    enabled: !disableAuthentication\n  });\n  var resource = useResourceContext(props);\n  var getRecordRepresentation = useGetRecordRepresentation(resource);\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n  var routeId = useParams().id;\n  var id = propsId != null ? propsId : decodeURIComponent(routeId);\n\n  var queryMeta = queryOptions.meta,\n      otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n\n  var onSuccess = mutationOptions.onSuccess,\n      onError = mutationOptions.onError,\n      mutationMeta = mutationOptions.meta,\n      otherMutationOptions = __rest(mutationOptions, [\"onSuccess\", \"onError\", \"meta\"]);\n\n  var _e = useMutationMiddlewares(),\n      registerMutationMiddleware = _e.registerMutationMiddleware,\n      getMutateWithMiddlewares = _e.getMutateWithMiddlewares,\n      unregisterMutationMiddleware = _e.unregisterMutationMiddleware;\n\n  var _f = useGetOne(resource, {\n    id: id,\n    meta: queryMeta\n  }, __assign({\n    onError: function () {\n      notify('ra.notification.item_doesnt_exist', {\n        type: 'error'\n      });\n      redirect('list', resource);\n      refresh();\n    },\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false,\n    retry: false\n  }, otherQueryOptions)),\n      record = _f.data,\n      error = _f.error,\n      isLoading = _f.isLoading,\n      isFetching = _f.isFetching,\n      refetch = _f.refetch; // eslint-disable-next-line eqeqeq\n\n\n  if (record && record.id && record.id != id) {\n    throw new Error(\"useEditController: Fetched record's id attribute (\".concat(record.id, \") must match the requested 'id' (\").concat(id, \")\"));\n  }\n\n  var getResourceLabel = useGetResourceLabel();\n  var recordRepresentation = getRecordRepresentation(record);\n  var defaultTitle = translate('ra.page.edit', {\n    name: getResourceLabel(resource, 1),\n    id: id,\n    record: record,\n    recordRepresentation: typeof recordRepresentation === 'string' ? recordRepresentation : ''\n  });\n  var recordCached = {\n    id: id,\n    previousData: record\n  };\n\n  var _g = useUpdate(resource, recordCached, __assign(__assign({}, otherMutationOptions), {\n    mutationMode: mutationMode,\n    returnPromise: mutationMode === 'pessimistic'\n  })),\n      update = _g[0],\n      saving = _g[1].isLoading;\n\n  var save = useCallback(function (data, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        onSuccessFromSave = _b.onSuccess,\n        onErrorFromSave = _b.onError,\n        transformFromSave = _b.transform,\n        metaFromSave = _b.meta;\n\n    return Promise.resolve(transformFromSave ? transformFromSave(data, {\n      previousData: recordCached.previousData\n    }) : transform ? transform(data, {\n      previousData: recordCached.previousData\n    }) : data).then(function (data) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var mutate, error_1;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              mutate = getMutateWithMiddlewares(update);\n              _b.label = 1;\n\n            case 1:\n              _b.trys.push([1, 3,, 4]);\n\n              return [4\n              /*yield*/\n              , mutate(resource, {\n                id: id,\n                data: data,\n                meta: metaFromSave !== null && metaFromSave !== void 0 ? metaFromSave : mutationMeta\n              }, {\n                onSuccess: function (data, variables, context) {\n                  return __awaiter(void 0, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                      if (onSuccessFromSave) {\n                        return [2\n                        /*return*/\n                        , onSuccessFromSave(data, variables, context)];\n                      }\n\n                      if (onSuccess) {\n                        return [2\n                        /*return*/\n                        , onSuccess(data, variables, context)];\n                      }\n\n                      notify('ra.notification.updated', {\n                        type: 'info',\n                        messageArgs: {\n                          smart_count: 1\n                        },\n                        undoable: mutationMode === 'undoable'\n                      });\n                      redirect(redirectTo, resource, data.id, data);\n                      return [2\n                      /*return*/\n                      ];\n                    });\n                  });\n                },\n                onError: onErrorFromSave ? onErrorFromSave : onError ? onError : function (error) {\n                  notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n                    type: 'error',\n                    messageArgs: {\n                      _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n                    }\n                  });\n                }\n              })];\n\n            case 2:\n              _b.sent();\n\n              return [3\n              /*break*/\n              , 4];\n\n            case 3:\n              error_1 = _b.sent();\n\n              if (((_a = error_1.body) === null || _a === void 0 ? void 0 : _a.errors) != null) {\n                return [2\n                /*return*/\n                , error_1.body.errors];\n              }\n\n              return [3\n              /*break*/\n              , 4];\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  }, [id, getMutateWithMiddlewares, mutationMeta, mutationMode, notify, onError, onSuccess, redirect, redirectTo, resource, transform, update, recordCached.previousData]);\n  return {\n    defaultTitle: defaultTitle,\n    error: error,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    mutationMode: mutationMode,\n    record: record,\n    redirect: redirectTo,\n    refetch: refetch,\n    registerMutationMiddleware: registerMutationMiddleware,\n    resource: resource,\n    save: save,\n    saving: saving,\n    unregisterMutationMiddleware: unregisterMutationMiddleware\n  };\n};\nvar DefaultRedirect = 'list';","map":{"version":3,"mappings":"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","names":["useCallback","useParams","useAuthenticated","useRedirect","useNotify","useGetOne","useUpdate","useRefresh","useTranslate","useResourceContext","useGetResourceLabel","useGetRecordRepresentation","useMutationMiddlewares","useEditController","props","propsId","_a","mutationMode","_b","mutationOptions","_c","queryOptions","_d","redirectTo","DefaultRedirect","transform","enabled","disableAuthentication","resource","getRecordRepresentation","translate","notify","redirect","refresh","routeId","id","decodeURIComponent","queryMeta","otherQueryOptions","onError","mutationMeta","otherMutationOptions","registerMutationMiddleware","getMutateWithMiddlewares","unregisterMutationMiddleware","meta","__assign","type","refetchOnReconnect","refetchOnWindowFocus","retry","record","error","isLoading","isFetching","refetch","Error","concat","getResourceLabel","recordRepresentation","defaultTitle","name","recordCached","previousData","returnPromise","update","saving","save","data","onSuccessFromSave","onErrorFromSave","transformFromSave","metaFromSave","resolve","then","mutate","onSuccess","variables","context","messageArgs","smart_count","undoable","message","_","undefined","error_1","body","errors"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/edit/useEditController.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { UseQueryOptions, UseMutationOptions } from 'react-query';\n\nimport { useAuthenticated } from '../../auth';\nimport { RaRecord, MutationMode, TransformData } from '../../types';\nimport { useRedirect, RedirectionSideEffect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport {\n    useGetOne,\n    useUpdate,\n    useRefresh,\n    UseGetOneHookValue,\n    UseUpdateMutateParams,\n    HttpError,\n} from '../../dataProvider';\nimport { useTranslate } from '../../i18n';\nimport {\n    useResourceContext,\n    useGetResourceLabel,\n    useGetRecordRepresentation,\n} from '../../core';\nimport { SaveContextValue, useMutationMiddlewares } from '../saveContext';\n\n/**\n * Prepare data for the Edit view.\n *\n * useEditController does a few things:\n * - it grabs the id from the URL and the resource name from the ResourceContext,\n * - it fetches the record via useGetOne,\n * - it prepares the page title.\n *\n * @param {Object} props The props passed to the Edit component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Edit view\n *\n * @example\n *\n * import { useEditController } from 'react-admin';\n * import EditView from './EditView';\n *\n * const MyEdit = () => {\n *     const controllerProps = useEditController({ resource: 'posts', id: 123 });\n *     return <EditView {...controllerProps} {...props} />;\n * }\n */\nexport const useEditController = <\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown\n>(\n    props: EditControllerProps<RecordType, MutationOptionsError> = {}\n): EditControllerResult<RecordType> => {\n    const {\n        disableAuthentication,\n        id: propsId,\n        mutationMode = 'undoable',\n        mutationOptions = {},\n        queryOptions = {},\n        redirect: redirectTo = DefaultRedirect,\n        transform,\n    } = props;\n    useAuthenticated({ enabled: !disableAuthentication });\n    const resource = useResourceContext(props);\n    const getRecordRepresentation = useGetRecordRepresentation(resource);\n    const translate = useTranslate();\n    const notify = useNotify();\n    const redirect = useRedirect();\n    const refresh = useRefresh();\n    const { id: routeId } = useParams<'id'>();\n    const id = propsId != null ? propsId : decodeURIComponent(routeId);\n    const { meta: queryMeta, ...otherQueryOptions } = queryOptions;\n    const {\n        onSuccess,\n        onError,\n        meta: mutationMeta,\n        ...otherMutationOptions\n    } = mutationOptions;\n    const {\n        registerMutationMiddleware,\n        getMutateWithMiddlewares,\n        unregisterMutationMiddleware,\n    } = useMutationMiddlewares();\n    const { data: record, error, isLoading, isFetching, refetch } = useGetOne<\n        RecordType\n    >(\n        resource,\n        { id, meta: queryMeta },\n        {\n            onError: () => {\n                notify('ra.notification.item_doesnt_exist', {\n                    type: 'error',\n                });\n                redirect('list', resource);\n                refresh();\n            },\n            refetchOnReconnect: false,\n            refetchOnWindowFocus: false,\n            retry: false,\n            ...otherQueryOptions,\n        }\n    );\n\n    // eslint-disable-next-line eqeqeq\n    if (record && record.id && record.id != id) {\n        throw new Error(\n            `useEditController: Fetched record's id attribute (${record.id}) must match the requested 'id' (${id})`\n        );\n    }\n\n    const getResourceLabel = useGetResourceLabel();\n    const recordRepresentation = getRecordRepresentation(record);\n    const defaultTitle = translate('ra.page.edit', {\n        name: getResourceLabel(resource, 1),\n        id,\n        record,\n        recordRepresentation:\n            typeof recordRepresentation === 'string'\n                ? recordRepresentation\n                : '',\n    });\n\n    const recordCached = { id, previousData: record };\n\n    const [update, { isLoading: saving }] = useUpdate<\n        RecordType,\n        MutationOptionsError\n    >(resource, recordCached, {\n        ...otherMutationOptions,\n        mutationMode,\n        returnPromise: mutationMode === 'pessimistic',\n    });\n\n    const save = useCallback(\n        (\n            data: Partial<RecordType>,\n            {\n                onSuccess: onSuccessFromSave,\n                onError: onErrorFromSave,\n                transform: transformFromSave,\n                meta: metaFromSave,\n            } = {}\n        ) =>\n            Promise.resolve(\n                transformFromSave\n                    ? transformFromSave(data, {\n                          previousData: recordCached.previousData,\n                      })\n                    : transform\n                    ? transform(data, {\n                          previousData: recordCached.previousData,\n                      })\n                    : data\n            ).then(async (data: Partial<RecordType>) => {\n                const mutate = getMutateWithMiddlewares(update);\n\n                try {\n                    await mutate(\n                        resource,\n                        { id, data, meta: metaFromSave ?? mutationMeta },\n                        {\n                            onSuccess: async (data, variables, context) => {\n                                if (onSuccessFromSave) {\n                                    return onSuccessFromSave(\n                                        data,\n                                        variables,\n                                        context\n                                    );\n                                }\n\n                                if (onSuccess) {\n                                    return onSuccess(data, variables, context);\n                                }\n\n                                notify('ra.notification.updated', {\n                                    type: 'info',\n                                    messageArgs: { smart_count: 1 },\n                                    undoable: mutationMode === 'undoable',\n                                });\n                                redirect(redirectTo, resource, data.id, data);\n                            },\n                            onError: onErrorFromSave\n                                ? onErrorFromSave\n                                : onError\n                                ? onError\n                                : (error: Error | string) => {\n                                      notify(\n                                          typeof error === 'string'\n                                              ? error\n                                              : error.message ||\n                                                    'ra.notification.http_error',\n                                          {\n                                              type: 'error',\n                                              messageArgs: {\n                                                  _:\n                                                      typeof error === 'string'\n                                                          ? error\n                                                          : error &&\n                                                            error.message\n                                                          ? error.message\n                                                          : undefined,\n                                              },\n                                          }\n                                      );\n                                  },\n                        }\n                    );\n                } catch (error) {\n                    if ((error as HttpError).body?.errors != null) {\n                        return (error as HttpError).body.errors;\n                    }\n                }\n            }),\n        [\n            id,\n            getMutateWithMiddlewares,\n            mutationMeta,\n            mutationMode,\n            notify,\n            onError,\n            onSuccess,\n            redirect,\n            redirectTo,\n            resource,\n            transform,\n            update,\n            recordCached.previousData,\n        ]\n    );\n\n    return {\n        defaultTitle,\n        error,\n        isFetching,\n        isLoading,\n        mutationMode,\n        record,\n        redirect: redirectTo,\n        refetch,\n        registerMutationMiddleware,\n        resource,\n        save,\n        saving,\n        unregisterMutationMiddleware,\n    };\n};\n\nexport interface EditControllerProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown\n> {\n    disableAuthentication?: boolean;\n    id?: RecordType['id'];\n    mutationMode?: MutationMode;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        UseUpdateMutateParams<RecordType>\n    > & { meta?: any };\n    queryOptions?: UseQueryOptions<RecordType> & { meta?: any };\n    redirect?: RedirectionSideEffect;\n    resource?: string;\n    transform?: TransformData;\n    [key: string]: any;\n}\n\nexport interface EditControllerResult<RecordType extends RaRecord = any>\n    extends SaveContextValue {\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    data?: RecordType;\n    error?: any;\n    defaultTitle: string;\n    isFetching: boolean;\n    isLoading: boolean;\n    record?: RecordType;\n    refetch: UseGetOneHookValue<RecordType>['refetch'];\n    redirect: RedirectionSideEffect;\n    resource: string;\n}\n\nconst DefaultRedirect = 'list';\n"]},"metadata":{},"sourceType":"module"}
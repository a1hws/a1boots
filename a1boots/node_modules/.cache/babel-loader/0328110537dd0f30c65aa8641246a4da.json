{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport DoneIcon from '@mui/icons-material/Done';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { Tooltip, Typography } from '@mui/material';\nimport { useTranslate, useRecordContext } from 'ra-core';\nimport { genericMemo } from './genericMemo';\nimport { fieldPropTypes } from './types';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\n\nvar BooleanFieldImpl = function (props) {\n  var className = props.className,\n      emptyText = props.emptyText,\n      source = props.source,\n      valueLabelTrue = props.valueLabelTrue,\n      valueLabelFalse = props.valueLabelFalse,\n      _a = props.TrueIcon,\n      TrueIcon = _a === void 0 ? DoneIcon : _a,\n      _b = props.FalseIcon,\n      FalseIcon = _b === void 0 ? ClearIcon : _b,\n      _c = props.looseValue,\n      looseValue = _c === void 0 ? false : _c,\n      rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"valueLabelTrue\", \"valueLabelFalse\", \"TrueIcon\", \"FalseIcon\", \"looseValue\"]);\n\n  var record = useRecordContext(props);\n  var translate = useTranslate();\n  var value = get(record, source);\n  var isTruthyValue = value === true || looseValue && value;\n  var ariaLabel = value ? valueLabelTrue : valueLabelFalse;\n\n  if (!ariaLabel) {\n    ariaLabel = isTruthyValue ? 'ra.boolean.true' : 'ra.boolean.false';\n  }\n\n  if (looseValue || value === false || value === true) {\n    return React.createElement(StyledTypography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), React.createElement(Tooltip, {\n      title: translate(ariaLabel, {\n        _: ariaLabel\n      })\n    }, isTruthyValue ? TrueIcon ? React.createElement(TrueIcon, {\n      \"data-testid\": \"true\",\n      fontSize: \"small\"\n    }) : React.createElement(React.Fragment, null) : FalseIcon ? React.createElement(FalseIcon, {\n      \"data-testid\": \"false\",\n      fontSize: \"small\"\n    }) : React.createElement(React.Fragment, null)));\n  }\n\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n    _: emptyText\n  }));\n};\n\nBooleanFieldImpl.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  valueLabelFalse: PropTypes.string,\n  valueLabelTrue: PropTypes.string,\n  TrueIcon: PropTypes.elementType,\n  FalseIcon: PropTypes.elementType,\n  looseValue: PropTypes.bool\n});\nBooleanFieldImpl.displayName = 'BooleanFieldImpl';\nexport var BooleanField = genericMemo(BooleanFieldImpl);\nvar PREFIX = 'RaBooleanField';\nvar StyledTypography = styled(Typography, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({\n  display: 'inline-flex',\n  verticalAlign: 'middle',\n  lineHeight: 0\n});","map":{"version":3,"mappings":"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","names":["React","styled","PropTypes","get","DoneIcon","ClearIcon","Tooltip","Typography","useTranslate","useRecordContext","genericMemo","fieldPropTypes","sanitizeFieldRestProps","BooleanFieldImpl","props","emptyText","source","valueLabelTrue","valueLabelFalse","_a","TrueIcon","_b","FalseIcon","_c","looseValue","rest","record","translate","value","isTruthyValue","ariaLabel","StyledTypography","__assign","component","variant","className","title","_","fontSize","propTypes","string","elementType","bool","displayName","BooleanField","PREFIX","name","overridesResolver","styles","root","display","verticalAlign","lineHeight"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/BooleanField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { SvgIconComponent } from '@mui/icons-material';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport DoneIcon from '@mui/icons-material/Done';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { Tooltip, Typography, TypographyProps } from '@mui/material';\nimport { useTranslate, useRecordContext } from 'ra-core';\nimport { genericMemo } from './genericMemo';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\n\nconst BooleanFieldImpl = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: BooleanFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        source,\n        valueLabelTrue,\n        valueLabelFalse,\n        TrueIcon = DoneIcon,\n        FalseIcon = ClearIcon,\n        looseValue = false,\n        ...rest\n    } = props;\n    const record = useRecordContext<RecordType>(props);\n    const translate = useTranslate();\n\n    const value = get(record, source);\n    const isTruthyValue = value === true || (looseValue && value);\n    let ariaLabel = value ? valueLabelTrue : valueLabelFalse;\n\n    if (!ariaLabel) {\n        ariaLabel = isTruthyValue ? 'ra.boolean.true' : 'ra.boolean.false';\n    }\n\n    if (looseValue || value === false || value === true) {\n        return (\n            <StyledTypography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                <Tooltip title={translate(ariaLabel, { _: ariaLabel })}>\n                    {isTruthyValue ? (\n                        TrueIcon ? (\n                            <TrueIcon data-testid=\"true\" fontSize=\"small\" />\n                        ) : (\n                            <></>\n                        )\n                    ) : FalseIcon ? (\n                        <FalseIcon data-testid=\"false\" fontSize=\"small\" />\n                    ) : (\n                        <></>\n                    )}\n                </Tooltip>\n            </StyledTypography>\n        );\n    }\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {emptyText && translate(emptyText, { _: emptyText })}\n        </Typography>\n    );\n};\n\nBooleanFieldImpl.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    valueLabelFalse: PropTypes.string,\n    valueLabelTrue: PropTypes.string,\n    TrueIcon: PropTypes.elementType,\n    FalseIcon: PropTypes.elementType,\n    looseValue: PropTypes.bool,\n};\nBooleanFieldImpl.displayName = 'BooleanFieldImpl';\n\nexport const BooleanField = genericMemo(BooleanFieldImpl);\n\nexport interface BooleanFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    valueLabelTrue?: string;\n    valueLabelFalse?: string;\n    TrueIcon?: SvgIconComponent | null;\n    FalseIcon?: SvgIconComponent | null;\n    looseValue?: boolean;\n}\n\nconst PREFIX = 'RaBooleanField';\n\nconst StyledTypography = styled(Typography, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    display: 'inline-flex',\n    verticalAlign: 'middle',\n    lineHeight: 0,\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as React from 'react';\nimport { RecordContextProvider } from '../record';\nimport { SaveContextProvider, usePickSaveContext } from '../saveContext';\nimport { EditContext } from './EditContext';\n/**\n * Create an Edit Context.\n *\n * @example\n *\n * const MyEdit = (props) => {\n *     const controllerProps = useEditController(props);\n *     return (\n *         <EditContextProvider value={controllerProps}>\n *             <MyEditView>\n *         </EditContextProvider>\n *     );\n * };\n *\n * const MyEditView = () => {\n *     const record = useRecordContext();\n *     // or, to rerender only when the save operation change but not data\n *     const { saving } = useEditContext();\n * }\n *\n * @see EditContext\n * @see RecordContext\n */\n\nexport var EditContextProvider = function EditContextProvider(_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(EditContext.Provider, {\n    value: value\n  }, React.createElement(SaveContextProvider, {\n    value: usePickSaveContext(value)\n  }, React.createElement(RecordContextProvider, {\n    value: value && value.record\n  }, children)));\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,qBAAT,QAAsC,WAAtC;AACA,SAASC,mBAAT,EAA8BC,kBAA9B,QAAwD,gBAAxD;AACA,SAASC,WAAT,QAA4B,eAA5B;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,EAAD,EAMlC;MALGC,QAAQ;MACRC,KAAK;EAIH,OACFR,oBAACI,WAAW,CAACK,QAAb,EAAqB;IAACD,KAAK,EAAEA;EAAR,CAArB,EACIR,oBAACE,mBAAD,EAAoB;IAACM,KAAK,EAAEL,kBAAkB,CAACK,KAAD;EAA1B,CAApB,EACIR,oBAACC,qBAAD,EAAsB;IAClBO,KAAK,EAAEA,KAAK,IAAIA,KAAK,CAACE;EADJ,CAAtB,EAGKH,QAHL,CADJ,CADJ,CADE;AAUL,CAhBM","names":["React","RecordContextProvider","SaveContextProvider","usePickSaveContext","EditContext","EditContextProvider","_a","children","value","Provider","record"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/edit/EditContextProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { RaRecord } from '../../types';\nimport { RecordContextProvider } from '../record';\nimport { SaveContextProvider, usePickSaveContext } from '../saveContext';\nimport { EditContext } from './EditContext';\nimport { EditControllerResult } from './useEditController';\n\n/**\n * Create an Edit Context.\n *\n * @example\n *\n * const MyEdit = (props) => {\n *     const controllerProps = useEditController(props);\n *     return (\n *         <EditContextProvider value={controllerProps}>\n *             <MyEditView>\n *         </EditContextProvider>\n *     );\n * };\n *\n * const MyEditView = () => {\n *     const record = useRecordContext();\n *     // or, to rerender only when the save operation change but not data\n *     const { saving } = useEditContext();\n * }\n *\n * @see EditContext\n * @see RecordContext\n */\nexport const EditContextProvider = ({\n    children,\n    value,\n}: {\n    children: ReactNode;\n    value: EditControllerResult;\n}) => (\n    <EditContext.Provider value={value}>\n        <SaveContextProvider value={usePickSaveContext(value)}>\n            <RecordContextProvider<Partial<RaRecord>>\n                value={value && value.record}\n            >\n                {children}\n            </RecordContextProvider>\n        </SaveContextProvider>\n    </EditContext.Provider>\n);\n"]},"metadata":{},"sourceType":"module"}
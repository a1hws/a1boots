{"ast":null,"code":"import * as React from 'react';\nimport { memo } from 'react';\nimport { Button, Menu, MenuItem, Tooltip, IconButton, useMediaQuery } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SortIcon from '@mui/icons-material/Sort';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport { useListSortContext, useTranslate, useTranslateLabel, shallowEqual } from 'ra-core';\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = () => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\n\nvar SortButton = function SortButton(props) {\n  var fields = props.fields,\n      _a = props.label,\n      label = _a === void 0 ? 'ra.sort.sort_by' : _a,\n      _b = props.icon,\n      icon = _b === void 0 ? defaultIcon : _b;\n\n  var _c = useListSortContext(),\n      resource = _c.resource,\n      sort = _c.sort,\n      setSort = _c.setSort;\n\n  var translate = useTranslate();\n  var translateLabel = useTranslateLabel();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  });\n\n  var _d = React.useState(null),\n      anchorEl = _d[0],\n      setAnchorEl = _d[1];\n\n  var handleClick = function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var handleChangeSort = function handleChangeSort(event) {\n    var field = event.currentTarget.dataset.sort;\n    setSort({\n      field: field,\n      order: field === sort.field ? inverseOrder(sort.order) : 'ASC'\n    });\n    setAnchorEl(null);\n  };\n\n  var buttonLabel = translate(label, {\n    field: translateLabel({\n      resource: resource,\n      source: sort.field\n    }),\n    order: translate(\"ra.sort.\".concat(sort.order)),\n    _: label\n  });\n  return React.createElement(React.Fragment, null, isXSmall ? React.createElement(Tooltip, {\n    title: buttonLabel\n  }, React.createElement(IconButton, {\n    \"aria-label\": buttonLabel,\n    color: \"primary\",\n    onClick: handleClick,\n    size: \"large\"\n  }, icon)) : React.createElement(StyledButton, {\n    \"aria-controls\": \"simple-menu\",\n    \"aria-haspopup\": \"true\",\n    color: \"primary\",\n    onClick: handleClick,\n    startIcon: icon,\n    endIcon: React.createElement(ArrowDropDownIcon, null),\n    size: \"small\"\n  }, buttonLabel), React.createElement(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose\n  }, fields.map(function (field) {\n    return React.createElement(MenuItem, {\n      onClick: handleChangeSort,\n      \"data-sort\": field,\n      key: field\n    }, translateLabel({\n      resource: resource,\n      source: field\n    }), ' ', translate(\"ra.sort.\".concat(sort.field === field ? inverseOrder(sort.order) : 'ASC')));\n  })));\n};\n\nvar defaultIcon = React.createElement(SortIcon, null);\n\nvar inverseOrder = function inverseOrder(sort) {\n  return sort === 'ASC' ? 'DESC' : 'ASC';\n};\n\nvar arePropsEqual = function arePropsEqual(prevProps, nextProps) {\n  return shallowEqual(prevProps.fields, nextProps.fields);\n};\n\nvar StyledButton = styled(Button, {\n  name: 'RaSortButton',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  '&.MuiButton-sizeSmall': {\n    // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n    lineHeight: 1.5\n  },\n  '& .MuiButton-endIcon': {\n    ml: 0\n  }\n});\nexport default memo(SortButton, arePropsEqual);","map":{"version":3,"mappings":"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","names":["React","memo","Button","Menu","MenuItem","Tooltip","IconButton","useMediaQuery","styled","SortIcon","ArrowDropDownIcon","useListSortContext","useTranslate","useTranslateLabel","shallowEqual","SortButton","props","_a","label","_b","icon","defaultIcon","resource","sort","setSort","translate","translateLabel","isXSmall","theme","breakpoints","down","useState","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","handleChangeSort","field","dataset","order","inverseOrder","buttonLabel","source","_","title","color","onClick","size","StyledButton","startIcon","endIcon","id","keepMounted","open","Boolean","onClose","fields","map","key","arePropsEqual","prevProps","nextProps","name","overridesResolver","styles","root","lineHeight","ml"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/SortButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, memo } from 'react';\nimport {\n    Button,\n    Menu,\n    MenuItem,\n    Tooltip,\n    IconButton,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SortIcon from '@mui/icons-material/Sort';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport {\n    useListSortContext,\n    useTranslate,\n    useTranslateLabel,\n    shallowEqual,\n} from 'ra-core';\n\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = () => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\nconst SortButton = (props: SortButtonProps) => {\n    const { fields, label = 'ra.sort.sort_by', icon = defaultIcon } = props;\n    const { resource, sort, setSort } = useListSortContext();\n    const translate = useTranslate();\n    const translateLabel = useTranslateLabel();\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleChangeSort = (\n        event: React.MouseEvent<HTMLLIElement, MouseEvent>\n    ) => {\n        const field = event.currentTarget.dataset.sort;\n        setSort({\n            field,\n            order: field === sort.field ? inverseOrder(sort.order) : 'ASC',\n        });\n        setAnchorEl(null);\n    };\n\n    const buttonLabel = translate(label, {\n        field: translateLabel({\n            resource,\n            source: sort.field,\n        }),\n        order: translate(`ra.sort.${sort.order}`),\n        _: label,\n    });\n\n    return (\n        <>\n            {isXSmall ? (\n                <Tooltip title={buttonLabel}>\n                    <IconButton\n                        aria-label={buttonLabel}\n                        color=\"primary\"\n                        onClick={handleClick}\n                        size=\"large\"\n                    >\n                        {icon}\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <StyledButton\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                    startIcon={icon}\n                    endIcon={<ArrowDropDownIcon />}\n                    size=\"small\"\n                >\n                    {buttonLabel}\n                </StyledButton>\n            )}\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {fields.map(field => (\n                    <MenuItem\n                        onClick={handleChangeSort}\n                        data-sort={field}\n                        key={field}\n                    >\n                        {translateLabel({\n                            resource,\n                            source: field,\n                        })}{' '}\n                        {translate(\n                            `ra.sort.${\n                                sort.field === field\n                                    ? inverseOrder(sort.order)\n                                    : 'ASC'\n                            }`\n                        )}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </>\n    );\n};\n\nconst defaultIcon = <SortIcon />;\n\nconst inverseOrder = (sort: string) => (sort === 'ASC' ? 'DESC' : 'ASC');\n\nconst arePropsEqual = (prevProps, nextProps) =>\n    shallowEqual(prevProps.fields, nextProps.fields);\n\nexport interface SortButtonProps {\n    fields: string[];\n    icon?: ReactElement;\n    label?: string;\n    resource?: string;\n}\n\nconst StyledButton = styled(Button, {\n    name: 'RaSortButton',\n    overridesResolver: (props, styles) => styles.root,\n})({\n    '&.MuiButton-sizeSmall': {\n        // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n        lineHeight: 1.5,\n    },\n    '& .MuiButton-endIcon': { ml: 0 },\n});\n\nexport default memo(SortButton, arePropsEqual);\n"]},"metadata":{},"sourceType":"module"}
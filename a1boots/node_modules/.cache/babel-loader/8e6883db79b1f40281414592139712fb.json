{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography } from '@mui/material';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\n\nvar DateFieldImpl = function DateFieldImpl(props) {\n  var className = props.className,\n      emptyText = props.emptyText,\n      locales = props.locales,\n      options = props.options,\n      _a = props.showTime,\n      showTime = _a === void 0 ? false : _a,\n      _b = props.showDate,\n      showDate = _b === void 0 ? true : _b,\n      source = props.source,\n      rest = __rest(props, [\"className\", \"emptyText\", \"locales\", \"options\", \"showTime\", \"showDate\", \"source\"]);\n\n  var translate = useTranslate();\n\n  if (!showTime && !showDate) {\n    throw new Error('<DateField> cannot have showTime and showDate false at the same time');\n  }\n\n  var record = useRecordContext(props);\n\n  if (!record) {\n    return null;\n  }\n\n  var value = get(record, source);\n\n  if (value == null || value === '') {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n\n  var date = value instanceof Date ? value : typeof value === 'string' || typeof value === 'number' ? new Date(value) : undefined;\n  var dateOptions = options;\n\n  if (typeof value === 'string' && value.length <= 10 && !showTime && !options) {\n    // Input is a date string (e.g. '2022-02-15') without time and time zone.\n    // Force timezone to UTC to fix issue with people in negative time zones\n    // who may see a different date when calling toLocaleDateString().\n    dateOptions = {\n      timeZone: 'UTC'\n    };\n  }\n\n  var dateString = '';\n\n  if (showTime && showDate) {\n    dateString = toLocaleStringSupportsLocales ? date.toLocaleString(locales, options) : date.toLocaleString();\n  } else if (showDate) {\n    dateString = toLocaleStringSupportsLocales ? date.toLocaleDateString(locales, dateOptions) : date.toLocaleDateString();\n  } else if (showTime) {\n    dateString = toLocaleStringSupportsLocales ? date.toLocaleTimeString(locales, options) : date.toLocaleTimeString();\n  }\n\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), dateString);\n};\n\nDateFieldImpl.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object,\n  showTime: PropTypes.bool,\n  showDate: PropTypes.bool\n});\nDateFieldImpl.displayName = 'DateFieldImpl';\nexport var DateField = genericMemo(DateFieldImpl);\n\nvar toLocaleStringSupportsLocales = function () {\n  // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n  try {\n    new Date().toLocaleString('i');\n  } catch (error) {\n    return error instanceof RangeError;\n  }\n\n  return false;\n}();","map":{"version":3,"mappings":"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","names":["React","PropTypes","get","Typography","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","genericMemo","DateFieldImpl","props","emptyText","locales","options","_a","showTime","_b","showDate","source","rest","translate","Error","record","value","__assign","component","variant","className","_","date","Date","undefined","dateOptions","length","timeZone","dateString","toLocaleStringSupportsLocales","toLocaleString","toLocaleDateString","toLocaleTimeString","propTypes","oneOfType","string","arrayOf","object","bool","displayName","DateField","error","RangeError"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/DateField.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography, TypographyProps } from '@mui/material';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Display a date value as a locale string.\n *\n * Uses Intl.DateTimeFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs date as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n * @example\n * <DateField source=\"published_at\" />\n * // renders the record { id: 1234, published_at: new Date('2012-11-07') } as\n * <span>07/11/2012</span>\n *\n * <DateField source=\"published_at\" className=\"red\" />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span class=\"red\">07/11/2012</span>\n *\n * <DateField source=\"share\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>Wednesday, November 7, 2012</span>\n *\n * <DateField source=\"price\" locales=\"fr-FR\" options={{ weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }} />\n * // renders the record { id: 1234, new Date('2012-11-07') } as\n * <span>mercredi 7 novembre 2012</span>\n */\nconst DateFieldImpl = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: DateFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        locales,\n        options,\n        showTime = false,\n        showDate = true,\n        source,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n\n    if (!showTime && !showDate) {\n        throw new Error(\n            '<DateField> cannot have showTime and showDate false at the same time'\n        );\n    }\n\n    const record = useRecordContext<RecordType>(props);\n    if (!record) {\n        return null;\n    }\n\n    const value = get(record, source);\n    if (value == null || value === '') {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    const date =\n        value instanceof Date\n            ? value\n            : typeof value === 'string' || typeof value === 'number'\n            ? new Date(value)\n            : undefined;\n\n    let dateOptions = options;\n    if (\n        typeof value === 'string' &&\n        value.length <= 10 &&\n        !showTime &&\n        !options\n    ) {\n        // Input is a date string (e.g. '2022-02-15') without time and time zone.\n        // Force timezone to UTC to fix issue with people in negative time zones\n        // who may see a different date when calling toLocaleDateString().\n        dateOptions = { timeZone: 'UTC' };\n    }\n    let dateString = '';\n    if (showTime && showDate) {\n        dateString = toLocaleStringSupportsLocales\n            ? date.toLocaleString(locales, options)\n            : date.toLocaleString();\n    } else if (showDate) {\n        dateString = toLocaleStringSupportsLocales\n            ? date.toLocaleDateString(locales, dateOptions)\n            : date.toLocaleDateString();\n    } else if (showTime) {\n        dateString = toLocaleStringSupportsLocales\n            ? date.toLocaleTimeString(locales, options)\n            : date.toLocaleTimeString();\n    }\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {dateString}\n        </Typography>\n    );\n};\n\nDateFieldImpl.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    options: PropTypes.object,\n    showTime: PropTypes.bool,\n    showDate: PropTypes.bool,\n};\nDateFieldImpl.displayName = 'DateFieldImpl';\n\nexport const DateField = genericMemo(DateFieldImpl);\n\nexport interface DateFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    locales?: Intl.LocalesArgument;\n    options?: Intl.DateTimeFormatOptions;\n    showTime?: boolean;\n    showDate?: boolean;\n}\n\nconst toLocaleStringSupportsLocales = (() => {\n    // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n    try {\n        new Date().toLocaleString('i');\n    } catch (error) {\n        return error instanceof RangeError;\n    }\n    return false;\n})();\n"]},"metadata":{},"sourceType":"module"}
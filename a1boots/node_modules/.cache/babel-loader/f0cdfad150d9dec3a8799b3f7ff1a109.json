{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { InfiniteListBase } from 'ra-core';\nimport { TitlePropType } from '../layout/Title';\nimport { InfinitePagination } from './pagination';\nimport { ListView } from './ListView';\n/**\n * Infinite List page component\n *\n * The <InfiniteList> component renders the list layout (title, buttons, filters),\n * and fetches the list of records from the REST API.\n *\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * It contains an <InfinitePagination> component, which fetches the next page of records\n * when the user scrolls to the bottom of the list.\n *\n * The <InfiniteList> component accepts the following props:\n *\n * - actions\n * - aside: Side Component\n * - children: List Layout\n * - component\n * - disableAuthentication\n * - disableSyncWithLocation\n * - empty: Empty Page Component\n * - emptyWhileLoading\n * - exporter\n * - filters: Filter Inputs\n * - filter: Permanent Filter\n * - filterDefaultValues\n * - pagination: Pagination Component\n * - perPage: Pagination Size\n * - queryOptions\n * - sort: Default Sort Field & Order\n * - title\n * - sx: CSS API\n *\n * @example\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = () => (\n *     <InfiniteList\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\n\nexport var InfiniteList = function InfiniteList(_a) {\n  var debounce = _a.debounce,\n      disableAuthentication = _a.disableAuthentication,\n      disableSyncWithLocation = _a.disableSyncWithLocation,\n      exporter = _a.exporter,\n      filter = _a.filter,\n      filterDefaultValues = _a.filterDefaultValues,\n      _b = _a.pagination,\n      pagination = _b === void 0 ? defaultPagination : _b,\n      perPage = _a.perPage,\n      queryOptions = _a.queryOptions,\n      resource = _a.resource,\n      sort = _a.sort,\n      storeKey = _a.storeKey,\n      rest = __rest(_a, [\"debounce\", \"disableAuthentication\", \"disableSyncWithLocation\", \"exporter\", \"filter\", \"filterDefaultValues\", \"pagination\", \"perPage\", \"queryOptions\", \"resource\", \"sort\", \"storeKey\"]);\n\n  return React.createElement(InfiniteListBase, {\n    debounce: debounce,\n    disableAuthentication: disableAuthentication,\n    disableSyncWithLocation: disableSyncWithLocation,\n    exporter: exporter,\n    filter: filter,\n    filterDefaultValues: filterDefaultValues,\n    perPage: perPage,\n    queryOptions: queryOptions,\n    resource: resource,\n    sort: sort,\n    storeKey: storeKey\n  }, React.createElement(ListView, __assign({}, rest, {\n    pagination: pagination\n  })));\n};\nvar defaultPagination = React.createElement(InfinitePagination, null);\nInfiniteList.propTypes = {\n  // the props you can change\n  // @ts-ignore-line\n  actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  aside: PropTypes.element,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  emptyWhileLoading: PropTypes.bool,\n  filter: PropTypes.object,\n  filterDefaultValues: PropTypes.object,\n  filters: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n  // @ts-ignore-line\n  pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  perPage: PropTypes.number.isRequired,\n  //@ts-ignore-line\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  sx: PropTypes.any,\n  title: TitlePropType,\n  // the props managed by react-admin\n  disableSyncWithLocation: PropTypes.bool,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  resource: PropTypes.string\n};\nInfiniteList.defaultProps = {\n  filter: {},\n  perPage: 10\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","InfiniteListBase","TitlePropType","InfinitePagination","ListView","InfiniteList","_a","disableAuthentication","disableSyncWithLocation","exporter","filter","filterDefaultValues","_b","pagination","defaultPagination","perPage","queryOptions","resource","sort","storeKey","rest","debounce","__assign","propTypes","actions","oneOfType","bool","element","aside","children","node","isRequired","className","string","emptyWhileLoading","object","filters","arrayOf","number","shape","field","order","sx","any","title","hasCreate","hasEdit","hasList","hasShow","defaultProps"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/InfiniteList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    InfiniteListBase,\n    InfiniteListControllerProps,\n    RaRecord,\n} from 'ra-core';\n\nimport { TitlePropType } from '../layout/Title';\nimport { InfinitePagination } from './pagination';\nimport { ListView, ListViewProps } from './ListView';\n\n/**\n * Infinite List page component\n *\n * The <InfiniteList> component renders the list layout (title, buttons, filters),\n * and fetches the list of records from the REST API.\n *\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * It contains an <InfinitePagination> component, which fetches the next page of records\n * when the user scrolls to the bottom of the list.\n *\n * The <InfiniteList> component accepts the following props:\n *\n * - actions\n * - aside: Side Component\n * - children: List Layout\n * - component\n * - disableAuthentication\n * - disableSyncWithLocation\n * - empty: Empty Page Component\n * - emptyWhileLoading\n * - exporter\n * - filters: Filter Inputs\n * - filter: Permanent Filter\n * - filterDefaultValues\n * - pagination: Pagination Component\n * - perPage: Pagination Size\n * - queryOptions\n * - sort: Default Sort Field & Order\n * - title\n * - sx: CSS API\n *\n * @example\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = () => (\n *     <InfiniteList\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nexport const InfiniteList = <RecordType extends RaRecord = any>({\n    debounce,\n    disableAuthentication,\n    disableSyncWithLocation,\n    exporter,\n    filter,\n    filterDefaultValues,\n    pagination = defaultPagination,\n    perPage,\n    queryOptions,\n    resource,\n    sort,\n    storeKey,\n    ...rest\n}: InfiniteListProps<RecordType>): ReactElement => (\n    <InfiniteListBase<RecordType>\n        debounce={debounce}\n        disableAuthentication={disableAuthentication}\n        disableSyncWithLocation={disableSyncWithLocation}\n        exporter={exporter}\n        filter={filter}\n        filterDefaultValues={filterDefaultValues}\n        perPage={perPage}\n        queryOptions={queryOptions}\n        resource={resource}\n        sort={sort}\n        storeKey={storeKey}\n    >\n        <ListView<RecordType> {...rest} pagination={pagination} />\n    </InfiniteListBase>\n);\n\nconst defaultPagination = <InfinitePagination />;\n\nexport interface InfiniteListProps<RecordType extends RaRecord = any>\n    extends InfiniteListControllerProps<RecordType>,\n        ListViewProps {}\n\nInfiniteList.propTypes = {\n    // the props you can change\n    // @ts-ignore-line\n    actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    aside: PropTypes.element,\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    emptyWhileLoading: PropTypes.bool,\n    filter: PropTypes.object,\n    filterDefaultValues: PropTypes.object,\n    filters: PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.arrayOf(PropTypes.element),\n    ]),\n    // @ts-ignore-line\n    pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    perPage: PropTypes.number.isRequired,\n    //@ts-ignore-line\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    sx: PropTypes.any,\n    title: TitlePropType,\n    // the props managed by react-admin\n    disableSyncWithLocation: PropTypes.bool,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasList: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    resource: PropTypes.string,\n};\n\nInfiniteList.defaultProps = {\n    filter: {},\n    perPage: 10,\n};\n"]},"metadata":{},"sourceType":"module"}
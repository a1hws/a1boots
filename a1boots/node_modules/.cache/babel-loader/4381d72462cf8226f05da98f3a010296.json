{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { cloneElement, useMemo, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useResourceContext, useResourceDefinition } from 'ra-core';\nimport TopToolbar from '../layout/TopToolbar';\nimport { CreateButton, ExportButton } from '../button';\nimport { FilterContext } from './FilterContext';\nimport { FilterButton } from './filter';\n/**\n * Action Toolbar for the List view\n *\n * Internal component. If you want to add or remove actions for a List view,\n * write your own ListActions Component. Then, in the <List> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import { cloneElement } from 'react';\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, List, CreateButton, ExportButton } from 'react-admin';\n *\n *     const PostListActions = ({ filters }) => (\n *         <TopToolbar>\n *             { cloneElement(filters, { context: 'button' }) }\n *             <CreateButton/>\n *             <ExportButton/>\n *             // Add your custom actions here //\n *             <Button onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostList = (props) => (\n *         <List actions={<PostListActions />} {...props}>\n *             ...\n *         </List>\n *     );\n */\n\nexport var ListActions = function (props) {\n  var className = props.className,\n      filtersProp = props.filters,\n      _ = props.hasCreate,\n      rest = __rest(props, [\"className\", \"filters\", \"hasCreate\"]);\n\n  var _a = useListContext(props),\n      sort = _a.sort,\n      displayedFilters = _a.displayedFilters,\n      filterValues = _a.filterValues,\n      exporter = _a.exporter,\n      showFilter = _a.showFilter,\n      total = _a.total;\n\n  var resource = useResourceContext(props);\n  var hasCreate = useResourceDefinition(props).hasCreate;\n  var filters = useContext(FilterContext) || filtersProp;\n  return useMemo(function () {\n    return React.createElement(TopToolbar, __assign({\n      className: className\n    }, sanitizeListRestProps(rest)), filtersProp ? cloneElement(filtersProp, {\n      resource: resource,\n      showFilter: showFilter,\n      displayedFilters: displayedFilters,\n      filterValues: filterValues,\n      context: 'button'\n    }) : filters && React.createElement(FilterButton, null), hasCreate && React.createElement(CreateButton, null), exporter !== false && React.createElement(ExportButton, {\n      disabled: total === 0,\n      resource: resource,\n      sort: sort,\n      filterValues: filterValues\n    }));\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [resource, displayedFilters, filterValues, filtersProp, showFilter, filters, total, className, sort, exporter, hasCreate]);\n};\nListActions.propTypes = {\n  className: PropTypes.string,\n  sort: PropTypes.any,\n  displayedFilters: PropTypes.object,\n  exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  filters: PropTypes.element,\n  filterValues: PropTypes.object,\n  hasCreate: PropTypes.bool,\n  resource: PropTypes.string,\n  onUnselectItems: PropTypes.func.isRequired,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  showFilter: PropTypes.func,\n  total: PropTypes.number\n};\nListActions.defaultProps = {\n  selectedIds: [],\n  onUnselectItems: function () {\n    return null;\n  }\n};","map":{"version":3,"mappings":"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","names":["React","cloneElement","useMemo","useContext","PropTypes","sanitizeListRestProps","useListContext","useResourceContext","useResourceDefinition","TopToolbar","CreateButton","ExportButton","FilterContext","FilterButton","ListActions","props","filtersProp","_","rest","sort","displayedFilters","filterValues","exporter","showFilter","total","resource","hasCreate","filters","__assign","className","context","disabled","propTypes","string","any","object","oneOfType","func","bool","element","onUnselectItems","isRequired","selectedIds","arrayOf","number","defaultProps"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/ListActions.tsx"],"sourcesContent":["import * as React from 'react';\nimport { cloneElement, useMemo, useContext, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    sanitizeListRestProps,\n    Identifier,\n    SortPayload,\n    Exporter,\n    useListContext,\n    useResourceContext,\n    useResourceDefinition,\n} from 'ra-core';\nimport { ToolbarProps } from '@mui/material';\n\nimport TopToolbar from '../layout/TopToolbar';\nimport { CreateButton, ExportButton } from '../button';\nimport { FilterContext } from './FilterContext';\nimport { FilterButton } from './filter';\n\n/**\n * Action Toolbar for the List view\n *\n * Internal component. If you want to add or remove actions for a List view,\n * write your own ListActions Component. Then, in the <List> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import { cloneElement } from 'react';\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, List, CreateButton, ExportButton } from 'react-admin';\n *\n *     const PostListActions = ({ filters }) => (\n *         <TopToolbar>\n *             { cloneElement(filters, { context: 'button' }) }\n *             <CreateButton/>\n *             <ExportButton/>\n *             // Add your custom actions here //\n *             <Button onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostList = (props) => (\n *         <List actions={<PostListActions />} {...props}>\n *             ...\n *         </List>\n *     );\n */\nexport const ListActions = (props: ListActionsProps) => {\n    const { className, filters: filtersProp, hasCreate: _, ...rest } = props;\n    const {\n        sort,\n        displayedFilters,\n        filterValues,\n        exporter,\n        showFilter,\n        total,\n    } = useListContext(props);\n    const resource = useResourceContext(props);\n    const { hasCreate } = useResourceDefinition(props);\n    const filters = useContext(FilterContext) || filtersProp;\n    return useMemo(\n        () => (\n            <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\n                {filtersProp\n                    ? cloneElement(filtersProp, {\n                          resource,\n                          showFilter,\n                          displayedFilters,\n                          filterValues,\n                          context: 'button',\n                      })\n                    : filters && <FilterButton />}\n                {hasCreate && <CreateButton />}\n                {exporter !== false && (\n                    <ExportButton\n                        disabled={total === 0}\n                        resource={resource}\n                        sort={sort}\n                        filterValues={filterValues}\n                    />\n                )}\n            </TopToolbar>\n        ),\n        /* eslint-disable react-hooks/exhaustive-deps */\n        [\n            resource,\n            displayedFilters,\n            filterValues,\n            filtersProp,\n            showFilter,\n            filters,\n            total,\n            className,\n            sort,\n            exporter,\n            hasCreate,\n        ]\n    );\n};\n\nListActions.propTypes = {\n    className: PropTypes.string,\n    sort: PropTypes.any,\n    displayedFilters: PropTypes.object,\n    exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    filters: PropTypes.element,\n    filterValues: PropTypes.object,\n    hasCreate: PropTypes.bool,\n    resource: PropTypes.string,\n    onUnselectItems: PropTypes.func.isRequired,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    showFilter: PropTypes.func,\n    total: PropTypes.number,\n};\n\nListActions.defaultProps = {\n    selectedIds: [],\n    onUnselectItems: () => null,\n};\n\nexport interface ListActionsProps extends ToolbarProps {\n    sort?: SortPayload;\n    className?: string;\n    resource?: string;\n    filters?: ReactElement<any>;\n    displayedFilters?: any;\n    exporter?: Exporter | boolean;\n    filterValues?: any;\n    permanentFilter?: any;\n    hasCreate?: boolean;\n    selectedIds?: Identifier[];\n    onUnselectItems?: () => void;\n    showFilter?: (filterName: string, defaultValue: any) => void;\n    total?: number;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n/**\n * An Input component for a number\n *\n * @example\n * <NumberInput source=\"nb_views\" />\n *\n * You can customize the `step` props (which defaults to \"any\")\n * @example\n * <NumberInput source=\"nb_views\" step={1} />\n *\n */\n\nexport var NumberInput = function (_a) {\n  var className = _a.className,\n      _b = _a.defaultValue,\n      defaultValue = _b === void 0 ? null : _b,\n      _c = _a.format,\n      format = _c === void 0 ? convertNumberToString : _c,\n      helperText = _a.helperText,\n      label = _a.label,\n      margin = _a.margin,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      parse = _a.parse,\n      resource = _a.resource,\n      source = _a.source,\n      step = _a.step,\n      min = _a.min,\n      max = _a.max,\n      validate = _a.validate,\n      variant = _a.variant,\n      overrideInputProps = _a.inputProps,\n      rest = __rest(_a, [\"className\", \"defaultValue\", \"format\", \"helperText\", \"label\", \"margin\", \"onChange\", \"onBlur\", \"onFocus\", \"parse\", \"resource\", \"source\", \"step\", \"min\", \"max\", \"validate\", \"variant\", \"inputProps\"]);\n\n  var _d = useInput(__assign({\n    defaultValue: defaultValue,\n    onBlur: onBlur,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      field = _d.field,\n      _e = _d.fieldState,\n      error = _e.error,\n      invalid = _e.invalid,\n      isTouched = _e.isTouched,\n      isSubmitted = _d.formState.isSubmitted,\n      id = _d.id,\n      isRequired = _d.isRequired;\n\n  var onBlurFromField = field.onBlur;\n\n  var inputProps = __assign(__assign({}, overrideInputProps), {\n    step: step,\n    min: min,\n    max: max\n  }); // This is a controlled input that renders directly the string typed by the user.\n  // This string is converted to a number on change, and stored in the form state,\n  // but that number is not not displayed.\n  // This is to allow transitory values like '1.0' that will lead to '1.02'\n  // text typed by the user and displayed in the input, unparsed\n\n\n  var _f = React.useState(format(field.value)),\n      value = _f[0],\n      setValue = _f[1];\n\n  var hasFocus = React.useRef(false); // update the input text when the record changes\n\n  React.useEffect(function () {\n    if (!hasFocus.current) {\n      var stringValue_1 = format(field.value);\n      setValue(function (value) {\n        return value !== stringValue_1 ? stringValue_1 : value;\n      });\n    }\n  }, [field.value, format]); // eslint-disable-line react-hooks/exhaustive-deps\n  // update the input text when the user types in the input\n\n  var handleChange = function (event) {\n    if (onChange) {\n      onChange(event);\n    }\n\n    if (typeof event.target === 'undefined' || typeof event.target.value === 'undefined') {\n      return;\n    }\n\n    var target = event.target;\n    setValue(target.value);\n    var newValue = target.valueAsNumber !== undefined && target.valueAsNumber !== null && !isNaN(target.valueAsNumber) ? parse ? parse(target.valueAsNumber) : target.valueAsNumber : parse ? parse(target.value) : convertStringToNumber(target.value);\n    field.onChange(newValue);\n  };\n\n  var handleFocus = function (event) {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    hasFocus.current = true;\n  };\n\n  var handleBlur = function () {\n    if (onBlurFromField) {\n      onBlurFromField();\n    }\n\n    hasFocus.current = false;\n    var stringValue = format(field.value);\n    setValue(function (value) {\n      return value !== stringValue ? stringValue : value;\n    });\n  };\n\n  return React.createElement(TextField, __assign({\n    id: id\n  }, field, {\n    // use the locally controlled state instead of the react-hook-form field state\n    value: value,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    type: \"number\",\n    size: \"small\",\n    variant: variant,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    }),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    margin: margin,\n    inputProps: inputProps\n  }, sanitizeInputRestProps(rest)));\n};\nNumberInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nNumberInput.defaultProps = {\n  options: {},\n  step: 'any',\n  textAlign: 'right'\n};\n\nvar convertStringToNumber = function (value) {\n  if (value == null || value === '') {\n    return null;\n  }\n\n  var float = parseFloat(value);\n  return isNaN(float) ? 0 : float;\n};\n\nvar convertNumberToString = function (value) {\n  return value == null || isNaN(value) ? '' : value.toString();\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","clsx","TextField","useInput","FieldTitle","InputHelperText","sanitizeInputRestProps","NumberInput","_a","_b","defaultValue","_c","format","convertNumberToString","helperText","label","margin","onChange","onBlur","onFocus","parse","resource","source","step","min","max","validate","variant","overrideInputProps","rest","field","_e","error","invalid","isTouched","isSubmitted","id","isRequired","onBlurFromField","inputProps","useState","value","setValue","hasFocus","useRef","useEffect","current","stringValue_1","handleChange","event","target","newValue","valueAsNumber","undefined","isNaN","convertStringToNumber","handleFocus","handleBlur","stringValue","__assign","className","type","size","touched","message","propTypes","oneOfType","string","bool","element","options","object","number","defaultProps","textAlign","float","parseFloat","toString"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/NumberInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n\n/**\n * An Input component for a number\n *\n * @example\n * <NumberInput source=\"nb_views\" />\n *\n * You can customize the `step` props (which defaults to \"any\")\n * @example\n * <NumberInput source=\"nb_views\" step={1} />\n *\n */\nexport const NumberInput = ({\n    className,\n    defaultValue = null,\n    format = convertNumberToString,\n    helperText,\n    label,\n    margin,\n    onChange,\n    onBlur,\n    onFocus,\n    parse,\n    resource,\n    source,\n    step,\n    min,\n    max,\n    validate,\n    variant,\n    inputProps: overrideInputProps,\n    ...rest\n}: NumberInputProps) => {\n    const {\n        field,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n        id,\n        isRequired,\n    } = useInput({\n        defaultValue,\n        onBlur,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n    const { onBlur: onBlurFromField } = field;\n\n    const inputProps = { ...overrideInputProps, step, min, max };\n\n    // This is a controlled input that renders directly the string typed by the user.\n    // This string is converted to a number on change, and stored in the form state,\n    // but that number is not not displayed.\n    // This is to allow transitory values like '1.0' that will lead to '1.02'\n\n    // text typed by the user and displayed in the input, unparsed\n    const [value, setValue] = React.useState(format(field.value));\n\n    const hasFocus = React.useRef(false);\n\n    // update the input text when the record changes\n    React.useEffect(() => {\n        if (!hasFocus.current) {\n            const stringValue = format(field.value);\n            setValue(value => (value !== stringValue ? stringValue : value));\n        }\n    }, [field.value, format]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // update the input text when the user types in the input\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (onChange) {\n            onChange(event);\n        }\n        if (\n            typeof event.target === 'undefined' ||\n            typeof event.target.value === 'undefined'\n        ) {\n            return;\n        }\n        const target = event.target;\n        setValue(target.value);\n        const newValue =\n            target.valueAsNumber !== undefined &&\n            target.valueAsNumber !== null &&\n            !isNaN(target.valueAsNumber)\n                ? parse\n                    ? parse(target.valueAsNumber)\n                    : target.valueAsNumber\n                : parse\n                ? parse(target.value)\n                : convertStringToNumber(target.value);\n        field.onChange(newValue);\n    };\n\n    const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n        if (onFocus) {\n            onFocus(event);\n        }\n        hasFocus.current = true;\n    };\n\n    const handleBlur = () => {\n        if (onBlurFromField) {\n            onBlurFromField();\n        }\n        hasFocus.current = false;\n        const stringValue = format(field.value);\n        setValue(value => (value !== stringValue ? stringValue : value));\n    };\n\n    return (\n        <TextField\n            id={id}\n            {...field}\n            // use the locally controlled state instead of the react-hook-form field state\n            value={value}\n            onChange={handleChange}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"number\"\n            size=\"small\"\n            variant={variant}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            margin={margin}\n            inputProps={inputProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nNumberInput.propTypes = {\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    options: PropTypes.object,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nNumberInput.defaultProps = {\n    options: {},\n    step: 'any',\n    textAlign: 'right',\n};\n\nexport interface NumberInputProps\n    extends CommonInputProps,\n        Omit<\n            TextFieldProps,\n            | 'label'\n            | 'helperText'\n            | 'defaultValue'\n            | 'onChange'\n            | 'onBlur'\n            | 'type'\n        > {\n    step?: string | number;\n    min?: string | number;\n    max?: string | number;\n}\n\nconst convertStringToNumber = value => {\n    if (value == null || value === '') {\n        return null;\n    }\n    const float = parseFloat(value);\n\n    return isNaN(float) ? 0 : float;\n};\n\nconst convertNumberToString = value =>\n    value == null || isNaN(value) ? '' : value.toString();\n"]},"metadata":{},"sourceType":"module"}
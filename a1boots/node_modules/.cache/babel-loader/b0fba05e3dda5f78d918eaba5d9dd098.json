{"ast":null,"code":"import inferElementFromValues from './inferElementFromValues';\nimport getValuesFromRecords from './getValuesFromRecords';\n/**\n * Get a list of React-admin field components from a list of records\n *\n * @example\n * const records = [\n *     {\n *         \"id\": 1,\n *         \"title\": \"Lorem Ipsum\",\n *         \"views\": 254,\n *         \"user_id\": 123,\n *     },\n *     {\n *         \"id\": 2,\n *         \"title\": \"Sic Dolor amet\",\n *         \"user_id\": 456,\n *     },\n * ];\n * const types = {\n *     id: NumberField,\n *     string: TextField,\n *     number: NumberField,\n *     reference: ReferenceField\n * };\n * const components = getElementsFromRecords(records, types);\n * // [\n * //    <NumberField source=\"id\" />,\n * //    <TextField source=\"title\" />,\n * //    <NumberField source=\"views\" />,\n * //    <ReferenceField source=\"user_id\" reference=\"users\"><NumberField source=\"id\" /></ReferenceField>,\n * // ];\n */\n\nexport default (function (records, types) {\n  var fieldValues = getValuesFromRecords(records);\n  return Object.keys(fieldValues).reduce(function (fields, fieldName) {\n    return fields.concat(inferElementFromValues(fieldName, fieldValues[fieldName], types));\n  }, []).filter(function (inferredElement) {\n    return inferredElement.isDefined();\n  });\n});","map":{"version":3,"mappings":"AAAA,OAAOA,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,gBAAe,UAACC,OAAD,EAAiBC,KAAjB,EAAuC;EAClD,IAAMC,WAAW,GAAGH,oBAAoB,CAACC,OAAD,CAAxC;EACA,OAAOG,MAAM,CAACC,IAAP,CAAYF,WAAZ,EACFG,MADE,CAEC,UAACC,MAAD,EAASC,SAAT,EAAkB;IACd,aAAM,CAACC,MAAP,CACIV,sBAAsB,CAClBS,SADkB,EAElBL,WAAW,CAACK,SAAD,CAFO,EAGlBN,KAHkB,CAD1B;EAMC,CATN,EAUC,EAVD,EAYFQ,MAZE,CAYK,2BAAe;IAAI,sBAAe,CAACC,SAAhB;EAA2B,CAZnD,CAAP;AAaH,CAfD","names":["inferElementFromValues","getValuesFromRecords","records","types","fieldValues","Object","keys","reduce","fields","fieldName","concat","filter","isDefined"],"sources":["/var/www/a1boots/node_modules/ra-core/src/inference/getElementsFromRecords.ts"],"sourcesContent":["import inferElementFromValues from './inferElementFromValues';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport { InferredTypeMap } from './types';\nimport InferredElement from './InferredElement';\n\n/**\n * Get a list of React-admin field components from a list of records\n *\n * @example\n * const records = [\n *     {\n *         \"id\": 1,\n *         \"title\": \"Lorem Ipsum\",\n *         \"views\": 254,\n *         \"user_id\": 123,\n *     },\n *     {\n *         \"id\": 2,\n *         \"title\": \"Sic Dolor amet\",\n *         \"user_id\": 456,\n *     },\n * ];\n * const types = {\n *     id: NumberField,\n *     string: TextField,\n *     number: NumberField,\n *     reference: ReferenceField\n * };\n * const components = getElementsFromRecords(records, types);\n * // [\n * //    <NumberField source=\"id\" />,\n * //    <TextField source=\"title\" />,\n * //    <NumberField source=\"views\" />,\n * //    <ReferenceField source=\"user_id\" reference=\"users\"><NumberField source=\"id\" /></ReferenceField>,\n * // ];\n */\nexport default (records: any[], types: InferredTypeMap) => {\n    const fieldValues = getValuesFromRecords(records);\n    return Object.keys(fieldValues)\n        .reduce(\n            (fields, fieldName) =>\n                fields.concat(\n                    inferElementFromValues(\n                        fieldName,\n                        fieldValues[fieldName],\n                        types\n                    )\n                ),\n            [] as InferredElement[]\n        )\n        .filter(inferredElement => inferredElement.isDefined());\n};\n"]},"metadata":{},"sourceType":"module"}
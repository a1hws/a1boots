{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormGroup from '@mui/material/FormGroup';\nimport Switch from '@mui/material/Switch';\nimport { FieldTitle, useInput } from 'ra-core';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\nimport { InputPropTypes } from './InputPropTypes';\nexport var BooleanInput = function BooleanInput(props) {\n  var className = props.className,\n      _a = props.row,\n      row = _a === void 0 ? false : _a,\n      _b = props.defaultValue,\n      defaultValue = _b === void 0 ? false : _b,\n      format = props.format,\n      label = props.label,\n      fullWidth = props.fullWidth,\n      helperText = props.helperText,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      disabled = props.disabled,\n      parse = props.parse,\n      resource = props.resource,\n      source = props.source,\n      validate = props.validate,\n      options = props.options,\n      sx = props.sx,\n      rest = __rest(props, [\"className\", \"row\", \"defaultValue\", \"format\", \"label\", \"fullWidth\", \"helperText\", \"onBlur\", \"onChange\", \"onFocus\", \"disabled\", \"parse\", \"resource\", \"source\", \"validate\", \"options\", \"sx\"]);\n\n  var _c = useInput(__assign({\n    defaultValue: defaultValue,\n    format: format,\n    parse: parse,\n    resource: resource,\n    source: source,\n    onBlur: onBlur,\n    onChange: onChange,\n    type: 'checkbox',\n    validate: validate\n  }, rest)),\n      id = _c.id,\n      field = _c.field,\n      isRequired = _c.isRequired,\n      _d = _c.fieldState,\n      error = _d.error,\n      invalid = _d.invalid,\n      isTouched = _d.isTouched,\n      isSubmitted = _c.formState.isSubmitted;\n\n  var handleChange = useCallback(function (event) {\n    field.onChange(event); // Ensure field is considered as touched\n\n    field.onBlur();\n  }, [field]);\n  return React.createElement(FormGroup, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    row: row,\n    sx: sx\n  }, React.createElement(FormControlLabel, {\n    control: React.createElement(Switch, __assign({\n      id: id,\n      name: field.name,\n      color: \"primary\",\n      onChange: handleChange,\n      onFocus: onFocus,\n      checked: field.value\n    }, sanitizeInputRestProps(rest), options, {\n      disabled: disabled\n    })),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    })\n  }), React.createElement(FormHelperText, {\n    error: (isTouched || isSubmitted) && invalid\n  }, React.createElement(InputHelperText, {\n    touched: isTouched || isSubmitted,\n    error: error === null || error === void 0 ? void 0 : error.message,\n    helperText: helperText\n  })));\n};\nBooleanInput.propTypes = __assign(__assign({}, InputPropTypes), {\n  // @ts-ignore\n  options: PropTypes.shape(Switch.propTypes),\n  disabled: PropTypes.bool\n});\nBooleanInput.defaultProps = {\n  options: {}\n};","map":{"version":3,"mappings":"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","names":["React","useCallback","PropTypes","clsx","FormControlLabel","FormHelperText","FormGroup","Switch","FieldTitle","useInput","sanitizeInputRestProps","InputHelperText","InputPropTypes","BooleanInput","props","_a","row","_b","defaultValue","format","label","fullWidth","helperText","onBlur","onChange","onFocus","disabled","parse","resource","source","validate","options","sx","rest","type","id","field","isRequired","_d","error","invalid","isTouched","isSubmitted","handleChange","event","className","control","__assign","name","color","checked","value","touched","message","propTypes","shape","bool","defaultProps"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/BooleanInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport FormGroup, { FormGroupProps } from '@mui/material/FormGroup';\nimport Switch, { SwitchProps } from '@mui/material/Switch';\nimport { FieldTitle, useInput } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\nimport { InputPropTypes } from './InputPropTypes';\n\nexport const BooleanInput = (props: BooleanInputProps) => {\n    const {\n        className,\n        row = false,\n        defaultValue = false,\n        format,\n        label,\n        fullWidth,\n        helperText,\n        onBlur,\n        onChange,\n        onFocus,\n        disabled,\n        parse,\n        resource,\n        source,\n        validate,\n        options,\n        sx,\n        ...rest\n    } = props;\n    const {\n        id,\n        field,\n        isRequired,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n    } = useInput({\n        defaultValue,\n        format,\n        parse,\n        resource,\n        source,\n        onBlur,\n        onChange,\n        type: 'checkbox',\n        validate,\n        ...rest,\n    });\n\n    const handleChange = useCallback(\n        event => {\n            field.onChange(event);\n            // Ensure field is considered as touched\n            field.onBlur();\n        },\n        [field]\n    );\n\n    return (\n        <FormGroup\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            row={row}\n            sx={sx}\n        >\n            <FormControlLabel\n                control={\n                    <Switch\n                        id={id}\n                        name={field.name}\n                        color=\"primary\"\n                        onChange={handleChange}\n                        onFocus={onFocus}\n                        checked={field.value}\n                        {...sanitizeInputRestProps(rest)}\n                        {...options}\n                        disabled={disabled}\n                    />\n                }\n                label={\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                        isRequired={isRequired}\n                    />\n                }\n            />\n            <FormHelperText error={(isTouched || isSubmitted) && invalid}>\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            </FormHelperText>\n        </FormGroup>\n    );\n};\n\nBooleanInput.propTypes = {\n    ...InputPropTypes,\n    // @ts-ignore\n    options: PropTypes.shape(Switch.propTypes),\n    disabled: PropTypes.bool,\n};\n\nBooleanInput.defaultProps = {\n    options: {},\n};\n\nexport type BooleanInputProps = CommonInputProps &\n    SwitchProps &\n    Omit<FormGroupProps, 'defaultValue' | 'onChange' | 'onBlur' | 'onFocus'> & {\n        options: SwitchProps;\n    };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useCallback } from 'react';\nimport { useStore } from '../../store';\n/**\n * State-like hook for controlling the expanded state of a list item\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {string|integer} id The record identifier, e.g. 123\n * @param {boolean} single Forces only one id to be expanded at a time\n * @returns {Object} Destructure as [expanded, toggleExpanded].\n *\n * @example\n *\n * const [expanded, toggleExpanded] = useExpanded('posts', 123);\n * const expandIcon = expanded ? ExpandLess : ExpandMore;\n * const onExpandClick = () => toggleExpanded();\n */\n\nexport var useExpanded = function (resource, id, single) {\n  if (single === void 0) {\n    single = false;\n  }\n\n  var _a = useStore(\"\".concat(resource, \".datagrid.expanded\"), []),\n      expandedIds = _a[0],\n      setExpandedIds = _a[1];\n\n  var expanded = Array.isArray(expandedIds) ? // eslint-disable-next-line eqeqeq\n  expandedIds.map(function (el) {\n    return el == id;\n  }).indexOf(true) !== -1 : false;\n  var toggleExpanded = useCallback(function () {\n    setExpandedIds(function (ids) {\n      if (!Array.isArray(ids)) {\n        return [id];\n      }\n\n      var index = ids.findIndex(function (el) {\n        return el == id;\n      }); // eslint-disable-line eqeqeq\n\n      return index > -1 ? single ? [] : __spreadArray(__spreadArray([], ids.slice(0, index), true), ids.slice(index + 1), true) : single ? [id] : __spreadArray(__spreadArray([], ids, true), [id], false);\n    });\n  }, [setExpandedIds, id, single]);\n  return [expanded, toggleExpanded];\n};\n/**\n * State-like hook for controlling the expanded state of many list items\n * expanded state is true when at least one item from ids is expanded.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Identifier[]} ids A list of record identifiers\n * @returns {Object} Destructure as [expanded, toggleExpanded].\n *\n * @example\n *\n * const [expanded, toggleExpanded] = useExpandAll('posts', [123, 124, 125]);\n * const expandIcon = expanded ? ExpandLess : ExpandMore;\n * const onExpandClick = () => toggleExpanded();\n */\n\nexport var useExpandAll = function (resource, ids) {\n  var _a = useStore(\"\".concat(resource, \".datagrid.expanded\"), []),\n      expandedIds = _a[0],\n      setExpandedIds = _a[1];\n\n  var isExpanded = Array.isArray(expandedIds) ? // eslint-disable-next-line eqeqeq\n  expandedIds.some(function (id) {\n    return ids.some(function (id2) {\n      return id2 == id;\n    });\n  }) : false;\n  var toggleExpandedAll = useCallback(function () {\n    var unaffectedExpandedIds = expandedIds.filter( // eslint-disable-next-line eqeqeq\n    function (expanded_id) {\n      return !ids.some(function (id) {\n        return id == expanded_id;\n      });\n    });\n    setExpandedIds(isExpanded ? unaffectedExpandedIds : unaffectedExpandedIds.concat(ids));\n  }, [expandedIds, setExpandedIds, isExpanded, ids]);\n  return [isExpanded, toggleExpandedAll];\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,QAAT,QAAyB,aAAzB;AAGA;;;;;;;;;;;;;;;AAcA,OAAO,IAAMC,WAAW,GAAG,UACvBC,QADuB,EAEvBC,EAFuB,EAGvBC,MAHuB,EAGA;EAAvB;IAAAA;EAAuB;;EAEjB,SAAgCJ,QAAQ,CAC1C,UAAGE,QAAH,EAAW,oBAAX,CAD0C,EAE1C,EAF0C,CAAxC;EAAA,IAACG,WAAW,QAAZ;EAAA,IAAcC,cAAc,QAA5B;;EAIN,IAAMC,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcJ,WAAd,IACX;EACAA,WAAW,CAACK,GAAZ,CAAgB,cAAE;IAAI,SAAE,IAAIP,EAAN;EAAQ,CAA9B,EAAgCQ,OAAhC,CAAwC,IAAxC,MAAkD,CAAC,CAFxC,GAGX,KAHN;EAKA,IAAMC,cAAc,GAAGb,WAAW,CAAC;IAC/BO,cAAc,CAAC,eAAG;MACd,IAAI,CAACE,KAAK,CAACC,OAAN,CAAcI,GAAd,CAAL,EAAyB;QACrB,OAAO,CAACV,EAAD,CAAP;MACH;;MACD,IAAMW,KAAK,GAAGD,GAAG,CAACE,SAAJ,CAAc,cAAE;QAAI,SAAE,IAAIZ,EAAN;MAAQ,CAA5B,CAAd,CAJc,CAI+B;;MAC7C,OAAOW,KAAK,GAAG,CAAC,CAAT,GACDV,MAAM,GACF,EADE,GAEHY,gCAAKH,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAaH,KAAb,CAAL,EAAwB,IAAxB,GAA6BD,GAAG,CAACI,KAAJ,CAAUH,KAAK,GAAG,CAAlB,CAA7B,EAAiD,IAAjD,CAHF,GAIDV,MAAM,GACN,CAACD,EAAD,CADM,GAEPa,gCAAKH,GAAL,EAAQ,IAAR,GAAQ,CAAEV,EAAF,CAAR,EAAY,KAAZ,CANL;IAOH,CAZa,CAAd;EAaH,CAdiC,EAc/B,CAACG,cAAD,EAAiBH,EAAjB,EAAqBC,MAArB,CAd+B,CAAlC;EAgBA,OAAO,CAACG,QAAD,EAAWK,cAAX,CAAP;AACH,CA/BM;AAiCP;;;;;;;;;;;;;;;AAcA,OAAO,IAAMM,YAAY,GAAG,UACxBhB,QADwB,EAExBW,GAFwB,EAEP;EAEX,SAAgCb,QAAQ,CAC1C,UAAGE,QAAH,EAAW,oBAAX,CAD0C,EAE1C,EAF0C,CAAxC;EAAA,IAACG,WAAW,QAAZ;EAAA,IAAcC,cAAc,QAA5B;;EAKN,IAAMa,UAAU,GAAGX,KAAK,CAACC,OAAN,CAAcJ,WAAd,IACb;EACAA,WAAW,CAACe,IAAZ,CAAiB,cAAE;IAAI,UAAG,CAACA,IAAJ,CAAS,eAAG;MAAI,UAAG,IAAIjB,EAAP;IAAS,CAAzB;EAA0B,CAAjD,CAFa,GAGb,KAHN;EAKA,IAAMkB,iBAAiB,GAAGtB,WAAW,CAAC;IAClC,IAAMuB,qBAAqB,GAAGjB,WAAW,CAACkB,MAAZ,EAC1B;IACA,uBAAW;MAAI,QAACV,GAAG,CAACO,IAAJ,CAAS,cAAE;QAAI,SAAE,IAAII,WAAN;MAAiB,CAAhC,CAAD;IAAkC,CAFvB,CAA9B;IAIAlB,cAAc,CACVa,UAAU,GACJG,qBADI,GAEJA,qBAAqB,CAACG,MAAtB,CAA6BZ,GAA7B,CAHI,CAAd;EAKH,CAVoC,EAUlC,CAACR,WAAD,EAAcC,cAAd,EAA8Ba,UAA9B,EAA0CN,GAA1C,CAVkC,CAArC;EAYA,OAAO,CAACM,UAAD,EAAaE,iBAAb,CAAP;AACH,CA3BM","names":["useCallback","useStore","useExpanded","resource","id","single","expandedIds","setExpandedIds","expanded","Array","isArray","map","indexOf","toggleExpanded","ids","index","findIndex","__spreadArray","slice","useExpandAll","isExpanded","some","toggleExpandedAll","unaffectedExpandedIds","filter","expanded_id","concat"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/list/useExpanded.tsx"],"sourcesContent":["import { useCallback } from 'react';\n\nimport { useStore } from '../../store';\nimport { Identifier } from '../../types';\n\n/**\n * State-like hook for controlling the expanded state of a list item\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {string|integer} id The record identifier, e.g. 123\n * @param {boolean} single Forces only one id to be expanded at a time\n * @returns {Object} Destructure as [expanded, toggleExpanded].\n *\n * @example\n *\n * const [expanded, toggleExpanded] = useExpanded('posts', 123);\n * const expandIcon = expanded ? ExpandLess : ExpandMore;\n * const onExpandClick = () => toggleExpanded();\n */\nexport const useExpanded = (\n    resource: string,\n    id: Identifier,\n    single: boolean = false\n): [boolean, () => void] => {\n    const [expandedIds, setExpandedIds] = useStore<Identifier[]>(\n        `${resource}.datagrid.expanded`,\n        []\n    );\n    const expanded = Array.isArray(expandedIds)\n        ? // eslint-disable-next-line eqeqeq\n          expandedIds.map(el => el == id).indexOf(true) !== -1\n        : false;\n\n    const toggleExpanded = useCallback(() => {\n        setExpandedIds(ids => {\n            if (!Array.isArray(ids)) {\n                return [id];\n            }\n            const index = ids.findIndex(el => el == id); // eslint-disable-line eqeqeq\n            return index > -1\n                ? single\n                    ? []\n                    : [...ids.slice(0, index), ...ids.slice(index + 1)]\n                : single\n                ? [id]\n                : [...ids, id];\n        });\n    }, [setExpandedIds, id, single]);\n\n    return [expanded, toggleExpanded];\n};\n\n/**\n * State-like hook for controlling the expanded state of many list items\n * expanded state is true when at least one item from ids is expanded.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Identifier[]} ids A list of record identifiers\n * @returns {Object} Destructure as [expanded, toggleExpanded].\n *\n * @example\n *\n * const [expanded, toggleExpanded] = useExpandAll('posts', [123, 124, 125]);\n * const expandIcon = expanded ? ExpandLess : ExpandMore;\n * const onExpandClick = () => toggleExpanded();\n */\nexport const useExpandAll = (\n    resource: string,\n    ids: Identifier[]\n): [boolean, () => void] => {\n    const [expandedIds, setExpandedIds] = useStore<Identifier[]>(\n        `${resource}.datagrid.expanded`,\n        []\n    );\n\n    const isExpanded = Array.isArray(expandedIds)\n        ? // eslint-disable-next-line eqeqeq\n          expandedIds.some(id => ids.some(id2 => id2 == id))\n        : false;\n\n    const toggleExpandedAll = useCallback(() => {\n        const unaffectedExpandedIds = expandedIds.filter(\n            // eslint-disable-next-line eqeqeq\n            expanded_id => !ids.some(id => id == expanded_id)\n        );\n        setExpandedIds(\n            isExpanded\n                ? unaffectedExpandedIds\n                : unaffectedExpandedIds.concat(ids)\n        );\n    }, [expandedIds, setExpandedIds, isExpanded, ids]);\n\n    return [isExpanded, toggleExpandedAll];\n};\n"]},"metadata":{},"sourceType":"module"}
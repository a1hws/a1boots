{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { ResettableTextField } from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n/**\n * An Input component for a string\n *\n * @example\n * <TextInput source=\"first_name\" />\n *\n * You can customize the `type` props (which defaults to \"text\").\n * Note that, due to a React bug, you should use `<NumberField>` instead of using type=\"number\".\n * @example\n * <TextInput source=\"email\" type=\"email\" />\n * <NumberInput source=\"nb_views\" />\n *\n * The object passed as `options` props is passed to the <ResettableTextField> component\n */\n\nexport var TextInput = function TextInput(props) {\n  var className = props.className,\n      defaultValue = props.defaultValue,\n      label = props.label,\n      format = props.format,\n      helperText = props.helperText,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      parse = props.parse,\n      resource = props.resource,\n      source = props.source,\n      validate = props.validate,\n      rest = __rest(props, [\"className\", \"defaultValue\", \"label\", \"format\", \"helperText\", \"onBlur\", \"onChange\", \"parse\", \"resource\", \"source\", \"validate\"]);\n\n  var _a = useInput(__assign({\n    defaultValue: defaultValue,\n    format: format,\n    parse: parse,\n    resource: resource,\n    source: source,\n    type: 'text',\n    validate: validate,\n    onBlur: onBlur,\n    onChange: onChange\n  }, rest)),\n      field = _a.field,\n      _b = _a.fieldState,\n      error = _b.error,\n      invalid = _b.invalid,\n      isTouched = _b.isTouched,\n      isSubmitted = _a.formState.isSubmitted,\n      id = _a.id,\n      isRequired = _a.isRequired;\n\n  return React.createElement(ResettableTextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    label: label !== '' && label !== false ? React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }) : null,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    })\n  }, sanitizeInputRestProps(rest)));\n};\nTextInput.propTypes = {\n  className: PropTypes.string,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\nTextInput.defaultProps = {\n  options: {}\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","clsx","useInput","FieldTitle","ResettableTextField","InputHelperText","sanitizeInputRestProps","TextInput","props","defaultValue","label","format","helperText","onBlur","onChange","parse","resource","source","validate","rest","type","field","_b","error","invalid","isTouched","isSubmitted","id","isRequired","__assign","className","touched","message","propTypes","string","oneOfType","bool","element","options","object","defaultProps"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/TextInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport {\n    ResettableTextField,\n    ResettableTextFieldProps,\n} from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n\n/**\n * An Input component for a string\n *\n * @example\n * <TextInput source=\"first_name\" />\n *\n * You can customize the `type` props (which defaults to \"text\").\n * Note that, due to a React bug, you should use `<NumberField>` instead of using type=\"number\".\n * @example\n * <TextInput source=\"email\" type=\"email\" />\n * <NumberInput source=\"nb_views\" />\n *\n * The object passed as `options` props is passed to the <ResettableTextField> component\n */\nexport const TextInput = (props: TextInputProps) => {\n    const {\n        className,\n        defaultValue,\n        label,\n        format,\n        helperText,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest\n    } = props;\n    const {\n        field,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n        id,\n        isRequired,\n    } = useInput({\n        defaultValue,\n        format,\n        parse,\n        resource,\n        source,\n        type: 'text',\n        validate,\n        onBlur,\n        onChange,\n        ...rest,\n    });\n    return (\n        <ResettableTextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            label={\n                label !== '' && label !== false ? (\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                        isRequired={isRequired}\n                    />\n                ) : null\n            }\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nTextInput.propTypes = {\n    className: PropTypes.string,\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    options: PropTypes.object,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n\nTextInput.defaultProps = {\n    options: {},\n};\n\nexport type TextInputProps = CommonInputProps &\n    Omit<ResettableTextFieldProps, 'label' | 'helperText'>;\n"]},"metadata":{},"sourceType":"module"}
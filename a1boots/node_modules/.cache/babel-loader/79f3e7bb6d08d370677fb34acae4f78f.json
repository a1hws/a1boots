{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Stack, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport { FieldTitle } from 'ra-core';\n/**\n * Wrap a field or an input with a label if necessary.\n *\n * The label is displayed if:\n * - the field or input has a label prop that is not false, or\n * - the field or input has a source prop\n *\n * @example\n * <Labeled>\n *     <FooComponent source=\"title\" />\n * </Labeled>\n */\n\nexport var Labeled = function Labeled(_a) {\n  var _b;\n\n  var _c, _d;\n\n  var children = _a.children,\n      _e = _a.className,\n      className = _e === void 0 ? '' : _e,\n      _f = _a.color,\n      color = _f === void 0 ? 'textSecondary' : _f,\n      _g = _a.component,\n      component = _g === void 0 ? 'span' : _g,\n      fullWidth = _a.fullWidth,\n      isRequired = _a.isRequired,\n      label = _a.label,\n      resource = _a.resource,\n      source = _a.source,\n      rest = __rest(_a, [\"children\", \"className\", \"color\", \"component\", \"fullWidth\", \"isRequired\", \"label\", \"resource\", \"source\"]);\n\n  return React.createElement(Root // @ts-ignore https://github.com/mui/material-ui/issues/29875\n  , __assign({\n    // @ts-ignore https://github.com/mui/material-ui/issues/29875\n    component: component,\n    className: clsx(className, (_b = {}, _b[LabeledClasses.fullWidth] = fullWidth, _b))\n  }, rest), label !== false && children.props.label !== false && typeof children.type !== 'string' && // @ts-ignore\n  ((_c = children.type) === null || _c === void 0 ? void 0 : _c.displayName) !== 'Labeled' && // @ts-ignore\n  ((_d = children.type) === null || _d === void 0 ? void 0 : _d.displayName) !== 'Labeled' ? React.createElement(Typography, {\n    color: color,\n    className: LabeledClasses.label\n  }, React.createElement(FieldTitle, {\n    label: label || children.props.label,\n    source: source || children.props.source,\n    resource: resource,\n    isRequired: isRequired\n  })) : null, children);\n};\nLabeled.displayName = 'Labeled';\nvar PREFIX = 'RaLabeled';\nexport var LabeledClasses = {\n  label: \"\".concat(PREFIX, \"-label\"),\n  fullWidth: \"\".concat(PREFIX, \"-fullWidth\")\n};\nvar Root = styled(Stack, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {\n    display: 'inline-flex',\n    marginBottom: '0.2em'\n  }, _b[\"&.\".concat(LabeledClasses.fullWidth)] = {\n    width: '100%'\n  }, _b[\"& .\".concat(LabeledClasses.label)] = {\n    fontSize: '0.75em',\n    marginBottom: '0.2em'\n  }, _b;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,KAAT,EAAmCC,UAAnC,QAAqD,eAArD;AACA,SAASC,MAAT,QAAuB,sBAAvB;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,SAASC,UAAT,QAA2B,SAA3B;AAGA;;;;;;;;;;;;;AAYA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,EAAD,EAWR;;;;;EAVX,YAAQ,cAAR;EAAA,IACAC,iBADA;EAAA,IACAC,SAAS,mBAAG,EAAH,GAAKD,EADd;EAAA,IAEAE,aAFA;EAAA,IAEAC,KAAK,mBAAG,eAAH,GAAkBD,EAFvB;EAAA,IAGAE,iBAHA;EAAA,IAGAC,SAAS,mBAAG,MAAH,GAASD,EAHlB;EAAA,IAIAE,SAAS,eAJT;EAAA,IAKAC,UAAU,gBALV;EAAA,IAMAC,KAAK,WANL;EAAA,IAOAC,QAAQ,cAPR;EAAA,IAQAC,MAAM,YARN;EAAA,IASGC,IAAI,cAVa,yGAUb,CATP;;EAUgB,OAChBnB,oBAACoB,IAAD,CACI;EADJ;IACI;IACAP,SAAS,EAAEA;IACXJ,SAAS,EAAEL,IAAI,CAACK,SAAD,GAAUY,SACrBA,GAACC,cAAc,CAACR,SAAhB,IAA4BA,SADP,IAAV;KAGXK,KANR,EAQKH,KAAK,KAAK,KAAV,IACDO,QAAQ,CAACC,KAAT,CAAeR,KAAf,KAAyB,KADxB,IAED,OAAOO,QAAQ,CAACE,IAAhB,KAAyB,QAFxB,IAGD;EACA,eAAQ,CAACA,IAAT,MAAa,IAAb,IAAaC,aAAb,GAAa,MAAb,GAAaA,GAAEC,WAAf,MAA+B,SAJ9B,IAKD;EACA,eAAQ,CAACF,IAAT,MAAa,IAAb,IAAaG,aAAb,GAAa,MAAb,GAAaA,GAAED,WAAf,MAA+B,SAN9B,GAOG3B,oBAACE,UAAD,EAAW;IAACS,KAAK,EAAEA,KAAR;IAAeF,SAAS,EAAEa,cAAc,CAACN;EAAzC,CAAX,EACIhB,oBAACK,UAAD,EAAW;IACPW,KAAK,EAAEA,KAAK,IAAIO,QAAQ,CAACC,KAAT,CAAeR,KADxB;IAEPE,MAAM,EAAEA,MAAM,IAAIK,QAAQ,CAACC,KAAT,CAAeN,MAF1B;IAGPD,QAAQ,EAAEA,QAHH;IAIPF,UAAU,EAAEA;EAJL,CAAX,CADJ,CAPH,GAeG,IAvBR,EAwBKQ,QAxBL,CADgB;AA2BnB,CAtCM;AAwCPjB,OAAO,CAACqB,WAAR,GAAsB,SAAtB;AAmBA,IAAME,MAAM,GAAG,WAAf;AAEA,OAAO,IAAMP,cAAc,GAAG;EAC1BN,KAAK,EAAE,UAAGa,MAAH,EAAS,QAAT,CADmB;EAE1Bf,SAAS,EAAE,UAAGe,MAAH,EAAS,YAAT;AAFe,CAAvB;AAKP,IAAMT,IAAI,GAAGjB,MAAM,CAACF,KAAD,EAAQ;EACvB6B,IAAI,EAAED,MADiB;EAEvBE,iBAAiB,EAAE,2BAACP,KAAD,EAAQQ,MAAR,EAAc;IAAK,aAAM,CAACC,IAAP;EAAW;AAF1B,CAAR,CAAN,CAGV,UAAC1B,EAAD,EAAU;;;MAAP2B,KAAK;EAAO;IACdC,OAAO,EAAE,aADK;IAEdC,YAAY,EAAE;EAFA,GAIdf,GAAC,YAAKC,cAAc,CAACR,SAApB,CAAD,IAAmC;IAC/BuB,KAAK,EAAE;EADwB,CAJrB,EAQdhB,GAAC,aAAMC,cAAc,CAACN,KAArB,CAAD,IAAgC;IAC5BsB,QAAQ,EAAE,QADkB;IAE5BF,YAAY,EAAE;EAFc,CARlB;AAYhB,CAfW,CAAb","names":["React","Stack","Typography","styled","clsx","FieldTitle","Labeled","_a","_e","className","_f","color","_g","component","fullWidth","isRequired","label","resource","source","rest","Root","_b","LabeledClasses","children","props","type","_c","displayName","_d","PREFIX","name","overridesResolver","styles","root","theme","display","marginBottom","width","fontSize"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/Labeled.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ElementType, ReactElement } from 'react';\nimport { Stack, StackProps, Theme, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { Property } from 'csstype';\nimport clsx from 'clsx';\n\nimport { FieldTitle } from 'ra-core';\nimport { ResponsiveStyleValue } from '@mui/system';\n\n/**\n * Wrap a field or an input with a label if necessary.\n *\n * The label is displayed if:\n * - the field or input has a label prop that is not false, or\n * - the field or input has a source prop\n *\n * @example\n * <Labeled>\n *     <FooComponent source=\"title\" />\n * </Labeled>\n */\nexport const Labeled = ({\n    children,\n    className = '',\n    color = 'textSecondary',\n    component = 'span',\n    fullWidth,\n    isRequired,\n    label,\n    resource,\n    source,\n    ...rest\n}: LabeledProps) => (\n    <Root\n        // @ts-ignore https://github.com/mui/material-ui/issues/29875\n        component={component}\n        className={clsx(className, {\n            [LabeledClasses.fullWidth]: fullWidth,\n        })}\n        {...rest}\n    >\n        {label !== false &&\n        children.props.label !== false &&\n        typeof children.type !== 'string' &&\n        // @ts-ignore\n        children.type?.displayName !== 'Labeled' &&\n        // @ts-ignore\n        children.type?.displayName !== 'Labeled' ? (\n            <Typography color={color} className={LabeledClasses.label}>\n                <FieldTitle\n                    label={label || children.props.label}\n                    source={source || children.props.source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            </Typography>\n        ) : null}\n        {children}\n    </Root>\n);\n\nLabeled.displayName = 'Labeled';\n\nexport interface LabeledProps extends StackProps {\n    children: ReactElement;\n    className?: string;\n    color?:\n        | ResponsiveStyleValue<Property.Color | Property.Color[]>\n        | ((\n              theme: Theme\n          ) => ResponsiveStyleValue<Property.Color | Property.Color[]>);\n    component?: ElementType;\n    fullWidth?: boolean;\n    htmlFor?: string;\n    isRequired?: boolean;\n    label?: string | ReactElement | boolean;\n    resource?: string;\n    source?: string;\n}\n\nconst PREFIX = 'RaLabeled';\n\nexport const LabeledClasses = {\n    label: `${PREFIX}-label`,\n    fullWidth: `${PREFIX}-fullWidth`,\n};\n\nconst Root = styled(Stack, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'inline-flex',\n    marginBottom: '0.2em',\n\n    [`&.${LabeledClasses.fullWidth}`]: {\n        width: '100%',\n    },\n\n    [`& .${LabeledClasses.label}`]: {\n        fontSize: '0.75em',\n        marginBottom: '0.2em',\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
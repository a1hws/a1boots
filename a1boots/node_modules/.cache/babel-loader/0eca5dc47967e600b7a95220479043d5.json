{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.updateMany() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The updateMany parameters { ids, data, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.ids The resource identifiers, e.g. [123, 456]\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current mutation state. Destructure as [updateMany, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [updateMany, { isLoading: false, isIdle: true }]\n * - start:   [updateMany, { isLoading: true }]\n * - success: [updateMany, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [updateMany, { error: [error from response], isLoading: false, isError: true }]\n *\n * The updateMany() function must be called with a resource and a parameter object: updateMany(resource, { ids, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the updateMany callback\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isLoading, error }] = useUpdateMany();\n *     const handleClick = () => {\n *         updateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Reset views</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isLoading, error }] = useUpdateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => updateMany()}>Reset views</button>;\n * };\n */\n\nexport var useUpdateMany = function useUpdateMany(resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var ids = params.ids,\n      data = params.data,\n      meta = params.meta;\n\n  var _a = options.mutationMode,\n      mutationMode = _a === void 0 ? 'pessimistic' : _a,\n      reactMutationOptions = __rest(options, [\"mutationMode\"]);\n\n  var mode = useRef(mutationMode);\n  var paramsRef = useRef(params);\n  var snapshot = useRef([]);\n\n  var updateCache = function updateCache(_a) {\n    var resource = _a.resource,\n        ids = _a.ids,\n        data = _a.data,\n        meta = _a.meta;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var updatedAt, updateColl;\n      return __generator(this, function (_b) {\n        updatedAt = mode.current === 'undoable' ? Date.now() + 1000 * 5 : Date.now();\n\n        updateColl = function updateColl(old) {\n          if (!old) return;\n\n          var newCollection = __spreadArray([], old, true);\n\n          ids.forEach(function (id) {\n            // eslint-disable-next-line eqeqeq\n            var index = old.findIndex(function (record) {\n              return record.id == id;\n            });\n\n            if (index === -1) {\n              return;\n            }\n\n            newCollection = __spreadArray(__spreadArray(__spreadArray([], newCollection.slice(0, index), true), [__assign(__assign({}, newCollection[index]), data)], false), newCollection.slice(index + 1), true);\n          });\n          return newCollection;\n        };\n\n        ids.forEach(function (id) {\n          return queryClient.setQueryData([resource, 'getOne', {\n            id: String(id),\n            meta: meta\n          }], function (record) {\n            return __assign(__assign({}, record), data);\n          }, {\n            updatedAt: updatedAt\n          });\n        });\n        queryClient.setQueriesData([resource, 'getList'], function (res) {\n          return res && res.data ? __assign(__assign({}, res), {\n            data: updateColl(res.data)\n          }) : res;\n        }, {\n          updatedAt: updatedAt\n        });\n        queryClient.setQueriesData([resource, 'getInfiniteList'], function (res) {\n          return res && res.pages ? __assign(__assign({}, res), {\n            pages: res.pages.map(function (page) {\n              return __assign(__assign({}, page), {\n                data: updateColl(page.data)\n              });\n            })\n          }) : res;\n        }, {\n          updatedAt: updatedAt\n        });\n        queryClient.setQueriesData([resource, 'getMany'], function (coll) {\n          return coll && coll.length > 0 ? updateColl(coll) : coll;\n        }, {\n          updatedAt: updatedAt\n        });\n        queryClient.setQueriesData([resource, 'getManyReference'], function (res) {\n          return res && res.data ? {\n            data: updateColl(res.data),\n            total: res.total\n          } : res;\n        }, {\n          updatedAt: updatedAt\n        });\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.resource,\n        callTimeResource = _c === void 0 ? resource : _c,\n        _d = _b.ids,\n        callTimeIds = _d === void 0 ? paramsRef.current.ids : _d,\n        _e = _b.data,\n        callTimeData = _e === void 0 ? paramsRef.current.data : _e,\n        _f = _b.meta,\n        callTimeMeta = _f === void 0 ? paramsRef.current.meta : _f;\n\n    return dataProvider.updateMany(callTimeResource, {\n      ids: callTimeIds,\n      data: callTimeData,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, reactMutationOptions), {\n    onMutate: function onMutate(variables) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var userContext;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!reactMutationOptions.onMutate) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , reactMutationOptions.onMutate(variables)];\n\n            case 1:\n              userContext = _a.sent() || {};\n              return [2\n              /*return*/\n              , __assign({\n                snapshot: snapshot.current\n              }, userContext)];\n\n            case 2:\n              // Return a context object with the snapshot value\n              return [2\n              /*return*/\n              , {\n                snapshot: snapshot.current\n              }];\n          }\n        });\n      });\n    },\n    onError: function onError(error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // If the mutation fails, use the context returned from onMutate to rollback\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0],\n              value = _a[1];\n          queryClient.setQueryData(key, value);\n        });\n      }\n\n      if (reactMutationOptions.onError) {\n        return reactMutationOptions.onError(error, variables, context);\n      } // call-time error callback is executed by react-query\n\n    },\n    onSuccess: function onSuccess(data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (mode.current === 'pessimistic') {\n        // update the getOne and getList query cache with the new result\n        var _a = variables.resource,\n            callTimeResource = _a === void 0 ? resource : _a,\n            _b = variables.ids,\n            callTimeIds = _b === void 0 ? ids : _b,\n            _c = variables.data,\n            callTimeData = _c === void 0 ? data : _c,\n            _d = variables.meta,\n            callTimeMeta = _d === void 0 ? meta : _d;\n        updateCache({\n          resource: callTimeResource,\n          ids: callTimeIds,\n          data: callTimeData,\n          meta: callTimeMeta\n        });\n\n        if (reactMutationOptions.onSuccess) {\n          reactMutationOptions.onSuccess(data, variables, context);\n        } // call-time success callback is executed by react-query\n\n      }\n    },\n    onSettled: function onSettled(data, error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // Always refetch after error or success:\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0];\n          queryClient.invalidateQueries(key);\n        });\n      }\n\n      if (reactMutationOptions.onSettled) {\n        return reactMutationOptions.onSettled(data, error, variables, context);\n      }\n    }\n  }));\n\n  var updateMany = function updateMany(callTimeResource, callTimeParams, updateOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n\n    if (updateOptions === void 0) {\n      updateOptions = {};\n    }\n\n    return __awaiter(void 0, void 0, void 0, function () {\n      var mutationMode, returnPromise, onSuccess, onSettled, onError, _a, callTimeIds, _b, callTimeData, _c, callTimeMeta, queryKeys;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            mutationMode = updateOptions.mutationMode, returnPromise = updateOptions.returnPromise, onSuccess = updateOptions.onSuccess, onSettled = updateOptions.onSettled, onError = updateOptions.onError; // store the hook time params *at the moment of the call*\n            // because they may change afterwards, which would break the undoable mode\n            // as the previousData would be overwritten by the optimistic update\n\n            paramsRef.current = params;\n\n            if (mutationMode) {\n              mode.current = mutationMode;\n            }\n\n            if (returnPromise && mode.current !== 'pessimistic') {\n              console.warn('The returnPromise parameter can only be used if the mutationMode is set to pessimistic');\n            }\n\n            if (mode.current === 'pessimistic') {\n              if (returnPromise) {\n                return [2\n                /*return*/\n                , mutation.mutateAsync(__assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  onSuccess: onSuccess,\n                  onSettled: onSettled,\n                  onError: onError\n                })];\n              }\n\n              return [2\n              /*return*/\n              , mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSuccess: onSuccess,\n                onSettled: onSettled,\n                onError: onError\n              })];\n            }\n\n            _a = callTimeParams.ids, callTimeIds = _a === void 0 ? ids : _a, _b = callTimeParams.data, callTimeData = _b === void 0 ? data : _b, _c = callTimeParams.meta, callTimeMeta = _c === void 0 ? meta : _c;\n            queryKeys = [[callTimeResource, 'getOne'], [callTimeResource, 'getList'], [callTimeResource, 'getInfiniteList'], [callTimeResource, 'getMany'], [callTimeResource, 'getManyReference']];\n            /**\n             * Snapshot the previous values via queryClient.getQueriesData()\n             *\n             * The snapshotData ref will contain an array of tuples [query key, associated data]\n             *\n             * @example\n             * [\n             *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n             *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n             *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n             * ]\n             *\n             * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n             */\n\n            snapshot.current = queryKeys.reduce(function (prev, curr) {\n              return prev.concat(queryClient.getQueriesData(curr));\n            }, []); // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n\n            return [4\n            /*yield*/\n            , Promise.all(snapshot.current.map(function (_a) {\n              var key = _a[0];\n              return queryClient.cancelQueries(key);\n            }))];\n\n          case 1:\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            _d.sent(); // Optimistically update to the new data\n\n\n            return [4\n            /*yield*/\n            , updateCache({\n              resource: callTimeResource,\n              ids: callTimeIds,\n              data: callTimeData,\n              meta: callTimeMeta\n            })];\n\n          case 2:\n            // Optimistically update to the new data\n            _d.sent(); // run the success callbacks during the next tick\n\n\n            if (onSuccess) {\n              setTimeout(function () {\n                return onSuccess(callTimeIds, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n\n            if (reactMutationOptions.onSuccess) {\n              setTimeout(function () {\n                return reactMutationOptions.onSuccess(callTimeIds, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n\n            if (mode.current === 'optimistic') {\n              // call the mutate method without success side effects\n              return [2\n              /*return*/\n              , mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSettled: onSettled,\n                onError: onError\n              })];\n            } else {\n              // undoable mutation: register the mutation for later\n              undoableEventEmitter.once('end', function (_a) {\n                var isUndo = _a.isUndo;\n\n                if (isUndo) {\n                  // rollback\n                  snapshot.current.forEach(function (_a) {\n                    var key = _a[0],\n                        value = _a[1];\n                    queryClient.setQueryData(key, value);\n                  });\n                } else {\n                  // call the mutate method without success side effects\n                  mutation.mutate(__assign({\n                    resource: callTimeResource\n                  }, callTimeParams), {\n                    onSettled: onSettled,\n                    onError: onError\n                  });\n                }\n              });\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return [useEvent(updateMany), mutation];\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SACIC,WADJ,EAEIC,cAFJ,QAQO,aARP;AAUA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AAQA,SAASC,QAAT,QAAyB,SAAzB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAIzBC,QAJyB,EAKzBC,MALyB,EAMzBC,OANyB,EAMoC;EAD7D;IAAAD;EAA2D;;EAC3D;IAAAC;EAA6D;;EAE7D,IAAMC,YAAY,GAAGP,eAAe,EAApC;EACA,IAAMQ,WAAW,GAAGT,cAAc,EAAlC;EACQ,OAAG,GAAiBM,MAAM,IAA1B;EAAA,IAAKI,IAAI,GAAWJ,MAAM,KAA1B;EAAA,IAAWK,IAAI,GAAKL,MAAM,KAA1B;;EACA,SAA0DC,OAAO,aAAjE;EAAA,gBAAY,mBAAG,aAAH,GAAgBK,EAA5B;EAAA,IAAiCC,oBAAoB,UAAKN,OAAL,EAAvD,gBAAuD,CAArD;;EACR,IAAMO,IAAI,GAAGhB,MAAM,CAAeiB,YAAf,CAAnB;EACA,IAAMC,SAAS,GAAGlB,MAAM,CACpBQ,MADoB,CAAxB;EAGA,IAAMW,QAAQ,GAAGnB,MAAM,CAAW,EAAX,CAAvB;;EAEA,IAAMoB,WAAW,GAAG,SAAdA,WAAc,CAAON,EAAP,EAUnB;QATGP,QAAQ;QACRc,GAAG;QACHT,IAAI;QACJC,IAAI;;;;QASES,SAAS,GACXN,IAAI,CAACO,OAAL,KAAiB,UAAjB,GAA8BC,IAAI,CAACC,GAAL,KAAa,OAAO,CAAlD,GAAsDD,IAAI,CAACC,GAAL,EADpD;;QAGAC,UAAU,GAAG,oBAACC,GAAD,EAAkB;UACjC,IAAI,CAACA,GAAL,EAAU;;UACV,IAAIC,aAAa,qBAAOD,GAAP,EAAU,IAAV,CAAjB;;UACAN,GAAG,CAACQ,OAAJ,CAAY,cAAE;YACV;YACA,IAAMC,KAAK,GAAGH,GAAG,CAACI,SAAJ,CAAc,kBAAM;cAAI,aAAM,CAACC,EAAP,IAAaA,EAAb;YAAe,CAAvC,CAAd;;YACA,IAAIF,KAAK,KAAK,CAAC,CAAf,EAAkB;cACd;YACH;;YACDF,aAAa,iDACNA,aAAa,CAACK,KAAd,CAAoB,CAApB,EAAuBH,KAAvB,CADM,EACuB,IADvB,GACuB,uBAC3BF,aAAa,CAACE,KAAD,IAAYlB,KADE,CADvB,UAGNgB,aAAa,CAACK,KAAd,CAAoBH,KAAK,GAAG,CAA5B,CAHM,EAGwB,IAHxB,CAAb;UAKH,CAXD;UAYA,OAAOF,aAAP;QACH,CAhBK;;QAsBNP,GAAG,CAACQ,OAAJ,CAAY,cAAE;UACV,kBAAW,CAACK,YAAZ,CACI,CAAC3B,QAAD,EAAW,QAAX,EAAqB;YAAEyB,EAAE,EAAEG,MAAM,CAACH,EAAD,CAAZ;YAAkBnB,IAAI;UAAtB,CAArB,CADJ,EAEI,UAACuB,MAAD,EAAmB;YAAK,6BAAMA,MAAN,GAAiBxB,IAAjB;UAAwB,CAFpD,EAGI;YAAEU,SAAS;UAAX,CAHJ;QAIC,CALL;QAOAX,WAAW,CAAC0B,cAAZ,CACI,CAAC9B,QAAD,EAAW,SAAX,CADJ,EAEI,UAAC+B,GAAD,EAAmB;UACf,UAAG,IAAIA,GAAG,CAAC1B,IAAX,GAAiB2B,sBAAMD,GAAN,GAAS;YAAE1B,IAAI,EAAEc,UAAU,CAACY,GAAG,CAAC1B,IAAL;UAAlB,CAAT,CAAjB,GAA2D0B,GAA3D;QAA8D,CAHtE,EAII;UAAEhB,SAAS;QAAX,CAJJ;QAMAX,WAAW,CAAC0B,cAAZ,CACI,CAAC9B,QAAD,EAAW,iBAAX,CADJ,EAEI,UAAC+B,GAAD,EAA2D;UACvD,UAAG,IAAIA,GAAG,CAACE,KAAX,GACKD,sBACQD,GADR,GACW;YACNE,KAAK,EAAEF,GAAG,CAACE,KAAJ,CAAUC,GAAV,CAAc,gBAAI;cAAI,6BACtBC,IADsB,GAClB;gBACP9B,IAAI,EAAEc,UAAU,CAACgB,IAAI,CAAC9B,IAAN;cADT,CADkB;YAG3B,CAHK;UADD,CADX,CADL,GAQM0B,GARN;QAQS,CAXjB,EAYI;UAAEhB,SAAS;QAAX,CAZJ;QAcAX,WAAW,CAAC0B,cAAZ,CACI,CAAC9B,QAAD,EAAW,SAAX,CADJ,EAEI,UAACoC,IAAD,EAAmB;UACf,WAAI,IAAIA,IAAI,CAACC,MAAL,GAAc,CAAtB,GAA0BlB,UAAU,CAACiB,IAAD,CAApC,GAA6CA,IAA7C;QAAiD,CAHzD,EAII;UAAErB,SAAS;QAAX,CAJJ;QAMAX,WAAW,CAAC0B,cAAZ,CACI,CAAC9B,QAAD,EAAW,kBAAX,CADJ,EAEI,UAAC+B,GAAD,EAAmB;UACf,UAAG,IAAIA,GAAG,CAAC1B,IAAX,GACM;YAAEA,IAAI,EAAEc,UAAU,CAACY,GAAG,CAAC1B,IAAL,CAAlB;YAA8BiC,KAAK,EAAEP,GAAG,CAACO;UAAzC,CADN,GAEMP,GAFN;QAES,CALjB,EAMI;UAAEhB,SAAS;QAAX,CANJ;;;;;;EAQH,CA/ED;;EAiFA,IAAMwB,QAAQ,GAAG7C,WAAW,CAKxB,UAACa,EAAD,EAKM;QALLiC,qBAKG,EALH,GAKKjC;QAJFkC;QAAUC,gBAAgB,mBAAG1C,QAAH,GAAWyC;QACrCE;QAAKC,WAAW,mBAAGjC,SAAS,CAACK,OAAV,CAAkBF,GAArB,GAAwB6B;QACxCE;QAAMC,YAAY,mBAAGnC,SAAS,CAACK,OAAV,CAAkBX,IAArB,GAAyBwC;QAC3CE;QAAMC,YAAY,mBAAGrC,SAAS,CAACK,OAAV,CAAkBV,IAArB,GAAyByC;;IAE3C,mBAAY,CACPE,UADL,CACgBP,gBADhB,EACkC;MAC1B5B,GAAG,EAAE8B,WADqB;MAE1BvC,IAAI,EAAEyC,YAFoB;MAG1BxC,IAAI,EAAE0C;IAHoB,CADlC,EAMKE,IANL,CAMU,UAAC3C,EAAD,EAAS;UAANF,IAAI;MAAO;IAAI,CAN5B;EAM6B,CAjBT,EAiBS2B,sBAE1BxB,oBAF0B,GAEN;IACvB2C,QAAQ,EAAE,kBACNC,SADM,EACmD;MAAA;;;;;mBAErD5C,oBAAoB,CAAC2C,UAArB;cAAA;cAAA;cAEK;cAAA;cAAA,EAAM3C,oBAAoB,CAAC2C,QAArB,CAA8BC,SAA9B,CAAN;;;cADCC,WAAW,GACZ9C,SAAD,IAAoD,EADlD;cAEN;cAAA;cAAA;gBACIK,QAAQ,EAAEA,QAAQ,CAACI;cADvB,GAGOqC,WAHP;;;cAMA;cACA;cAAA;cAAA,EAAO;gBAAEzC,QAAQ,EAAEA,QAAQ,CAACI;cAArB,CAAP;;;OAZqD;IAc5D,CAhBsB;IAiBvBsC,OAAO,EAAE,iBACLC,KADK,EAELH,SAFK,EAGLI,OAHK,EAG0B;MAD/B;QAAAJ;MAA8D;;MAG9D,IACI3C,IAAI,CAACO,OAAL,KAAiB,YAAjB,IACAP,IAAI,CAACO,OAAL,KAAiB,UAFrB,EAGE;QACE;QACAwC,OAAO,CAAC5C,QAAR,CAAiBU,OAAjB,CAAyB,UAACf,EAAD,EAAa;cAAXkD,GAAG;cAAEC,KAAK;UACjCtD,WAAW,CAACuB,YAAZ,CAAyB8B,GAAzB,EAA8BC,KAA9B;QACH,CAFD;MAGH;;MAED,IAAIlD,oBAAoB,CAAC8C,OAAzB,EAAkC;QAC9B,OAAO9C,oBAAoB,CAAC8C,OAArB,CACHC,KADG,EAEHH,SAFG,EAGHI,OAHG,CAAP;MAKH,CAlB8B,CAmB/B;;IACH,CAxCsB;IAyCvBG,SAAS,EAAE,mBACPtD,IADO,EAEP+C,SAFO,EAGPI,OAHO,EAGS;MADhB;QAAAJ;MAA8D;;MAG9D,IAAI3C,IAAI,CAACO,OAAL,KAAiB,aAArB,EAAoC;QAChC;QAEI,SAIAoC,SAAS,SAJT;QAAA,IAAUV,gBAAgB,mBAAG1C,QAAH,GAAWO,EAArC;QAAA,IACAiC,KAGAY,SAAS,IAJT;QAAA,IACKR,WAAW,mBAAG9B,GAAH,GAAM0B,EADtB;QAAA,IAEAC,KAEAW,SAAS,KAJT;QAAA,IAEMN,YAAY,mBAAGzC,IAAH,GAAOoC,EAFzB;QAAA,IAGAE,KACAS,SAAS,KAJT;QAAA,IAGMJ,YAAY,mBAAG1C,IAAH,GAAOqC,EAHzB;QAKJ9B,WAAW,CAAC;UACRb,QAAQ,EAAE0C,gBADF;UAER5B,GAAG,EAAE8B,WAFG;UAGRvC,IAAI,EAAEyC,YAHE;UAIRxC,IAAI,EAAE0C;QAJE,CAAD,CAAX;;QAOA,IAAIxC,oBAAoB,CAACmD,SAAzB,EAAoC;UAChCnD,oBAAoB,CAACmD,SAArB,CACItD,IADJ,EAEI+C,SAFJ,EAGII,OAHJ;QAKH,CArB+B,CAsBhC;;MACH;IACJ,CAtEsB;IAuEvBI,SAAS,EAAE,mBACPvD,IADO,EAEPkD,KAFO,EAGPH,SAHO,EAIPI,OAJO,EAIwB;MAD/B;QAAAJ;MAA8D;;MAG9D,IACI3C,IAAI,CAACO,OAAL,KAAiB,YAAjB,IACAP,IAAI,CAACO,OAAL,KAAiB,UAFrB,EAGE;QACE;QACAwC,OAAO,CAAC5C,QAAR,CAAiBU,OAAjB,CAAyB,UAACf,EAAD,EAAM;cAAJkD,GAAG;UAC1BrD,WAAW,CAACyD,iBAAZ,CAA8BJ,GAA9B;QACH,CAFD;MAGH;;MAED,IAAIjD,oBAAoB,CAACoD,SAAzB,EAAoC;QAChC,OAAOpD,oBAAoB,CAACoD,SAArB,CACHvD,IADG,EAEHkD,KAFG,EAGHH,SAHG,EAIHI,OAJG,CAAP;MAMH;IACJ;EA/FsB,CAFM,CAjBT,CAA5B;;EAsHA,IAAMP,UAAU,GAAG,SAAbA,UAAa,CACfP,gBADe,EAEfoB,cAFe,EAGfC,aAHe,EAQkD;IAPjE;MAAArB;IAAmC;;IACnC;MAAAoB;IAA0D;;IAC1D;MAAAC;IAKiE;;;;;;;;YAG7DrD,YAAY,GAKZqD,aAAa,aALb,EACAC,aAAa,GAIbD,aAAa,cALb,EAEAJ,SAAS,GAGTI,aAAa,UALb,EAGAH,SAAS,GAETG,aAAa,UALb,EAIAT,OAAO,GACPS,aAAa,QALb,EAOJ;YACA;YACA;;YACApD,SAAS,CAACK,OAAV,GAAoBf,MAApB;;YAEA,IAAIS,YAAJ,EAAkB;cACdD,IAAI,CAACO,OAAL,GAAeN,YAAf;YACH;;YAED,IAAIsD,aAAa,IAAIvD,IAAI,CAACO,OAAL,KAAiB,aAAtC,EAAqD;cACjDiD,OAAO,CAACC,IAAR,CACI,wFADJ;YAGH;;YAED,IAAIzD,IAAI,CAACO,OAAL,KAAiB,aAArB,EAAoC;cAChC,IAAIgD,aAAJ,EAAmB;gBACf;gBAAA;gBAAA,EAAOzB,QAAQ,CAAC4B,WAAT,CAAoBnC;kBACrBhC,QAAQ,EAAE0C;gBADW,GACUoB,cADV,CAApB,EAEH;kBAAEH,SAAS,WAAX;kBAAaC,SAAS,WAAtB;kBAAwBN,OAAO;gBAA/B,CAFG,CAAP;cAIH;;cACD;cAAA;cAAA,EAAOf,QAAQ,CAAC6B,MAAT,CAAepC;gBAChBhC,QAAQ,EAAE0C;cADM,GACeoB,cADf,CAAf,EAEH;gBAAEH,SAAS,WAAX;gBAAaC,SAAS,WAAtB;gBAAwBN,OAAO;cAA/B,CAFG,CAAP;YAIH;;YAGG/C,KAGAuD,cAAc,IAHd,EAAKlB,WAAW,mBAAG9B,GAAH,GAAMP,EAAtB,EACAiC,KAEAsB,cAAc,KAHd,EACMhB,YAAY,mBAAGzC,IAAH,GAAOmC,EADzB,EAEAC,KACAqB,cAAc,KAHd,EAEMd,YAAY,mBAAG1C,IAAH,GAAOmC,EAFzB;YASE4B,SAAS,GAAG,CACd,CAAC3B,gBAAD,EAAmB,QAAnB,CADc,EAEd,CAACA,gBAAD,EAAmB,SAAnB,CAFc,EAGd,CAACA,gBAAD,EAAmB,iBAAnB,CAHc,EAId,CAACA,gBAAD,EAAmB,SAAnB,CAJc,EAKd,CAACA,gBAAD,EAAmB,kBAAnB,CALc,CAAZ;YAQN;;;;;;;;;;;;;;;YAcA9B,QAAQ,CAACI,OAAT,GAAmBqD,SAAS,CAACC,MAAV,CACf,UAACC,IAAD,EAAOC,IAAP,EAAW;cAAK,WAAI,CAACC,MAAL,CAAYrE,WAAW,CAACsE,cAAZ,CAA2BF,IAA3B,CAAZ;YAA6C,CAD9C,EAEf,EAFe,CAAnB,EAKA;;YACA;YAAA;YAAA,EAAMG,OAAO,CAACC,GAAR,CACFhE,QAAQ,CAACI,OAAT,CAAiBkB,GAAjB,CAAqB,UAAC3B,EAAD,EAAM;kBAAJkD,GAAG;cAAM,kBAAW,CAACoB,aAAZ,CAA0BpB,GAA1B;YAA8B,CAA9D,CADE,CAAN;;;YADA;YACAd,WAIA;;;YACA;YAAA;YAAA,EAAM9B,WAAW,CAAC;cACdb,QAAQ,EAAE0C,gBADI;cAEd5B,GAAG,EAAE8B,WAFS;cAGdvC,IAAI,EAAEyC,YAHQ;cAIdxC,IAAI,EAAE0C;YAJQ,CAAD,CAAjB;;;YADA;YACAL,WAOA;;;YACA,IAAIgB,SAAJ,EAAe;cACXmB,UAAU,CACN;gBACI,gBAAS,CACLlC,WADK,EACMZ;kBACThC,QAAQ,EAAE0C;gBADD,GACsBoB,cADtB,CADN,EAGL;kBAAElD,QAAQ,EAAEA,QAAQ,CAACI;gBAArB,CAHK,CAAT;cAIC,CANC,EAON,CAPM,CAAV;YASH;;YACD,IAAIR,oBAAoB,CAACmD,SAAzB,EAAoC;cAChCmB,UAAU,CACN;gBACI,2BAAoB,CAACnB,SAArB,CACIf,WADJ,EACeZ;kBACThC,QAAQ,EAAE0C;gBADD,GACsBoB,cADtB,CADf,EAGI;kBAAElD,QAAQ,EAAEA,QAAQ,CAACI;gBAArB,CAHJ;cAIC,CANC,EAON,CAPM,CAAV;YASH;;YAED,IAAIP,IAAI,CAACO,OAAL,KAAiB,YAArB,EAAmC;cAC/B;cACA;cAAA;cAAA,EAAOuB,QAAQ,CAAC6B,MAAT,CAAepC;gBAChBhC,QAAQ,EAAE0C;cADM,GACeoB,cADf,CAAf,EAEH;gBAAEF,SAAS,WAAX;gBAAaN,OAAO;cAApB,CAFG,CAAP;YAIH,CAND,MAMO;cACH;cACAzD,oBAAoB,CAACkF,IAArB,CAA0B,KAA1B,EAAiC,UAACxE,EAAD,EAAW;oBAARyE,MAAM;;gBACtC,IAAIA,MAAJ,EAAY;kBACR;kBACApE,QAAQ,CAACI,OAAT,CAAiBM,OAAjB,CAAyB,UAACf,EAAD,EAAa;wBAAXkD,GAAG;wBAAEC,KAAK;oBACjCtD,WAAW,CAACuB,YAAZ,CAAyB8B,GAAzB,EAA8BC,KAA9B;kBACH,CAFD;gBAGH,CALD,MAKO;kBACH;kBACAnB,QAAQ,CAAC6B,MAAT,CAAepC;oBACThC,QAAQ,EAAE0C;kBADD,GACsBoB,cADtB,CAAf,EAEI;oBAAEF,SAAS,WAAX;oBAAaN,OAAO;kBAApB,CAFJ;gBAIH;cACJ,CAbD;YAcH;;;;;;;;EACJ,CA/ID;;EAiJA,OAAO,CAACxD,QAAQ,CAACmD,UAAD,CAAT,EAAuBV,QAAvB,CAAP;AACH,CA3WM","names":["useRef","useMutation","useQueryClient","useDataProvider","undoableEventEmitter","useEvent","useUpdateMany","resource","params","options","dataProvider","queryClient","data","meta","_a","reactMutationOptions","mode","mutationMode","paramsRef","snapshot","updateCache","ids","updatedAt","current","Date","now","updateColl","old","newCollection","forEach","index","findIndex","id","slice","setQueryData","String","record","setQueriesData","res","__assign","pages","map","page","coll","length","total","mutation","_b","_c","callTimeResource","_d","callTimeIds","_e","callTimeData","_f","callTimeMeta","updateMany","then","onMutate","variables","userContext","onError","error","context","key","value","onSuccess","onSettled","invalidateQueries","callTimeParams","updateOptions","returnPromise","console","warn","mutateAsync","mutate","queryKeys","reduce","prev","curr","concat","getQueriesData","Promise","all","cancelQueries","setTimeout","once","isUndo"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/useUpdateMany.ts"],"sourcesContent":["import { useRef } from 'react';\nimport {\n    useMutation,\n    useQueryClient,\n    UseMutationOptions,\n    UseMutationResult,\n    MutateOptions,\n    QueryKey,\n    UseInfiniteQueryResult,\n} from 'react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport {\n    RaRecord,\n    UpdateManyParams,\n    MutationMode,\n    GetListResult as OriginalGetListResult,\n    GetInfiniteListResult,\n} from '../types';\nimport { useEvent } from '../util';\nimport { Identifier } from '..';\n\n/**\n * Get a callback to call the dataProvider.updateMany() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The updateMany parameters { ids, data, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.ids The resource identifiers, e.g. [123, 456]\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current mutation state. Destructure as [updateMany, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [updateMany, { isLoading: false, isIdle: true }]\n * - start:   [updateMany, { isLoading: true }]\n * - success: [updateMany, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [updateMany, { error: [error from response], isLoading: false, isError: true }]\n *\n * The updateMany() function must be called with a resource and a parameter object: updateMany(resource, { ids, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the updateMany callback\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isLoading, error }] = useUpdateMany();\n *     const handleClick = () => {\n *         updateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Reset views</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isLoading, error }] = useUpdateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => updateMany()}>Reset views</button>;\n * };\n */\nexport const useUpdateMany = <\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n>(\n    resource?: string,\n    params: Partial<UpdateManyParams<Partial<RecordType>>> = {},\n    options: UseUpdateManyOptions<RecordType, MutationError> = {}\n): UseUpdateManyResult<RecordType, boolean, MutationError> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const { ids, data, meta } = params;\n    const { mutationMode = 'pessimistic', ...reactMutationOptions } = options;\n    const mode = useRef<MutationMode>(mutationMode);\n    const paramsRef = useRef<Partial<UpdateManyParams<Partial<RecordType>>>>(\n        params\n    );\n    const snapshot = useRef<Snapshot>([]);\n\n    const updateCache = async ({\n        resource,\n        ids,\n        data,\n        meta,\n    }: {\n        resource: string;\n        ids: Identifier[];\n        data: any;\n        meta?: any;\n    }) => {\n        // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n        // because setQueryData doesn't accept a stale time option\n        const updatedAt =\n            mode.current === 'undoable' ? Date.now() + 1000 * 5 : Date.now();\n\n        const updateColl = (old: RecordType[]) => {\n            if (!old) return;\n            let newCollection = [...old];\n            ids.forEach(id => {\n                // eslint-disable-next-line eqeqeq\n                const index = old.findIndex(record => record.id == id);\n                if (index === -1) {\n                    return;\n                }\n                newCollection = [\n                    ...newCollection.slice(0, index),\n                    { ...newCollection[index], ...data },\n                    ...newCollection.slice(index + 1),\n                ];\n            });\n            return newCollection;\n        };\n\n        type GetListResult = Omit<OriginalGetListResult, 'data'> & {\n            data?: RecordType[];\n        };\n\n        ids.forEach(id =>\n            queryClient.setQueryData(\n                [resource, 'getOne', { id: String(id), meta }],\n                (record: RecordType) => ({ ...record, ...data }),\n                { updatedAt }\n            )\n        );\n        queryClient.setQueriesData(\n            [resource, 'getList'],\n            (res: GetListResult) =>\n                res && res.data ? { ...res, data: updateColl(res.data) } : res,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getInfiniteList'],\n            (res: UseInfiniteQueryResult<GetInfiniteListResult>['data']) =>\n                res && res.pages\n                    ? {\n                          ...res,\n                          pages: res.pages.map(page => ({\n                              ...page,\n                              data: updateColl(page.data),\n                          })),\n                      }\n                    : res,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getMany'],\n            (coll: RecordType[]) =>\n                coll && coll.length > 0 ? updateColl(coll) : coll,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getManyReference'],\n            (res: GetListResult) =>\n                res && res.data\n                    ? { data: updateColl(res.data), total: res.total }\n                    : res,\n            { updatedAt }\n        );\n    };\n\n    const mutation = useMutation<\n        Array<RecordType['id']>,\n        MutationError,\n        Partial<UseUpdateManyMutateParams<RecordType>>\n    >(\n        ({\n            resource: callTimeResource = resource,\n            ids: callTimeIds = paramsRef.current.ids,\n            data: callTimeData = paramsRef.current.data,\n            meta: callTimeMeta = paramsRef.current.meta,\n        } = {}) =>\n            dataProvider\n                .updateMany(callTimeResource, {\n                    ids: callTimeIds,\n                    data: callTimeData,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data),\n        {\n            ...reactMutationOptions,\n            onMutate: async (\n                variables: Partial<UseUpdateManyMutateParams<RecordType>>\n            ) => {\n                if (reactMutationOptions.onMutate) {\n                    const userContext =\n                        (await reactMutationOptions.onMutate(variables)) || {};\n                    return {\n                        snapshot: snapshot.current,\n                        // @ts-ignore\n                        ...userContext,\n                    };\n                } else {\n                    // Return a context object with the snapshot value\n                    return { snapshot: snapshot.current };\n                }\n            },\n            onError: (\n                error: MutationError,\n                variables: Partial<UseUpdateManyMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // If the mutation fails, use the context returned from onMutate to rollback\n                    context.snapshot.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                }\n\n                if (reactMutationOptions.onError) {\n                    return reactMutationOptions.onError(\n                        error,\n                        variables,\n                        context\n                    );\n                }\n                // call-time error callback is executed by react-query\n            },\n            onSuccess: (\n                data: Array<RecordType['id']>,\n                variables: Partial<UseUpdateManyMutateParams<RecordType>> = {},\n                context: unknown\n            ) => {\n                if (mode.current === 'pessimistic') {\n                    // update the getOne and getList query cache with the new result\n                    const {\n                        resource: callTimeResource = resource,\n                        ids: callTimeIds = ids,\n                        data: callTimeData = data,\n                        meta: callTimeMeta = meta,\n                    } = variables;\n                    updateCache({\n                        resource: callTimeResource,\n                        ids: callTimeIds,\n                        data: callTimeData,\n                        meta: callTimeMeta,\n                    });\n\n                    if (reactMutationOptions.onSuccess) {\n                        reactMutationOptions.onSuccess(\n                            data,\n                            variables,\n                            context\n                        );\n                    }\n                    // call-time success callback is executed by react-query\n                }\n            },\n            onSettled: (\n                data: Array<RecordType['id']>,\n                error: MutationError,\n                variables: Partial<UseUpdateManyMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // Always refetch after error or success:\n                    context.snapshot.forEach(([key]) => {\n                        queryClient.invalidateQueries(key);\n                    });\n                }\n\n                if (reactMutationOptions.onSettled) {\n                    return reactMutationOptions.onSettled(\n                        data,\n                        error,\n                        variables,\n                        context\n                    );\n                }\n            },\n        }\n    );\n\n    const updateMany = async (\n        callTimeResource: string = resource,\n        callTimeParams: Partial<UpdateManyParams<RecordType>> = {},\n        updateOptions: MutateOptions<\n            Array<RecordType['id']>,\n            unknown,\n            Partial<UseUpdateManyMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: boolean } = {}\n    ) => {\n        const {\n            mutationMode,\n            returnPromise,\n            onSuccess,\n            onSettled,\n            onError,\n        } = updateOptions;\n\n        // store the hook time params *at the moment of the call*\n        // because they may change afterwards, which would break the undoable mode\n        // as the previousData would be overwritten by the optimistic update\n        paramsRef.current = params;\n\n        if (mutationMode) {\n            mode.current = mutationMode;\n        }\n\n        if (returnPromise && mode.current !== 'pessimistic') {\n            console.warn(\n                'The returnPromise parameter can only be used if the mutationMode is set to pessimistic'\n            );\n        }\n\n        if (mode.current === 'pessimistic') {\n            if (returnPromise) {\n                return mutation.mutateAsync(\n                    { resource: callTimeResource, ...callTimeParams },\n                    { onSuccess, onSettled, onError }\n                );\n            }\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSuccess, onSettled, onError }\n            );\n        }\n\n        const {\n            ids: callTimeIds = ids,\n            data: callTimeData = data,\n            meta: callTimeMeta = meta,\n        } = callTimeParams;\n\n        // optimistic update as documented in https://react-query-v3.tanstack.com/guides/optimistic-updates\n        // except we do it in a mutate wrapper instead of the onMutate callback\n        // to have access to success side effects\n\n        const queryKeys = [\n            [callTimeResource, 'getOne'],\n            [callTimeResource, 'getList'],\n            [callTimeResource, 'getInfiniteList'],\n            [callTimeResource, 'getMany'],\n            [callTimeResource, 'getManyReference'],\n        ];\n\n        /**\n         * Snapshot the previous values via queryClient.getQueriesData()\n         *\n         * The snapshotData ref will contain an array of tuples [query key, associated data]\n         *\n         * @example\n         * [\n         *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n         *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n         *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n         * ]\n         *\n         * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n         */\n        snapshot.current = queryKeys.reduce(\n            (prev, curr) => prev.concat(queryClient.getQueriesData(curr)),\n            [] as Snapshot\n        );\n\n        // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n        await Promise.all(\n            snapshot.current.map(([key]) => queryClient.cancelQueries(key))\n        );\n\n        // Optimistically update to the new data\n        await updateCache({\n            resource: callTimeResource,\n            ids: callTimeIds,\n            data: callTimeData,\n            meta: callTimeMeta,\n        });\n\n        // run the success callbacks during the next tick\n        if (onSuccess) {\n            setTimeout(\n                () =>\n                    onSuccess(\n                        callTimeIds,\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n        if (reactMutationOptions.onSuccess) {\n            setTimeout(\n                () =>\n                    reactMutationOptions.onSuccess(\n                        callTimeIds,\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n\n        if (mode.current === 'optimistic') {\n            // call the mutate method without success side effects\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSettled, onError }\n            );\n        } else {\n            // undoable mutation: register the mutation for later\n            undoableEventEmitter.once('end', ({ isUndo }) => {\n                if (isUndo) {\n                    // rollback\n                    snapshot.current.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                } else {\n                    // call the mutate method without success side effects\n                    mutation.mutate(\n                        { resource: callTimeResource, ...callTimeParams },\n                        { onSettled, onError }\n                    );\n                }\n            });\n        }\n    };\n\n    return [useEvent(updateMany), mutation];\n};\n\ntype Snapshot = [key: QueryKey, value: any][];\n\nexport interface UseUpdateManyMutateParams<RecordType extends RaRecord = any> {\n    resource?: string;\n    ids?: Array<RecordType['id']>;\n    data?: Partial<RecordType>;\n    previousData?: any;\n    meta?: any;\n}\n\nexport type UseUpdateManyOptions<\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n> = UseMutationOptions<\n    Array<RecordType['id']>,\n    MutationError,\n    Partial<UseUpdateManyMutateParams<RecordType>>\n> & { mutationMode?: MutationMode };\n\nexport type UseUpdateManyResult<\n    RecordType extends RaRecord = any,\n    TReturnPromise extends boolean = boolean,\n    MutationError = unknown\n> = [\n    (\n        resource?: string,\n        params?: Partial<UpdateManyParams<RecordType>>,\n        options?: MutateOptions<\n            Array<RecordType['id']>,\n            MutationError,\n            Partial<UseUpdateManyMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: TReturnPromise }\n    ) => Promise<TReturnPromise extends true ? Array<RecordType['id']> : void>,\n    UseMutationResult<\n        Array<RecordType['id']>,\n        MutationError,\n        Partial<UpdateManyParams<Partial<RecordType>> & { resource?: string }>,\n        unknown\n    >\n];\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport { Tooltip, IconButton, useMediaQuery } from '@mui/material';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { useTranslate } from 'ra-core';\nimport { ToggleThemeLegacyButton } from './ToggleThemeLegacyButton';\nimport { useThemesContext, useTheme } from '../layout';\n/**\n * Button toggling the theme (light or dark).\n *\n * Enabled by default in the <AppBar> when the <Admin> component has a darkMode.\n *\n * @example\n * import { AppBar, ToggleThemeButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar toolbar={<ToggleThemeButton />} />\n * );\n *\n * const MyLayout = props => <Layout {...props} appBar={MyAppBar} />;\n */\n\nexport var ToggleThemeButton = function (props) {\n  var translate = useTranslate();\n\n  var _a = useThemesContext(props),\n      darkTheme = _a.darkTheme,\n      defaultTheme = _a.defaultTheme;\n\n  var prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n    noSsr: true\n  });\n\n  var _b = useTheme(defaultTheme || (prefersDarkMode && darkTheme ? 'dark' : 'light')),\n      theme = _b[0],\n      setTheme = _b[1]; // FIXME: remove in v5\n\n\n  if (props.darkTheme) {\n    return React.createElement(ToggleThemeLegacyButton, {\n      darkTheme: props.darkTheme,\n      lightTheme: props.lightTheme\n    });\n  }\n\n  var handleTogglePaletteType = function () {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  };\n\n  var toggleThemeTitle = translate('ra.action.toggle_theme', {\n    _: 'Toggle Theme'\n  });\n  return React.createElement(Tooltip, {\n    title: toggleThemeTitle,\n    enterDelay: 300\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    onClick: handleTogglePaletteType,\n    \"aria-label\": toggleThemeTitle\n  }, theme === 'dark' ? React.createElement(Brightness7Icon, null) : React.createElement(Brightness4Icon, null)));\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,aAA9B,QAAmD,eAAnD;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAAyBC,gBAAzB,EAA2CC,QAA3C,QAA2D,WAA3D;AAEA;;;;;;;;;;;;;;;AAcA,OAAO,IAAMC,iBAAiB,GAAG,UAACC,KAAD,EAA8B;EAC3D,IAAMC,SAAS,GAAGN,YAAY,EAA9B;;EACM,SAA8BE,gBAAgB,CAACG,KAAD,CAA9C;EAAA,IAAEE,SAAS,eAAX;EAAA,IAAaC,YAAY,kBAAzB;;EACN,IAAMC,eAAe,GAAGZ,aAAa,CAAC,8BAAD,EAAiC;IAClEa,KAAK,EAAE;EAD2D,CAAjC,CAArC;;EAGM,SAAoBP,QAAQ,CAC9BK,YAAY,KAAKC,eAAe,IAAIF,SAAnB,GAA+B,MAA/B,GAAwC,OAA7C,CADkB,CAA5B;EAAA,IAACI,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB,CANqD,CAU3D;;;EACA,IAAIP,KAAK,CAACE,SAAV,EAAqB;IACjB,OACIb,oBAACO,uBAAD,EAAwB;MACpBM,SAAS,EAAEF,KAAK,CAACE,SADG;MAEpBM,UAAU,EAAER,KAAK,CAACQ;IAFE,CAAxB,CADJ;EAMH;;EAED,IAAMC,uBAAuB,GAAG;IAC5BF,QAAQ,CAACD,KAAK,KAAK,MAAV,GAAmB,OAAnB,GAA6B,MAA9B,CAAR;EACH,CAFD;;EAGA,IAAMI,gBAAgB,GAAGT,SAAS,CAAC,wBAAD,EAA2B;IACzDU,CAAC,EAAE;EADsD,CAA3B,CAAlC;EAIA,OACItB,oBAACC,OAAD,EAAQ;IAACsB,KAAK,EAAEF,gBAAR;IAA0BG,UAAU,EAAE;EAAtC,CAAR,EACIxB,oBAACE,UAAD,EAAW;IACPuB,KAAK,EAAC,SADC;IAEPC,OAAO,EAAEN,uBAFF;IAEyB,cACpBC;EAHL,CAAX,EAKKJ,KAAK,KAAK,MAAV,GAAmBjB,oBAACK,eAAD,EAAgB,IAAhB,CAAnB,GAAyCL,oBAACI,eAAD,EAAgB,IAAhB,CAL9C,CADJ,CADJ;AAWH,CAtCM","names":["React","Tooltip","IconButton","useMediaQuery","Brightness4Icon","Brightness7Icon","useTranslate","ToggleThemeLegacyButton","useThemesContext","useTheme","ToggleThemeButton","props","translate","darkTheme","defaultTheme","prefersDarkMode","noSsr","theme","setTheme","lightTheme","handleTogglePaletteType","toggleThemeTitle","_","title","enterDelay","color","onClick"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/ToggleThemeButton.tsx"],"sourcesContent":["import React from 'react';\nimport { Tooltip, IconButton, useMediaQuery } from '@mui/material';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\nimport { useTranslate } from 'ra-core';\n\nimport { ToggleThemeLegacyButton } from './ToggleThemeLegacyButton';\nimport { RaThemeOptions, useThemesContext, useTheme } from '../layout';\n\n/**\n * Button toggling the theme (light or dark).\n *\n * Enabled by default in the <AppBar> when the <Admin> component has a darkMode.\n *\n * @example\n * import { AppBar, ToggleThemeButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar toolbar={<ToggleThemeButton />} />\n * );\n *\n * const MyLayout = props => <Layout {...props} appBar={MyAppBar} />;\n */\nexport const ToggleThemeButton = (props: ToggleThemeButtonProps) => {\n    const translate = useTranslate();\n    const { darkTheme, defaultTheme } = useThemesContext(props);\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n        noSsr: true,\n    });\n    const [theme, setTheme] = useTheme(\n        defaultTheme || (prefersDarkMode && darkTheme ? 'dark' : 'light')\n    );\n\n    // FIXME: remove in v5\n    if (props.darkTheme) {\n        return (\n            <ToggleThemeLegacyButton\n                darkTheme={props.darkTheme}\n                lightTheme={props.lightTheme}\n            />\n        );\n    }\n\n    const handleTogglePaletteType = (): void => {\n        setTheme(theme === 'dark' ? 'light' : 'dark');\n    };\n    const toggleThemeTitle = translate('ra.action.toggle_theme', {\n        _: 'Toggle Theme',\n    });\n\n    return (\n        <Tooltip title={toggleThemeTitle} enterDelay={300}>\n            <IconButton\n                color=\"inherit\"\n                onClick={handleTogglePaletteType}\n                aria-label={toggleThemeTitle}\n            >\n                {theme === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport interface ToggleThemeButtonProps {\n    /**\n     * @deprecated Set the lightTheme in the <Admin> component instead.\n     */\n    lightTheme?: RaThemeOptions;\n    /**\n     * @deprecated Set the darkTheme in the <Admin> component instead.\n     */\n    darkTheme?: RaThemeOptions;\n}\n"]},"metadata":{},"sourceType":"module"}
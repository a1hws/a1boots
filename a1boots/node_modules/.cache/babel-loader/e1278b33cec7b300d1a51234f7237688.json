{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport ImageEye from '@mui/icons-material/RemoveRedEye';\nimport { Link } from 'react-router-dom';\nimport { useResourceContext, useRecordContext, useCreatePath } from 'ra-core';\nimport isEqual from 'lodash/isEqual';\nimport { Button } from './Button';\n/**\n * Opens the Show view of a given record\n *\n * @example // basic usage\n * import { ShowButton, useRecordContext } from 'react-admin';\n *\n * const CommentShowButton = () => {\n *     const record = useRecordContext();\n *     return (\n *         <ShowButton label=\"Show comment\" record={record} />\n *     );\n * };\n */\n\nvar ShowButton = function (props) {\n  var _a = props.icon,\n      icon = _a === void 0 ? defaultIcon : _a,\n      _b = props.label,\n      label = _b === void 0 ? 'ra.action.show' : _b,\n      recordProp = props.record,\n      resourceProp = props.resource,\n      _c = props.scrollToTop,\n      scrollToTop = _c === void 0 ? true : _c,\n      rest = __rest(props, [\"icon\", \"label\", \"record\", \"resource\", \"scrollToTop\"]);\n\n  var resource = useResourceContext(props);\n  var record = useRecordContext(props);\n  var createPath = useCreatePath();\n  if (!record) return null;\n  return React.createElement(Button, __assign({\n    component: Link,\n    to: createPath({\n      type: 'show',\n      resource: resource,\n      id: record.id\n    }),\n    state: scrollStates[String(scrollToTop)],\n    label: label,\n    onClick: stopPropagation\n  }, rest), icon);\n}; // avoids using useMemo to get a constant value for the link state\n\n\nvar scrollStates = {\n  true: {\n    _scrollToTop: true\n  },\n  false: {}\n};\nvar defaultIcon = React.createElement(ImageEye, null); // useful to prevent click bubbling in a datagrid with rowClick\n\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};\n\nShowButton.propTypes = {\n  icon: PropTypes.element,\n  label: PropTypes.string,\n  record: PropTypes.any,\n  scrollToTop: PropTypes.bool\n};\nvar PureShowButton = memo(ShowButton, function (prevProps, nextProps) {\n  return prevProps.resource === nextProps.resource && (prevProps.record && nextProps.record ? prevProps.record.id === nextProps.record.id : prevProps.record == nextProps.record) && // eslint-disable-line eqeqeq\n  prevProps.label === nextProps.label && prevProps.disabled === nextProps.disabled && isEqual(prevProps.to, nextProps.to);\n});\nexport default PureShowButton;","map":{"version":3,"mappings":"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","names":["React","memo","PropTypes","ImageEye","Link","useResourceContext","useRecordContext","useCreatePath","isEqual","Button","ShowButton","props","defaultIcon","_a","_b","label","recordProp","resourceProp","_c","scrollToTop","rest","resource","record","createPath","__assign","component","to","type","id","state","scrollStates","String","onClick","stopPropagation","icon","true","_scrollToTop","false","propTypes","element","string","any","bool","PureShowButton","prevProps","nextProps","disabled"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/ShowButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { memo, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ImageEye from '@mui/icons-material/RemoveRedEye';\nimport { Link } from 'react-router-dom';\nimport {\n    RaRecord,\n    useResourceContext,\n    useRecordContext,\n    useCreatePath,\n} from 'ra-core';\nimport isEqual from 'lodash/isEqual';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the Show view of a given record\n *\n * @example // basic usage\n * import { ShowButton, useRecordContext } from 'react-admin';\n *\n * const CommentShowButton = () => {\n *     const record = useRecordContext();\n *     return (\n *         <ShowButton label=\"Show comment\" record={record} />\n *     );\n * };\n */\nconst ShowButton = <RecordType extends RaRecord = any>(\n    props: ShowButtonProps<RecordType>\n) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.show',\n        record: recordProp,\n        resource: resourceProp,\n        scrollToTop = true,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n    if (!record) return null;\n    return (\n        <Button\n            component={Link}\n            to={createPath({ type: 'show', resource, id: record.id })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            onClick={stopPropagation}\n            {...(rest as any)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ImageEye />;\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\ninterface Props<RecordType extends RaRecord = any> {\n    icon?: ReactElement;\n    label?: string;\n    record?: RecordType;\n    resource?: string;\n    scrollToTop?: boolean;\n}\n\nexport type ShowButtonProps<RecordType extends RaRecord = any> = Props<\n    RecordType\n> &\n    ButtonProps;\n\nShowButton.propTypes = {\n    icon: PropTypes.element,\n    label: PropTypes.string,\n    record: PropTypes.any,\n    scrollToTop: PropTypes.bool,\n};\n\nconst PureShowButton = memo(\n    ShowButton,\n    (prevProps, nextProps) =>\n        prevProps.resource === nextProps.resource &&\n        (prevProps.record && nextProps.record\n            ? prevProps.record.id === nextProps.record.id\n            : prevProps.record == nextProps.record) && // eslint-disable-line eqeqeq\n        prevProps.label === nextProps.label &&\n        prevProps.disabled === nextProps.disabled &&\n        isEqual(prevProps.to, nextProps.to)\n);\n\nexport default PureShowButton;\n"]},"metadata":{},"sourceType":"module"}
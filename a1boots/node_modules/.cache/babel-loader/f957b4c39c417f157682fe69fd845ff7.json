{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar _a;\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Avatar, List, ListItem, ListItemAvatar, ListItemButton, ListItemIcon, ListItemSecondaryAction, ListItemText } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport { RecordContextProvider, sanitizeListRestProps, useListContext, useResourceContext, useCreatePath, useTranslate } from 'ra-core';\nimport { SimpleListLoading } from './SimpleListLoading';\nimport { ListNoResults } from '../ListNoResults';\n/**\n * The <SimpleList> component renders a list of records as a Material UI <List>.\n * It is usually used as a child of react-admin's <List> and <ReferenceManyField> components.\n *\n * Also widely used on Mobile.\n *\n * Props:\n * - primaryText: function returning a React element (or some text) based on the record\n * - secondaryText: same\n * - tertiaryText: same\n * - leftAvatar: function returning a React element based on the record\n * - leftIcon: same\n * - rightAvatar: same\n * - rightIcon: same\n * - linkType: 'edit' or 'show', or a function returning 'edit' or 'show' based on the record\n * - rowStyle: function returning a style object based on (record, index)\n *\n * @example // Display all posts as a List\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = () => (\n *     <List>\n *         <SimpleList\n *             primaryText={record => record.title}\n *             secondaryText={record => `${record.views} views`}\n *             tertiaryText={record =>\n *                 new Date(record.published_at).toLocaleDateString()\n *             }\n *             rowStyle={postRowStyle}\n *          />\n *     </List>\n * );\n */\n\nexport var SimpleList = function (props) {\n  var className = props.className,\n      _a = props.empty,\n      empty = _a === void 0 ? DefaultEmpty : _a,\n      hasBulkActions = props.hasBulkActions,\n      leftAvatar = props.leftAvatar,\n      leftIcon = props.leftIcon,\n      _b = props.linkType,\n      linkType = _b === void 0 ? 'edit' : _b,\n      primaryText = props.primaryText,\n      rightAvatar = props.rightAvatar,\n      rightIcon = props.rightIcon,\n      secondaryText = props.secondaryText,\n      tertiaryText = props.tertiaryText,\n      rowStyle = props.rowStyle,\n      rest = __rest(props, [\"className\", \"empty\", \"hasBulkActions\", \"leftAvatar\", \"leftIcon\", \"linkType\", \"primaryText\", \"rightAvatar\", \"rightIcon\", \"secondaryText\", \"tertiaryText\", \"rowStyle\"]);\n\n  var _c = useListContext(props),\n      data = _c.data,\n      isLoading = _c.isLoading,\n      total = _c.total;\n\n  var resource = useResourceContext(props);\n  var translate = useTranslate();\n\n  if (isLoading === true) {\n    return React.createElement(SimpleListLoading, {\n      className: className,\n      hasLeftAvatarOrIcon: !!leftIcon || !!leftAvatar,\n      hasRightAvatarOrIcon: !!rightIcon || !!rightAvatar,\n      hasSecondaryText: !!secondaryText,\n      hasTertiaryText: !!tertiaryText\n    });\n  }\n  /**\n   * Once loaded, the data for the list may be empty. Instead of\n   * displaying the table header with zero data rows,\n   * the SimpleList the empty component.\n   */\n\n\n  if (data == null || data.length === 0 || total === 0) {\n    if (empty) {\n      return empty;\n    }\n\n    return null;\n  }\n\n  var renderAvatar = function (record, avatarCallback) {\n    var avatarValue = avatarCallback(record, record.id);\n\n    if (typeof avatarValue === 'string' && (avatarValue.startsWith('http') || avatarValue.startsWith('data:'))) {\n      return React.createElement(Avatar, {\n        src: avatarValue\n      });\n    } else {\n      return React.createElement(Avatar, null, avatarValue);\n    }\n  };\n\n  return total == null && (data === null || data === void 0 ? void 0 : data.length) > 0 || total > 0 ? React.createElement(Root, __assign({\n    className: className\n  }, sanitizeListRestProps(rest)), data.map(function (record, rowIndex) {\n    return React.createElement(RecordContextProvider, {\n      key: record.id,\n      value: record\n    }, React.createElement(ListItem, {\n      disablePadding: true\n    }, React.createElement(LinkOrNot, {\n      linkType: linkType,\n      resource: resource,\n      id: record.id,\n      record: record,\n      style: rowStyle ? rowStyle(record, rowIndex) : undefined\n    }, leftIcon && React.createElement(ListItemIcon, null, leftIcon(record, record.id)), leftAvatar && React.createElement(ListItemAvatar, null, renderAvatar(record, leftAvatar)), React.createElement(ListItemText, {\n      primary: React.createElement(\"div\", null, typeof primaryText === 'string' ? translate(primaryText, __assign(__assign({}, record), {\n        _: primaryText\n      })) : isValidElement(primaryText) ? primaryText : primaryText(record, record.id), !!tertiaryText && (isValidElement(tertiaryText) ? tertiaryText : React.createElement(\"span\", {\n        className: SimpleListClasses.tertiary\n      }, typeof tertiaryText === 'string' ? translate(tertiaryText, __assign(__assign({}, record), {\n        _: tertiaryText\n      })) : tertiaryText(record, record.id)))),\n      secondary: !!secondaryText && (typeof secondaryText === 'string' ? translate(secondaryText, __assign(__assign({}, record), {\n        _: secondaryText\n      })) : isValidElement(secondaryText) ? secondaryText : secondaryText(record, record.id))\n    }), (rightAvatar || rightIcon) && React.createElement(ListItemSecondaryAction, null, rightAvatar && React.createElement(Avatar, null, renderAvatar(record, rightAvatar)), rightIcon && React.createElement(ListItemIcon, null, rightIcon(record, record.id))))));\n  })) : null;\n};\nSimpleList.propTypes = {\n  className: PropTypes.string,\n  leftAvatar: PropTypes.func,\n  leftIcon: PropTypes.func,\n  linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  primaryText: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.string]),\n  rightAvatar: PropTypes.func,\n  rightIcon: PropTypes.func,\n  secondaryText: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.string]),\n  tertiaryText: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.string]),\n  rowStyle: PropTypes.func\n};\n\nvar LinkOrNot = function (props) {\n  var classesOverride = props.classes,\n      linkType = props.linkType,\n      resource = props.resource,\n      id = props.id,\n      children = props.children,\n      record = props.record,\n      rest = __rest(props, [\"classes\", \"linkType\", \"resource\", \"id\", \"children\", \"record\"]);\n\n  var createPath = useCreatePath();\n  var type = typeof linkType === 'function' ? linkType(record, id) : linkType;\n  return type === false ? React.createElement(ListItemText // @ts-ignore\n  , __assign({\n    // @ts-ignore\n    component: \"div\"\n  }, rest), children) : // @ts-ignore\n  React.createElement(ListItemButton, __assign({\n    component: Link,\n    to: createPath({\n      resource: resource,\n      id: id,\n      type: type\n    })\n  }, rest), children);\n};\n\nvar PREFIX = 'RaSimpleList';\nexport var SimpleListClasses = {\n  tertiary: \"\".concat(PREFIX, \"-tertiary\")\n};\nvar Root = styled(List, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"& .\".concat(SimpleListClasses.tertiary)] = {\n  float: 'right',\n  opacity: 0.541176\n}, _a));\nvar DefaultEmpty = React.createElement(ListNoResults, null);","map":{"version":3,"mappings":"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","names":["React","styled","isValidElement","PropTypes","Avatar","List","ListItem","ListItemAvatar","ListItemButton","ListItemIcon","ListItemSecondaryAction","ListItemText","Link","RecordContextProvider","sanitizeListRestProps","useListContext","useResourceContext","useCreatePath","useTranslate","SimpleListLoading","ListNoResults","SimpleList","props","_a","empty","DefaultEmpty","hasBulkActions","leftAvatar","leftIcon","_b","linkType","primaryText","rightAvatar","rightIcon","secondaryText","tertiaryText","rowStyle","rest","data","isLoading","total","resource","translate","className","hasLeftAvatarOrIcon","hasRightAvatarOrIcon","hasSecondaryText","hasTertiaryText","length","renderAvatar","record","avatarCallback","avatarValue","id","startsWith","src","Root","__assign","map","rowIndex","key","value","disablePadding","LinkOrNot","style","undefined","primary","_","SimpleListClasses","tertiary","secondary","propTypes","string","func","oneOfType","bool","element","classesOverride","children","createPath","type","component","to","PREFIX","name","overridesResolver","styles","root","float","opacity"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/SimpleList/SimpleList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { isValidElement, ReactNode, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Avatar,\n    List,\n    ListProps,\n    ListItem,\n    ListItemAvatar,\n    ListItemButton,\n    ListItemIcon,\n    ListItemProps,\n    ListItemSecondaryAction,\n    ListItemText,\n} from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport {\n    Identifier,\n    RaRecord,\n    RecordContextProvider,\n    sanitizeListRestProps,\n    useListContext,\n    useResourceContext,\n    useCreatePath,\n    useTranslate,\n} from 'ra-core';\n\nimport { SimpleListLoading } from './SimpleListLoading';\nimport { ListNoResults } from '../ListNoResults';\n\n/**\n * The <SimpleList> component renders a list of records as a Material UI <List>.\n * It is usually used as a child of react-admin's <List> and <ReferenceManyField> components.\n *\n * Also widely used on Mobile.\n *\n * Props:\n * - primaryText: function returning a React element (or some text) based on the record\n * - secondaryText: same\n * - tertiaryText: same\n * - leftAvatar: function returning a React element based on the record\n * - leftIcon: same\n * - rightAvatar: same\n * - rightIcon: same\n * - linkType: 'edit' or 'show', or a function returning 'edit' or 'show' based on the record\n * - rowStyle: function returning a style object based on (record, index)\n *\n * @example // Display all posts as a List\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = () => (\n *     <List>\n *         <SimpleList\n *             primaryText={record => record.title}\n *             secondaryText={record => `${record.views} views`}\n *             tertiaryText={record =>\n *                 new Date(record.published_at).toLocaleDateString()\n *             }\n *             rowStyle={postRowStyle}\n *          />\n *     </List>\n * );\n */\nexport const SimpleList = <RecordType extends RaRecord = any>(\n    props: SimpleListProps<RecordType>\n) => {\n    const {\n        className,\n        empty = DefaultEmpty,\n        hasBulkActions,\n        leftAvatar,\n        leftIcon,\n        linkType = 'edit',\n        primaryText,\n        rightAvatar,\n        rightIcon,\n        secondaryText,\n        tertiaryText,\n        rowStyle,\n        ...rest\n    } = props;\n    const { data, isLoading, total } = useListContext<RecordType>(props);\n    const resource = useResourceContext(props);\n    const translate = useTranslate();\n\n    if (isLoading === true) {\n        return (\n            <SimpleListLoading\n                className={className}\n                hasLeftAvatarOrIcon={!!leftIcon || !!leftAvatar}\n                hasRightAvatarOrIcon={!!rightIcon || !!rightAvatar}\n                hasSecondaryText={!!secondaryText}\n                hasTertiaryText={!!tertiaryText}\n            />\n        );\n    }\n\n    /**\n     * Once loaded, the data for the list may be empty. Instead of\n     * displaying the table header with zero data rows,\n     * the SimpleList the empty component.\n     */\n    if (data == null || data.length === 0 || total === 0) {\n        if (empty) {\n            return empty;\n        }\n\n        return null;\n    }\n    const renderAvatar = (\n        record: RecordType,\n        avatarCallback: FunctionToElement<RecordType>\n    ) => {\n        const avatarValue = avatarCallback(record, record.id);\n        if (\n            typeof avatarValue === 'string' &&\n            (avatarValue.startsWith('http') || avatarValue.startsWith('data:'))\n        ) {\n            return <Avatar src={avatarValue} />;\n        } else {\n            return <Avatar>{avatarValue}</Avatar>;\n        }\n    };\n\n    return (total == null && data?.length > 0) || total > 0 ? (\n        <Root className={className} {...sanitizeListRestProps(rest)}>\n            {data.map((record, rowIndex) => (\n                <RecordContextProvider key={record.id} value={record}>\n                    <ListItem disablePadding>\n                        <LinkOrNot\n                            linkType={linkType}\n                            resource={resource}\n                            id={record.id}\n                            record={record}\n                            style={\n                                rowStyle\n                                    ? rowStyle(record, rowIndex)\n                                    : undefined\n                            }\n                        >\n                            {leftIcon && (\n                                <ListItemIcon>\n                                    {leftIcon(record, record.id)}\n                                </ListItemIcon>\n                            )}\n                            {leftAvatar && (\n                                <ListItemAvatar>\n                                    {renderAvatar(record, leftAvatar)}\n                                </ListItemAvatar>\n                            )}\n                            <ListItemText\n                                primary={\n                                    <div>\n                                        {typeof primaryText === 'string'\n                                            ? translate(primaryText, {\n                                                  ...record,\n                                                  _: primaryText,\n                                              })\n                                            : isValidElement(primaryText)\n                                            ? primaryText\n                                            : primaryText(record, record.id)}\n\n                                        {!!tertiaryText &&\n                                            (isValidElement(tertiaryText) ? (\n                                                tertiaryText\n                                            ) : (\n                                                <span\n                                                    className={\n                                                        SimpleListClasses.tertiary\n                                                    }\n                                                >\n                                                    {typeof tertiaryText ===\n                                                    'string'\n                                                        ? translate(\n                                                              tertiaryText,\n                                                              {\n                                                                  ...record,\n                                                                  _: tertiaryText,\n                                                              }\n                                                          )\n                                                        : tertiaryText(\n                                                              record,\n                                                              record.id\n                                                          )}\n                                                </span>\n                                            ))}\n                                    </div>\n                                }\n                                secondary={\n                                    !!secondaryText &&\n                                    (typeof secondaryText === 'string'\n                                        ? translate(secondaryText, {\n                                              ...record,\n                                              _: secondaryText,\n                                          })\n                                        : isValidElement(secondaryText)\n                                        ? secondaryText\n                                        : secondaryText(record, record.id))\n                                }\n                            />\n                            {(rightAvatar || rightIcon) && (\n                                <ListItemSecondaryAction>\n                                    {rightAvatar && (\n                                        <Avatar>\n                                            {renderAvatar(record, rightAvatar)}\n                                        </Avatar>\n                                    )}\n                                    {rightIcon && (\n                                        <ListItemIcon>\n                                            {rightIcon(record, record.id)}\n                                        </ListItemIcon>\n                                    )}\n                                </ListItemSecondaryAction>\n                            )}\n                        </LinkOrNot>\n                    </ListItem>\n                </RecordContextProvider>\n            ))}\n        </Root>\n    ) : null;\n};\n\nSimpleList.propTypes = {\n    className: PropTypes.string,\n    leftAvatar: PropTypes.func,\n    leftIcon: PropTypes.func,\n    linkType: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    primaryText: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.element,\n        PropTypes.string,\n    ]),\n    rightAvatar: PropTypes.func,\n    rightIcon: PropTypes.func,\n    secondaryText: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.element,\n        PropTypes.string,\n    ]),\n    tertiaryText: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.element,\n        PropTypes.string,\n    ]),\n    rowStyle: PropTypes.func,\n};\n\nexport type FunctionToElement<RecordType extends RaRecord = any> = (\n    record: RecordType,\n    id: Identifier\n) => ReactNode;\n\nexport interface SimpleListProps<RecordType extends RaRecord = any>\n    extends Omit<ListProps, 'classes'> {\n    className?: string;\n    empty?: ReactElement;\n    hasBulkActions?: boolean;\n    leftAvatar?: FunctionToElement<RecordType>;\n    leftIcon?: FunctionToElement<RecordType>;\n    primaryText?: FunctionToElement<RecordType> | ReactElement | string;\n    linkType?: string | FunctionLinkType | false;\n    rightAvatar?: FunctionToElement<RecordType>;\n    rightIcon?: FunctionToElement<RecordType>;\n    secondaryText?: FunctionToElement<RecordType> | ReactElement | string;\n    tertiaryText?: FunctionToElement<RecordType> | ReactElement | string;\n    rowStyle?: (record: RecordType, index: number) => any;\n    // can be injected when using the component without context\n    resource?: string;\n    data?: RecordType[];\n    isLoading?: boolean;\n    isLoaded?: boolean;\n    total?: number;\n}\n\nconst LinkOrNot = (\n    props: LinkOrNotProps & Omit<ListItemProps, 'button' | 'component' | 'id'>\n) => {\n    const {\n        classes: classesOverride,\n        linkType,\n        resource,\n        id,\n        children,\n        record,\n        ...rest\n    } = props;\n    const createPath = useCreatePath();\n    const type =\n        typeof linkType === 'function' ? linkType(record, id) : linkType;\n\n    return type === false ? (\n        <ListItemText\n            // @ts-ignore\n            component=\"div\"\n            {...rest}\n        >\n            {children}\n        </ListItemText>\n    ) : (\n        // @ts-ignore\n        <ListItemButton\n            component={Link}\n            to={createPath({ resource, id, type })}\n            {...rest}\n        >\n            {children}\n        </ListItemButton>\n    );\n};\n\nexport type FunctionLinkType = (record: RaRecord, id: Identifier) => string;\n\nexport interface LinkOrNotProps {\n    linkType?: string | FunctionLinkType | false;\n    resource: string;\n    id: Identifier;\n    record: RaRecord;\n    children: ReactNode;\n}\n\nconst PREFIX = 'RaSimpleList';\n\nexport const SimpleListClasses = {\n    tertiary: `${PREFIX}-tertiary`,\n};\n\nconst Root = styled(List, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${SimpleListClasses.tertiary}`]: { float: 'right', opacity: 0.541176 },\n});\n\nconst DefaultEmpty = <ListNoResults />;\n"]},"metadata":{},"sourceType":"module"}
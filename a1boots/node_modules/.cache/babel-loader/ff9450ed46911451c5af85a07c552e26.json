{"ast":null,"code":"import * as React from 'react';\nimport { memo } from 'react';\nimport { useTranslateLabel } from '../i18n';\nexport var FieldTitle = function FieldTitle(props) {\n  var source = props.source,\n      label = props.label,\n      resource = props.resource,\n      isRequired = props.isRequired;\n  var translateLabel = useTranslateLabel();\n\n  if (label === true) {\n    throw new Error('Label parameter must be a string, a ReactElement or false');\n  }\n\n  if (label === false || label === '') {\n    return null;\n  }\n\n  if (label && typeof label !== 'string') {\n    return label;\n  }\n\n  return React.createElement(\"span\", null, translateLabel({\n    label: label,\n    resource: resource,\n    source: source\n  }), isRequired && React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\u2009*\"));\n}; // What? TypeScript loses the displayName if we don't set it explicitly\n\nFieldTitle.displayName = 'FieldTitle';\nexport default memo(FieldTitle);","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAuBC,IAAvB,QAAmC,OAAnC;AAEA,SAASC,iBAAT,QAAkC,SAAlC;AASA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAuB;EACrC,UAAM,GAAkCA,KAAK,OAA7C;EAAA,IAAQC,KAAK,GAA2BD,KAAK,MAA7C;EAAA,IAAeE,QAAQ,GAAiBF,KAAK,SAA7C;EAAA,IAAyBG,UAAU,GAAKH,KAAK,WAA7C;EACR,IAAMI,cAAc,GAAGN,iBAAiB,EAAxC;;EAEA,IAAIG,KAAK,KAAK,IAAd,EAAoB;IAChB,MAAM,IAAII,KAAJ,CACF,2DADE,CAAN;EAGH;;EAED,IAAIJ,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,EAAjC,EAAqC;IACjC,OAAO,IAAP;EACH;;EAED,IAAIA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;IACpC,OAAOA,KAAP;EACH;;EAED,OACIL,kCACKQ,cAAc,CAAC;IACZH,KAAK,OADO;IAEZC,QAAQ,UAFI;IAGZI,MAAM;EAHM,CAAD,CADnB,EAMKH,UAAU,IAAIP;IAAA,eAAkB;EAAlB,GAAwB,SAAxB,CANnB,CADJ;AAUH,CA5BM,C,CA8BP;;AACAG,UAAU,CAACQ,WAAX,GAAyB,YAAzB;AAEA,eAAeV,IAAI,CAACE,UAAD,CAAnB","names":["React","memo","useTranslateLabel","FieldTitle","props","label","resource","isRequired","translateLabel","Error","source","displayName"],"sources":["/var/www/a1boots/node_modules/ra-core/src/util/FieldTitle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, memo } from 'react';\n\nimport { useTranslateLabel } from '../i18n';\n\nexport interface FieldTitleProps {\n    isRequired?: boolean;\n    resource?: string;\n    source?: string;\n    label?: string | ReactElement | boolean;\n}\n\nexport const FieldTitle = (props: FieldTitleProps) => {\n    const { source, label, resource, isRequired } = props;\n    const translateLabel = useTranslateLabel();\n\n    if (label === true) {\n        throw new Error(\n            'Label parameter must be a string, a ReactElement or false'\n        );\n    }\n\n    if (label === false || label === '') {\n        return null;\n    }\n\n    if (label && typeof label !== 'string') {\n        return label;\n    }\n\n    return (\n        <span>\n            {translateLabel({\n                label,\n                resource,\n                source,\n            })}\n            {isRequired && <span aria-hidden=\"true\">&thinsp;*</span>}\n        </span>\n    );\n};\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nFieldTitle.displayName = 'FieldTitle';\n\nexport default memo(FieldTitle);\n"]},"metadata":{},"sourceType":"module"}
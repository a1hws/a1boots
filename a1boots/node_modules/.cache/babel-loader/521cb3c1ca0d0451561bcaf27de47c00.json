{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar _a;\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport { useChoices } from 'ra-core';\nexport var CheckboxGroupInputItem = function (props) {\n  var id = props.id,\n      choice = props.choice,\n      className = props.className,\n      fullWidth = props.fullWidth,\n      onChange = props.onChange,\n      optionText = props.optionText,\n      optionValue = props.optionValue,\n      options = props.options,\n      translateChoice = props.translateChoice,\n      value = props.value,\n      labelPlacement = props.labelPlacement,\n      rest = __rest(props, [\"id\", \"choice\", \"className\", \"fullWidth\", \"onChange\", \"optionText\", \"optionValue\", \"options\", \"translateChoice\", \"value\", \"labelPlacement\"]);\n\n  var _a = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _a.getChoiceText,\n      getChoiceValue = _a.getChoiceValue;\n\n  var choiceName = getChoiceText(choice);\n  return React.createElement(StyledFormControlLabel, {\n    htmlFor: \"\".concat(id, \"_\").concat(getChoiceValue(choice)),\n    key: getChoiceValue(choice),\n    onChange: onChange,\n    className: className,\n    control: React.createElement(Checkbox, __assign({\n      id: \"\".concat(id, \"_\").concat(getChoiceValue(choice)),\n      color: \"primary\",\n      className: CheckboxGroupInputItemClasses.checkbox,\n      checked: value ? value.find(function (v) {\n        return v == getChoiceValue(choice);\n      }) !== // eslint-disable-line eqeqeq\n      undefined : false,\n      value: String(getChoiceValue(choice))\n    }, options, rest)),\n    label: choiceName,\n    labelPlacement: labelPlacement\n  });\n};\nvar PREFIX = 'RaCheckboxGroupInputItem';\nexport var CheckboxGroupInputItemClasses = {\n  checkbox: \"\".concat(PREFIX, \"-checkbox\")\n};\nvar StyledFormControlLabel = styled(FormControlLabel, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"& .\".concat(CheckboxGroupInputItemClasses.checkbox)] = {\n  height: 32\n}, _a));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,UAAT,QAA2B,SAA3B;AAEA,OAAO,IAAMC,sBAAsB,GAAG,iBAAK;EAEnC,MAAE,GAYFC,KAAK,GAZL;EAAA,IACAC,MAAM,GAWND,KAAK,OAZL;EAAA,IAEAE,SAAS,GAUTF,KAAK,UAZL;EAAA,IAGAG,SAAS,GASTH,KAAK,UAZL;EAAA,IAIAI,QAAQ,GAQRJ,KAAK,SAZL;EAAA,IAKAK,UAAU,GAOVL,KAAK,WAZL;EAAA,IAMAM,WAAW,GAMXN,KAAK,YAZL;EAAA,IAOAO,OAAO,GAKPP,KAAK,QAZL;EAAA,IAQAQ,eAAe,GAIfR,KAAK,gBAZL;EAAA,IASAS,KAAK,GAGLT,KAAK,MAZL;EAAA,IAUAU,cAAc,GAEdV,KAAK,eAZL;EAAA,IAWGW,IAAI,UACPX,KADO,EAZL,4IAYK,CAXP;;EAcE,SAAoCF,UAAU,CAAC;IACjDO,UAAU,YADuC;IAEjDC,WAAW,aAFsC;IAGjDE,eAAe;EAHkC,CAAD,CAA9C;EAAA,IAAEI,aAAa,mBAAf;EAAA,IAAiBC,cAAc,oBAA/B;;EAMN,IAAMC,UAAU,GAAGF,aAAa,CAACX,MAAD,CAAhC;EAEA,OACIP,oBAACqB,sBAAD,EAAuB;IACnBC,OAAO,EAAE,UAAGC,EAAH,EAAK,GAAL,EAAKC,MAAL,CAASL,cAAc,CAACZ,MAAD,CAAvB,CADU;IAEnBkB,GAAG,EAAEN,cAAc,CAACZ,MAAD,CAFA;IAGnBG,QAAQ,EAAEA,QAHS;IAInBF,SAAS,EAAEA,SAJQ;IAKnBkB,OAAO,EACH1B,oBAACG,QAAD,EAASwB;MACLJ,EAAE,EAAE,UAAGA,EAAH,EAAK,GAAL,EAAKC,MAAL,CAASL,cAAc,CAACZ,MAAD,CAAvB,CADC;MAELqB,KAAK,EAAC,SAFD;MAGLpB,SAAS,EAAEqB,6BAA6B,CAACC,QAHpC;MAILC,OAAO,EACHhB,KAAK,GACCA,KAAK,CAACiB,IAAN,CAAW,aAAC;QAAI,QAAC,IAAIb,cAAc,CAACZ,MAAD,CAAnB;MAA2B,CAA3C,MAAiD;MACjD0B,SAFD,GAGC,KARL;MAULlB,KAAK,EAAEmB,MAAM,CAACf,cAAc,CAACZ,MAAD,CAAf;IAVR,GAWDM,OAXC,EAYDI,IAZC,CAAT,CANe;IAqBnBkB,KAAK,EAAEf,UArBY;IAsBnBJ,cAAc,EAAEA;EAtBG,CAAvB,CADJ;AA0BH,CAlDM;AAoDP,IAAMoB,MAAM,GAAG,0BAAf;AAEA,OAAO,IAAMP,6BAA6B,GAAG;EACzCC,QAAQ,EAAE,UAAGM,MAAH,EAAS,WAAT;AAD+B,CAAtC;AAIP,IAAMf,sBAAsB,GAAGpB,MAAM,CAACC,gBAAD,EAAmB;EACpDmC,IAAI,EAAED,MAD8C;EAEpDE,iBAAiB,EAAE,UAAChC,KAAD,EAAQiC,MAAR,EAAc;IAAK,aAAM,CAACC,IAAP;EAAW;AAFG,CAAnB,CAAN,EAG7BC,SACEA,GAAC,aAAMZ,6BAA6B,CAACC,QAApC,CAAD,IAAkD;EAC9CY,MAAM,EAAE;AADsC,CADpD,IAH6B,EAA/B","names":["React","styled","FormControlLabel","Checkbox","useChoices","CheckboxGroupInputItem","props","choice","className","fullWidth","onChange","optionText","optionValue","options","translateChoice","value","labelPlacement","rest","getChoiceText","getChoiceValue","choiceName","StyledFormControlLabel","htmlFor","id","concat","key","control","__assign","color","CheckboxGroupInputItemClasses","checkbox","checked","find","undefined","String","label","PREFIX","name","overridesResolver","styles","root","_a","height"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/CheckboxGroupInputItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport { useChoices } from 'ra-core';\n\nexport const CheckboxGroupInputItem = props => {\n    const {\n        id,\n        choice,\n        className,\n        fullWidth,\n        onChange,\n        optionText,\n        optionValue,\n        options,\n        translateChoice,\n        value,\n        labelPlacement,\n        ...rest\n    } = props;\n\n    const { getChoiceText, getChoiceValue } = useChoices({\n        optionText,\n        optionValue,\n        translateChoice,\n    });\n\n    const choiceName = getChoiceText(choice);\n\n    return (\n        <StyledFormControlLabel\n            htmlFor={`${id}_${getChoiceValue(choice)}`}\n            key={getChoiceValue(choice)}\n            onChange={onChange}\n            className={className}\n            control={\n                <Checkbox\n                    id={`${id}_${getChoiceValue(choice)}`}\n                    color=\"primary\"\n                    className={CheckboxGroupInputItemClasses.checkbox}\n                    checked={\n                        value\n                            ? value.find(v => v == getChoiceValue(choice)) !== // eslint-disable-line eqeqeq\n                              undefined\n                            : false\n                    }\n                    value={String(getChoiceValue(choice))}\n                    {...options}\n                    {...rest}\n                />\n            }\n            label={choiceName}\n            labelPlacement={labelPlacement}\n        />\n    );\n};\n\nconst PREFIX = 'RaCheckboxGroupInputItem';\n\nexport const CheckboxGroupInputItemClasses = {\n    checkbox: `${PREFIX}-checkbox`,\n};\n\nconst StyledFormControlLabel = styled(FormControlLabel, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`& .${CheckboxGroupInputItemClasses.checkbox}`]: {\n        height: 32,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}
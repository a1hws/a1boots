{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useState, useCallback } from 'react';\nimport { useDelete } from '../../dataProvider';\nimport { useUnselect } from '../../controller';\nimport { useRedirect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport { useResourceContext } from '../../core';\n/**\n * Prepare a set of callbacks for a delete button guarded by confirmation dialog\n *\n * @example\n *\n * const DeleteButton = ({\n *     resource,\n *     record,\n *     redirect,\n *     onClick,\n *     ...rest\n * }) => {\n *     const {\n *         open,\n *         isLoading,\n *         handleDialogOpen,\n *         handleDialogClose,\n *         handleDelete,\n *     } = useDeleteWithConfirmController({\n *         resource,\n *         record,\n *         redirect,\n *         onClick,\n *     });\n *\n *     return (\n *         <Fragment>\n *             <Button\n *                 onClick={handleDialogOpen}\n *                 label=\"ra.action.delete\"\n *                 {...rest}\n *             >\n *                 {icon}\n *             </Button>\n *             <Confirm\n *                 isOpen={open}\n *                 loading={isLoading}\n *                 title=\"ra.message.delete_title\"\n *                 content=\"ra.message.delete_content\"\n *                 translateOptions={{\n *                     name: resource,\n *                     id: record.id,\n *                 }}\n *                 onConfirm={handleDelete}\n *                 onClose={handleDialogClose}\n *             />\n *         </Fragment>\n *     );\n * };\n */\n\nvar useDeleteWithConfirmController = function (props) {\n  var record = props.record,\n      redirectTo = props.redirect,\n      mutationMode = props.mutationMode,\n      onClick = props.onClick,\n      _a = props.mutationOptions,\n      mutationOptions = _a === void 0 ? {} : _a;\n\n  var mutationMeta = mutationOptions.meta,\n      otherMutationOptions = __rest(mutationOptions, [\"meta\"]);\n\n  var resource = useResourceContext(props);\n\n  var _b = useState(false),\n      open = _b[0],\n      setOpen = _b[1];\n\n  var notify = useNotify();\n  var unselect = useUnselect(resource);\n  var redirect = useRedirect();\n\n  var _c = useDelete(),\n      deleteOne = _c[0],\n      isLoading = _c[1].isLoading;\n\n  var handleDialogOpen = function (e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n\n  var handleDialogClose = function (e) {\n    setOpen(false);\n    e.stopPropagation();\n  };\n\n  var handleDelete = useCallback(function (event) {\n    event.stopPropagation();\n    deleteOne(resource, {\n      id: record.id,\n      previousData: record,\n      meta: mutationMeta\n    }, __assign({\n      onSuccess: function () {\n        setOpen(false);\n        notify('ra.notification.deleted', {\n          type: 'info',\n          messageArgs: {\n            smart_count: 1\n          },\n          undoable: mutationMode === 'undoable'\n        });\n        unselect([record.id]);\n        redirect(redirectTo, resource);\n      },\n      onError: function (error) {\n        setOpen(false);\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n      },\n      mutationMode: mutationMode\n    }, otherMutationOptions));\n\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  }, [deleteOne, mutationMeta, mutationMode, otherMutationOptions, notify, onClick, record, redirect, redirectTo, resource, unselect]);\n  return {\n    open: open,\n    isLoading: isLoading,\n    handleDialogOpen: handleDialogOpen,\n    handleDialogClose: handleDialogClose,\n    handleDelete: handleDelete\n  };\n};\n\nexport default useDeleteWithConfirmController;","map":{"version":3,"mappings":"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","names":["useState","useCallback","useDelete","useUnselect","useRedirect","useNotify","useResourceContext","useDeleteWithConfirmController","props","redirectTo","mutationMode","onClick","_a","mutationOptions","mutationMeta","otherMutationOptions","resource","open","setOpen","notify","unselect","redirect","deleteOne","isLoading","handleDialogOpen","e","stopPropagation","handleDialogClose","handleDelete","event","id","record","previousData","meta","__assign","onSuccess","type","messageArgs","smart_count","undoable","onError","error","message","_","undefined"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/button/useDeleteWithConfirmController.tsx"],"sourcesContent":["import {\n    useState,\n    useCallback,\n    ReactEventHandler,\n    SyntheticEvent,\n} from 'react';\nimport { UseMutationOptions } from 'react-query';\n\nimport { useDelete } from '../../dataProvider';\nimport { useUnselect } from '../../controller';\nimport { useRedirect, RedirectionSideEffect } from '../../routing';\nimport { useNotify } from '../../notification';\nimport { RaRecord, MutationMode, DeleteParams } from '../../types';\nimport { useResourceContext } from '../../core';\n\n/**\n * Prepare a set of callbacks for a delete button guarded by confirmation dialog\n *\n * @example\n *\n * const DeleteButton = ({\n *     resource,\n *     record,\n *     redirect,\n *     onClick,\n *     ...rest\n * }) => {\n *     const {\n *         open,\n *         isLoading,\n *         handleDialogOpen,\n *         handleDialogClose,\n *         handleDelete,\n *     } = useDeleteWithConfirmController({\n *         resource,\n *         record,\n *         redirect,\n *         onClick,\n *     });\n *\n *     return (\n *         <Fragment>\n *             <Button\n *                 onClick={handleDialogOpen}\n *                 label=\"ra.action.delete\"\n *                 {...rest}\n *             >\n *                 {icon}\n *             </Button>\n *             <Confirm\n *                 isOpen={open}\n *                 loading={isLoading}\n *                 title=\"ra.message.delete_title\"\n *                 content=\"ra.message.delete_content\"\n *                 translateOptions={{\n *                     name: resource,\n *                     id: record.id,\n *                 }}\n *                 onConfirm={handleDelete}\n *                 onClose={handleDialogClose}\n *             />\n *         </Fragment>\n *     );\n * };\n */\nconst useDeleteWithConfirmController = <RecordType extends RaRecord = any>(\n    props: UseDeleteWithConfirmControllerParams<RecordType>\n): UseDeleteWithConfirmControllerReturn => {\n    const {\n        record,\n        redirect: redirectTo,\n        mutationMode,\n        onClick,\n        mutationOptions = {},\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n    const resource = useResourceContext(props);\n    const [open, setOpen] = useState(false);\n    const notify = useNotify();\n    const unselect = useUnselect(resource);\n    const redirect = useRedirect();\n    const [deleteOne, { isLoading }] = useDelete<RecordType>();\n\n    const handleDialogOpen = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = e => {\n        setOpen(false);\n        e.stopPropagation();\n    };\n\n    const handleDelete = useCallback(\n        event => {\n            event.stopPropagation();\n            deleteOne(\n                resource,\n                {\n                    id: record.id,\n                    previousData: record,\n                    meta: mutationMeta,\n                },\n                {\n                    onSuccess: () => {\n                        setOpen(false);\n                        notify('ra.notification.deleted', {\n                            type: 'info',\n                            messageArgs: { smart_count: 1 },\n                            undoable: mutationMode === 'undoable',\n                        });\n                        unselect([record.id]);\n                        redirect(redirectTo, resource);\n                    },\n                    onError: (error: Error) => {\n                        setOpen(false);\n\n                        notify(\n                            typeof error === 'string'\n                                ? error\n                                : error.message || 'ra.notification.http_error',\n                            {\n                                type: 'error',\n                                messageArgs: {\n                                    _:\n                                        typeof error === 'string'\n                                            ? error\n                                            : error && error.message\n                                            ? error.message\n                                            : undefined,\n                                },\n                            }\n                        );\n                    },\n                    mutationMode,\n                    ...otherMutationOptions,\n                }\n            );\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [\n            deleteOne,\n            mutationMeta,\n            mutationMode,\n            otherMutationOptions,\n            notify,\n            onClick,\n            record,\n            redirect,\n            redirectTo,\n            resource,\n            unselect,\n        ]\n    );\n\n    return {\n        open,\n        isLoading,\n        handleDialogOpen,\n        handleDialogClose,\n        handleDelete,\n    };\n};\n\nexport interface UseDeleteWithConfirmControllerParams<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown\n> {\n    mutationMode?: MutationMode;\n    record?: RecordType;\n    redirect?: RedirectionSideEffect;\n    // @deprecated. This hook get the resource from the context\n    resource?: string;\n    onClick?: ReactEventHandler<any>;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteParams<RecordType>\n    >;\n}\n\nexport interface UseDeleteWithConfirmControllerReturn {\n    open: boolean;\n    isLoading: boolean;\n    handleDialogOpen: (e: SyntheticEvent) => void;\n    handleDialogClose: (e: SyntheticEvent) => void;\n    handleDelete: ReactEventHandler<any>;\n}\n\nexport default useDeleteWithConfirmController;\n"]},"metadata":{},"sourceType":"module"}
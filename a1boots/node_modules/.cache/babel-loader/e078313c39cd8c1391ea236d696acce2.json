{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useChoices, useRecordContext, useTranslate } from 'ra-core';\nimport { Typography } from '@mui/material';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<Chip>{record.first_name} {record.last_name}</Chip>)\n * };\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\n\nvar SelectFieldImpl = function SelectFieldImpl(props) {\n  var className = props.className,\n      emptyText = props.emptyText,\n      source = props.source,\n      choices = props.choices,\n      optionValue = props.optionValue,\n      optionText = props.optionText,\n      translateChoice = props.translateChoice,\n      rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"choices\", \"optionValue\", \"optionText\", \"translateChoice\"]);\n\n  var record = useRecordContext(props);\n  var value = get(record, source);\n\n  var _a = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _a.getChoiceText,\n      getChoiceValue = _a.getChoiceValue;\n\n  var translate = useTranslate();\n  var choice = choices.find(function (choice) {\n    return getChoiceValue(choice) === value;\n  });\n\n  if (!choice) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n\n  var choiceText = getChoiceText(choice);\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), choiceText);\n};\n\nSelectFieldImpl.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  translateChoice: PropTypes.bool\n});\nSelectFieldImpl.defaultProps = {\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nSelectFieldImpl.displayName = 'SelectFieldImpl';\nexport var SelectField = genericMemo(SelectFieldImpl);","map":{"version":3,"mappings":"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","names":["React","PropTypes","get","useChoices","useRecordContext","useTranslate","Typography","sanitizeFieldRestProps","fieldPropTypes","genericMemo","SelectFieldImpl","props","emptyText","source","choices","optionValue","optionText","translateChoice","rest","record","value","getChoiceText","getChoiceValue","translate","choice","find","__assign","component","variant","className","_","choiceText","propTypes","arrayOf","object","isRequired","oneOfType","string","func","element","bool","defaultProps","displayName","SelectField"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/SelectField.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport {\n    ChoicesProps,\n    useChoices,\n    useRecordContext,\n    useTranslate,\n} from 'ra-core';\nimport { Typography, TypographyProps } from '@mui/material';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<Chip>{record.first_name} {record.last_name}</Chip>)\n * };\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nconst SelectFieldImpl = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: SelectFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        source,\n        choices,\n        optionValue,\n        optionText,\n        translateChoice,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n    const { getChoiceText, getChoiceValue } = useChoices({\n        optionText,\n        optionValue,\n        translateChoice,\n    });\n    const translate = useTranslate();\n\n    const choice = choices.find(choice => getChoiceValue(choice) === value);\n\n    if (!choice) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    let choiceText = getChoiceText(choice);\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {choiceText}\n        </Typography>\n    );\n};\n\nSelectFieldImpl.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nSelectFieldImpl.defaultProps = {\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n};\nSelectFieldImpl.displayName = 'SelectFieldImpl';\n\nexport const SelectField = genericMemo(SelectFieldImpl);\n\nexport interface SelectFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends ChoicesProps,\n        FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {}\n"]},"metadata":{},"sourceType":"module"}
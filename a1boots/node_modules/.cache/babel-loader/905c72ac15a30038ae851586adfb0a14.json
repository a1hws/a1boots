{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\nvar TextFieldImpl = function TextFieldImpl(props) {\n  var _a;\n\n  var className = props.className,\n      source = props.source,\n      emptyText = props.emptyText,\n      rest = __rest(props, [\"className\", \"source\", \"emptyText\"]);\n\n  var record = useRecordContext(props);\n  var value = (_a = get(record, source)) === null || _a === void 0 ? void 0 : _a.toString();\n  var translate = useTranslate();\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), value != null && typeof value !== 'string' ? JSON.stringify(value) : value || (emptyText ? translate(emptyText, {\n    _: emptyText\n  }) : null));\n};\n\nTextFieldImpl.propTypes = __assign(__assign({}, Typography.propTypes), fieldPropTypes); // what? TypeScript loses the displayName if we don't set it explicitly\n\nTextFieldImpl.displayName = 'TextFieldImpl';\nexport var TextField = genericMemo(TextFieldImpl);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,UAAP,MAA4C,0BAA5C;AACA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,SAA/C;AAEA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAAqBC,cAArB,QAA2C,SAA3C;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAGlBC,KAHkB,EAGe;;;EAEzB,aAAS,GAAiCA,KAAK,UAA/C;EAAA,IAAWC,MAAM,GAAyBD,KAAK,OAA/C;EAAA,IAAmBE,SAAS,GAAcF,KAAK,UAA/C;EAAA,IAAiCG,IAAI,UAAKH,KAAL,EAAvC,oCAAuC,CAArC;;EACR,IAAMI,MAAM,GAAGV,gBAAgB,CAACM,KAAD,CAA/B;EACA,IAAMK,KAAK,GAAG,SAAG,CAACD,MAAD,EAASH,MAAT,CAAH,MAAmB,IAAnB,IAAmBK,aAAnB,GAAmB,MAAnB,GAAmBA,GAAEC,QAAF,EAAjC;EACA,IAAMC,SAAS,GAAGb,YAAY,EAA9B;EAEA,OACIJ,oBAACE,UAAD,EAAWgB;IACPC,SAAS,EAAC,MADH;IAEPC,OAAO,EAAC,OAFD;IAGPC,SAAS,EAAEA;EAHJ,GAIHhB,sBAAsB,CAACO,IAAD,CAJnB,CAAX,EAMKE,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,QAAlC,GACKQ,IAAI,CAACC,SAAL,CAAeT,KAAf,CADL,GAEKA,KAAK,KACJH,SAAS,GAAGM,SAAS,CAACN,SAAD,EAAY;IAAEa,CAAC,EAAEb;EAAL,CAAZ,CAAZ,GAA4C,IADjD,CARf,CADJ;AAaH,CAvBD;;AAyBAH,aAAa,CAACiB,SAAd,GAAuBP,sBAEhBhB,UAAU,CAACuB,SAFK,GAGhBnB,cAHgB,CAAvB,C,CAMA;;AACAE,aAAa,CAACkB,WAAd,GAA4B,eAA5B;AAEA,OAAO,IAAMC,SAAS,GAAGpB,WAAW,CAACC,aAAD,CAA7B","names":["React","get","Typography","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","genericMemo","TextFieldImpl","props","source","emptyText","rest","record","value","_a","toString","translate","__assign","component","variant","className","JSON","stringify","_","propTypes","displayName","TextField"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/TextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ElementType } from 'react';\nimport get from 'lodash/get';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\nconst TextFieldImpl = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: TextFieldProps<RecordType>\n) => {\n    const { className, source, emptyText, ...rest } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source)?.toString();\n    const translate = useTranslate();\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {value != null && typeof value !== 'string'\n                ? JSON.stringify(value)\n                : value ||\n                  (emptyText ? translate(emptyText, { _: emptyText }) : null)}\n        </Typography>\n    );\n};\n\nTextFieldImpl.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n};\n\n// what? TypeScript loses the displayName if we don't set it explicitly\nTextFieldImpl.displayName = 'TextFieldImpl';\n\nexport const TextField = genericMemo(TextFieldImpl);\n\nexport interface TextFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    // TypographyProps do not expose the component props, see https://github.com/mui/material-ui/issues/19512\n    component?: ElementType<any>;\n}\n"]},"metadata":{},"sourceType":"module"}
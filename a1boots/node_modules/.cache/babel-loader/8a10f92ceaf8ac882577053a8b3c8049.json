{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useFormValues } from './useFormValues';\n/**\n * Get the current (edited) value of the record from the form and pass it\n * to a child function\n *\n * @example\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm<FieldValues>>\n *             <BooleanInput source=\"hasEmail\" />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) => formData.hasEmail &&\n *                      <TextInput source=\"email\" {...rest} />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n *\n * const OrderEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <SelectInput source=\"country\" choices={countries} />\n *             <FormDataConsumer<FieldValues>>\n *                 {({ formData, ...rest }) =>\n *                      <SelectInput\n *                          source=\"city\"\n *                          choices={getCitiesFor(formData.country)}\n *                          {...rest}\n *                      />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n */\n\nvar FormDataConsumer = function FormDataConsumer(props) {\n  var form = useFormContext();\n  var // Don't know exactly why, but this is needed for the form values to be updated\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isDirty = form.formState.isDirty;\n  var formData = useFormValues();\n  return React.createElement(FormDataConsumerView, __assign({\n    formData: formData\n  }, props));\n};\n\nexport var FormDataConsumerView = function FormDataConsumerView(props) {\n  var children = props.children,\n      form = props.form,\n      formData = props.formData,\n      source = props.source,\n      index = props.index,\n      rest = __rest(props, [\"children\", \"form\", \"formData\", \"source\", \"index\"]);\n\n  var ret; // If we have an index, we are in an iterator like component (such as the SimpleFormIterator)\n\n  if (typeof index !== 'undefined' && source) {\n    var scopedFormData = get(formData, source);\n\n    var getSource = function getSource(scopedSource) {\n      return \"\".concat(source, \".\").concat(scopedSource);\n    };\n\n    ret = children(__assign({\n      formData: formData,\n      scopedFormData: scopedFormData,\n      getSource: getSource\n    }, rest));\n  } else {\n    ret = children(__assign({\n      formData: formData\n    }, rest));\n  }\n\n  return ret === undefined ? null : ret;\n};\nexport default FormDataConsumer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,cAAT,QAA4C,iBAA5C;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CACrBC,KADqB,EACc;EAEnC,IAAMC,IAAI,GAAGL,cAAc,EAA3B;EAKQ,IAFA;EACA;EACAM,OAAO,GAEXD,IAAI,UAAJ,CAAIC,OAFA;EAGR,IAAMC,QAAQ,GAAGL,aAAa,EAA9B;EACA,OACIH,oBAACS,oBAAD,EAAqBC;IAAeF,QAAQ,EAAEA;EAAzB,GAAuCH,KAAvC,CAArB,CADJ;AAGH,CAfD;;AAiBA,OAAO,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,CAGhCJ,KAHgC,EAGN;EAElB,YAAQ,GAA6CA,KAAK,SAA1D;EAAA,IAAUC,IAAI,GAAuCD,KAAK,KAA1D;EAAA,IAAgBG,QAAQ,GAA6BH,KAAK,SAA1D;EAAA,IAA0BM,MAAM,GAAqBN,KAAK,OAA1D;EAAA,IAAkCO,KAAK,GAAcP,KAAK,MAA1D;EAAA,IAA4CQ,IAAI,UAAKR,KAAL,EAAlD,mDAAkD,CAAhD;;EACR,IAAIS,GAAJ,CAH0B,CAK1B;;EACA,IAAI,OAAOF,KAAP,KAAiB,WAAjB,IAAgCD,MAApC,EAA4C;IACxC,IAAMI,cAAc,GAAGb,GAAG,CAACM,QAAD,EAAWG,MAAX,CAA1B;;IACA,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,YAAD,EAAqB;MAAK,iBAAGN,MAAH,EAAS,GAAT,EAASO,MAAT,CAAaD,YAAb;IAA2B,CAAvE;;IACAH,GAAG,GAAGK,QAAQ;MAAGX,QAAQ,UAAX;MAAaO,cAAc,gBAA3B;MAA6BC,SAAS;IAAtC,GAA2CH,IAA3C,EAAd;EACH,CAJD,MAIO;IACHC,GAAG,GAAGK,QAAQ;MAAGX,QAAQ;IAAX,GAAgBK,IAAhB,EAAd;EACH;;EAED,OAAOC,GAAG,KAAKM,SAAR,GAAoB,IAApB,GAA2BN,GAAlC;AACH,CAlBM;AAoBP,eAAeV,gBAAf","names":["React","useFormContext","get","useFormValues","FormDataConsumer","props","form","isDirty","formData","FormDataConsumerView","__assign","source","index","rest","ret","scopedFormData","getSource","scopedSource","concat","children","undefined"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/FormDataConsumer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { useFormContext, FieldValues } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useFormValues } from './useFormValues';\n\n/**\n * Get the current (edited) value of the record from the form and pass it\n * to a child function\n *\n * @example\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm<FieldValues>>\n *             <BooleanInput source=\"hasEmail\" />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) => formData.hasEmail &&\n *                      <TextInput source=\"email\" {...rest} />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n *\n * const OrderEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <SelectInput source=\"country\" choices={countries} />\n *             <FormDataConsumer<FieldValues>>\n *                 {({ formData, ...rest }) =>\n *                      <SelectInput\n *                          source=\"city\"\n *                          choices={getCitiesFor(formData.country)}\n *                          {...rest}\n *                      />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n */\nconst FormDataConsumer = <TFieldValues extends FieldValues = FieldValues>(\n    props: ConnectedProps<TFieldValues>\n) => {\n    const form = useFormContext<TFieldValues>();\n    const {\n        formState: {\n            // Don't know exactly why, but this is needed for the form values to be updated\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            isDirty,\n        },\n    } = form;\n    const formData = useFormValues<TFieldValues>();\n    return (\n        <FormDataConsumerView<TFieldValues> formData={formData} {...props} />\n    );\n};\n\nexport const FormDataConsumerView = <\n    TFieldValues extends FieldValues = FieldValues\n>(\n    props: Props<TFieldValues>\n) => {\n    const { children, form, formData, source, index, ...rest } = props;\n    let ret;\n\n    // If we have an index, we are in an iterator like component (such as the SimpleFormIterator)\n    if (typeof index !== 'undefined' && source) {\n        const scopedFormData = get(formData, source);\n        const getSource = (scopedSource: string) => `${source}.${scopedSource}`;\n        ret = children({ formData, scopedFormData, getSource, ...rest });\n    } else {\n        ret = children({ formData, ...rest });\n    }\n\n    return ret === undefined ? null : ret;\n};\n\nexport default FormDataConsumer;\n\nexport interface FormDataConsumerRenderParams<\n    TFieldValues extends FieldValues = FieldValues\n> {\n    formData: TFieldValues;\n    scopedFormData?: any;\n    getSource?: (source: string) => string;\n}\n\nexport type FormDataConsumerRender<\n    TFieldValues extends FieldValues = FieldValues\n> = (params: FormDataConsumerRenderParams<TFieldValues>) => ReactNode;\n\ninterface ConnectedProps<TFieldValues extends FieldValues = FieldValues> {\n    children: FormDataConsumerRender<TFieldValues>;\n    form?: string;\n    record?: any;\n    source?: string;\n    [key: string]: any;\n}\n\ninterface Props<TFieldValues extends FieldValues> extends ConnectedProps {\n    formData: TFieldValues;\n    index?: number;\n}\n"]},"metadata":{},"sourceType":"module"}
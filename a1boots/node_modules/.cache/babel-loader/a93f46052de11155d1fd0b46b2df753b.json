{"ast":null,"code":"import { useContext, useEffect, useRef } from 'react';\nimport { useFormState } from 'react-hook-form';\nimport { UNSAFE_NavigationContext, useLocation } from 'react-router-dom';\nimport { useTranslate } from '../i18n';\n/**\n * Display a confirmation dialog if the form has unsaved changes.\n * - If the user confirms, the navigation continues and the changes are lost.\n * - If the user cancels, the navigation is cancelled and the changes are kept.\n */\n\nexport var useWarnWhenUnsavedChanges = function (enable, formRootPathname, control) {\n  // react-router v6 does not yet provide a way to block navigation\n  // This is planned for a future release\n  // See https://github.com/remix-run/react-router/issues/8139\n  var navigator = useContext(UNSAFE_NavigationContext).navigator;\n  var location = useLocation();\n  var translate = useTranslate();\n\n  var _a = useFormState(control ? {\n    control: control\n  } : undefined),\n      isSubmitSuccessful = _a.isSubmitSuccessful,\n      isSubmitting = _a.isSubmitting,\n      dirtyFields = _a.dirtyFields;\n\n  var isDirty = Object.keys(dirtyFields).length > 0;\n  var initialLocation = useRef(formRootPathname || location.pathname);\n  useEffect(function () {\n    if (!enable || !isDirty) return;\n\n    if (!navigator.block) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('warnWhenUnsavedChanged is not compatible with react-router >= 6.4. If you need this feature, please downgrade react-router to 6.3.0');\n      }\n\n      return;\n    }\n\n    var unblock = navigator.block(function (tx) {\n      var newLocationIsInsideCurrentLocation = tx.location.pathname.startsWith(initialLocation.current);\n      var newLocationIsShowView = tx.location.pathname.startsWith(\"\".concat(initialLocation.current, \"/show\"));\n      var newLocationIsInsideForm = newLocationIsInsideCurrentLocation && !newLocationIsShowView;\n\n      if (!isSubmitting && (newLocationIsInsideForm || isSubmitSuccessful || window.confirm(translate('ra.message.unsaved_changes')))) {\n        unblock();\n        tx.retry();\n      } else {\n        if (isSubmitting) {\n          // Retry the transition (possibly several times) until the form is no longer submitting.\n          // The value of 100ms is arbitrary, it allows to give some time between retries.\n          setTimeout(function () {\n            tx.retry();\n          }, 100);\n        }\n      }\n    });\n    return unblock;\n  }, [enable, location, navigator, isDirty, isSubmitting, isSubmitSuccessful, translate]);\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,MAAhC,QAA8C,OAA9C;AACA,SAASC,YAAT,QAAsC,iBAAtC;AACA,SAASC,wBAAT,EAAmCC,WAAnC,QAAsD,kBAAtD;AAEA,SAASC,YAAT,QAA6B,SAA7B;AAEA;;;;;;AAKA,OAAO,IAAMC,yBAAyB,GAAG,UACrCC,MADqC,EAErCC,gBAFqC,EAGrCC,OAHqC,EAGpB;EAEjB;EACA;EACA;EACA,IAAMC,SAAS,GAAGX,UAAU,CAACI,wBAAD,CAAV,CAAqCO,SAAvD;EACA,IAAMC,QAAQ,GAAGP,WAAW,EAA5B;EACA,IAAMQ,SAAS,GAAGP,YAAY,EAA9B;;EACM,SAAoDH,YAAY,CAClEO,OAAO,GAAG;IAAEA,OAAO;EAAT,CAAH,GAAiBI,SAD0C,CAAhE;EAAA,IAAEC,kBAAkB,wBAApB;EAAA,IAAsBC,YAAY,kBAAlC;EAAA,IAAoCC,WAAW,iBAA/C;;EAGN,IAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,MAAzB,GAAkC,CAAlD;EACA,IAAMC,eAAe,GAAGpB,MAAM,CAACO,gBAAgB,IAAIG,QAAQ,CAACW,QAA9B,CAA9B;EAEAtB,SAAS,CAAC;IACN,IAAI,CAACO,MAAD,IAAW,CAACU,OAAhB,EAAyB;;IACzB,IAAI,CAACP,SAAS,CAACa,KAAf,EAAsB;MAClB,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACvCC,OAAO,CAACC,IAAR,CACI,qIADJ;MAGH;;MACD;IACH;;IAED,IAAIC,OAAO,GAAGnB,SAAS,CAACa,KAAV,CAAgB,UAACO,EAAD,EAAe;MACzC,IAAMC,kCAAkC,GAAGD,EAAE,CAACnB,QAAH,CAAYW,QAAZ,CAAqBU,UAArB,CACvCX,eAAe,CAACY,OADuB,CAA3C;MAGA,IAAMC,qBAAqB,GAAGJ,EAAE,CAACnB,QAAH,CAAYW,QAAZ,CAAqBU,UAArB,CAC1B,UAAGX,eAAe,CAACY,OAAnB,EAA0B,OAA1B,CAD0B,CAA9B;MAGA,IAAME,uBAAuB,GACzBJ,kCAAkC,IAAI,CAACG,qBAD3C;;MAGA,IACI,CAACnB,YAAD,KACCoB,uBAAuB,IACpBrB,kBADH,IAEGsB,MAAM,CAACC,OAAP,CAAezB,SAAS,CAAC,4BAAD,CAAxB,CAHJ,CADJ,EAKE;QACEiB,OAAO;QACPC,EAAE,CAACQ,KAAH;MACH,CARD,MAQO;QACH,IAAIvB,YAAJ,EAAkB;UACd;UACA;UACAwB,UAAU,CAAC;YACPT,EAAE,CAACQ,KAAH;UACH,CAFS,EAEP,GAFO,CAAV;QAGH;MACJ;IACJ,CA3Ba,CAAd;IA6BA,OAAOT,OAAP;EACH,CAzCQ,EAyCN,CACCtB,MADD,EAECI,QAFD,EAGCD,SAHD,EAICO,OAJD,EAKCF,YALD,EAMCD,kBAND,EAOCF,SAPD,CAzCM,CAAT;AAkDH,CAnEM","names":["useContext","useEffect","useRef","useFormState","UNSAFE_NavigationContext","useLocation","useTranslate","useWarnWhenUnsavedChanges","enable","formRootPathname","control","navigator","location","translate","undefined","isSubmitSuccessful","isSubmitting","dirtyFields","isDirty","Object","keys","length","initialLocation","pathname","block","process","env","NODE_ENV","console","warn","unblock","tx","newLocationIsInsideCurrentLocation","startsWith","current","newLocationIsShowView","newLocationIsInsideForm","window","confirm","retry","setTimeout"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/useWarnWhenUnsavedChanges.tsx"],"sourcesContent":["import { useContext, useEffect, useRef } from 'react';\nimport { useFormState, Control } from 'react-hook-form';\nimport { UNSAFE_NavigationContext, useLocation } from 'react-router-dom';\nimport { History, Transition } from 'history';\nimport { useTranslate } from '../i18n';\n\n/**\n * Display a confirmation dialog if the form has unsaved changes.\n * - If the user confirms, the navigation continues and the changes are lost.\n * - If the user cancels, the navigation is cancelled and the changes are kept.\n */\nexport const useWarnWhenUnsavedChanges = (\n    enable: boolean,\n    formRootPathname?: string,\n    control?: Control\n) => {\n    // react-router v6 does not yet provide a way to block navigation\n    // This is planned for a future release\n    // See https://github.com/remix-run/react-router/issues/8139\n    const navigator = useContext(UNSAFE_NavigationContext).navigator as History;\n    const location = useLocation();\n    const translate = useTranslate();\n    const { isSubmitSuccessful, isSubmitting, dirtyFields } = useFormState(\n        control ? { control } : undefined\n    );\n    const isDirty = Object.keys(dirtyFields).length > 0;\n    const initialLocation = useRef(formRootPathname || location.pathname);\n\n    useEffect(() => {\n        if (!enable || !isDirty) return;\n        if (!navigator.block) {\n            if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                    'warnWhenUnsavedChanged is not compatible with react-router >= 6.4. If you need this feature, please downgrade react-router to 6.3.0'\n                );\n            }\n            return;\n        }\n\n        let unblock = navigator.block((tx: Transition) => {\n            const newLocationIsInsideCurrentLocation = tx.location.pathname.startsWith(\n                initialLocation.current\n            );\n            const newLocationIsShowView = tx.location.pathname.startsWith(\n                `${initialLocation.current}/show`\n            );\n            const newLocationIsInsideForm =\n                newLocationIsInsideCurrentLocation && !newLocationIsShowView;\n\n            if (\n                !isSubmitting &&\n                (newLocationIsInsideForm ||\n                    isSubmitSuccessful ||\n                    window.confirm(translate('ra.message.unsaved_changes')))\n            ) {\n                unblock();\n                tx.retry();\n            } else {\n                if (isSubmitting) {\n                    // Retry the transition (possibly several times) until the form is no longer submitting.\n                    // The value of 100ms is arbitrary, it allows to give some time between retries.\n                    setTimeout(() => {\n                        tx.retry();\n                    }, 100);\n                }\n            }\n        });\n\n        return unblock;\n    }, [\n        enable,\n        location,\n        navigator,\n        isDirty,\n        isSubmitting,\n        isSubmitSuccessful,\n        translate,\n    ]);\n};\n"]},"metadata":{},"sourceType":"module"}
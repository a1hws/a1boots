{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Children, cloneElement, isValidElement } from 'react';\nimport { useTranslatableContext } from 'ra-core';\nimport { Labeled } from '../Labeled';\n/**\n * Default container for a group of translatable fields inside a TranslatableFields components.\n * @see TranslatableFields\n */\n\nexport var TranslatableFieldsTabContent = function (props) {\n  var children = props.children,\n      _a = props.groupKey,\n      groupKey = _a === void 0 ? '' : _a,\n      locale = props.locale,\n      record = props.record,\n      resource = props.resource,\n      className = props.className,\n      other = __rest(props, [\"children\", \"groupKey\", \"locale\", \"record\", \"resource\", \"className\"]);\n\n  var _b = useTranslatableContext(),\n      selectedLocale = _b.selectedLocale,\n      getLabel = _b.getLabel,\n      getSource = _b.getSource;\n\n  return React.createElement(Root, __assign({\n    role: \"tabpanel\",\n    hidden: selectedLocale !== locale,\n    id: \"translatable-content-\".concat(groupKey).concat(locale),\n    \"aria-labelledby\": \"translatable-header-\".concat(groupKey).concat(locale),\n    className: className\n  }, other), Children.map(children, function (field) {\n    return field && isValidElement(field) ? React.createElement(\"div\", {\n      key: field.props.source\n    }, field.props.addLabel ? React.createElement(Labeled, {\n      resource: resource,\n      label: field.props.label,\n      source: field.props.source\n    }, cloneElement(field, __assign(__assign({}, field.props), {\n      label: getLabel(field.props.source),\n      record: record,\n      source: getSource(field.props.source, locale)\n    }))) : typeof field === 'string' ? field : cloneElement(field, __assign(__assign({}, field.props), {\n      label: getLabel(field.props.source),\n      record: record,\n      source: getSource(field.props.source, locale)\n    }))) : null;\n  }));\n};\nvar PREFIX = 'RaTranslatableFieldsTabContent';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n    borderRadius: 0,\n    borderBottomLeftRadius: theme.shape.borderRadius,\n    borderBottomRightRadius: theme.shape.borderRadius,\n    border: \"1px solid \".concat(theme.palette.divider),\n    borderTop: 0\n  };\n});","map":{"version":3,"mappings":"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","names":["React","styled","Children","cloneElement","isValidElement","useTranslatableContext","Labeled","TranslatableFieldsTabContent","props","_a","groupKey","locale","record","resource","className","other","selectedLocale","getLabel","getSource","Root","__assign","role","hidden","id","concat","map","children","field","key","source","addLabel","label","PREFIX","name","overridesResolver","styles","root","theme","flexGrow","padding","spacing","borderRadius","borderBottomLeftRadius","shape","borderBottomRightRadius","border","palette","divider","borderTop"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/TranslatableFieldsTabContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    Children,\n    cloneElement,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n} from 'react';\nimport { useTranslatableContext, RaRecord } from 'ra-core';\nimport { Labeled } from '../Labeled';\n\n/**\n * Default container for a group of translatable fields inside a TranslatableFields components.\n * @see TranslatableFields\n */\nexport const TranslatableFieldsTabContent = (\n    props: TranslatableFieldsTabContentProps\n): ReactElement => {\n    const {\n        children,\n        groupKey = '',\n        locale,\n        record,\n        resource,\n        className,\n        ...other\n    } = props;\n    const { selectedLocale, getLabel, getSource } = useTranslatableContext();\n\n    return (\n        <Root\n            role=\"tabpanel\"\n            hidden={selectedLocale !== locale}\n            id={`translatable-content-${groupKey}${locale}`}\n            aria-labelledby={`translatable-header-${groupKey}${locale}`}\n            className={className}\n            {...other}\n        >\n            {Children.map(children, field =>\n                field && isValidElement<any>(field) ? (\n                    <div key={field.props.source}>\n                        {field.props.addLabel ? (\n                            <Labeled\n                                resource={resource}\n                                label={field.props.label}\n                                source={field.props.source}\n                            >\n                                {cloneElement(field, {\n                                    ...field.props,\n                                    label: getLabel(field.props.source),\n                                    record,\n                                    source: getSource(\n                                        field.props.source,\n                                        locale\n                                    ),\n                                })}\n                            </Labeled>\n                        ) : typeof field === 'string' ? (\n                            field\n                        ) : (\n                            cloneElement(field, {\n                                ...field.props,\n                                label: getLabel(field.props.source),\n                                record,\n                                source: getSource(field.props.source, locale),\n                            })\n                        )}\n                    </div>\n                ) : null\n            )}\n        </Root>\n    );\n};\n\nexport type TranslatableFieldsTabContentProps = {\n    children: ReactNode;\n    className?: string;\n    formGroupKeyPrefix?: string;\n    groupKey: string;\n    locale: string;\n    record: RaRecord;\n    resource: string;\n};\n\nconst PREFIX = 'RaTranslatableFieldsTabContent';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flexGrow: 1,\n    padding: theme.spacing(2),\n    borderRadius: 0,\n    borderBottomLeftRadius: theme.shape.borderRadius,\n    borderBottomRightRadius: theme.shape.borderRadius,\n    border: `1px solid ${theme.palette.divider}`,\n    borderTop: 0,\n}));\n"]},"metadata":{},"sourceType":"module"}
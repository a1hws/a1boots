{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useCallback, isValidElement } from 'react';\nimport set from 'lodash/set';\nimport { useChoices } from './useChoices';\nimport { useTranslate } from '../i18n';\n/*\n * Returns helper functions for suggestions handling.\n *\n * @param allowDuplicates A boolean indicating whether a suggestion can be added several times\n * @param choices An array of available choices\n * @param limitChoicesToValue A boolean indicating whether the initial suggestions should be limited to the currently selected one(s)\n * @param matchSuggestion Optional unless `optionText` is a React element. Function which check whether a choice matches a filter. Must return a boolean.\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param selectedItem The currently selected item. Maybe an array of selected items\n * @param suggestionLimit The maximum number of suggestions returned\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n * - getSuggestions: A function taking a filter value (string) and returning the matching suggestions\n */\n\nexport var useSuggestions = function (_a) {\n  var allowCreate = _a.allowCreate,\n      choices = _a.choices,\n      _b = _a.createText,\n      createText = _b === void 0 ? 'ra.action.create' : _b,\n      _c = _a.createValue,\n      createValue = _c === void 0 ? '@@create' : _c,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      matchSuggestion = _a.matchSuggestion,\n      optionText = _a.optionText,\n      optionValue = _a.optionValue,\n      selectedItem = _a.selectedItem,\n      _d = _a.suggestionLimit,\n      suggestionLimit = _d === void 0 ? 0 : _d,\n      translateChoice = _a.translateChoice;\n  var translate = useTranslate();\n\n  var _e = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _e.getChoiceText,\n      getChoiceValue = _e.getChoiceValue; // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  var getSuggestions = useCallback(getSuggestionsFactory({\n    allowCreate: allowCreate,\n    choices: choices,\n    createText: createText,\n    createValue: createValue,\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue,\n    limitChoicesToValue: limitChoicesToValue,\n    matchSuggestion: matchSuggestion,\n    optionText: optionText,\n    optionValue: optionValue,\n    selectedItem: selectedItem,\n    suggestionLimit: suggestionLimit\n  }), [allowCreate, choices, createText, createValue, getChoiceText, getChoiceValue, limitChoicesToValue, matchSuggestion, optionText, optionValue, selectedItem, suggestionLimit, translate]);\n  return {\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue,\n    getSuggestions: getSuggestions\n  };\n};\n\nvar escapeRegExp = function (value) {\n  return value ? value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '';\n}; // $& means the whole matched string\n\n/**\n * Default matcher implementation which check whether the suggestion text matches the filter.\n */\n\n\nvar defaultMatchSuggestion = function (getChoiceText) {\n  return function (filter, suggestion, exact) {\n    if (exact === void 0) {\n      exact = false;\n    }\n\n    var suggestionText = getChoiceText(suggestion);\n    var isReactElement = isValidElement(suggestionText);\n    var regex = escapeRegExp(filter);\n    return isReactElement ? false : suggestionText && !!suggestionText.match( // We must escape any RegExp reserved characters to avoid errors\n    // For example, the filter might contain * which must be escaped as \\*\n    new RegExp(exact ? \"^\".concat(regex, \"$\") : regex, 'i'));\n  };\n};\n/**\n * Get the suggestions to display after applying a fuzzy search on the available choices\n *\n * @example\n *\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n */\n\n\nexport var getSuggestionsFactory = function (_a) {\n  var _b = _a.allowCreate,\n      allowCreate = _b === void 0 ? false : _b,\n      _c = _a.choices,\n      choices = _c === void 0 ? [] : _c,\n      _d = _a.createText,\n      createText = _d === void 0 ? 'ra.action.create' : _d,\n      _e = _a.createValue,\n      createValue = _e === void 0 ? '@@create' : _e,\n      _f = _a.optionText,\n      optionText = _f === void 0 ? 'name' : _f,\n      _g = _a.optionValue,\n      optionValue = _g === void 0 ? 'id' : _g,\n      getChoiceText = _a.getChoiceText,\n      getChoiceValue = _a.getChoiceValue,\n      _h = _a.limitChoicesToValue,\n      limitChoicesToValue = _h === void 0 ? false : _h,\n      _j = _a.matchSuggestion,\n      matchSuggestion = _j === void 0 ? defaultMatchSuggestion(getChoiceText) : _j,\n      selectedItem = _a.selectedItem,\n      _k = _a.suggestionLimit,\n      suggestionLimit = _k === void 0 ? 0 : _k;\n  return function (filter) {\n    var suggestions = []; // if an item is selected and matches the filter\n\n    if (selectedItem && !Array.isArray(selectedItem) && matchSuggestion(filter, selectedItem)) {\n      if (limitChoicesToValue) {\n        // display only the selected item\n        suggestions = choices.filter(function (choice) {\n          return getChoiceValue(choice) === getChoiceValue(selectedItem);\n        });\n      } else {\n        suggestions = __spreadArray([], choices, true);\n      }\n    } else {\n      suggestions = choices.filter(function (choice) {\n        return matchSuggestion(filter, choice) || selectedItem != null && (!Array.isArray(selectedItem) ? getChoiceValue(choice) === getChoiceValue(selectedItem) : selectedItem.some(function (selected) {\n          return getChoiceValue(choice) === getChoiceValue(selected);\n        }));\n      });\n    }\n\n    suggestions = limitSuggestions(suggestions, suggestionLimit);\n    var hasExactMatch = suggestions.some(function (suggestion) {\n      return matchSuggestion(filter, suggestion, true);\n    });\n\n    if (allowCreate) {\n      var filterIsSelectedItem = // If the selectedItem is an array (for example AutocompleteArrayInput)\n      // we shouldn't try to match\n      !!selectedItem && !Array.isArray(selectedItem) ? matchSuggestion(filter, selectedItem, true) : false;\n\n      if (!hasExactMatch && !filterIsSelectedItem) {\n        suggestions.push(getSuggestion({\n          optionText: optionText,\n          optionValue: optionValue,\n          text: createText,\n          value: createValue\n        }));\n      }\n    } // Only keep unique items. Necessary because we might have fetched\n    // the currently selected choice in addition of the possible choices\n    // that may also contain it\n\n\n    var result = suggestions.filter(function (suggestion, index) {\n      return suggestions.indexOf(suggestion) === index;\n    });\n    return result;\n  };\n};\n/**\n * @example\n *\n * limitSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  1\n * );\n *\n * // Will return [{ id: 1, name: 'foo' }]\n *\n * @param suggestions List of suggestions\n * @param limit\n */\n\nvar limitSuggestions = function (suggestions, limit) {\n  if (limit === void 0) {\n    limit = 0;\n  }\n\n  return Number.isInteger(limit) && limit > 0 ? suggestions.slice(0, limit) : suggestions;\n};\n/**\n * addSuggestion(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n * );\n *\n * // Will return [{ id: null, name: '' }, { id: 1, name: 'foo' }, { id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param options\n * @param options.optionText\n */\n\n\nvar getSuggestion = function (_a) {\n  var _b = _a.optionText,\n      optionText = _b === void 0 ? 'name' : _b,\n      _c = _a.optionValue,\n      optionValue = _c === void 0 ? 'id' : _c,\n      _d = _a.text,\n      text = _d === void 0 ? '' : _d,\n      _e = _a.value,\n      value = _e === void 0 ? null : _e;\n  var suggestion = {};\n  set(suggestion, optionValue, value);\n\n  if (typeof optionText === 'string') {\n    set(suggestion, optionText, text);\n  }\n\n  return suggestion;\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA0D,OAA1D;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,UAAT,QAA0D,cAA1D;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,OAAO,IAAMC,cAAc,GAAG,UAACC,EAAD,EAYN;MAXpBC,WAAW;MACXC,OAAO;MACPC;MAAAC,UAAU,mBAAG,kBAAH,GAAqBD;MAC/BE;MAAAC,WAAW,mBAAG,UAAH,GAAaD;MACxBE,mBAAmB;MACnBC,eAAe;MACfC,UAAU;MACVC,WAAW;MACXC,YAAY;MACZC;MAAAC,eAAe,mBAAG,CAAH,GAAID;MACnBE,eAAe;EAEf,IAAMC,SAAS,GAAGjB,YAAY,EAA9B;;EACM,SAAoCD,UAAU,CAAC;IACjDY,UAAU,YADuC;IAEjDC,WAAW,aAFsC;IAGjDI,eAAe;EAHkC,CAAD,CAA9C;EAAA,IAAEE,aAAa,mBAAf;EAAA,IAAiBC,cAAc,oBAA/B,CAFc,CAQpB;;;EACA,IAAMC,cAAc,GAAGxB,WAAW,CAC9ByB,qBAAqB,CAAC;IAClBlB,WAAW,aADO;IAElBC,OAAO,SAFW;IAGlBE,UAAU,YAHQ;IAIlBE,WAAW,aAJO;IAKlBU,aAAa,eALK;IAMlBC,cAAc,gBANI;IAOlBV,mBAAmB,qBAPD;IAQlBC,eAAe,iBARG;IASlBC,UAAU,YATQ;IAUlBC,WAAW,aAVO;IAWlBC,YAAY,cAXM;IAYlBE,eAAe;EAZG,CAAD,CADS,EAe9B,CACIZ,WADJ,EAEIC,OAFJ,EAGIE,UAHJ,EAIIE,WAJJ,EAKIU,aALJ,EAMIC,cANJ,EAOIV,mBAPJ,EAQIC,eARJ,EASIC,UATJ,EAUIC,WAVJ,EAWIC,YAXJ,EAYIE,eAZJ,EAaIE,SAbJ,CAf8B,CAAlC;EAgCA,OAAO;IACHC,aAAa,eADV;IAEHC,cAAc,gBAFX;IAGHC,cAAc;EAHX,CAAP;AAKH,CA1DM;;AA4DP,IAAME,YAAY,GAAG,iBAAK;EACtB,YAAK,GAAGC,KAAK,CAACC,OAAN,CAAc,qBAAd,EAAqC,MAArC,CAAH,GAAkD,EAAvD;AAAyD,CAD7D,C,CAC+D;;AAkB/D;;;;;AAGA,IAAMC,sBAAsB,GAAG,yBAAa;EAAI,iBAC5CC,MAD4C,EAE5CC,UAF4C,EAG5CC,KAH4C,EAG/B;IAAb;MAAAA;IAAa;;IAEb,IAAMC,cAAc,GAAGX,aAAa,CAACS,UAAD,CAApC;IAEA,IAAMG,cAAc,GAAGjC,cAAc,CAACgC,cAAD,CAArC;IACA,IAAME,KAAK,GAAGT,YAAY,CAACI,MAAD,CAA1B;IAEA,OAAOI,cAAc,GACf,KADe,GAEfD,cAAc,IACV,CAAC,CAACA,cAAc,CAACG,KAAf,EACE;IACA;IACA,IAAIC,MAAJ,CAAWL,KAAK,GAAG,WAAIG,KAAJ,EAAS,GAAT,CAAH,GAAkBA,KAAlC,EAAyC,GAAzC,CAHF,CAHZ;EAQH,CAlB+C;AAkB/C,CAlBD;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,IAAMV,qBAAqB,GAAG,UAACnB,EAAD,EAgBpC;MAfGG;MAAAF,WAAW,mBAAG,KAAH,GAAQE;MACnBE;MAAAH,OAAO,mBAAG,EAAH,GAAKG;MACZO;MAAAR,UAAU,mBAAG,kBAAH,GAAqBQ;MAC/BoB;MAAA1B,WAAW,mBAAG,UAAH,GAAa0B;MACxBC;MAAAxB,UAAU,mBAAG,MAAH,GAASwB;MACnBC;MAAAxB,WAAW,mBAAG,IAAH,GAAOwB;MAClBlB,aAAa;MACbC,cAAc;MACdkB;MAAA5B,mBAAmB,mBAAG,KAAH,GAAQ4B;MAC3BC;MAAA5B,eAAe,mBAAGe,sBAAsB,CAACP,aAAD,CAAzB,GAAwCoB;MACvDzB,YAAY;MACZ0B;MAAAxB,eAAe,mBAAG,CAAH,GAAIwB;EAIjB,yBAAM;IACR,IAAIC,WAAW,GAAU,EAAzB,CADQ,CAER;;IACA,IACI3B,YAAY,IACZ,CAAC4B,KAAK,CAACC,OAAN,CAAc7B,YAAd,CADD,IAEAH,eAAe,CAACgB,MAAD,EAASb,YAAT,CAHnB,EAIE;MACE,IAAIJ,mBAAJ,EAAyB;QACrB;QACA+B,WAAW,GAAGpC,OAAO,CAACsB,MAAR,CACV,kBAAM;UACF,qBAAc,CAACiB,MAAD,CAAd,KAA2BxB,cAAc,CAACN,YAAD,CAAzC;QAAuD,CAFjD,CAAd;MAIH,CAND,MAMO;QACH2B,WAAW,qBAAOpC,OAAP,EAAc,IAAd,CAAX;MACH;IACJ,CAdD,MAcO;MACHoC,WAAW,GAAGpC,OAAO,CAACsB,MAAR,CACV,kBAAM;QACF,sBAAe,CAACA,MAAD,EAASiB,MAAT,CAAf,IACC9B,YAAY,IAAI,IAAhB,KACI,CAAC4B,KAAK,CAACC,OAAN,CAAc7B,YAAd,CAAD,GACKM,cAAc,CAACwB,MAAD,CAAd,KACAxB,cAAc,CAACN,YAAD,CAFnB,GAGKA,YAAY,CAAC+B,IAAb,CACI,oBAAQ;UACJ,qBAAc,CAACD,MAAD,CAAd,KACAxB,cAAc,CAAC0B,QAAD,CADd;QACwB,CAHhC,CAJT,CADD;MASa,CAXP,CAAd;IAaH;;IAEDL,WAAW,GAAGM,gBAAgB,CAACN,WAAD,EAAczB,eAAd,CAA9B;IAEA,IAAMgC,aAAa,GAAGP,WAAW,CAACI,IAAZ,CAAiB,sBAAU;MAC7C,sBAAe,CAAClB,MAAD,EAASC,UAAT,EAAqB,IAArB,CAAf;IAAyC,CADvB,CAAtB;;IAIA,IAAIxB,WAAJ,EAAiB;MACb,IAAM6C,oBAAoB,GACtB;MACA;MACA,CAAC,CAACnC,YAAF,IAAkB,CAAC4B,KAAK,CAACC,OAAN,CAAc7B,YAAd,CAAnB,GACMH,eAAe,CAACgB,MAAD,EAASb,YAAT,EAAuB,IAAvB,CADrB,GAEM,KALV;;MAMA,IAAI,CAACkC,aAAD,IAAkB,CAACC,oBAAvB,EAA6C;QACzCR,WAAW,CAACS,IAAZ,CACIC,aAAa,CAAC;UACVvC,UAAU,YADA;UAEVC,WAAW,aAFD;UAGVuC,IAAI,EAAE7C,UAHI;UAIViB,KAAK,EAAEf;QAJG,CAAD,CADjB;MAQH;IACJ,CAxDO,CA0DR;IACA;IACA;;;IACA,IAAM4C,MAAM,GAAGZ,WAAW,CAACd,MAAZ,CACX,UAACC,UAAD,EAAa0B,KAAb,EAAkB;MAAK,kBAAW,CAACC,OAAZ,CAAoB3B,UAApB,MAAoC0B,KAApC;IAAyC,CADrD,CAAf;IAGA,OAAOD,MAAP;EACH,CAjEK;AAiEL,CAjFM;AAmFP;;;;;;;;;;;;;;AAaA,IAAMN,gBAAgB,GAAG,UAACN,WAAD,EAAqBe,KAArB,EAAmC;EAAd;IAAAA;EAAc;;EACxD,aAAM,CAACC,SAAP,CAAiBD,KAAjB,KAA2BA,KAAK,GAAG,CAAnC,GACMf,WAAW,CAACiB,KAAZ,CAAkB,CAAlB,EAAqBF,KAArB,CADN,GAEMf,WAFN;AAEiB,CAHrB;AAKA;;;;;;;;;;;;;AAWA,IAAMU,aAAa,GAAG,UAAChD,EAAD,EAUrB;MATGG;MAAAM,UAAU,mBAAG,MAAH,GAASN;MACnBE;MAAAK,WAAW,mBAAG,IAAH,GAAOL;MAClBO;MAAAqC,IAAI,mBAAG,EAAH,GAAKrC;MACToB;MAAAX,KAAK,mBAAG,IAAH,GAAOW;EAOZ,IAAMP,UAAU,GAAG,EAAnB;EACA7B,GAAG,CAAC6B,UAAD,EAAaf,WAAb,EAA0BW,KAA1B,CAAH;;EACA,IAAI,OAAOZ,UAAP,KAAsB,QAA1B,EAAoC;IAChCb,GAAG,CAAC6B,UAAD,EAAahB,UAAb,EAAyBwC,IAAzB,CAAH;EACH;;EAED,OAAOxB,UAAP;AACH,CAlBD","names":["useCallback","isValidElement","set","useChoices","useTranslate","useSuggestions","_a","allowCreate","choices","_b","createText","_c","createValue","limitChoicesToValue","matchSuggestion","optionText","optionValue","selectedItem","_d","suggestionLimit","translateChoice","translate","getChoiceText","getChoiceValue","getSuggestions","getSuggestionsFactory","escapeRegExp","value","replace","defaultMatchSuggestion","filter","suggestion","exact","suggestionText","isReactElement","regex","match","RegExp","_e","_f","_g","_h","_j","_k","suggestions","Array","isArray","choice","some","selected","limitSuggestions","hasExactMatch","filterIsSelectedItem","push","getSuggestion","text","result","index","indexOf","limit","isInteger","slice"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/useSuggestions.ts"],"sourcesContent":["import { useCallback, isValidElement, ReactElement } from 'react';\nimport set from 'lodash/set';\nimport { useChoices, OptionText, UseChoicesOptions } from './useChoices';\nimport { useTranslate } from '../i18n';\n\n/*\n * Returns helper functions for suggestions handling.\n *\n * @param allowDuplicates A boolean indicating whether a suggestion can be added several times\n * @param choices An array of available choices\n * @param limitChoicesToValue A boolean indicating whether the initial suggestions should be limited to the currently selected one(s)\n * @param matchSuggestion Optional unless `optionText` is a React element. Function which check whether a choice matches a filter. Must return a boolean.\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param selectedItem The currently selected item. Maybe an array of selected items\n * @param suggestionLimit The maximum number of suggestions returned\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n * - getSuggestions: A function taking a filter value (string) and returning the matching suggestions\n */\nexport const useSuggestions = ({\n    allowCreate,\n    choices,\n    createText = 'ra.action.create',\n    createValue = '@@create',\n    limitChoicesToValue,\n    matchSuggestion,\n    optionText,\n    optionValue,\n    selectedItem,\n    suggestionLimit = 0,\n    translateChoice,\n}: UseSuggestionsOptions) => {\n    const translate = useTranslate();\n    const { getChoiceText, getChoiceValue } = useChoices({\n        optionText,\n        optionValue,\n        translateChoice,\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const getSuggestions = useCallback(\n        getSuggestionsFactory({\n            allowCreate,\n            choices,\n            createText,\n            createValue,\n            getChoiceText,\n            getChoiceValue,\n            limitChoicesToValue,\n            matchSuggestion,\n            optionText,\n            optionValue,\n            selectedItem,\n            suggestionLimit,\n        }),\n        [\n            allowCreate,\n            choices,\n            createText,\n            createValue,\n            getChoiceText,\n            getChoiceValue,\n            limitChoicesToValue,\n            matchSuggestion,\n            optionText,\n            optionValue,\n            selectedItem,\n            suggestionLimit,\n            translate,\n        ]\n    );\n\n    return {\n        getChoiceText,\n        getChoiceValue,\n        getSuggestions,\n    };\n};\n\nconst escapeRegExp = value =>\n    value ? value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : ''; // $& means the whole matched string\n\nexport interface UseSuggestionsOptions extends UseChoicesOptions {\n    allowCreate?: boolean;\n    allowDuplicates?: boolean;\n    choices: any[];\n    createText?: string;\n    createValue?: any;\n    limitChoicesToValue?: boolean;\n    matchSuggestion?: (\n        filter: string,\n        suggestion: any,\n        exact?: boolean\n    ) => boolean;\n    suggestionLimit?: number;\n    selectedItem?: any | any[];\n}\n\n/**\n * Default matcher implementation which check whether the suggestion text matches the filter.\n */\nconst defaultMatchSuggestion = getChoiceText => (\n    filter,\n    suggestion,\n    exact = false\n) => {\n    const suggestionText = getChoiceText(suggestion);\n\n    const isReactElement = isValidElement(suggestionText);\n    const regex = escapeRegExp(filter);\n\n    return isReactElement\n        ? false\n        : suggestionText &&\n              !!suggestionText.match(\n                  // We must escape any RegExp reserved characters to avoid errors\n                  // For example, the filter might contain * which must be escaped as \\*\n                  new RegExp(exact ? `^${regex}$` : regex, 'i')\n              );\n};\n\n/**\n * Get the suggestions to display after applying a fuzzy search on the available choices\n *\n * @example\n *\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n */\nexport const getSuggestionsFactory = ({\n    allowCreate = false,\n    choices = [],\n    createText = 'ra.action.create',\n    createValue = '@@create',\n    optionText = 'name',\n    optionValue = 'id',\n    getChoiceText,\n    getChoiceValue,\n    limitChoicesToValue = false,\n    matchSuggestion = defaultMatchSuggestion(getChoiceText),\n    selectedItem,\n    suggestionLimit = 0,\n}: UseSuggestionsOptions & {\n    getChoiceText: (choice: any) => string | ReactElement;\n    getChoiceValue: (choice: any) => string;\n}) => filter => {\n    let suggestions: any[] = [];\n    // if an item is selected and matches the filter\n    if (\n        selectedItem &&\n        !Array.isArray(selectedItem) &&\n        matchSuggestion(filter, selectedItem)\n    ) {\n        if (limitChoicesToValue) {\n            // display only the selected item\n            suggestions = choices.filter(\n                choice =>\n                    getChoiceValue(choice) === getChoiceValue(selectedItem)\n            );\n        } else {\n            suggestions = [...choices];\n        }\n    } else {\n        suggestions = choices.filter(\n            choice =>\n                matchSuggestion(filter, choice) ||\n                (selectedItem != null &&\n                    (!Array.isArray(selectedItem)\n                        ? getChoiceValue(choice) ===\n                          getChoiceValue(selectedItem)\n                        : selectedItem.some(\n                              selected =>\n                                  getChoiceValue(choice) ===\n                                  getChoiceValue(selected)\n                          )))\n        );\n    }\n\n    suggestions = limitSuggestions(suggestions, suggestionLimit);\n\n    const hasExactMatch = suggestions.some(suggestion =>\n        matchSuggestion(filter, suggestion, true)\n    );\n\n    if (allowCreate) {\n        const filterIsSelectedItem =\n            // If the selectedItem is an array (for example AutocompleteArrayInput)\n            // we shouldn't try to match\n            !!selectedItem && !Array.isArray(selectedItem)\n                ? matchSuggestion(filter, selectedItem, true)\n                : false;\n        if (!hasExactMatch && !filterIsSelectedItem) {\n            suggestions.push(\n                getSuggestion({\n                    optionText,\n                    optionValue,\n                    text: createText,\n                    value: createValue,\n                })\n            );\n        }\n    }\n\n    // Only keep unique items. Necessary because we might have fetched\n    // the currently selected choice in addition of the possible choices\n    // that may also contain it\n    const result = suggestions.filter(\n        (suggestion, index) => suggestions.indexOf(suggestion) === index\n    );\n    return result;\n};\n\n/**\n * @example\n *\n * limitSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  1\n * );\n *\n * // Will return [{ id: 1, name: 'foo' }]\n *\n * @param suggestions List of suggestions\n * @param limit\n */\nconst limitSuggestions = (suggestions: any[], limit: any = 0) =>\n    Number.isInteger(limit) && limit > 0\n        ? suggestions.slice(0, limit)\n        : suggestions;\n\n/**\n * addSuggestion(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n * );\n *\n * // Will return [{ id: null, name: '' }, { id: 1, name: 'foo' }, { id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param options\n * @param options.optionText\n */\nconst getSuggestion = ({\n    optionText = 'name',\n    optionValue = 'id',\n    text = '',\n    value = null,\n}: {\n    optionText: OptionText;\n    optionValue: string;\n    text: string;\n    value: any;\n}) => {\n    const suggestion = {};\n    set(suggestion, optionValue, value);\n    if (typeof optionText === 'string') {\n        set(suggestion, optionText, text);\n    }\n\n    return suggestion;\n};\n"]},"metadata":{},"sourceType":"module"}
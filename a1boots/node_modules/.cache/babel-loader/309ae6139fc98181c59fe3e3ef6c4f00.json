{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport { alpha } from '@mui/material/styles';\nimport { useDeleteMany, useRefresh, useNotify, useResourceContext, useListContext } from 'ra-core';\nimport { Button } from './Button';\nexport var BulkDeleteWithUndoButton = function BulkDeleteWithUndoButton(props) {\n  var _a = props.label,\n      label = _a === void 0 ? 'ra.action.delete' : _a,\n      _b = props.icon,\n      icon = _b === void 0 ? defaultIcon : _b,\n      onClick = props.onClick,\n      _c = props.mutationOptions,\n      mutationOptions = _c === void 0 ? {} : _c,\n      rest = __rest(props, [\"label\", \"icon\", \"onClick\", \"mutationOptions\"]);\n\n  var mutationMeta = mutationOptions.meta,\n      otherMutationOptions = __rest(mutationOptions, [\"meta\"]);\n\n  var _d = useListContext(props),\n      selectedIds = _d.selectedIds,\n      onUnselectItems = _d.onUnselectItems;\n\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  var refresh = useRefresh();\n\n  var _e = useDeleteMany(),\n      deleteMany = _e[0],\n      isLoading = _e[1].isLoading;\n\n  var handleClick = function handleClick(e) {\n    deleteMany(resource, {\n      ids: selectedIds,\n      meta: mutationMeta\n    }, __assign({\n      onSuccess: function onSuccess() {\n        notify('ra.notification.deleted', {\n          type: 'info',\n          messageArgs: {\n            smart_count: selectedIds.length\n          },\n          undoable: true\n        });\n        onUnselectItems();\n      },\n      onError: function onError(error) {\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n        refresh();\n      },\n      mutationMode: 'undoable'\n    }, otherMutationOptions));\n\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n\n  return React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label,\n    disabled: isLoading\n  }, sanitizeRestProps(rest)), icon);\n};\nvar defaultIcon = React.createElement(ActionDelete, null);\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var classes = _a.classes,\n      filterValues = _a.filterValues,\n      label = _a.label,\n      selectedIds = _a.selectedIds,\n      rest = __rest(_a, [\"classes\", \"filterValues\", \"label\", \"selectedIds\"]);\n\n  return rest;\n};\n\nvar PREFIX = 'RaBulkDeleteWithUndoButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.error.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.error.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});\nBulkDeleteWithUndoButton.propTypes = {\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  icon: PropTypes.element\n};","map":{"version":3,"mappings":"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","names":["React","styled","PropTypes","ActionDelete","alpha","useDeleteMany","useRefresh","useNotify","useResourceContext","useListContext","Button","BulkDeleteWithUndoButton","props","_a","_b","icon","defaultIcon","onClick","_c","mutationOptions","rest","mutationMeta","otherMutationOptions","selectedIds","onUnselectItems","notify","resource","refresh","deleteMany","isLoading","handleClick","ids","meta","__assign","onSuccess","type","messageArgs","smart_count","length","undoable","onError","error","message","_","undefined","mutationMode","e","StyledButton","label","disabled","sanitizeRestProps","filterValues","PREFIX","name","overridesResolver","styles","root","theme","color","palette","main","backgroundColor","propTypes","string","arrayOf","any","element"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/BulkDeleteWithUndoButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionDelete from '@mui/icons-material/Delete';\nimport { alpha } from '@mui/material/styles';\nimport {\n    useDeleteMany,\n    useRefresh,\n    useNotify,\n    useResourceContext,\n    useListContext,\n    RaRecord,\n    DeleteManyParams,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\nimport { UseMutationOptions } from 'react-query';\n\nexport const BulkDeleteWithUndoButton = (\n    props: BulkDeleteWithUndoButtonProps\n) => {\n    const {\n        label = 'ra.action.delete',\n        icon = defaultIcon,\n        onClick,\n        mutationOptions = {},\n        ...rest\n    } = props;\n    const { meta: mutationMeta, ...otherMutationOptions } = mutationOptions;\n    const { selectedIds, onUnselectItems } = useListContext(props);\n\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n    const refresh = useRefresh();\n    const [deleteMany, { isLoading }] = useDeleteMany();\n\n    const handleClick = e => {\n        deleteMany(\n            resource,\n            { ids: selectedIds, meta: mutationMeta },\n            {\n                onSuccess: () => {\n                    notify('ra.notification.deleted', {\n                        type: 'info',\n                        messageArgs: { smart_count: selectedIds.length },\n                        undoable: true,\n                    });\n                    onUnselectItems();\n                },\n                onError: (error: Error) => {\n                    notify(\n                        typeof error === 'string'\n                            ? error\n                            : error.message || 'ra.notification.http_error',\n                        {\n                            type: 'error',\n                            messageArgs: {\n                                _:\n                                    typeof error === 'string'\n                                        ? error\n                                        : error && error.message\n                                        ? error.message\n                                        : undefined,\n                            },\n                        }\n                    );\n                    refresh();\n                },\n                mutationMode: 'undoable',\n                ...otherMutationOptions,\n            }\n        );\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <StyledButton\n            onClick={handleClick}\n            label={label}\n            disabled={isLoading}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\nconst defaultIcon = <ActionDelete />;\n\nconst sanitizeRestProps = ({\n    classes,\n    filterValues,\n    label,\n    selectedIds,\n    ...rest\n}: Omit<BulkDeleteWithUndoButtonProps, 'resource' | 'icon'>) => rest;\n\nexport interface BulkDeleteWithUndoButtonProps<\n    RecordType extends RaRecord = any,\n    MutationOptionsError = unknown\n> extends BulkActionProps,\n        ButtonProps {\n    icon?: ReactElement;\n    mutationOptions?: UseMutationOptions<\n        RecordType,\n        MutationOptionsError,\n        DeleteManyParams<RecordType>\n    > & { meta?: any };\n}\n\nconst PREFIX = 'RaBulkDeleteWithUndoButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.error.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nBulkDeleteWithUndoButton.propTypes = {\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    icon: PropTypes.element,\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useCallback, useMemo, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { TablePagination, Toolbar, useMediaQuery } from '@mui/material';\nimport { useTranslate, useListPaginationContext, sanitizeListRestProps, ComponentPropType } from 'ra-core';\nimport { PaginationActions } from './PaginationActions';\nexport var Pagination = memo(function (props) {\n  var _a = props.rowsPerPageOptions,\n      rowsPerPageOptions = _a === void 0 ? DefaultRowsPerPageOptions : _a,\n      actions = props.actions,\n      _b = props.limit,\n      limit = _b === void 0 ? null : _b,\n      rest = __rest(props, [\"rowsPerPageOptions\", \"actions\", \"limit\"]);\n\n  var _c = useListPaginationContext(props),\n      isLoading = _c.isLoading,\n      hasNextPage = _c.hasNextPage,\n      page = _c.page,\n      perPage = _c.perPage,\n      total = _c.total,\n      setPage = _c.setPage,\n      setPerPage = _c.setPerPage;\n\n  var translate = useTranslate();\n  var isSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('md');\n  });\n  var totalPages = useMemo(function () {\n    return total != null ? Math.ceil(total / perPage) : undefined;\n  }, [perPage, total]);\n  /**\n   * Warning: Material UI's page is 0-based\n   */\n\n  var handlePageChange = useCallback(function (event, page) {\n    event && event.stopPropagation();\n\n    if (page < 0 || page > totalPages - 1) {\n      throw new Error(translate('ra.navigation.page_out_of_boundaries', {\n        page: page + 1\n      }));\n    }\n\n    setPage(page + 1);\n  }, [totalPages, setPage, translate]);\n  var handlePerPageChange = useCallback(function (event) {\n    setPerPage(event.target.value);\n  }, [setPerPage]);\n  var labelDisplayedRows = useCallback(function (_a) {\n    var from = _a.from,\n        to = _a.to,\n        count = _a.count;\n    return count === -1 && hasNextPage ? translate('ra.navigation.partial_page_range_info', {\n      offsetBegin: from,\n      offsetEnd: to,\n      _: \"%{from}-%{to} of more than %{to}\"\n    }) : translate('ra.navigation.page_range_info', {\n      offsetBegin: from,\n      offsetEnd: to,\n      total: count === -1 ? to : count,\n      _: \"%{from}-%{to} of %{count === -1 ? to : count}\"\n    });\n  }, [translate, hasNextPage]);\n  var labelItem = useCallback(function (type) {\n    return translate(\"ra.navigation.\".concat(type), {\n      _: \"Go to \".concat(type, \" page\")\n    });\n  }, [translate]);\n\n  if (isLoading) {\n    return React.createElement(Toolbar, {\n      variant: \"dense\"\n    });\n  } // Avoid rendering TablePagination if \"page\" value is invalid\n\n\n  if (total === 0 || page < 1 || total != null && page > totalPages) {\n    if (limit != null && process.env.NODE_ENV === 'development') {\n      console.warn('The Pagination limit prop is deprecated. Empty state should be handled by the component displaying data (Datagrid, SimpleList).');\n    }\n\n    return null;\n  }\n\n  if (isSmall) {\n    return React.createElement(TablePagination, __assign({\n      count: total == null ? -1 : total,\n      rowsPerPage: perPage,\n      page: page - 1,\n      onPageChange: handlePageChange,\n      rowsPerPageOptions: emptyArray,\n      component: \"span\",\n      labelDisplayedRows: labelDisplayedRows\n    }, sanitizeListRestProps(rest)));\n  }\n\n  var ActionsComponent = actions ? actions // overridden by caller\n  : !isLoading && total != null ? PaginationActions // regular navigation\n  : undefined; // partial navigation (uses default TablePaginationActions)\n\n  return React.createElement(TablePagination, __assign({\n    count: total == null ? -1 : total,\n    rowsPerPage: perPage,\n    page: page - 1,\n    onPageChange: handlePageChange,\n    onRowsPerPageChange: handlePerPageChange,\n    // @ts-ignore\n    ActionsComponent: ActionsComponent,\n    nextIconButtonProps: {\n      disabled: !hasNextPage\n    },\n    component: \"span\",\n    labelRowsPerPage: translate('ra.navigation.page_rows_per_page'),\n    labelDisplayedRows: labelDisplayedRows,\n    getItemAriaLabel: labelItem,\n    rowsPerPageOptions: rowsPerPageOptions\n  }, sanitizeListRestProps(rest)));\n});\nPagination.propTypes = {\n  actions: ComponentPropType,\n  limit: PropTypes.element,\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number)\n};\nvar DefaultRowsPerPageOptions = [5, 10, 25, 50];\nvar emptyArray = [];","map":{"version":3,"mappings":"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","names":["React","useCallback","useMemo","memo","PropTypes","TablePagination","Toolbar","useMediaQuery","useTranslate","useListPaginationContext","sanitizeListRestProps","ComponentPropType","PaginationActions","Pagination","props","DefaultRowsPerPageOptions","_a","actions","_b","limit","rest","isLoading","hasNextPage","page","perPage","total","setPage","setPerPage","translate","isSmall","theme","breakpoints","down","totalPages","Math","ceil","undefined","handlePageChange","event","stopPropagation","Error","handlePerPageChange","target","value","labelDisplayedRows","from","to","count","offsetBegin","offsetEnd","_","labelItem","type","variant","process","env","NODE_ENV","console","warn","__assign","rowsPerPage","onPageChange","rowsPerPageOptions","emptyArray","component","ActionsComponent","onRowsPerPageChange","nextIconButtonProps","disabled","labelRowsPerPage","getItemAriaLabel","propTypes","element","arrayOf","number"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/pagination/Pagination.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallback, useMemo, FC, memo, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    TablePagination,\n    TablePaginationBaseProps,\n    Toolbar,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport {\n    useTranslate,\n    useListPaginationContext,\n    sanitizeListRestProps,\n    ComponentPropType,\n    ListPaginationContextValue,\n} from 'ra-core';\n\nimport { PaginationActions } from './PaginationActions';\n\nexport const Pagination: FC<PaginationProps> = memo(props => {\n    const {\n        rowsPerPageOptions = DefaultRowsPerPageOptions,\n        actions,\n        limit = null,\n        ...rest\n    } = props;\n    const {\n        isLoading,\n        hasNextPage,\n        page,\n        perPage,\n        total,\n        setPage,\n        setPerPage,\n    } = useListPaginationContext(props);\n    const translate = useTranslate();\n    const isSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('md')\n    );\n\n    const totalPages = useMemo(() => {\n        return total != null ? Math.ceil(total / perPage) : undefined;\n    }, [perPage, total]);\n\n    /**\n     * Warning: Material UI's page is 0-based\n     */\n    const handlePageChange = useCallback(\n        (event, page) => {\n            event && event.stopPropagation();\n            if (page < 0 || page > totalPages - 1) {\n                throw new Error(\n                    translate('ra.navigation.page_out_of_boundaries', {\n                        page: page + 1,\n                    })\n                );\n            }\n            setPage(page + 1);\n        },\n        [totalPages, setPage, translate]\n    );\n\n    const handlePerPageChange = useCallback(\n        event => {\n            setPerPage(event.target.value);\n        },\n        [setPerPage]\n    );\n\n    const labelDisplayedRows = useCallback(\n        ({ from, to, count }) =>\n            count === -1 && hasNextPage\n                ? translate('ra.navigation.partial_page_range_info', {\n                      offsetBegin: from,\n                      offsetEnd: to,\n                      _: `%{from}-%{to} of more than %{to}`,\n                  })\n                : translate('ra.navigation.page_range_info', {\n                      offsetBegin: from,\n                      offsetEnd: to,\n                      total: count === -1 ? to : count,\n                      _: `%{from}-%{to} of %{count === -1 ? to : count}`,\n                  }),\n        [translate, hasNextPage]\n    );\n\n    const labelItem = useCallback(\n        type => translate(`ra.navigation.${type}`, { _: `Go to ${type} page` }),\n        [translate]\n    );\n\n    if (isLoading) {\n        return <Toolbar variant=\"dense\" />;\n    }\n\n    // Avoid rendering TablePagination if \"page\" value is invalid\n    if (total === 0 || page < 1 || (total != null && page > totalPages)) {\n        if (limit != null && process.env.NODE_ENV === 'development') {\n            console.warn(\n                'The Pagination limit prop is deprecated. Empty state should be handled by the component displaying data (Datagrid, SimpleList).'\n            );\n        }\n        return null;\n    }\n\n    if (isSmall) {\n        return (\n            <TablePagination\n                count={total == null ? -1 : total}\n                rowsPerPage={perPage}\n                page={page - 1}\n                onPageChange={handlePageChange}\n                rowsPerPageOptions={emptyArray}\n                component=\"span\"\n                labelDisplayedRows={labelDisplayedRows}\n                {...sanitizeListRestProps(rest)}\n            />\n        );\n    }\n\n    const ActionsComponent = actions\n        ? actions // overridden by caller\n        : !isLoading && total != null\n        ? PaginationActions // regular navigation\n        : undefined; // partial navigation (uses default TablePaginationActions)\n\n    return (\n        <TablePagination\n            count={total == null ? -1 : total}\n            rowsPerPage={perPage}\n            page={page - 1}\n            onPageChange={handlePageChange}\n            onRowsPerPageChange={handlePerPageChange}\n            // @ts-ignore\n            ActionsComponent={ActionsComponent}\n            nextIconButtonProps={{\n                disabled: !hasNextPage,\n            }}\n            component=\"span\"\n            labelRowsPerPage={translate('ra.navigation.page_rows_per_page')}\n            labelDisplayedRows={labelDisplayedRows}\n            getItemAriaLabel={labelItem}\n            rowsPerPageOptions={rowsPerPageOptions}\n            {...sanitizeListRestProps(rest)}\n        />\n    );\n});\n\nPagination.propTypes = {\n    actions: ComponentPropType,\n    limit: PropTypes.element,\n    rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst DefaultRowsPerPageOptions = [5, 10, 25, 50];\nconst emptyArray = [];\n\nexport interface PaginationProps\n    extends TablePaginationBaseProps,\n        Partial<ListPaginationContextValue> {\n    rowsPerPageOptions?: number[];\n    actions?: FC;\n    limit?: ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}
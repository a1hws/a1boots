{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Tab as MuiTab, Stack } from '@mui/material';\nimport { useTranslate } from 'ra-core';\nimport clsx from 'clsx';\nimport { Labeled } from '../Labeled';\n/**\n * Tab element for the TabbedShowLayout.\n *\n * The `<Tab>` component accepts the following props:\n *\n * - label: The string displayed for each tab\n * - icon: The icon to show before the label (optional). Must be a component.\n * - path: The string used for custom urls\n *\n * It is also available as TabbedShowLayout.Tab.\n *\n * @example\n *     // in src/posts.js\n *     import * as React from \"react\";\n *     import FavoriteIcon from '@mui/icons-material/Favorite';\n *     import PersonPinIcon from '@mui/icons-material/PersonPin';\n *     import { Show, TabbedShowLayout, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <TabbedShowLayout>\n *                 <TabbedShowLayout.Tab label=\"Content\" icon={<FavoriteIcon />}>\n *                     <TextField source=\"title\" />\n *                     <TextField source=\"subtitle\" />\n *                </TabbedShowLayout.Tab>\n *                 <TabbedShowLayout.Tab label=\"Metadata\" icon={<PersonIcon />} path=\"metadata\">\n *                     <TextField source=\"category\" />\n *                </TabbedShowLayout.Tab>\n *             </TabbedShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import * as React from \"react\";\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\nexport var Tab = function Tab(_a) {\n  var children = _a.children,\n      contentClassName = _a.contentClassName,\n      context = _a.context,\n      count = _a.count,\n      className = _a.className,\n      divider = _a.divider,\n      icon = _a.icon,\n      label = _a.label,\n      record = _a.record,\n      _b = _a.spacing,\n      spacing = _b === void 0 ? 1 : _b,\n      _c = _a.syncWithLocation,\n      syncWithLocation = _c === void 0 ? true : _c,\n      value = _a.value,\n      rest = __rest(_a, [\"children\", \"contentClassName\", \"context\", \"count\", \"className\", \"divider\", \"icon\", \"label\", \"record\", \"spacing\", \"syncWithLocation\", \"value\"]);\n\n  var translate = useTranslate();\n  var location = useLocation();\n  var propsForLink = {\n    component: Link,\n    to: __assign(__assign({}, location), {\n      pathname: value\n    })\n  };\n\n  var renderHeader = function renderHeader() {\n    var tabLabel = typeof label === 'string' ? translate(label, {\n      _: label\n    }) : label;\n\n    if (count !== undefined) {\n      tabLabel = React.createElement(\"span\", null, tabLabel, \" (\", count, \")\");\n    }\n\n    return React.createElement(MuiTab, __assign({\n      key: \"tab-header-\".concat(value),\n      label: tabLabel,\n      value: value,\n      icon: icon,\n      className: clsx('show-tab', className)\n    }, syncWithLocation ? propsForLink : {}, rest));\n  };\n\n  var renderContent = function renderContent() {\n    return React.createElement(Stack, {\n      className: contentClassName,\n      spacing: spacing,\n      divider: divider\n    }, React.Children.map(children, function (field) {\n      return field && isValidElement(field) ? React.createElement(Labeled, {\n        key: field.props.source,\n        className: clsx('ra-field', field.props.source && \"ra-field-\".concat(field.props.source), field.props.className)\n      }, field) : null;\n    }));\n  };\n\n  return context === 'header' ? renderHeader() : renderContent();\n};\nTab.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  contentClassName: PropTypes.string,\n  context: PropTypes.oneOf(['header', 'content']),\n  count: PropTypes.node,\n  icon: PropTypes.element,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n  path: PropTypes.string,\n  spacing: PropTypes.any,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};","map":{"version":3,"mappings":"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","names":["React","isValidElement","PropTypes","Link","useLocation","Tab","MuiTab","Stack","useTranslate","clsx","Labeled","_a","contentClassName","context","count","className","divider","icon","label","record","_b","spacing","_c","syncWithLocation","value","rest","translate","location","propsForLink","component","to","pathname","renderHeader","tabLabel","_","undefined","__assign","key","renderContent","Children","map","children","field","props","source","propTypes","node","string","oneOf","element","oneOfType","isRequired","path","any","number"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/detail/Tab.tsx"],"sourcesContent":["import * as React from 'react';\nimport { isValidElement, ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Tab as MuiTab, TabProps as MuiTabProps, Stack } from '@mui/material';\nimport { ResponsiveStyleValue } from '@mui/system';\nimport { useTranslate, RaRecord } from 'ra-core';\nimport clsx from 'clsx';\n\nimport { Labeled } from '../Labeled';\n\n/**\n * Tab element for the TabbedShowLayout.\n *\n * The `<Tab>` component accepts the following props:\n *\n * - label: The string displayed for each tab\n * - icon: The icon to show before the label (optional). Must be a component.\n * - path: The string used for custom urls\n *\n * It is also available as TabbedShowLayout.Tab.\n *\n * @example\n *     // in src/posts.js\n *     import * as React from \"react\";\n *     import FavoriteIcon from '@mui/icons-material/Favorite';\n *     import PersonPinIcon from '@mui/icons-material/PersonPin';\n *     import { Show, TabbedShowLayout, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <TabbedShowLayout>\n *                 <TabbedShowLayout.Tab label=\"Content\" icon={<FavoriteIcon />}>\n *                     <TextField source=\"title\" />\n *                     <TextField source=\"subtitle\" />\n *                </TabbedShowLayout.Tab>\n *                 <TabbedShowLayout.Tab label=\"Metadata\" icon={<PersonIcon />} path=\"metadata\">\n *                     <TextField source=\"category\" />\n *                </TabbedShowLayout.Tab>\n *             </TabbedShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import * as React from \"react\";\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\nexport const Tab = ({\n    children,\n    contentClassName,\n    context,\n    count,\n    className,\n    divider,\n    icon,\n    label,\n    record,\n    spacing = 1,\n    syncWithLocation = true,\n    value,\n    ...rest\n}: TabProps) => {\n    const translate = useTranslate();\n    const location = useLocation();\n    const propsForLink = {\n        component: Link,\n        to: { ...location, pathname: value },\n    };\n\n    const renderHeader = () => {\n        let tabLabel =\n            typeof label === 'string' ? translate(label, { _: label }) : label;\n        if (count !== undefined) {\n            tabLabel = (\n                <span>\n                    {tabLabel} ({count})\n                </span>\n            );\n        }\n\n        return (\n            <MuiTab\n                key={`tab-header-${value}`}\n                label={tabLabel}\n                value={value}\n                icon={icon}\n                className={clsx('show-tab', className)}\n                {...(syncWithLocation ? propsForLink : {})} // to avoid TypeScript screams, see https://github.com/mui/material-ui/issues/9106#issuecomment-451270521\n                {...rest}\n            />\n        );\n    };\n\n    const renderContent = () => (\n        <Stack className={contentClassName} spacing={spacing} divider={divider}>\n            {React.Children.map(children, field =>\n                field && isValidElement<any>(field) ? (\n                    <Labeled\n                        key={field.props.source}\n                        className={clsx(\n                            'ra-field',\n                            field.props.source &&\n                                `ra-field-${field.props.source}`,\n                            field.props.className\n                        )}\n                    >\n                        {field}\n                    </Labeled>\n                ) : null\n            )}\n        </Stack>\n    );\n\n    return context === 'header' ? renderHeader() : renderContent();\n};\n\nTab.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    contentClassName: PropTypes.string,\n    context: PropTypes.oneOf(['header', 'content']),\n    count: PropTypes.node,\n    icon: PropTypes.element,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\n        .isRequired,\n    path: PropTypes.string,\n    spacing: PropTypes.any,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport interface TabProps extends Omit<MuiTabProps, 'children'> {\n    children: ReactNode;\n    contentClassName?: string;\n    context?: 'header' | 'content';\n    count?: ReactNode;\n    className?: string;\n    divider?: ReactNode;\n    icon?: ReactElement;\n    label: string | ReactElement;\n    path?: string;\n    record?: RaRecord;\n    spacing?: ResponsiveStyleValue<number | string>;\n    syncWithLocation?: boolean;\n    value?: string | number;\n}\n"]},"metadata":{},"sourceType":"module"}
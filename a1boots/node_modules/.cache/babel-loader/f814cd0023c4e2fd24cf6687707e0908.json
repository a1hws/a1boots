{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport inflection from 'inflection';\nimport { alpha, styled } from '@mui/material/styles';\nimport { useListContext, useTranslate, useUpdateMany, useRefresh, useNotify, useUnselectAll, useResourceContext } from 'ra-core';\nimport { Confirm } from '../layout';\nimport { Button } from './Button';\nexport var BulkUpdateWithConfirmButton = function (props) {\n  var notify = useNotify();\n  var refresh = useRefresh();\n  var translate = useTranslate();\n  var resource = useResourceContext(props);\n  var unselectAll = useUnselectAll(resource);\n\n  var _a = useState(false),\n      isOpen = _a[0],\n      setOpen = _a[1];\n\n  var selectedIds = useListContext(props).selectedIds;\n\n  var _b = props.confirmTitle,\n      confirmTitle = _b === void 0 ? 'ra.message.bulk_update_title' : _b,\n      _c = props.confirmContent,\n      confirmContent = _c === void 0 ? 'ra.message.bulk_update_content' : _c,\n      data = props.data,\n      _d = props.icon,\n      icon = _d === void 0 ? defaultIcon : _d,\n      _e = props.label,\n      label = _e === void 0 ? 'ra.action.update' : _e,\n      _f = props.mutationMode,\n      mutationMode = _f === void 0 ? 'pessimistic' : _f,\n      onClick = props.onClick,\n      _g = props.onSuccess,\n      onSuccess = _g === void 0 ? function () {\n    refresh();\n    notify('ra.notification.updated', {\n      type: 'info',\n      messageArgs: {\n        smart_count: selectedIds.length\n      },\n      undoable: mutationMode === 'undoable'\n    });\n    unselectAll();\n    setOpen(false);\n  } : _g,\n      _h = props.onError,\n      onError = _h === void 0 ? function (error) {\n    notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n      type: 'error',\n      messageArgs: {\n        _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n      }\n    });\n    setOpen(false);\n  } : _h,\n      rest = __rest(props, [\"confirmTitle\", \"confirmContent\", \"data\", \"icon\", \"label\", \"mutationMode\", \"onClick\", \"onSuccess\", \"onError\"]);\n\n  var _j = useUpdateMany(resource, {\n    ids: selectedIds,\n    data: data\n  }, {\n    onSuccess: onSuccess,\n    onError: onError,\n    mutationMode: mutationMode\n  }),\n      updateMany = _j[0],\n      isLoading = _j[1].isLoading;\n\n  var handleClick = function (e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n\n  var handleDialogClose = function () {\n    setOpen(false);\n  };\n\n  var handleUpdate = function (e) {\n    updateMany();\n\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n\n  return React.createElement(Fragment, null, React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label\n  }, sanitizeRestProps(rest)), icon), React.createElement(Confirm, {\n    isOpen: isOpen,\n    loading: isLoading,\n    title: confirmTitle,\n    content: confirmContent,\n    translateOptions: {\n      smart_count: selectedIds.length,\n      name: translate(\"resources.\".concat(resource, \".forcedCaseName\"), {\n        smart_count: selectedIds.length,\n        _: inflection.humanize(translate(\"resources.\".concat(resource, \".name\"), {\n          smart_count: selectedIds.length,\n          _: inflection.inflect(resource, selectedIds.length)\n        }), true)\n      })\n    },\n    onConfirm: handleUpdate,\n    onClose: handleDialogClose\n  }));\n};\n\nvar sanitizeRestProps = function (_a) {\n  var filterValues = _a.filterValues,\n      label = _a.label,\n      onSuccess = _a.onSuccess,\n      onError = _a.onError,\n      rest = __rest(_a, [\"filterValues\", \"label\", \"onSuccess\", \"onError\"]);\n\n  return rest;\n};\n\nBulkUpdateWithConfirmButton.propTypes = {\n  confirmTitle: PropTypes.string,\n  confirmContent: PropTypes.string,\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  icon: PropTypes.element,\n  data: PropTypes.any.isRequired,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable'])\n};\nvar PREFIX = 'RaBulkUpdateWithConfirmButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});\nvar defaultIcon = React.createElement(ActionUpdate, null);","map":{"version":3,"mappings":"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","names":["React","Fragment","useState","PropTypes","ActionUpdate","inflection","alpha","styled","useListContext","useTranslate","useUpdateMany","useRefresh","useNotify","useUnselectAll","useResourceContext","Confirm","Button","BulkUpdateWithConfirmButton","props","notify","refresh","translate","resource","unselectAll","isOpen","setOpen","selectedIds","_b","_c","confirmContent","data","_d","icon","defaultIcon","_e","label","_f","mutationMode","onClick","_g","onSuccess","type","messageArgs","smart_count","length","undoable","_h","onError","error","message","_","undefined","rest","ids","updateMany","isLoading","handleClick","e","stopPropagation","handleDialogClose","handleUpdate","StyledButton","__assign","sanitizeRestProps","loading","title","confirmTitle","content","translateOptions","name","humanize","inflect","onConfirm","onClose","_a","propTypes","string","arrayOf","any","element","isRequired","oneOf","PREFIX","overridesResolver","styles","root","theme","color","palette","primary","main","backgroundColor"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/BulkUpdateWithConfirmButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Fragment, useState, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport inflection from 'inflection';\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    useListContext,\n    useTranslate,\n    useUpdateMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n    useResourceContext,\n    MutationMode,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\n\nexport const BulkUpdateWithConfirmButton = (\n    props: BulkUpdateWithConfirmButtonProps\n) => {\n    const notify = useNotify();\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const resource = useResourceContext(props);\n    const unselectAll = useUnselectAll(resource);\n    const [isOpen, setOpen] = useState(false);\n    const { selectedIds } = useListContext(props);\n\n    const {\n        confirmTitle = 'ra.message.bulk_update_title',\n        confirmContent = 'ra.message.bulk_update_content',\n        data,\n        icon = defaultIcon,\n        label = 'ra.action.update',\n        mutationMode = 'pessimistic',\n        onClick,\n        onSuccess = () => {\n            refresh();\n            notify('ra.notification.updated', {\n                type: 'info',\n                messageArgs: { smart_count: selectedIds.length },\n                undoable: mutationMode === 'undoable',\n            });\n            unselectAll();\n            setOpen(false);\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'error',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                ? error.message\n                                : undefined,\n                    },\n                }\n            );\n            setOpen(false);\n        },\n        ...rest\n    } = props;\n\n    const [updateMany, { isLoading }] = useUpdateMany(\n        resource,\n        { ids: selectedIds, data },\n        {\n            onSuccess,\n            onError,\n            mutationMode,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleUpdate = e => {\n        updateMany();\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isLoading}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    smart_count: selectedIds.length,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: selectedIds.length,\n                        _: inflection.humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: selectedIds.length,\n                                _: inflection.inflect(\n                                    resource,\n                                    selectedIds.length\n                                ),\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleUpdate}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    filterValues,\n    label,\n    onSuccess,\n    onError,\n    ...rest\n}: Omit<\n    BulkUpdateWithConfirmButtonProps,\n    'resource' | 'selectedIds' | 'icon' | 'data'\n>) => rest;\n\nexport interface BulkUpdateWithConfirmButtonProps\n    extends BulkActionProps,\n        ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: string;\n    icon?: ReactElement;\n    data: any;\n    onSuccess?: () => void;\n    onError?: (error: any) => void;\n    mutationMode?: MutationMode;\n}\n\nBulkUpdateWithConfirmButton.propTypes = {\n    confirmTitle: PropTypes.string,\n    confirmContent: PropTypes.string,\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    icon: PropTypes.element,\n    data: PropTypes.any.isRequired,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n};\n\nconst PREFIX = 'RaBulkUpdateWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionUpdate />;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Datagrid } from '../list/datagrid/Datagrid';\nimport { ArrayField, BooleanField, DateField, EmailField, NumberField, ReferenceField, ReferenceArrayField, RichTextField, TextField, UrlField } from '../field';\nimport { SimpleShowLayout } from './SimpleShowLayout';\nexport var showFieldTypes = {\n  show: {\n    component: function (props) {\n      return React.createElement(SimpleShowLayout, __assign({}, props));\n    },\n    representation: function (_, children) {\n      return \"        <SimpleShowLayout>\\n\".concat(children.map(function (child) {\n        return \"            \".concat(child.getRepresentation());\n      }).join('\\n'), \"\\n        </SimpleShowLayout>\");\n    }\n  },\n  array: {\n    // eslint-disable-next-line react/display-name\n    component: function (_a) {\n      var children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n      return React.createElement(ArrayField, __assign({}, props), React.createElement(Datagrid, null, children));\n    },\n    representation: function (props, children) {\n      return \"<ArrayField source=\\\"\".concat(props.source, \"\\\"><Datagrid>\").concat(children.map(function (child) {\n        return child.getRepresentation();\n      }).join('\\n'), \"</Datagrid></ArrayField>\");\n    }\n  },\n  boolean: {\n    component: BooleanField,\n    representation: function (props) {\n      return \"<BooleanField source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  date: {\n    component: DateField,\n    representation: function (props) {\n      return \"<DateField source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  email: {\n    component: EmailField,\n    representation: function (props) {\n      return \"<EmailField source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  id: {\n    component: TextField,\n    representation: function (props) {\n      return \"<TextField source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  number: {\n    component: NumberField,\n    representation: function (props) {\n      return \"<NumberField source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  reference: {\n    component: ReferenceField,\n    representation: function (props) {\n      return \"<ReferenceField source=\\\"\".concat(props.source, \"\\\" reference=\\\"\").concat(props.reference, \"\\\" />\");\n    }\n  },\n  referenceChild: {\n    component: function (props) {\n      return React.createElement(TextField, __assign({\n        source: \"id\"\n      }, props));\n    },\n    representation: function () {\n      return \"<TextField source=\\\"id\\\" />\";\n    }\n  },\n  referenceArray: {\n    component: ReferenceArrayField,\n    representation: function (props) {\n      return \"<ReferenceArrayField source=\\\"\".concat(props.source, \"\\\" reference=\\\"\").concat(props.reference, \"\\\"><TextField source=\\\"id\\\" /></ReferenceArrayField>\");\n    }\n  },\n  referenceArrayChild: {\n    component: function (props) {\n      return React.createElement(TextField, __assign({\n        source: \"id\"\n      }, props));\n    },\n    representation: function () {\n      return \"<TextField source=\\\"id\\\" />\";\n    }\n  },\n  richText: {\n    component: RichTextField,\n    representation: function (props) {\n      return \"<RichTextField source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  string: {\n    component: TextField,\n    representation: function (props) {\n      return \"<TextField source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  url: {\n    component: UrlField,\n    representation: function (props) {\n      return \"<UrlField source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["React","Datagrid","ArrayField","BooleanField","DateField","EmailField","NumberField","ReferenceField","ReferenceArrayField","RichTextField","TextField","UrlField","SimpleShowLayout","showFieldTypes","show","component","props","__assign","representation","_","children","map","child","getRepresentation","join","array","_a","source","concat","boolean","date","email","id","number","reference","referenceChild","referenceArray","referenceArrayChild","richText","string","url"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/detail/showFieldTypes.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { Datagrid } from '../list/datagrid/Datagrid';\nimport {\n    ArrayField,\n    BooleanField,\n    DateField,\n    EmailField,\n    NumberField,\n    ReferenceField,\n    ReferenceFieldProps,\n    ReferenceArrayField,\n    ReferenceArrayFieldProps,\n    RichTextField,\n    TextField,\n    UrlField,\n} from '../field';\nimport { SimpleShowLayout, SimpleShowLayoutProps } from './SimpleShowLayout';\nimport { InferredElement, InferredTypeMap, InputProps } from 'ra-core';\n\nexport const showFieldTypes: InferredTypeMap = {\n    show: {\n        component: (props: SimpleShowLayoutProps) => (\n            <SimpleShowLayout {...props} />\n        ), // eslint-disable-line react/display-name\n        representation: (_, children) => `        <SimpleShowLayout>\n${children.map(child => `            ${child.getRepresentation()}`).join('\\n')}\n        </SimpleShowLayout>`,\n    },\n    array: {\n        // eslint-disable-next-line react/display-name\n        component: ({\n            children,\n            ...props\n        }: { children: ReactNode } & InputProps) => (\n            <ArrayField {...props}>\n                <Datagrid>{children}</Datagrid>\n            </ArrayField>\n        ),\n        representation: (props: InputProps, children: InferredElement[]) =>\n            `<ArrayField source=\"${\n                props.source\n            }\"><Datagrid>${children\n                .map(child => child.getRepresentation())\n                .join('\\n')}</Datagrid></ArrayField>`,\n    },\n    boolean: {\n        component: BooleanField,\n        representation: (props: InputProps) =>\n            `<BooleanField source=\"${props.source}\" />`,\n    },\n    date: {\n        component: DateField,\n        representation: (props: InputProps) =>\n            `<DateField source=\"${props.source}\" />`,\n    },\n    email: {\n        component: EmailField,\n        representation: (props: InputProps) =>\n            `<EmailField source=\"${props.source}\" />`,\n    },\n    id: {\n        component: TextField,\n        representation: (props: InputProps) =>\n            `<TextField source=\"${props.source}\" />`,\n    },\n    number: {\n        component: NumberField,\n        representation: (props: InputProps) =>\n            `<NumberField source=\"${props.source}\" />`,\n    },\n    reference: {\n        component: ReferenceField,\n        representation: (props: ReferenceFieldProps) =>\n            `<ReferenceField source=\"${props.source}\" reference=\"${props.reference}\" />`,\n    },\n    referenceChild: {\n        component: (props: { children: ReactNode } & InputProps) => (\n            <TextField source=\"id\" {...props} />\n        ), // eslint-disable-line react/display-name\n        representation: () => `<TextField source=\"id\" />`,\n    },\n    referenceArray: {\n        component: ReferenceArrayField,\n        representation: (props: ReferenceArrayFieldProps) =>\n            `<ReferenceArrayField source=\"${props.source}\" reference=\"${props.reference}\"><TextField source=\"id\" /></ReferenceArrayField>`,\n    },\n    referenceArrayChild: {\n        component: (props: { children: ReactNode } & InputProps) => (\n            <TextField source=\"id\" {...props} />\n        ), // eslint-disable-line react/display-name\n        representation: () => `<TextField source=\"id\" />`,\n    },\n    richText: {\n        component: RichTextField,\n        representation: (props: InputProps) =>\n            `<RichTextField source=\"${props.source}\" />`,\n    },\n    string: {\n        component: TextField,\n        representation: (props: InputProps) =>\n            `<TextField source=\"${props.source}\" />`,\n    },\n    url: {\n        component: UrlField,\n        representation: (props: InputProps) =>\n            `<UrlField source=\"${props.source}\" />`,\n    },\n};\n"]},"metadata":{},"sourceType":"module"}
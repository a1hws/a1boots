{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useState, useEffect } from 'react';\nimport { usePreference } from './usePreference';\n/**\n * Get the props for a preference input that changes the value on blur\n *\n * Relies on `usePreference`, so it's using the PreferenceKeyContext\n *\n * @example\n * const FontSizePreferenceInput = () => {\n *     const field = usePreferenceInput('ui.font.size', 10);\n *     return (\n *         <div>\n *             <label for=\"font-size\">Font size</label>\n *             <input id=\"font-size\" {...field} />\n *         </div>\n *     );\n * }\n */\n\nexport var usePreferenceInput = function usePreferenceInput(key, defaultValue) {\n  var _a = usePreference(key, defaultValue),\n      valueFromStore = _a[0],\n      setValueFromStore = _a[1];\n\n  var _b = useState(valueFromStore),\n      value = _b[0],\n      setValue = _b[1];\n\n  useEffect(function () {\n    setValue(valueFromStore || defaultValue);\n  }, [valueFromStore, defaultValue]);\n\n  var onChange = function onChange(event) {\n    setValue(event.target.value === '' ? defaultValue : event.target.value);\n  };\n\n  var onBlur = function onBlur() {\n    setValueFromStore(value);\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var _a;\n\n    if (event.key === 'Enter') {\n      setValueFromStore(value);\n      var form = event.target.form;\n\n      if (form) {\n        var index = __spreadArray([], form, true).indexOf(event.target);\n\n        (_a = form.elements[index + 1]) === null || _a === void 0 ? void 0 : _a.focus();\n      }\n\n      event.preventDefault();\n    }\n  };\n\n  return {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AAEA;;;;;;;;;;;;;;;;;AAgBA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,GAAD,EAAeC,YAAf,EAAiC;EACzD,SAAsCH,aAAa,CACrDE,GADqD,EAErDC,YAFqD,CAAnD;EAAA,IAACC,cAAc,QAAf;EAAA,IAAiBC,iBAAiB,QAAlC;;EAIA,SAAoBP,QAAQ,CAACM,cAAD,CAA5B;EAAA,IAACE,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB;;EACNR,SAAS,CAAC;IACNQ,QAAQ,CAACH,cAAc,IAAID,YAAnB,CAAR;EACH,CAFQ,EAEN,CAACC,cAAD,EAAiBD,YAAjB,CAFM,CAAT;;EAIA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,QAAK;IAClBD,QAAQ,CAACE,KAAK,CAACC,MAAN,CAAaJ,KAAb,KAAuB,EAAvB,GAA4BH,YAA5B,GAA2CM,KAAK,CAACC,MAAN,CAAaJ,KAAzD,CAAR;EACH,CAFD;;EAIA,IAAMK,MAAM,GAAG,SAATA,MAAS;IACXN,iBAAiB,CAACC,KAAD,CAAjB;EACH,CAFD;;EAIA,IAAMM,SAAS,GAAG,SAAZA,SAAY,QAAK;;;IACnB,IAAIH,KAAK,CAACP,GAAN,KAAc,OAAlB,EAA2B;MACvBG,iBAAiB,CAACC,KAAD,CAAjB;MACA,IAAMO,IAAI,GAAGJ,KAAK,CAACC,MAAN,CAAaG,IAA1B;;MACA,IAAIA,IAAJ,EAAU;QACN,IAAMC,KAAK,GAAGC,kBAAIF,IAAJ,EAAQ,IAAR,EAAUG,OAAV,CAAkBP,KAAK,CAACC,MAAxB,CAAd;;QACA,UAAI,CAACO,QAAL,CAAcH,KAAK,GAAG,CAAtB,OAAwB,IAAxB,IAAwBI,aAAxB,GAAwB,MAAxB,GAAwBA,GAAEC,KAAF,EAAxB;MACH;;MACDV,KAAK,CAACW,cAAN;IACH;EACJ,CAVD;;EAYA,OAAO;IAAEd,KAAK,OAAP;IAASE,QAAQ,UAAjB;IAAmBG,MAAM,QAAzB;IAA2BC,SAAS;EAApC,CAAP;AACH,CA/BM","names":["useState","useEffect","usePreference","usePreferenceInput","key","defaultValue","valueFromStore","setValueFromStore","value","setValue","onChange","event","target","onBlur","onKeyDown","form","index","__spreadArray","indexOf","elements","_a","focus","preventDefault"],"sources":["/var/www/a1boots/node_modules/ra-core/src/preferences/usePreferenceInput.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { usePreference } from './usePreference';\n\n/**\n * Get the props for a preference input that changes the value on blur\n *\n * Relies on `usePreference`, so it's using the PreferenceKeyContext\n *\n * @example\n * const FontSizePreferenceInput = () => {\n *     const field = usePreferenceInput('ui.font.size', 10);\n *     return (\n *         <div>\n *             <label for=\"font-size\">Font size</label>\n *             <input id=\"font-size\" {...field} />\n *         </div>\n *     );\n * }\n */\nexport const usePreferenceInput = (key?: string, defaultValue?: any) => {\n    const [valueFromStore, setValueFromStore] = usePreference(\n        key,\n        defaultValue\n    );\n    const [value, setValue] = useState(valueFromStore);\n    useEffect(() => {\n        setValue(valueFromStore || defaultValue);\n    }, [valueFromStore, defaultValue]);\n\n    const onChange = event => {\n        setValue(event.target.value === '' ? defaultValue : event.target.value);\n    };\n\n    const onBlur = () => {\n        setValueFromStore(value);\n    };\n\n    const onKeyDown = event => {\n        if (event.key === 'Enter') {\n            setValueFromStore(value);\n            const form = event.target.form;\n            if (form) {\n                const index = [...form].indexOf(event.target);\n                form.elements[index + 1]?.focus();\n            }\n            event.preventDefault();\n        }\n    };\n\n    return { value, onChange, onBlur, onKeyDown };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { useResourceDefinitions } from './useResourceDefinitions';\nimport { useResourceContext } from './useResourceContext';\n/**\n * Hook to get the definition of a given resource\n *\n * @example // Get the current resource definition (based on ResourceContext)\n *\n * const definition = useResourceDefinition();\n * console.log(definition);\n * // {\n * //   name: 'posts',\n * //   hasList: true,\n * //   hasEdit: true,\n * //   hasShow: true,\n * //   hasCreate: true,\n * //   options: {},\n * //   icon: PostIcon,\n * // }\n *\n * @example // Pass a resource prop to check a different resource definition\n *\n * const definition = useResourceDefinition({ resource: 'posts' });\n */\n\nexport var useResourceDefinition = function useResourceDefinition(props) {\n  var resource = useResourceContext(props);\n  var resourceDefinitions = useResourceDefinitions();\n\n  var _a = props || {},\n      hasCreate = _a.hasCreate,\n      hasEdit = _a.hasEdit,\n      hasList = _a.hasList,\n      hasShow = _a.hasShow,\n      recordRepresentation = _a.recordRepresentation;\n\n  var definition = useMemo(function () {\n    return defaults({}, {\n      hasCreate: hasCreate,\n      hasEdit: hasEdit,\n      hasList: hasList,\n      hasShow: hasShow,\n      recordRepresentation: recordRepresentation\n    }, resourceDefinitions[resource]);\n  }, [resource, resourceDefinitions, hasCreate, hasEdit, hasList, hasShow, recordRepresentation]);\n  return definition;\n};","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAGA;;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAGjCC,KAHiC,EAGG;EAEpC,IAAMC,QAAQ,GAAGH,kBAAkB,CAACE,KAAD,CAAnC;EACA,IAAME,mBAAmB,GAAGL,sBAAsB,EAAlD;;EACM,SACFG,KAAK,IAAI,EADP;EAAA,IAAEG,SAAS,eAAX;EAAA,IAAaC,OAAO,aAApB;EAAA,IAAsBC,OAAO,aAA7B;EAAA,IAA+BC,OAAO,aAAtC;EAAA,IAAwCC,oBAAoB,0BAA5D;;EAGN,IAAMC,UAAU,GAAGb,OAAO,CAAC;IACvB,OAAOC,QAAQ,CACX,EADW,EAEX;MACIO,SAAS,WADb;MAEIC,OAAO,SAFX;MAGIC,OAAO,SAHX;MAIIC,OAAO,SAJX;MAKIC,oBAAoB;IALxB,CAFW,EASXL,mBAAmB,CAACD,QAAD,CATR,CAAf;EAWH,CAZyB,EAYvB,CACCA,QADD,EAECC,mBAFD,EAGCC,SAHD,EAICC,OAJD,EAKCC,OALD,EAMCC,OAND,EAOCC,oBAPD,CAZuB,CAA1B;EAsBA,OAAOC,UAAP;AACH,CAjCM","names":["useMemo","defaults","useResourceDefinitions","useResourceContext","useResourceDefinition","props","resource","resourceDefinitions","hasCreate","hasEdit","hasList","hasShow","recordRepresentation","definition"],"sources":["/var/www/a1boots/node_modules/ra-core/src/core/useResourceDefinition.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport defaults from 'lodash/defaults';\n\nimport { useResourceDefinitions } from './useResourceDefinitions';\nimport { useResourceContext } from './useResourceContext';\nimport { ResourceDefinition, ResourceOptions } from '../types';\n\n/**\n * Hook to get the definition of a given resource\n *\n * @example // Get the current resource definition (based on ResourceContext)\n *\n * const definition = useResourceDefinition();\n * console.log(definition);\n * // {\n * //   name: 'posts',\n * //   hasList: true,\n * //   hasEdit: true,\n * //   hasShow: true,\n * //   hasCreate: true,\n * //   options: {},\n * //   icon: PostIcon,\n * // }\n *\n * @example // Pass a resource prop to check a different resource definition\n *\n * const definition = useResourceDefinition({ resource: 'posts' });\n */\nexport const useResourceDefinition = <\n    OptionsType extends ResourceOptions = any\n>(\n    props?: UseResourceDefinitionOptions\n): ResourceDefinition<OptionsType> => {\n    const resource = useResourceContext(props);\n    const resourceDefinitions = useResourceDefinitions();\n    const { hasCreate, hasEdit, hasList, hasShow, recordRepresentation } =\n        props || {};\n\n    const definition = useMemo(() => {\n        return defaults(\n            {},\n            {\n                hasCreate,\n                hasEdit,\n                hasList,\n                hasShow,\n                recordRepresentation,\n            },\n            resourceDefinitions[resource]\n        );\n    }, [\n        resource,\n        resourceDefinitions,\n        hasCreate,\n        hasEdit,\n        hasList,\n        hasShow,\n        recordRepresentation,\n    ]);\n\n    return definition;\n};\n\nexport interface UseResourceDefinitionOptions {\n    readonly resource?: string;\n    readonly hasList?: boolean;\n    readonly hasEdit?: boolean;\n    readonly hasShow?: boolean;\n    readonly hasCreate?: boolean;\n    readonly recordRepresentation?:\n        | string\n        | React.ReactElement\n        | ((record: any) => string);\n}\n"]},"metadata":{},"sourceType":"module"}
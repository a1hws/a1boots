{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as React from 'react';\nimport { useStore, useTranslate, useResourceContext } from 'ra-core';\nimport { Box, Button, Popover, useMediaQuery, Tooltip, IconButton } from '@mui/material';\nimport ViewWeekIcon from '@mui/icons-material/ViewWeek';\nimport { FieldToggle } from '../../preferences';\nimport { styled } from '@mui/material/styles';\n/**\n * Renders a button that lets users show / hide columns in a configurable datagrid\n *\n * @example\n * import { SelectColumnsButton, DatagridConfigurable } from 'react-admin';\n *\n * const PostListActions = () => (\n *   <TopToolbar>\n        <SelectColumnsButton />\n        <FilterButton />\n *   </TopToolbar>\n * );\n *\n * const PostList = () => (\n *   <List actions={<PostListActions />}>\n *     <DatagridConfigurable>\n *       <TextField source=\"title\" />\n *       <TextField source=\"author\" />\n         ...\n *     </DatagridConfigurable>\n *   </List>\n * );\n */\n\nexport var SelectColumnsButton = function SelectColumnsButton(props) {\n  var preferenceKey = props.preferenceKey;\n  var resource = useResourceContext(props);\n  var finalPreferenceKey = preferenceKey || \"\".concat(resource, \".datagrid\");\n\n  var _a = React.useState(null),\n      anchorEl = _a[0],\n      setAnchorEl = _a[1];\n\n  var _b = useStore(\"preferences.\".concat(finalPreferenceKey, \".availableColumns\"), []),\n      availableColumns = _b[0],\n      setAvailableColumns = _b[1];\n\n  var omit = useStore(\"preferences.\".concat(finalPreferenceKey, \".omit\"), [])[0];\n\n  var _c = useStore(\"preferences.\".concat(finalPreferenceKey, \".columns\"), availableColumns.filter(function (column) {\n    return !(omit === null || omit === void 0 ? void 0 : omit.includes(column.source));\n  }).map(function (column) {\n    return column.index;\n  })),\n      columns = _c[0],\n      setColumns = _c[1];\n\n  var translate = useTranslate();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  });\n  var title = translate('ra.action.select_columns', {\n    _: 'Columns'\n  });\n\n  var handleClick = function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var handleToggle = function handleToggle(event) {\n    if (event.target.checked) {\n      // add the column at the right position\n      setColumns(availableColumns.filter(function (column) {\n        return column.index === event.target.name || columns.includes(column.index);\n      }).map(function (column) {\n        return column.index;\n      }));\n    } else {\n      setColumns(columns.filter(function (index) {\n        return index !== event.target.name;\n      }));\n    }\n  };\n\n  var handleMove = function handleMove(index1, index2) {\n    var index1Pos = availableColumns.findIndex( // eslint-disable-next-line eqeqeq\n    function (field) {\n      return field.index == index1;\n    });\n    var index2Pos = availableColumns.findIndex( // eslint-disable-next-line eqeqeq\n    function (field) {\n      return field.index == index2;\n    });\n\n    if (index1Pos === -1 || index2Pos === -1) {\n      return;\n    }\n\n    var newAvailableColumns;\n\n    if (index1Pos > index2Pos) {\n      newAvailableColumns = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], availableColumns.slice(0, index2Pos), true), [availableColumns[index1Pos]], false), availableColumns.slice(index2Pos, index1Pos), true), availableColumns.slice(index1Pos + 1), true);\n    } else {\n      newAvailableColumns = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], availableColumns.slice(0, index1Pos), true), availableColumns.slice(index1Pos + 1, index2Pos + 1), true), [availableColumns[index1Pos]], false), availableColumns.slice(index2Pos + 1), true);\n    }\n\n    setAvailableColumns(newAvailableColumns);\n    setColumns(function (columns) {\n      return newAvailableColumns.filter(function (column) {\n        return columns.includes(column.index);\n      }).map(function (column) {\n        return column.index;\n      });\n    });\n  };\n\n  return React.createElement(React.Fragment, null, isXSmall ? React.createElement(Tooltip, {\n    title: title\n  }, React.createElement(IconButton, __assign({\n    \"aria-label\": title,\n    color: \"primary\",\n    onClick: handleClick,\n    size: \"large\"\n  }, sanitizeRestProps(props)), React.createElement(ViewWeekIcon, null))) : React.createElement(StyledButton, __assign({\n    size: \"small\",\n    onClick: handleClick,\n    startIcon: React.createElement(ViewWeekIcon, null)\n  }, sanitizeRestProps(props)), title), React.createElement(Popover, {\n    open: Boolean(anchorEl),\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    }\n  }, React.createElement(Box, {\n    p: 1\n  }, availableColumns.map(function (column) {\n    return React.createElement(FieldToggle, {\n      key: column.index,\n      source: column.source,\n      label: column.label,\n      index: column.index,\n      selected: columns.includes(column.index),\n      onToggle: handleToggle,\n      onMove: handleMove\n    });\n  }))));\n};\nvar StyledButton = styled(Button, {\n  name: 'RaSelectColumnsButton',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  '&.MuiButton-sizeSmall': {\n    // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n    lineHeight: 1.5\n  }\n});\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var _b = _a.resource,\n      resource = _b === void 0 ? null : _b,\n      _c = _a.preferenceKey,\n      preferenceKey = _c === void 0 ? null : _c,\n      rest = __rest(_a, [\"resource\", \"preferenceKey\"]);\n\n  return rest;\n};","map":{"version":3,"mappings":"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","names":["React","useStore","useTranslate","useResourceContext","Box","Button","Popover","useMediaQuery","Tooltip","IconButton","ViewWeekIcon","FieldToggle","styled","SelectColumnsButton","props","resource","finalPreferenceKey","preferenceKey","useState","anchorEl","setAnchorEl","availableColumns","setAvailableColumns","filter","omit","includes","column","source","map","index","columns","setColumns","translate","isXSmall","theme","breakpoints","down","title","_","handleClick","event","currentTarget","handleClose","handleToggle","target","checked","name","handleMove","index1","index2","index1Pos","findIndex","index2Pos","newAvailableColumns","slice","__assign","color","onClick","size","sanitizeRestProps","StyledButton","startIcon","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","p","key","label","selected","onToggle","onMove","overridesResolver","styles","root","lineHeight","_a","_b","_c","rest"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/datagrid/SelectColumnsButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useStore, useTranslate, useResourceContext } from 'ra-core';\nimport {\n    Box,\n    Button,\n    Popover,\n    useMediaQuery,\n    Theme,\n    Tooltip,\n    IconButton,\n} from '@mui/material';\nimport ViewWeekIcon from '@mui/icons-material/ViewWeek';\n\nimport { FieldToggle } from '../../preferences';\nimport { ConfigurableDatagridColumn } from './DatagridConfigurable';\nimport { styled } from '@mui/material/styles';\n\n/**\n * Renders a button that lets users show / hide columns in a configurable datagrid\n *\n * @example\n * import { SelectColumnsButton, DatagridConfigurable } from 'react-admin';\n *\n * const PostListActions = () => (\n *   <TopToolbar>\n        <SelectColumnsButton />\n        <FilterButton />\n *   </TopToolbar>\n * );\n *\n * const PostList = () => (\n *   <List actions={<PostListActions />}>\n *     <DatagridConfigurable>\n *       <TextField source=\"title\" />\n *       <TextField source=\"author\" />\n         ...\n *     </DatagridConfigurable>\n *   </List>\n * );\n */\nexport const SelectColumnsButton = (props: SelectColumnsButtonProps) => {\n    const { preferenceKey } = props;\n\n    const resource = useResourceContext(props);\n    const finalPreferenceKey = preferenceKey || `${resource}.datagrid`;\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [availableColumns, setAvailableColumns] = useStore<\n        ConfigurableDatagridColumn[]\n    >(`preferences.${finalPreferenceKey}.availableColumns`, []);\n    const [omit] = useStore<string[]>(\n        `preferences.${finalPreferenceKey}.omit`,\n        []\n    );\n    const [columns, setColumns] = useStore<string[]>(\n        `preferences.${finalPreferenceKey}.columns`,\n        availableColumns\n            .filter(column => !omit?.includes(column.source))\n            .map(column => column.index)\n    );\n    const translate = useTranslate();\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n\n    const title = translate('ra.action.select_columns', { _: 'Columns' });\n\n    const handleClick = (event): void => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (): void => {\n        setAnchorEl(null);\n    };\n\n    const handleToggle = event => {\n        if (event.target.checked) {\n            // add the column at the right position\n            setColumns(\n                availableColumns\n                    .filter(\n                        column =>\n                            column.index === event.target.name ||\n                            columns.includes(column.index)\n                    )\n                    .map(column => column.index)\n            );\n        } else {\n            setColumns(columns.filter(index => index !== event.target.name));\n        }\n    };\n\n    const handleMove = (index1, index2) => {\n        const index1Pos = availableColumns.findIndex(\n            // eslint-disable-next-line eqeqeq\n            field => field.index == index1\n        );\n        const index2Pos = availableColumns.findIndex(\n            // eslint-disable-next-line eqeqeq\n            field => field.index == index2\n        );\n        if (index1Pos === -1 || index2Pos === -1) {\n            return;\n        }\n        let newAvailableColumns;\n        if (index1Pos > index2Pos) {\n            newAvailableColumns = [\n                ...availableColumns.slice(0, index2Pos),\n                availableColumns[index1Pos],\n                ...availableColumns.slice(index2Pos, index1Pos),\n                ...availableColumns.slice(index1Pos + 1),\n            ];\n        } else {\n            newAvailableColumns = [\n                ...availableColumns.slice(0, index1Pos),\n                ...availableColumns.slice(index1Pos + 1, index2Pos + 1),\n                availableColumns[index1Pos],\n                ...availableColumns.slice(index2Pos + 1),\n            ];\n        }\n        setAvailableColumns(newAvailableColumns);\n        setColumns(columns =>\n            newAvailableColumns\n                .filter(column => columns.includes(column.index))\n                .map(column => column.index)\n        );\n    };\n\n    return (\n        <>\n            {isXSmall ? (\n                <Tooltip title={title}>\n                    <IconButton\n                        aria-label={title}\n                        color=\"primary\"\n                        onClick={handleClick}\n                        size=\"large\"\n                        {...sanitizeRestProps(props)}\n                    >\n                        <ViewWeekIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <StyledButton\n                    size=\"small\"\n                    onClick={handleClick}\n                    startIcon={<ViewWeekIcon />}\n                    {...sanitizeRestProps(props)}\n                >\n                    {title}\n                </StyledButton>\n            )}\n            <Popover\n                open={Boolean(anchorEl)}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <Box p={1}>\n                    {availableColumns.map(column => (\n                        <FieldToggle\n                            key={column.index}\n                            source={column.source}\n                            label={column.label}\n                            index={column.index}\n                            selected={columns.includes(column.index)}\n                            onToggle={handleToggle}\n                            onMove={handleMove}\n                        />\n                    ))}\n                </Box>\n            </Popover>\n        </>\n    );\n};\n\nconst StyledButton = styled(Button, {\n    name: 'RaSelectColumnsButton',\n    overridesResolver: (props, styles) => styles.root,\n})({\n    '&.MuiButton-sizeSmall': {\n        // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n        lineHeight: 1.5,\n    },\n});\n\nconst sanitizeRestProps = ({\n    resource = null,\n    preferenceKey = null,\n    ...rest\n}) => rest;\n\nexport interface SelectColumnsButtonProps\n    extends React.HtmlHTMLAttributes<HTMLDivElement> {\n    resource?: string;\n    preferenceKey?: string;\n}\n"]},"metadata":{},"sourceType":"module"}
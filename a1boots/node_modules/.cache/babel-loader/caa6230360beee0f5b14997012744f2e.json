{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\nimport { useResourceDefinition } from 'ra-core';\n/**\n * Action Toolbar for the Create view\n *\n * Internal component. If you want to add or remove actions for a Create view,\n * write your own CreateActions Component. Then, in the <Create> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\n *\n *     const PostCreateActions = () => (\n *         <TopToolbar>\n *             <ListButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostCreate = (props) => (\n *         <Create actions={<PostCreateActions />} {...props}>\n *             ...\n *         </Create>\n *     );\n */\n\nexport var CreateActions = function (_a) {\n  var className = _a.className,\n      rest = __rest(_a, [\"className\"]);\n\n  var hasList = useResourceDefinition(rest).hasList;\n  return React.createElement(TopToolbar, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), hasList && React.createElement(ListButton, null));\n};\n\nvar sanitizeRestProps = function (_a) {\n  var _b = _a.className,\n      className = _b === void 0 ? null : _b,\n      _c = _a.hasList,\n      hasList = _c === void 0 ? null : _c,\n      _d = _a.resource,\n      resource = _d === void 0 ? null : _d,\n      rest = __rest(_a, [\"className\", \"hasList\", \"resource\"]);\n\n  return rest;\n};\n\nCreateActions.propTypes = {\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  resource: PropTypes.string\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,qBAAT,QAAsC,SAAtC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,IAAMC,aAAa,GAAG,UAACC,EAAD,EAA2C;EAAxC,aAAS,eAAT;EAAA,IAAcC,IAAI,cAApB,aAAoB,CAAlB;;EACpB,WAAO,GAAKH,qBAAqB,CAACG,IAAD,CAArB,CAA2BC,OAAvC;EACR,OACIR,oBAACE,UAAD,EAAWO;IAACC,SAAS,EAAEA;EAAZ,GAA2BC,iBAAiB,CAACJ,IAAD,CAA5C,CAAX,EACKC,OAAO,IAAIR,oBAACG,UAAD,EAAW,IAAX,CADhB,CADJ;AAKH,CAPM;;AASP,IAAMQ,iBAAiB,GAAG,UAACL,EAAD,EAKzB;EAJG;EAAA,aAAS,mBAAG,IAAH,GAAOM,EAAhB;EAAA,IACAC,eADA;EAAA,IACAL,OAAO,mBAAG,IAAH,GAAOK,EADd;EAAA,IAEAC,gBAFA;EAAA,IAEAC,QAAQ,mBAAG,IAAH,GAAOD,EAFf;EAAA,IAGGP,IAAI,cAJgB,oCAIhB,CAHP;;EAIE;AAAI,CALV;;AAgBAF,aAAa,CAACW,SAAd,GAA0B;EACtBN,SAAS,EAAET,SAAS,CAACgB,MADC;EAEtBC,SAAS,EAAEjB,SAAS,CAACkB,IAFC;EAGtBC,OAAO,EAAEnB,SAAS,CAACkB,IAHG;EAItBE,OAAO,EAAEpB,SAAS,CAACkB,IAJG;EAKtBX,OAAO,EAAEP,SAAS,CAACkB,IALG;EAMtBJ,QAAQ,EAAEd,SAAS,CAACgB;AANE,CAA1B","names":["React","PropTypes","TopToolbar","ListButton","useResourceDefinition","CreateActions","_a","rest","hasList","__assign","className","sanitizeRestProps","_b","_c","_d","resource","propTypes","string","hasCreate","bool","hasEdit","hasShow"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/detail/CreateActions.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\nimport { useResourceDefinition } from 'ra-core';\n\n/**\n * Action Toolbar for the Create view\n *\n * Internal component. If you want to add or remove actions for a Create view,\n * write your own CreateActions Component. Then, in the <Create> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\n *\n *     const PostCreateActions = () => (\n *         <TopToolbar>\n *             <ListButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostCreate = (props) => (\n *         <Create actions={<PostCreateActions />} {...props}>\n *             ...\n *         </Create>\n *     );\n */\nexport const CreateActions = ({ className, ...rest }: CreateActionsProps) => {\n    const { hasList } = useResourceDefinition(rest);\n    return (\n        <TopToolbar className={className} {...sanitizeRestProps(rest)}>\n            {hasList && <ListButton />}\n        </TopToolbar>\n    );\n};\n\nconst sanitizeRestProps = ({\n    className = null,\n    hasList = null,\n    resource = null,\n    ...rest\n}) => rest;\n\nexport interface CreateActionsProps {\n    className?: string;\n    hasCreate?: boolean;\n    hasEdit?: boolean;\n    hasList?: boolean;\n    hasShow?: boolean;\n    resource?: string;\n}\n\nCreateActions.propTypes = {\n    className: PropTypes.string,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    resource: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport { useParams } from 'react-router-dom';\nexport var TabbedFormTabs = function TabbedFormTabs(props) {\n  var children = props.children,\n      url = props.url,\n      syncWithLocation = props.syncWithLocation,\n      value = props.value,\n      rest = __rest(props, [\"children\", \"url\", \"syncWithLocation\", \"value\"]);\n\n  var params = useParams(); // params will include eventual parameters from the root pathname and * for the remaining part\n  // which should match the tabs paths\n\n  var tabValue = params['*'];\n  return React.createElement(Tabs, __assign({\n    value: syncWithLocation ? tabValue : value,\n    indicatorColor: \"primary\"\n  }, rest), Children.map(children, function (tab, index) {\n    if (!isValidElement(tab)) return null; // Builds the full tab which is the concatenation of the last matched route in the\n    // TabbedShowLayout hierarchy (ex: '/posts/create', '/posts/12', , '/posts/12/show')\n    // and the tab path.\n    // This will be used as the Tab's value\n\n    var tabPath = getTabbedFormTabFullPath(tab, index);\n    return cloneElement(tab, {\n      intent: 'header',\n      value: syncWithLocation ? tabPath : index,\n      syncWithLocation: syncWithLocation\n    });\n  }));\n};\nTabbedFormTabs.propTypes = {\n  children: PropTypes.node,\n  url: PropTypes.string,\n  tabsWithErrors: PropTypes.arrayOf(PropTypes.string)\n};\nexport var getTabbedFormTabFullPath = function getTabbedFormTabFullPath(tab, index) {\n  return tab.props.path != null ? tab.props.path : index > 0 ? index.toString() : '';\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,cAAjC,QAAqE,OAArE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAgC,oBAAhC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAA2B;EAC7C,YAAQ,GAA4CA,KAAK,SAAzD;EAAA,IAAUC,GAAG,GAAuCD,KAAK,IAAzD;EAAA,IAAeE,gBAAgB,GAAqBF,KAAK,iBAAzD;EAAA,IAAiCG,KAAK,GAAcH,KAAK,MAAzD;EAAA,IAA2CI,IAAI,UAAKJ,KAAL,EAAjD,gDAAiD,CAA/C;;EAER,IAAMK,MAAM,GAAGP,SAAS,EAAxB,CAHqD,CAKrD;EACA;;EACA,IAAMQ,QAAQ,GAAGD,MAAM,CAAC,GAAD,CAAvB;EAEA,OACIb,oBAACK,IAAD,EAAKU;IACDJ,KAAK,EAAED,gBAAgB,GAAGI,QAAH,GAAcH,KADpC;IAEDK,cAAc,EAAC;EAFd,GAGGJ,IAHH,CAAL,EAKKX,QAAQ,CAACgB,GAAT,CAAaC,QAAb,EAAuB,UAACC,GAAD,EAAoBC,KAApB,EAAyB;IAC7C,IAAI,CAACjB,cAAc,CAAMgB,GAAN,CAAnB,EAA+B,OAAO,IAAP,CADc,CAG7C;IACA;IACA;IACA;;IACA,IAAME,OAAO,GAAGC,wBAAwB,CAACH,GAAD,EAAMC,KAAN,CAAxC;IAEA,OAAOlB,YAAY,CAACiB,GAAD,EAAM;MACrBI,MAAM,EAAE,QADa;MAErBZ,KAAK,EAAED,gBAAgB,GAAGW,OAAH,GAAaD,KAFf;MAGrBV,gBAAgB;IAHK,CAAN,CAAnB;EAKH,CAdA,CALL,CADJ;AAuBH,CAhCM;AAkCPH,cAAc,CAACiB,SAAf,GAA2B;EACvBN,QAAQ,EAAEd,SAAS,CAACqB,IADG;EAEvBhB,GAAG,EAAEL,SAAS,CAACsB,MAFQ;EAGvBC,cAAc,EAAEvB,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAACsB,MAA5B;AAHO,CAA3B;AAMA,OAAO,IAAMJ,wBAAwB,GAAG,SAA3BA,wBAA2B,CACpCH,GADoC,EAEpCC,KAFoC,EAEvB;EAEb,UAAG,CAACZ,KAAJ,CAAUqB,IAAV,IAAkB,IAAlB,GAAyBV,GAAG,CAACX,KAAJ,CAAUqB,IAAnC,GAA0CT,KAAK,GAAG,CAAR,GAAYA,KAAK,CAACU,QAAN,EAAZ,GAA+B,EAAzE;AAA2E,CAJxE","names":["React","Children","cloneElement","isValidElement","PropTypes","Tabs","useParams","TabbedFormTabs","props","url","syncWithLocation","value","rest","params","tabValue","__assign","indicatorColor","map","children","tab","index","tabPath","getTabbedFormTabFullPath","intent","propTypes","node","string","tabsWithErrors","arrayOf","path","toString"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/form/TabbedFormTabs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Children, cloneElement, isValidElement, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs, { TabsProps } from '@mui/material/Tabs';\nimport { useParams } from 'react-router-dom';\n\nexport const TabbedFormTabs = (props: TabbedFormTabsProps) => {\n    const { children, url, syncWithLocation, value, ...rest } = props;\n\n    const params = useParams();\n\n    // params will include eventual parameters from the root pathname and * for the remaining part\n    // which should match the tabs paths\n    const tabValue = params['*'];\n\n    return (\n        <Tabs\n            value={syncWithLocation ? tabValue : value}\n            indicatorColor=\"primary\"\n            {...rest}\n        >\n            {Children.map(children, (tab: ReactElement, index) => {\n                if (!isValidElement<any>(tab)) return null;\n\n                // Builds the full tab which is the concatenation of the last matched route in the\n                // TabbedShowLayout hierarchy (ex: '/posts/create', '/posts/12', , '/posts/12/show')\n                // and the tab path.\n                // This will be used as the Tab's value\n                const tabPath = getTabbedFormTabFullPath(tab, index);\n\n                return cloneElement(tab, {\n                    intent: 'header',\n                    value: syncWithLocation ? tabPath : index,\n                    syncWithLocation,\n                });\n            })}\n        </Tabs>\n    );\n};\n\nTabbedFormTabs.propTypes = {\n    children: PropTypes.node,\n    url: PropTypes.string,\n    tabsWithErrors: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport const getTabbedFormTabFullPath = (\n    tab: ReactElement,\n    index: number\n): string =>\n    tab.props.path != null ? tab.props.path : index > 0 ? index.toString() : '';\n\nexport interface TabbedFormTabsProps extends TabsProps {\n    url?: string;\n    tabsWithErrors?: string[];\n    syncWithLocation?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}
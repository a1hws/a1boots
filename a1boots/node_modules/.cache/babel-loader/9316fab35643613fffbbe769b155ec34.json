{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as React from 'react';\nimport { cloneElement, useCallback } from 'react';\nimport clsx from 'clsx';\nimport { ListContextProvider, useChoicesContext, useInput } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { Datagrid } from '../list/datagrid';\nimport { FilterButton, FilterForm } from '../list/filter';\nimport { FilterContext } from '../list/FilterContext';\nimport { Pagination as DefaultPagination } from '../list/pagination';\nvar defaultPagination = React.createElement(DefaultPagination, null);\n/**\n * WIP: This component is not yet ready to be used.\n *\n * An input for selecting items displayed in a datagrid\n *\n * @example\n * const membersFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n * ];\n * const TeamEdit = () => (\n *    <Edit>\n *        <SimpleForm>\n *            <TextInput source=\"name\" />\n *            <ReferenceArrayInput\n *                source=\"members\"\n *                reference=\"users\"\n *                filter={{ is_retired: false }}\n *                perPage={50}\n *                sort={{ field: 'lastName', order: 'ASC' }}\n *            >\n *                <DatagridInput\n *                    filters={membersFilters}\n *                >\n *                    <TextField source=\"firstName\" />\n *                    <TextField source=\"lastName\" />\n *                </DatagridInput>\n *            </ReferenceArrayInput>\n *        </SimpleForm>\n *    </Edit>\n * );\n */\n\nexport var DatagridInput = function (props) {\n  var _a;\n\n  var choices = props.choices,\n      className = props.className,\n      _b = props.pagination,\n      pagination = _b === void 0 ? defaultPagination : _b,\n      filters = props.filters,\n      sourceProp = props.source,\n      resourceProp = props.resource,\n      rest = __rest(props, [\"choices\", \"className\", \"pagination\", \"filters\", \"source\", \"resource\"]);\n\n  var _c = useChoicesContext({\n    choices: choices,\n    resource: resourceProp,\n    source: sourceProp\n  }),\n      allChoices = _c.allChoices,\n      availableChoices = _c.availableChoices,\n      selectedChoices = _c.selectedChoices,\n      fetchError = _c.error,\n      source = _c.source,\n      choicesContext = __rest(_c, [\"allChoices\", \"availableChoices\", \"selectedChoices\", \"error\", \"source\"]);\n\n  var _d = useInput(__assign(__assign(__assign({}, props), choicesContext), {\n    source: source\n  })),\n      field = _d.field,\n      fieldState = _d.fieldState,\n      formState = _d.formState;\n\n  var onSelect = useCallback(function (idsToAdd) {\n    field.onChange(idsToAdd);\n  }, [field]);\n  var onToggleItem = useCallback(function (id) {\n    if (field.value.includes(id)) {\n      field.onChange(field.value.filter(function (item) {\n        return item !== id;\n      }));\n    } else {\n      field.onChange(__spreadArray(__spreadArray([], field.value, true), [id], false));\n    }\n  }, [field]);\n  var onUnselectItems = useCallback(function () {\n    field.onChange([]);\n  }, [field]);\n  var listContext = React.useMemo(function () {\n    return __assign(__assign({}, choicesContext), {\n      data: availableChoices,\n      onSelect: onSelect,\n      onToggleItem: onToggleItem,\n      onUnselectItems: onUnselectItems,\n      selectedIds: field.value\n    });\n  }, [availableChoices, choicesContext, field, onSelect, onToggleItem, onUnselectItems]);\n  return React.createElement(\"div\", {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className)\n  }, React.createElement(ListContextProvider, {\n    value: listContext\n  }, filters ? Array.isArray(filters) ? React.createElement(FilterContext.Provider, {\n    value: filters\n  }, React.createElement(React.Fragment, null, React.createElement(FilterForm, null), React.createElement(FilterButton, null))) : React.createElement(React.Fragment, null, cloneElement(filters, {\n    context: 'form'\n  }), cloneElement(filters, {\n    context: 'button'\n  })) : null, !fieldState.error && !fetchError && React.createElement(React.Fragment, null, React.createElement(Datagrid, __assign({}, rest)), pagination !== false && pagination), React.createElement(InputHelperText, {\n    touched: fieldState.isTouched || formState.isSubmitted || fetchError,\n    error: ((_a = fieldState.error) === null || _a === void 0 ? void 0 : _a.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message)\n  })));\n};","map":{"version":3,"mappings":"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","names":["React","cloneElement","useCallback","clsx","ListContextProvider","useChoicesContext","useInput","InputHelperText","Datagrid","FilterButton","FilterForm","FilterContext","Pagination","DefaultPagination","defaultPagination","DatagridInput","props","className","_b","pagination","filters","sourceProp","resourceProp","rest","_c","choices","resource","source","allChoices","availableChoices","selectedChoices","fetchError","choicesContext","field","fieldState","formState","onSelect","idsToAdd","onChange","onToggleItem","id","value","includes","filter","__spreadArray","onUnselectItems","listContext","useMemo","data","selectedIds","Array","isArray","Provider","context","error","__assign","touched","isTouched","isSubmitted","_a","message"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/DatagridInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { cloneElement, ReactElement, ReactNode, useCallback } from 'react';\nimport clsx from 'clsx';\nimport {\n    ChoicesProps,\n    Identifier,\n    ListContextProvider,\n    useChoicesContext,\n    useInput,\n} from 'ra-core';\nimport { CommonInputProps } from './CommonInputProps';\nimport { InputHelperText } from './InputHelperText';\nimport { SupportCreateSuggestionOptions } from './useSupportCreateSuggestion';\nimport { Datagrid, DatagridProps } from '../list/datagrid';\nimport { FilterButton, FilterForm } from '../list/filter';\nimport { FilterContext } from '../list/FilterContext';\nimport { Pagination as DefaultPagination } from '../list/pagination';\n\nconst defaultPagination = <DefaultPagination />;\n\n/**\n * WIP: This component is not yet ready to be used.\n *\n * An input for selecting items displayed in a datagrid\n *\n * @example\n * const membersFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n * ];\n * const TeamEdit = () => (\n *    <Edit>\n *        <SimpleForm>\n *            <TextInput source=\"name\" />\n *            <ReferenceArrayInput\n *                source=\"members\"\n *                reference=\"users\"\n *                filter={{ is_retired: false }}\n *                perPage={50}\n *                sort={{ field: 'lastName', order: 'ASC' }}\n *            >\n *                <DatagridInput\n *                    filters={membersFilters}\n *                >\n *                    <TextField source=\"firstName\" />\n *                    <TextField source=\"lastName\" />\n *                </DatagridInput>\n *            </ReferenceArrayInput>\n *        </SimpleForm>\n *    </Edit>\n * );\n */\nexport const DatagridInput = (props: DatagridInputProps) => {\n    const {\n        choices,\n        className,\n        pagination = defaultPagination,\n        filters,\n        source: sourceProp,\n        resource: resourceProp,\n        ...rest\n    } = props;\n\n    const {\n        allChoices,\n        availableChoices,\n        selectedChoices,\n        error: fetchError,\n        source,\n        ...choicesContext\n    } = useChoicesContext({\n        choices,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n    const { field, fieldState, formState } = useInput({\n        ...props,\n        ...choicesContext,\n        source,\n    });\n\n    const onSelect = useCallback(\n        (idsToAdd: Identifier[]) => {\n            field.onChange(idsToAdd);\n        },\n        [field]\n    );\n\n    const onToggleItem = useCallback(\n        (id: Identifier) => {\n            if (field.value.includes(id)) {\n                field.onChange(field.value.filter(item => item !== id));\n            } else {\n                field.onChange([...field.value, id]);\n            }\n        },\n        [field]\n    );\n\n    const onUnselectItems = useCallback(() => {\n        field.onChange([]);\n    }, [field]);\n\n    const listContext = React.useMemo(\n        () => ({\n            ...choicesContext,\n            data: availableChoices,\n            onSelect,\n            onToggleItem,\n            onUnselectItems,\n            selectedIds: field.value,\n        }),\n        [\n            availableChoices,\n            choicesContext,\n            field,\n            onSelect,\n            onToggleItem,\n            onUnselectItems,\n        ]\n    );\n    return (\n        <div className={clsx('ra-input', `ra-input-${source}`, className)}>\n            <ListContextProvider value={listContext}>\n                {filters ? (\n                    Array.isArray(filters) ? (\n                        <FilterContext.Provider value={filters}>\n                            <>\n                                <FilterForm />\n                                <FilterButton />\n                            </>\n                        </FilterContext.Provider>\n                    ) : (\n                        <>\n                            {cloneElement(filters, {\n                                context: 'form',\n                            })}\n                            {cloneElement(filters, {\n                                context: 'button',\n                            })}\n                        </>\n                    )\n                ) : null}\n                {!fieldState.error && !fetchError && (\n                    <>\n                        <Datagrid {...rest} />\n                        {pagination !== false && pagination}\n                    </>\n                )}\n                <InputHelperText\n                    touched={\n                        fieldState.isTouched ||\n                        formState.isSubmitted ||\n                        fetchError\n                    }\n                    error={fieldState.error?.message || fetchError?.message}\n                />\n            </ListContextProvider>\n        </div>\n    );\n};\n\nexport type DatagridInputProps = Omit<CommonInputProps, 'source'> &\n    ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    DatagridProps & {\n        children?: ReactNode;\n        source?: string;\n        filters?: ReactElement | ReactElement[];\n        pagination?: ReactElement | false;\n    };\n"]},"metadata":{},"sourceType":"module"}
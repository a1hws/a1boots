{"ast":null,"code":"import * as React from 'react';\nimport { FieldTitle, useResourceContext } from 'ra-core';\nimport { Switch, Typography } from '@mui/material';\nimport DragIcon from '@mui/icons-material/DragIndicator';\nimport { styled } from '@mui/material/styles';\n/**\n * UI to enable/disable a field\n */\n\nexport var FieldToggle = function (props) {\n  var selected = props.selected,\n      label = props.label,\n      onToggle = props.onToggle,\n      onMove = props.onMove,\n      source = props.source,\n      index = props.index;\n  var resource = useResourceContext();\n  var dropIndex = React.useRef(null);\n  var x = React.useRef(null);\n  var y = React.useRef(null);\n  var handleDocumentDragOver = React.useCallback(function (event) {\n    x.current = event.clientX;\n    y.current = event.clientY;\n  }, []);\n\n  var handleDragStart = function () {\n    document.addEventListener('dragover', handleDocumentDragOver);\n  };\n\n  var handleDrag = function (event) {\n    // imperative DOM manipulations using the native Drag API\n    var selectedItem = event.target;\n    selectedItem.classList.add('drag-active');\n    var list = selectedItem.parentNode;\n    var dropItem = document.elementFromPoint(x.current, y.current) === null ? selectedItem : document.elementFromPoint(x.current, y.current);\n\n    if (dropItem.classList.contains('dragIcon')) {\n      dropItem = dropItem.parentNode;\n    }\n\n    if (dropItem === selectedItem) {\n      return;\n    }\n\n    if (list === dropItem.parentNode) {\n      dropIndex.current = dropItem.dataset.index;\n\n      if (dropItem === selectedItem.nextSibling) {\n        dropItem = dropItem.nextSibling;\n      }\n\n      list.insertBefore(selectedItem, dropItem);\n    }\n  };\n\n  var handleDragEnd = function (event) {\n    var selectedItem = event.target;\n    onMove(selectedItem.dataset.index, dropIndex.current);\n    selectedItem.classList.remove('drag-active');\n    document.removeEventListener('dragover', handleDocumentDragOver);\n  };\n\n  var handleDragOver = function (event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  };\n\n  return React.createElement(Root, {\n    key: source,\n    draggable: onMove ? 'true' : undefined,\n    onDrag: onMove ? handleDrag : undefined,\n    onDragStart: onMove ? handleDragStart : undefined,\n    onDragEnd: onMove ? handleDragEnd : undefined,\n    onDragOver: onMove ? handleDragOver : undefined,\n    \"data-index\": index\n  }, React.createElement(\"label\", {\n    htmlFor: \"switch_\".concat(index)\n  }, React.createElement(Switch, {\n    checked: selected,\n    onChange: onToggle,\n    name: index,\n    id: \"switch_\".concat(index),\n    size: \"small\",\n    sx: {\n      mr: 0.5,\n      ml: -0.5\n    }\n  }), React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"span\"\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource\n  }))), onMove && React.createElement(DragIcon, {\n    className: \"dragIcon\",\n    color: \"disabled\",\n    fontSize: \"small\"\n  }));\n};\nvar Root = styled('div')(function (_a) {\n  var theme = _a.theme;\n  return {\n    display: 'flex',\n    justifyContent: 'space-between',\n    '& svg': {\n      cursor: 'move'\n    },\n    '&.drag-active': {\n      background: 'transparent',\n      color: 'transparent',\n      outline: \"1px solid \".concat(theme.palette.action.selected),\n      '& .MuiSwitch-root, & svg': {\n        visibility: 'hidden'\n      }\n    }\n  };\n});","map":{"version":3,"mappings":"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","names":["React","FieldTitle","useResourceContext","Switch","Typography","DragIcon","styled","FieldToggle","props","label","onToggle","onMove","source","index","resource","dropIndex","useRef","x","y","handleDocumentDragOver","useCallback","current","event","clientX","clientY","handleDragStart","document","addEventListener","handleDrag","selectedItem","target","classList","add","list","parentNode","dropItem","elementFromPoint","contains","dataset","nextSibling","insertBefore","handleDragEnd","remove","removeEventListener","handleDragOver","preventDefault","dataTransfer","dropEffect","Root","key","draggable","undefined","onDrag","onDragStart","onDragEnd","onDragOver","htmlFor","checked","selected","onChange","name","id","size","sx","mr","ml","variant","component","className","color","fontSize","_a","theme","display","justifyContent","cursor","background","outline","palette","action","visibility"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/preferences/FieldToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FieldTitle, useResourceContext } from 'ra-core';\nimport { Switch, Typography } from '@mui/material';\nimport DragIcon from '@mui/icons-material/DragIndicator';\nimport { styled } from '@mui/material/styles';\n\n/**\n * UI to enable/disable a field\n */\nexport const FieldToggle = props => {\n    const { selected, label, onToggle, onMove, source, index } = props;\n    const resource = useResourceContext();\n    const dropIndex = React.useRef<number>(null);\n    const x = React.useRef<number>(null);\n    const y = React.useRef<number>(null);\n\n    const handleDocumentDragOver = React.useCallback(event => {\n        x.current = event.clientX;\n        y.current = event.clientY;\n    }, []);\n\n    const handleDragStart = () => {\n        document.addEventListener('dragover', handleDocumentDragOver);\n    };\n\n    const handleDrag = event => {\n        // imperative DOM manipulations using the native Drag API\n        const selectedItem = event.target;\n        selectedItem.classList.add('drag-active');\n        const list = selectedItem.parentNode;\n        let dropItem =\n            document.elementFromPoint(x.current, y.current) === null\n                ? selectedItem\n                : document.elementFromPoint(x.current, y.current);\n        if (dropItem.classList.contains('dragIcon')) {\n            dropItem = dropItem.parentNode;\n        }\n        if (dropItem === selectedItem) {\n            return;\n        }\n        if (list === dropItem.parentNode) {\n            dropIndex.current = dropItem.dataset.index;\n            if (dropItem === selectedItem.nextSibling) {\n                dropItem = dropItem.nextSibling;\n            }\n            list.insertBefore(selectedItem, dropItem);\n        }\n    };\n\n    const handleDragEnd = event => {\n        const selectedItem = event.target;\n        onMove(selectedItem.dataset.index, dropIndex.current);\n        selectedItem.classList.remove('drag-active');\n        document.removeEventListener('dragover', handleDocumentDragOver);\n    };\n\n    const handleDragOver = event => {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n    };\n\n    return (\n        <Root\n            key={source}\n            draggable={onMove ? 'true' : undefined}\n            onDrag={onMove ? handleDrag : undefined}\n            onDragStart={onMove ? handleDragStart : undefined}\n            onDragEnd={onMove ? handleDragEnd : undefined}\n            onDragOver={onMove ? handleDragOver : undefined}\n            data-index={index}\n        >\n            <label htmlFor={`switch_${index}`}>\n                <Switch\n                    checked={selected}\n                    onChange={onToggle}\n                    name={index}\n                    id={`switch_${index}`}\n                    size=\"small\"\n                    sx={{ mr: 0.5, ml: -0.5 }}\n                />\n                <Typography variant=\"body2\" component=\"span\">\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                    />\n                </Typography>\n            </label>\n            {onMove && (\n                <DragIcon\n                    className=\"dragIcon\"\n                    color=\"disabled\"\n                    fontSize=\"small\"\n                />\n            )}\n        </Root>\n    );\n};\n\nconst Root = styled('div')(({ theme }) => ({\n    display: 'flex',\n    justifyContent: 'space-between',\n    '& svg': {\n        cursor: 'move',\n    },\n    '&.drag-active': {\n        background: 'transparent',\n        color: 'transparent',\n        outline: `1px solid ${theme.palette.action.selected}`,\n        '& .MuiSwitch-root, & svg': {\n            visibility: 'hidden',\n        },\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
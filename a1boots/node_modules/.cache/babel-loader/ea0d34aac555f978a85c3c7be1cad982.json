{"ast":null,"code":"import * as React from 'react';\nimport { localStorageStore } from 'ra-core';\nimport { AdminUI, AdminContext } from 'ra-ui-materialui';\nimport { defaultI18nProvider } from './defaultI18nProvider';\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </Admin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <Admin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\nimport { useEffect, useState } from 'react';\n * import {\n *     AdminContext,\n *     AdminUI,\n *     defaultI18nProvider,\n *     localStorageStore,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const store = localStorageStore();\n *\n * const App = () => (\n *     <AdminContext dataProvider={myDataProvider} i18nProvider={defaultI18nProvider} store={store}>\n *         <Resources />\n *     </AdminContext>\n * );\n *\n * const Resources = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <AdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </AdminUI>\n *     );\n * };\n */\n\nexport var Admin = function Admin(props) {\n  var authProvider = props.authProvider,\n      basename = props.basename,\n      catchAll = props.catchAll,\n      children = props.children,\n      dashboard = props.dashboard,\n      dataProvider = props.dataProvider,\n      disableTelemetry = props.disableTelemetry,\n      history = props.history,\n      i18nProvider = props.i18nProvider,\n      layout = props.layout,\n      loading = props.loading,\n      loginPage = props.loginPage,\n      authCallbackPage = props.authCallbackPage,\n      menu = props.menu,\n      // deprecated, use a custom layout instead\n  notification = props.notification,\n      queryClient = props.queryClient,\n      requireAuth = props.requireAuth,\n      store = props.store,\n      ready = props.ready,\n      theme = props.theme,\n      lightTheme = props.lightTheme,\n      darkTheme = props.darkTheme,\n      defaultTheme = props.defaultTheme,\n      _a = props.title,\n      title = _a === void 0 ? 'React Admin' : _a;\n\n  if (loginPage === true && process.env.NODE_ENV !== 'production') {\n    console.warn('You passed true to the loginPage prop. You must either pass false to disable it or a component class to customize it');\n  }\n\n  return React.createElement(AdminContext, {\n    authProvider: authProvider,\n    basename: basename,\n    dataProvider: dataProvider,\n    i18nProvider: i18nProvider,\n    store: store,\n    history: history,\n    queryClient: queryClient,\n    theme: theme,\n    lightTheme: lightTheme,\n    darkTheme: darkTheme,\n    defaultTheme: defaultTheme\n  }, React.createElement(AdminUI, {\n    layout: layout,\n    dashboard: dashboard,\n    disableTelemetry: disableTelemetry,\n    menu: menu,\n    catchAll: catchAll,\n    title: title,\n    loading: loading,\n    loginPage: loginPage,\n    authCallbackPage: authCallbackPage,\n    notification: notification,\n    requireAuth: requireAuth,\n    ready: ready\n  }, children));\n};\nAdmin.defaultProps = {\n  i18nProvider: defaultI18nProvider,\n  store: localStorageStore()\n};\nexport default Admin;","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAAyBC,iBAAzB,QAAkD,SAAlD;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsD,kBAAtD;AAEA,SAASC,mBAAT,QAAoC,uBAApC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAkB;EAE/B,gBAAY,GAwBZA,KAAK,aAxBL;EAAA,IACAC,QAAQ,GAuBRD,KAAK,SAxBL;EAAA,IAEAE,QAAQ,GAsBRF,KAAK,SAxBL;EAAA,IAGAG,QAAQ,GAqBRH,KAAK,SAxBL;EAAA,IAIAI,SAAS,GAoBTJ,KAAK,UAxBL;EAAA,IAKAK,YAAY,GAmBZL,KAAK,aAxBL;EAAA,IAMAM,gBAAgB,GAkBhBN,KAAK,iBAxBL;EAAA,IAOAO,OAAO,GAiBPP,KAAK,QAxBL;EAAA,IAQAQ,YAAY,GAgBZR,KAAK,aAxBL;EAAA,IASAS,MAAM,GAeNT,KAAK,OAxBL;EAAA,IAUAU,OAAO,GAcPV,KAAK,QAxBL;EAAA,IAWAW,SAAS,GAaTX,KAAK,UAxBL;EAAA,IAYAY,gBAAgB,GAYhBZ,KAAK,iBAxBL;EAAA,IAaAa,IAAI,GAWJb,KAAK,KAxBL;EAAA,IAaM;EACNc,YAAY,GAUZd,KAAK,aAxBL;EAAA,IAeAe,WAAW,GASXf,KAAK,YAxBL;EAAA,IAgBAgB,WAAW,GAQXhB,KAAK,YAxBL;EAAA,IAiBAiB,KAAK,GAOLjB,KAAK,MAxBL;EAAA,IAkBAkB,KAAK,GAMLlB,KAAK,MAxBL;EAAA,IAmBAmB,KAAK,GAKLnB,KAAK,MAxBL;EAAA,IAoBAoB,UAAU,GAIVpB,KAAK,WAxBL;EAAA,IAqBAqB,SAAS,GAGTrB,KAAK,UAxBL;EAAA,IAsBAsB,YAAY,GAEZtB,KAAK,aAxBL;EAAA,IAuBAuB,KACAvB,KAAK,MAxBL;EAAA,IAuBAwB,KAAK,mBAAG,aAAH,GAAgBD,EAvBrB;;EA0BJ,IAAIZ,SAAS,KAAK,IAAd,IAAsBc,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAnD,EAAiE;IAC7DC,OAAO,CAACC,IAAR,CACI,sHADJ;EAGH;;EAED,OACInC,oBAACG,YAAD,EAAa;IACTiC,YAAY,EAAEA,YADL;IAET7B,QAAQ,EAAEA,QAFD;IAGTI,YAAY,EAAEA,YAHL;IAITG,YAAY,EAAEA,YAJL;IAKTS,KAAK,EAAEA,KALE;IAMTV,OAAO,EAAEA,OANA;IAOTQ,WAAW,EAAEA,WAPJ;IAQTI,KAAK,EAAEA,KARE;IASTC,UAAU,EAAEA,UATH;IAUTC,SAAS,EAAEA,SAVF;IAWTC,YAAY,EAAEA;EAXL,CAAb,EAaI5B,oBAACE,OAAD,EAAQ;IACJa,MAAM,EAAEA,MADJ;IAEJL,SAAS,EAAEA,SAFP;IAGJE,gBAAgB,EAAEA,gBAHd;IAIJO,IAAI,EAAEA,IAJF;IAKJX,QAAQ,EAAEA,QALN;IAMJsB,KAAK,EAAEA,KANH;IAOJd,OAAO,EAAEA,OAPL;IAQJC,SAAS,EAAEA,SARP;IASJC,gBAAgB,EAAEA,gBATd;IAUJE,YAAY,EAAEA,YAVV;IAWJE,WAAW,EAAEA,WAXT;IAYJE,KAAK,EAAEA;EAZH,CAAR,EAcKf,QAdL,CAbJ,CADJ;AAgCH,CAlEM;AAoEPJ,KAAK,CAACgC,YAAN,GAAqB;EACjBvB,YAAY,EAAEV,mBADG;EAEjBmB,KAAK,EAAEtB,iBAAiB;AAFP,CAArB;AAKA,eAAeI,KAAf","names":["React","localStorageStore","AdminUI","AdminContext","defaultI18nProvider","Admin","props","basename","catchAll","children","dashboard","dataProvider","disableTelemetry","history","i18nProvider","layout","loading","loginPage","authCallbackPage","menu","notification","queryClient","requireAuth","store","ready","theme","lightTheme","darkTheme","defaultTheme","_a","title","process","env","NODE_ENV","console","warn","authProvider","defaultProps"],"sources":["/var/www/a1boots/node_modules/react-admin/src/Admin.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ComponentType } from 'react';\nimport { CoreAdminProps, localStorageStore } from 'ra-core';\nimport { AdminUI, AdminContext, RaThemeOptions } from 'ra-ui-materialui';\n\nimport { defaultI18nProvider } from './defaultI18nProvider';\n\n/**\n * Main admin component, entry point to the application.\n *\n * Initializes the various contexts (auth, data, i18n, router)\n * and defines the main routes.\n *\n * Expects a list of resources as children, or a function returning a list of\n * resources based on the permissions.\n *\n * @example\n *\n * // static list of resources\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n *\n * // dynamic list of resources based on permissions\n *\n * import {\n *     Admin,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         {permissions => [\n *             <Resource name=\"posts\" key=\"posts\" list={ListGuesser} />,\n *         ]}\n *     </Admin>\n * );\n *\n * // If you have to build a dynamic list of resources using a side effect,\n * // you can't use <Admin>. But as it delegates to sub components,\n * // it's relatively straightforward to replace it:\n *\n * import * as React from 'react';\nimport { useEffect, useState } from 'react';\n * import {\n *     AdminContext,\n *     AdminUI,\n *     defaultI18nProvider,\n *     localStorageStore,\n *     Resource,\n *     ListGuesser,\n *     useDataProvider,\n * } from 'react-admin';\n *\n * const store = localStorageStore();\n *\n * const App = () => (\n *     <AdminContext dataProvider={myDataProvider} i18nProvider={defaultI18nProvider} store={store}>\n *         <Resources />\n *     </AdminContext>\n * );\n *\n * const Resources = () => {\n *     const [resources, setResources] = useState([]);\n *     const dataProvider = useDataProvider();\n *     useEffect(() => {\n *         dataProvider.introspect().then(r => setResources(r));\n *     }, []);\n *\n *     return (\n *         <AdminUI>\n *             {resources.map(resource => (\n *                 <Resource name={resource.name} key={resource.key} list={ListGuesser} />\n *             ))}\n *         </AdminUI>\n *     );\n * };\n */\nexport const Admin = (props: AdminProps) => {\n    const {\n        authProvider,\n        basename,\n        catchAll,\n        children,\n        dashboard,\n        dataProvider,\n        disableTelemetry,\n        history,\n        i18nProvider,\n        layout,\n        loading,\n        loginPage,\n        authCallbackPage,\n        menu, // deprecated, use a custom layout instead\n        notification,\n        queryClient,\n        requireAuth,\n        store,\n        ready,\n        theme,\n        lightTheme,\n        darkTheme,\n        defaultTheme,\n        title = 'React Admin',\n    } = props;\n\n    if (loginPage === true && process.env.NODE_ENV !== 'production') {\n        console.warn(\n            'You passed true to the loginPage prop. You must either pass false to disable it or a component class to customize it'\n        );\n    }\n\n    return (\n        <AdminContext\n            authProvider={authProvider}\n            basename={basename}\n            dataProvider={dataProvider}\n            i18nProvider={i18nProvider}\n            store={store}\n            history={history}\n            queryClient={queryClient}\n            theme={theme}\n            lightTheme={lightTheme}\n            darkTheme={darkTheme}\n            defaultTheme={defaultTheme}\n        >\n            <AdminUI\n                layout={layout}\n                dashboard={dashboard}\n                disableTelemetry={disableTelemetry}\n                menu={menu}\n                catchAll={catchAll}\n                title={title}\n                loading={loading}\n                loginPage={loginPage}\n                authCallbackPage={authCallbackPage}\n                notification={notification}\n                requireAuth={requireAuth}\n                ready={ready}\n            >\n                {children}\n            </AdminUI>\n        </AdminContext>\n    );\n};\n\nAdmin.defaultProps = {\n    i18nProvider: defaultI18nProvider,\n    store: localStorageStore(),\n};\n\nexport default Admin;\n\nexport interface AdminProps extends CoreAdminProps {\n    theme?: RaThemeOptions;\n    lightTheme?: RaThemeOptions;\n    darkTheme?: RaThemeOptions;\n    defaultTheme?: 'light' | 'dark';\n    notification?: ComponentType;\n}\n"]},"metadata":{},"sourceType":"module"}
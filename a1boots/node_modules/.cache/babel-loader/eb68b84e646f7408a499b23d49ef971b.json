{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext, useResourceDefinition } from 'ra-core';\nimport { styled } from '@mui/material/styles';\nimport { fieldPropTypes } from './types';\nimport { LinearProgress } from '../layout';\nimport { SingleFieldList } from '../list/SingleFieldList';\nimport { ChipField } from './ChipField';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\n\nexport var ReferenceArrayField = function ReferenceArrayField(props) {\n  var filter = props.filter,\n      _a = props.page,\n      page = _a === void 0 ? 1 : _a,\n      perPage = props.perPage,\n      reference = props.reference,\n      resource = props.resource,\n      sort = props.sort,\n      source = props.source;\n  var record = useRecordContext(props);\n  var controllerProps = useReferenceArrayFieldController({\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(PureReferenceArrayFieldView, __assign({}, props))));\n};\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  label: fieldPropTypes.label,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired\n});\nexport var ReferenceArrayFieldView = function ReferenceArrayFieldView(props) {\n  var children = props.children,\n      pagination = props.pagination,\n      reference = props.reference,\n      className = props.className,\n      sx = props.sx;\n\n  var _a = useListContext(props),\n      isLoading = _a.isLoading,\n      total = _a.total;\n\n  var recordRepresentation = useResourceDefinition({\n    resource: reference\n  }).recordRepresentation;\n  var child = children ? children : React.createElement(SingleFieldList, null, React.createElement(ChipField, {\n    source: typeof recordRepresentation === 'string' ? recordRepresentation : 'id',\n    size: \"small\"\n  }));\n  return React.createElement(Root, {\n    className: className,\n    sx: sx\n  }, isLoading ? React.createElement(LinearProgress, {\n    className: ReferenceArrayFieldClasses.progress\n  }) : React.createElement(\"span\", null, child, pagination && total !== undefined ? pagination : null));\n};\nReferenceArrayFieldView.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  reference: PropTypes.string.isRequired\n};\nvar PREFIX = 'RaReferenceArrayField';\nexport var ReferenceArrayFieldClasses = {\n  progress: \"\".concat(PREFIX, \"-progress\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(ReferenceArrayFieldClasses.progress)] = {\n    marginTop: theme.spacing(2)\n  }, _b;\n});\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);","map":{"version":3,"mappings":"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","names":["React","memo","PropTypes","ListContextProvider","useListContext","useReferenceArrayFieldController","ResourceContextProvider","useRecordContext","useResourceDefinition","styled","fieldPropTypes","LinearProgress","SingleFieldList","ChipField","ReferenceArrayField","props","_a","page","perPage","reference","resource","sort","source","record","controllerProps","filter","value","PureReferenceArrayFieldView","__assign","propTypes","className","string","children","node","label","any","isRequired","sortBy","sortByOrder","ReferenceArrayFieldView","pagination","sx","isLoading","total","recordRepresentation","child","size","Root","ReferenceArrayFieldClasses","progress","undefined","PREFIX","name","overridesResolver","styles","root","theme","_b","marginTop","spacing"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/ReferenceArrayField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FC, memo, ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    ListContextProvider,\n    useListContext,\n    ListControllerProps,\n    useReferenceArrayFieldController,\n    SortPayload,\n    FilterPayload,\n    ResourceContextProvider,\n    useRecordContext,\n    useResourceDefinition,\n    RaRecord,\n} from 'ra-core';\nimport { styled } from '@mui/material/styles';\nimport { SxProps } from '@mui/system';\n\nimport { fieldPropTypes, FieldProps } from './types';\nimport { LinearProgress } from '../layout';\nimport { SingleFieldList } from '../list/SingleFieldList';\nimport { ChipField } from './ChipField';\n\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nexport const ReferenceArrayField = <\n    RecordType extends RaRecord = RaRecord,\n    ReferenceRecordType extends RaRecord = RaRecord\n>(\n    props: ReferenceArrayFieldProps<RecordType>\n) => {\n    const {\n        filter,\n        page = 1,\n        perPage,\n        reference,\n        resource,\n        sort,\n        source,\n    } = props;\n    const record = useRecordContext(props);\n    const controllerProps = useReferenceArrayFieldController<\n        RecordType,\n        ReferenceRecordType\n    >({\n        filter,\n        page,\n        perPage,\n        record,\n        reference,\n        resource,\n        sort,\n        source,\n    });\n    return (\n        <ResourceContextProvider value={reference}>\n            <ListContextProvider value={controllerProps}>\n                <PureReferenceArrayFieldView {...props} />\n            </ListContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nReferenceArrayField.propTypes = {\n    ...fieldPropTypes,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    label: fieldPropTypes.label,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n};\n\nexport interface ReferenceArrayFieldProps<\n    RecordType extends RaRecord = RaRecord\n> extends FieldProps<RecordType> {\n    children?: ReactNode;\n    filter?: FilterPayload;\n    page?: number;\n    pagination?: ReactElement;\n    perPage?: number;\n    reference: string;\n    sort?: SortPayload;\n    sx?: SxProps;\n}\n\nexport interface ReferenceArrayFieldViewProps\n    extends Omit<ReferenceArrayFieldProps, 'resource' | 'page' | 'perPage'>,\n        ListControllerProps {}\n\nexport const ReferenceArrayFieldView: FC<ReferenceArrayFieldViewProps> = props => {\n    const { children, pagination, reference, className, sx } = props;\n    const { isLoading, total } = useListContext(props);\n\n    const { recordRepresentation } = useResourceDefinition({\n        resource: reference,\n    });\n    let child = children ? (\n        children\n    ) : (\n        <SingleFieldList>\n            <ChipField\n                source={\n                    typeof recordRepresentation === 'string'\n                        ? recordRepresentation\n                        : 'id'\n                }\n                size=\"small\"\n            />\n        </SingleFieldList>\n    );\n\n    return (\n        <Root className={className} sx={sx}>\n            {isLoading ? (\n                <LinearProgress\n                    className={ReferenceArrayFieldClasses.progress}\n                />\n            ) : (\n                <span>\n                    {child}\n                    {pagination && total !== undefined ? pagination : null}\n                </span>\n            )}\n        </Root>\n    );\n};\n\nReferenceArrayFieldView.propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.node,\n    reference: PropTypes.string.isRequired,\n};\n\nconst PREFIX = 'RaReferenceArrayField';\n\nexport const ReferenceArrayFieldClasses = {\n    progress: `${PREFIX}-progress`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ReferenceArrayFieldClasses.progress}`]: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nconst PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\n"]},"metadata":{},"sourceType":"module"}
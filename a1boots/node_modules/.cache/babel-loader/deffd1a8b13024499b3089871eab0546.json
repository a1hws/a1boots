{"ast":null,"code":"import * as React from 'react';\nimport { useEffect } from 'react';\nimport { useStoreContext } from './useStoreContext';\n/**\n * A component to set store state for a key on mount declaratively\n *\n * To use it, just wrap any component that need to use the corresponding\n * store item with <StoreSetter name=\"my.key\" value=\"myvalue\">.\n * This wrapping needs to be done to ensure that the corresponding store item\n * is set before rendering the wrapped component.\n *\n * Tip: <StoreSetter> is a great helper for mocking the store in\n * unit tests. Prefer it to calling the Store manually.\n *\n * @example\n *\n *     <StoreSetter name=\"list.density\" value=\"small\">\n *         <MyStoreDependentComponent />\n *     </StoreSetter>\n *\n * @example // Using <StoreSetter> is equivalent to using `useStoreContext` and setting its value directly.\n *\n * const [, setDensity] = useStore('list.density');\n *\n * useEffect(() => {\n *     setDensity('small');\n * }, []);\n *\n * @param {Props}    props\n * @param {string}   props.name Store item key. Required. Separate with dots to namespace, e.g. 'posts.list.columns'\n * @param {any}      props.value Store item value. Required.\n * @param {children} props.children Children are rendered as is, on mount\n */\n\nexport var StoreSetter = function (_a) {\n  var value = _a.value,\n      name = _a.name,\n      children = _a.children;\n  var setItem = useStoreContext().setItem;\n  useEffect(function () {\n    setItem(name, value);\n  }, [name, setItem, value]);\n  return React.createElement(React.Fragment, null, children);\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAAqC,OAArC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAO,IAAMC,WAAW,GAAG,UAACC,EAAD,EAA4C;MAAzCC,KAAK;MAAEC,IAAI;MAAEC,QAAQ;EACvC,WAAO,GAAKL,eAAe,GAAEM,OAA7B;EAERP,SAAS,CAAC;IACNO,OAAO,CAACF,IAAD,EAAOD,KAAP,CAAP;EACH,CAFQ,EAEN,CAACC,IAAD,EAAOE,OAAP,EAAgBH,KAAhB,CAFM,CAAT;EAIA,OAAOL,0CAAGO,QAAH,CAAP;AACH,CARM","names":["React","useEffect","useStoreContext","StoreSetter","_a","value","name","children","setItem"],"sources":["/var/www/a1boots/node_modules/ra-core/src/store/StoreSetter.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, ReactNode } from 'react';\nimport { useStoreContext } from './useStoreContext';\n\n/**\n * A component to set store state for a key on mount declaratively\n *\n * To use it, just wrap any component that need to use the corresponding\n * store item with <StoreSetter name=\"my.key\" value=\"myvalue\">.\n * This wrapping needs to be done to ensure that the corresponding store item\n * is set before rendering the wrapped component.\n *\n * Tip: <StoreSetter> is a great helper for mocking the store in\n * unit tests. Prefer it to calling the Store manually.\n *\n * @example\n *\n *     <StoreSetter name=\"list.density\" value=\"small\">\n *         <MyStoreDependentComponent />\n *     </StoreSetter>\n *\n * @example // Using <StoreSetter> is equivalent to using `useStoreContext` and setting its value directly.\n *\n * const [, setDensity] = useStore('list.density');\n *\n * useEffect(() => {\n *     setDensity('small');\n * }, []);\n *\n * @param {Props}    props\n * @param {string}   props.name Store item key. Required. Separate with dots to namespace, e.g. 'posts.list.columns'\n * @param {any}      props.value Store item value. Required.\n * @param {children} props.children Children are rendered as is, on mount\n */\nexport const StoreSetter = ({ value, name, children }: StoreSetterProps) => {\n    const { setItem } = useStoreContext();\n\n    useEffect(() => {\n        setItem(name, value);\n    }, [name, setItem, value]);\n\n    return <>{children}</>;\n};\n\nexport interface StoreSetterProps {\n    name: string;\n    value: any;\n    children: ReactNode;\n}\n"]},"metadata":{},"sourceType":"module"}
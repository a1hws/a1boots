{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.update() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The update parameters { id, data, previousData, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.previousData The record before the update is applied\n * @prop params.meta Optional meta data\n *\n * @returns The current mutation state. Destructure as [update, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [update, { isLoading: false, isIdle: true }]\n * - start:   [update, { isLoading: true }]\n * - success: [update, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [update, { error: [error from response], isLoading: false, isError: true }]\n *\n * The update() function must be called with a resource and a parameter object: update(resource, { id, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the update callback\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isLoading, error }] = useUpdate();\n *     const handleClick = () => {\n *         update('likes', { id: record.id, data: diff, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isLoading, error }] = useUpdate('likes', { id: record.id, data: diff, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => update()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [update, { data }] = useUpdate<Product>('products', { id, data: diff, previousData: product });\n *                    \\-- data is Product\n */\n\nexport var useUpdate = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var id = params.id,\n      data = params.data,\n      meta = params.meta;\n\n  var _a = options.mutationMode,\n      mutationMode = _a === void 0 ? 'pessimistic' : _a,\n      reactMutationOptions = __rest(options, [\"mutationMode\"]);\n\n  var mode = useRef(mutationMode);\n  var paramsRef = useRef(params);\n  var snapshot = useRef([]);\n\n  var updateCache = function (_a) {\n    var resource = _a.resource,\n        id = _a.id,\n        data = _a.data; // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n    // because setQueryData doesn't accept a stale time option\n\n    var now = Date.now();\n    var updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n\n    var updateColl = function (old) {\n      if (!old) return;\n      var index = old.findIndex( // eslint-disable-next-line eqeqeq\n      function (record) {\n        return record.id == id;\n      });\n\n      if (index === -1) {\n        return old;\n      }\n\n      return __spreadArray(__spreadArray(__spreadArray([], old.slice(0, index), true), [__assign(__assign({}, old[index]), data)], false), old.slice(index + 1), true);\n    };\n\n    queryClient.setQueryData([resource, 'getOne', {\n      id: String(id),\n      meta: meta\n    }], function (record) {\n      return __assign(__assign({}, record), data);\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getList'], function (res) {\n      return res && res.data ? __assign(__assign({}, res), {\n        data: updateColl(res.data)\n      }) : res;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getInfiniteList'], function (res) {\n      return res && res.pages ? __assign(__assign({}, res), {\n        pages: res.pages.map(function (page) {\n          return __assign(__assign({}, page), {\n            data: updateColl(page.data)\n          });\n        })\n      }) : res;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getMany'], function (coll) {\n      return coll && coll.length > 0 ? updateColl(coll) : coll;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getManyReference'], function (res) {\n      return res && res.data ? {\n        data: updateColl(res.data),\n        total: res.total\n      } : res;\n    }, {\n      updatedAt: updatedAt\n    });\n  };\n\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.resource,\n        callTimeResource = _c === void 0 ? resource : _c,\n        _d = _b.id,\n        callTimeId = _d === void 0 ? paramsRef.current.id : _d,\n        _e = _b.data,\n        callTimeData = _e === void 0 ? paramsRef.current.data : _e,\n        _f = _b.meta,\n        callTimeMeta = _f === void 0 ? paramsRef.current.meta : _f,\n        _g = _b.previousData,\n        callTimePreviousData = _g === void 0 ? paramsRef.current.previousData : _g;\n\n    return dataProvider.update(callTimeResource, {\n      id: callTimeId,\n      data: callTimeData,\n      previousData: callTimePreviousData,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, reactMutationOptions), {\n    onMutate: function (variables) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var userContext;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!reactMutationOptions.onMutate) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , reactMutationOptions.onMutate(variables)];\n\n            case 1:\n              userContext = _a.sent() || {};\n              return [2\n              /*return*/\n              , __assign({\n                snapshot: snapshot.current\n              }, userContext)];\n\n            case 2:\n              // Return a context object with the snapshot value\n              return [2\n              /*return*/\n              , {\n                snapshot: snapshot.current\n              }];\n          }\n        });\n      });\n    },\n    onError: function (error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // If the mutation fails, use the context returned from onMutate to rollback\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0],\n              value = _a[1];\n          queryClient.setQueryData(key, value);\n        });\n      }\n\n      if (reactMutationOptions.onError) {\n        return reactMutationOptions.onError(error, variables, context);\n      } // call-time error callback is executed by react-query\n\n    },\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (mode.current === 'pessimistic') {\n        // update the getOne and getList query cache with the new result\n        var _a = variables.resource,\n            callTimeResource = _a === void 0 ? resource : _a,\n            _b = variables.id,\n            callTimeId = _b === void 0 ? id : _b;\n        updateCache({\n          resource: callTimeResource,\n          id: callTimeId,\n          data: data\n        });\n\n        if (reactMutationOptions.onSuccess) {\n          reactMutationOptions.onSuccess(data, variables, context);\n        } // call-time success callback is executed by react-query\n\n      }\n    },\n    onSettled: function (data, error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // Always refetch after error or success:\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0];\n          queryClient.invalidateQueries(key);\n        });\n      }\n\n      if (reactMutationOptions.onSettled) {\n        return reactMutationOptions.onSettled(data, error, variables, context);\n      }\n    }\n  }));\n\n  var update = function (callTimeResource, callTimeParams, updateOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n\n    if (updateOptions === void 0) {\n      updateOptions = {};\n    }\n\n    return __awaiter(void 0, void 0, void 0, function () {\n      var mutationMode, _a, returnPromise, onSuccess, onSettled, onError, _b, callTimeId, _c, callTimeData, _d, callTimeMeta, previousRecord, queryKeys;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            mutationMode = updateOptions.mutationMode, _a = updateOptions.returnPromise, returnPromise = _a === void 0 ? reactMutationOptions.returnPromise : _a, onSuccess = updateOptions.onSuccess, onSettled = updateOptions.onSettled, onError = updateOptions.onError; // store the hook time params *at the moment of the call*\n            // because they may change afterwards, which would break the undoable mode\n            // as the previousData would be overwritten by the optimistic update\n\n            paramsRef.current = params;\n\n            if (mutationMode) {\n              mode.current = mutationMode;\n            }\n\n            if (returnPromise && mode.current !== 'pessimistic') {\n              console.warn('The returnPromise parameter can only be used if the mutationMode is set to pessimistic');\n            }\n\n            if (mode.current === 'pessimistic') {\n              if (returnPromise) {\n                return [2\n                /*return*/\n                , mutation.mutateAsync(__assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  onSuccess: onSuccess,\n                  onSettled: onSettled,\n                  onError: onError\n                })];\n              }\n\n              return [2\n              /*return*/\n              , mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSuccess: onSuccess,\n                onSettled: onSettled,\n                onError: onError\n              })];\n            }\n\n            _b = callTimeParams.id, callTimeId = _b === void 0 ? id : _b, _c = callTimeParams.data, callTimeData = _c === void 0 ? data : _c, _d = callTimeParams.meta, callTimeMeta = _d === void 0 ? meta : _d;\n            previousRecord = queryClient.getQueryData([callTimeResource, 'getOne', {\n              id: String(callTimeId),\n              meta: callTimeMeta\n            }]);\n            queryKeys = [[callTimeResource, 'getOne', {\n              id: String(callTimeId),\n              meta: callTimeMeta\n            }], [callTimeResource, 'getList'], [callTimeResource, 'getInfiniteList'], [callTimeResource, 'getMany'], [callTimeResource, 'getManyReference']];\n            /**\n             * Snapshot the previous values via queryClient.getQueriesData()\n             *\n             * The snapshotData ref will contain an array of tuples [query key, associated data]\n             *\n             * @example\n             * [\n             *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n             *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n             *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n             * ]\n             *\n             * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n             */\n\n            snapshot.current = queryKeys.reduce(function (prev, curr) {\n              return prev.concat(queryClient.getQueriesData(curr));\n            }, []); // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n\n            return [4\n            /*yield*/\n            , Promise.all(snapshot.current.map(function (_a) {\n              var key = _a[0];\n              return queryClient.cancelQueries(key);\n            }))];\n\n          case 1:\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            _e.sent(); // Optimistically update to the new value\n\n\n            updateCache({\n              resource: callTimeResource,\n              id: callTimeId,\n              data: callTimeData\n            }); // run the success callbacks during the next tick\n\n            if (onSuccess) {\n              setTimeout(function () {\n                return onSuccess(__assign(__assign({}, previousRecord), callTimeData), __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n\n            if (reactMutationOptions.onSuccess) {\n              setTimeout(function () {\n                return reactMutationOptions.onSuccess(__assign(__assign({}, previousRecord), callTimeData), __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n\n            if (mode.current === 'optimistic') {\n              // call the mutate method without success side effects\n              return [2\n              /*return*/\n              , mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSettled: onSettled,\n                onError: onError\n              })];\n            } else {\n              // undoable mutation: register the mutation for later\n              undoableEventEmitter.once('end', function (_a) {\n                var isUndo = _a.isUndo;\n\n                if (isUndo) {\n                  // rollback\n                  snapshot.current.forEach(function (_a) {\n                    var key = _a[0],\n                        value = _a[1];\n                    queryClient.setQueryData(key, value);\n                  });\n                } else {\n                  // call the mutate method without success side effects\n                  mutation.mutate(__assign({\n                    resource: callTimeResource\n                  }, callTimeParams), {\n                    onSettled: onSettled,\n                    onError: onError\n                  });\n                }\n              });\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return [useEvent(update), mutation];\n};","map":{"version":3,"mappings":"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","names":["useRef","useMutation","useQueryClient","useDataProvider","undoableEventEmitter","useEvent","useUpdate","resource","params","options","dataProvider","queryClient","data","meta","_a","reactMutationOptions","mode","mutationMode","paramsRef","snapshot","updateCache","id","now","Date","updatedAt","current","updateColl","old","index","findIndex","slice","setQueryData","String","record","setQueriesData","res","__assign","pages","map","page","coll","length","total","mutation","_b","_c","callTimeResource","_d","callTimeId","_e","callTimeData","_f","callTimeMeta","_g","callTimePreviousData","previousData","update","then","onMutate","variables","userContext","onError","error","context","forEach","key","value","onSuccess","onSettled","invalidateQueries","callTimeParams","updateOptions","returnPromise","console","warn","mutateAsync","mutate","previousRecord","getQueryData","queryKeys","reduce","prev","curr","concat","getQueriesData","Promise","all","cancelQueries","setTimeout","once","isUndo"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/useUpdate.ts"],"sourcesContent":["import { useRef } from 'react';\nimport {\n    useMutation,\n    useQueryClient,\n    UseMutationOptions,\n    UseMutationResult,\n    MutateOptions,\n    QueryKey,\n    UseInfiniteQueryResult,\n} from 'react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport {\n    RaRecord,\n    UpdateParams,\n    MutationMode,\n    GetListResult as OriginalGetListResult,\n    GetInfiniteListResult,\n} from '../types';\nimport { useEvent } from '../util';\n\n/**\n * Get a callback to call the dataProvider.update() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The update parameters { id, data, previousData, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.id The resource identifier, e.g. 123\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.previousData The record before the update is applied\n * @prop params.meta Optional meta data\n *\n * @returns The current mutation state. Destructure as [update, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [update, { isLoading: false, isIdle: true }]\n * - start:   [update, { isLoading: true }]\n * - success: [update, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [update, { error: [error from response], isLoading: false, isError: true }]\n *\n * The update() function must be called with a resource and a parameter object: update(resource, { id, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the update callback\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isLoading, error }] = useUpdate();\n *     const handleClick = () => {\n *         update('likes', { id: record.id, data: diff, previousData: record })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdate, useRecordContext } from 'react-admin';\n *\n * const IncreaseLikeButton = () => {\n *     const record = useRecordContext();\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { isLoading, error }] = useUpdate('likes', { id: record.id, data: diff, previousData: record });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => update()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [update, { data }] = useUpdate<Product>('products', { id, data: diff, previousData: product });\n *                    \\-- data is Product\n */\nexport const useUpdate = <\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n>(\n    resource?: string,\n    params: Partial<UpdateParams<RecordType>> = {},\n    options: UseUpdateOptions<RecordType, MutationError> = {}\n): UseUpdateResult<RecordType, boolean, MutationError> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const { id, data, meta } = params;\n    const { mutationMode = 'pessimistic', ...reactMutationOptions } = options;\n    const mode = useRef<MutationMode>(mutationMode);\n    const paramsRef = useRef<Partial<UpdateParams<RecordType>>>(params);\n    const snapshot = useRef<Snapshot>([]);\n\n    const updateCache = ({ resource, id, data }) => {\n        // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n        // because setQueryData doesn't accept a stale time option\n        const now = Date.now();\n        const updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n\n        const updateColl = (old: RecordType[]) => {\n            if (!old) return;\n            const index = old.findIndex(\n                // eslint-disable-next-line eqeqeq\n                record => record.id == id\n            );\n            if (index === -1) {\n                return old;\n            }\n            return [\n                ...old.slice(0, index),\n                { ...old[index], ...data },\n                ...old.slice(index + 1),\n            ];\n        };\n\n        type GetListResult = Omit<OriginalGetListResult, 'data'> & {\n            data?: RecordType[];\n        };\n\n        queryClient.setQueryData(\n            [resource, 'getOne', { id: String(id), meta }],\n            (record: RecordType) => ({ ...record, ...data }),\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getList'],\n            (res: GetListResult) =>\n                res && res.data ? { ...res, data: updateColl(res.data) } : res,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getInfiniteList'],\n            (res: UseInfiniteQueryResult<GetInfiniteListResult>['data']) =>\n                res && res.pages\n                    ? {\n                          ...res,\n                          pages: res.pages.map(page => ({\n                              ...page,\n                              data: updateColl(page.data),\n                          })),\n                      }\n                    : res,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getMany'],\n            (coll: RecordType[]) =>\n                coll && coll.length > 0 ? updateColl(coll) : coll,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getManyReference'],\n            (res: GetListResult) =>\n                res && res.data\n                    ? { data: updateColl(res.data), total: res.total }\n                    : res,\n            { updatedAt }\n        );\n    };\n\n    const mutation = useMutation<\n        RecordType,\n        MutationError,\n        Partial<UseUpdateMutateParams<RecordType>>\n    >(\n        ({\n            resource: callTimeResource = resource,\n            id: callTimeId = paramsRef.current.id,\n            data: callTimeData = paramsRef.current.data,\n            meta: callTimeMeta = paramsRef.current.meta,\n            previousData: callTimePreviousData = paramsRef.current.previousData,\n        } = {}) =>\n            dataProvider\n                .update<RecordType>(callTimeResource, {\n                    id: callTimeId,\n                    data: callTimeData,\n                    previousData: callTimePreviousData,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data),\n        {\n            ...reactMutationOptions,\n            onMutate: async (\n                variables: Partial<UseUpdateMutateParams<RecordType>>\n            ) => {\n                if (reactMutationOptions.onMutate) {\n                    const userContext =\n                        (await reactMutationOptions.onMutate(variables)) || {};\n                    return {\n                        snapshot: snapshot.current,\n                        // @ts-ignore\n                        ...userContext,\n                    };\n                } else {\n                    // Return a context object with the snapshot value\n                    return { snapshot: snapshot.current };\n                }\n            },\n            onError: (\n                error: MutationError,\n                variables: Partial<UseUpdateMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // If the mutation fails, use the context returned from onMutate to rollback\n                    context.snapshot.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                }\n\n                if (reactMutationOptions.onError) {\n                    return reactMutationOptions.onError(\n                        error,\n                        variables,\n                        context\n                    );\n                }\n                // call-time error callback is executed by react-query\n            },\n            onSuccess: (\n                data: RecordType,\n                variables: Partial<UseUpdateMutateParams<RecordType>> = {},\n                context: unknown\n            ) => {\n                if (mode.current === 'pessimistic') {\n                    // update the getOne and getList query cache with the new result\n                    const {\n                        resource: callTimeResource = resource,\n                        id: callTimeId = id,\n                    } = variables;\n                    updateCache({\n                        resource: callTimeResource,\n                        id: callTimeId,\n                        data,\n                    });\n\n                    if (reactMutationOptions.onSuccess) {\n                        reactMutationOptions.onSuccess(\n                            data,\n                            variables,\n                            context\n                        );\n                    }\n                    // call-time success callback is executed by react-query\n                }\n            },\n            onSettled: (\n                data: RecordType,\n                error: MutationError,\n                variables: Partial<UseUpdateMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // Always refetch after error or success:\n                    context.snapshot.forEach(([key]) => {\n                        queryClient.invalidateQueries(key);\n                    });\n                }\n\n                if (reactMutationOptions.onSettled) {\n                    return reactMutationOptions.onSettled(\n                        data,\n                        error,\n                        variables,\n                        context\n                    );\n                }\n            },\n        }\n    );\n\n    const update = async (\n        callTimeResource: string = resource,\n        callTimeParams: Partial<UpdateParams<RecordType>> = {},\n        updateOptions: MutateOptions<\n            RecordType,\n            unknown,\n            Partial<UseUpdateMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: boolean } = {}\n    ) => {\n        const {\n            mutationMode,\n            returnPromise = reactMutationOptions.returnPromise,\n            onSuccess,\n            onSettled,\n            onError,\n        } = updateOptions;\n\n        // store the hook time params *at the moment of the call*\n        // because they may change afterwards, which would break the undoable mode\n        // as the previousData would be overwritten by the optimistic update\n        paramsRef.current = params;\n\n        if (mutationMode) {\n            mode.current = mutationMode;\n        }\n\n        if (returnPromise && mode.current !== 'pessimistic') {\n            console.warn(\n                'The returnPromise parameter can only be used if the mutationMode is set to pessimistic'\n            );\n        }\n\n        if (mode.current === 'pessimistic') {\n            if (returnPromise) {\n                return mutation.mutateAsync(\n                    { resource: callTimeResource, ...callTimeParams },\n                    { onSuccess, onSettled, onError }\n                );\n            }\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSuccess, onSettled, onError }\n            );\n        }\n\n        const {\n            id: callTimeId = id,\n            data: callTimeData = data,\n            meta: callTimeMeta = meta,\n        } = callTimeParams;\n\n        // optimistic update as documented in https://react-query-v3.tanstack.com/guides/optimistic-updates\n        // except we do it in a mutate wrapper instead of the onMutate callback\n        // to have access to success side effects\n\n        const previousRecord = queryClient.getQueryData<RecordType>([\n            callTimeResource,\n            'getOne',\n            { id: String(callTimeId), meta: callTimeMeta },\n        ]);\n\n        const queryKeys = [\n            [\n                callTimeResource,\n                'getOne',\n                { id: String(callTimeId), meta: callTimeMeta },\n            ],\n            [callTimeResource, 'getList'],\n            [callTimeResource, 'getInfiniteList'],\n            [callTimeResource, 'getMany'],\n            [callTimeResource, 'getManyReference'],\n        ];\n\n        /**\n         * Snapshot the previous values via queryClient.getQueriesData()\n         *\n         * The snapshotData ref will contain an array of tuples [query key, associated data]\n         *\n         * @example\n         * [\n         *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n         *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n         *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n         * ]\n         *\n         * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n         */\n        snapshot.current = queryKeys.reduce(\n            (prev, curr) => prev.concat(queryClient.getQueriesData(curr)),\n            [] as Snapshot\n        );\n\n        // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n        await Promise.all(\n            snapshot.current.map(([key]) => queryClient.cancelQueries(key))\n        );\n\n        // Optimistically update to the new value\n        updateCache({\n            resource: callTimeResource,\n            id: callTimeId,\n            data: callTimeData,\n        });\n\n        // run the success callbacks during the next tick\n        if (onSuccess) {\n            setTimeout(\n                () =>\n                    onSuccess(\n                        { ...previousRecord, ...callTimeData },\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n        if (reactMutationOptions.onSuccess) {\n            setTimeout(\n                () =>\n                    reactMutationOptions.onSuccess(\n                        { ...previousRecord, ...callTimeData },\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n\n        if (mode.current === 'optimistic') {\n            // call the mutate method without success side effects\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSettled, onError }\n            );\n        } else {\n            // undoable mutation: register the mutation for later\n            undoableEventEmitter.once('end', ({ isUndo }) => {\n                if (isUndo) {\n                    // rollback\n                    snapshot.current.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                } else {\n                    // call the mutate method without success side effects\n                    mutation.mutate(\n                        { resource: callTimeResource, ...callTimeParams },\n                        { onSettled, onError }\n                    );\n                }\n            });\n        }\n    };\n\n    return [useEvent(update), mutation];\n};\n\ntype Snapshot = [key: QueryKey, value: any][];\n\nexport interface UseUpdateMutateParams<RecordType extends RaRecord = any> {\n    resource?: string;\n    id?: RecordType['id'];\n    data?: Partial<RecordType>;\n    previousData?: any;\n    meta?: any;\n}\n\nexport type UseUpdateOptions<\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n> = UseMutationOptions<\n    RecordType,\n    MutationError,\n    Partial<UseUpdateMutateParams<RecordType>>\n> & { mutationMode?: MutationMode; returnPromise?: boolean };\n\nexport type UseUpdateResult<\n    RecordType extends RaRecord = any,\n    TReturnPromise extends boolean = boolean,\n    MutationError = unknown\n> = [\n    (\n        resource?: string,\n        params?: Partial<UpdateParams<RecordType>>,\n        options?: MutateOptions<\n            RecordType,\n            MutationError,\n            Partial<UseUpdateMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: TReturnPromise }\n    ) => Promise<TReturnPromise extends true ? RecordType : void>,\n    UseMutationResult<\n        RecordType,\n        MutationError,\n        Partial<UpdateParams<RecordType> & { resource?: string }>,\n        unknown\n    >\n];\n"]},"metadata":{},"sourceType":"module"}
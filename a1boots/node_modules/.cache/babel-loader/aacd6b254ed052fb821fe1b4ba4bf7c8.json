{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListBase } from 'ra-core';\nimport { TitlePropType } from '../layout/Title';\nimport { ListView } from './ListView';\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n *\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * The <List> component accepts the following props:\n *\n * - actions\n * - aside: Side Component\n * - children: List Layout\n * - component\n * - disableAuthentication\n * - disableSyncWithLocation\n * - empty: Empty Page Component\n * - emptyWhileLoading\n * - exporter\n * - filters: Filter Inputs\n * - filter: Permanent Filter\n * - filterDefaultValues\n * - pagination: Pagination Component\n * - perPage: Pagination Size\n * - queryOptions\n * - sort: Default Sort Field & Order\n * - title\n * - sx: CSS API\n *\n * @example\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = () => (\n *     <List\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\n\nexport var List = function (_a) {\n  var debounce = _a.debounce,\n      disableAuthentication = _a.disableAuthentication,\n      disableSyncWithLocation = _a.disableSyncWithLocation,\n      exporter = _a.exporter,\n      filter = _a.filter,\n      filterDefaultValues = _a.filterDefaultValues,\n      perPage = _a.perPage,\n      queryOptions = _a.queryOptions,\n      resource = _a.resource,\n      sort = _a.sort,\n      storeKey = _a.storeKey,\n      rest = __rest(_a, [\"debounce\", \"disableAuthentication\", \"disableSyncWithLocation\", \"exporter\", \"filter\", \"filterDefaultValues\", \"perPage\", \"queryOptions\", \"resource\", \"sort\", \"storeKey\"]);\n\n  return React.createElement(ListBase, {\n    debounce: debounce,\n    disableAuthentication: disableAuthentication,\n    disableSyncWithLocation: disableSyncWithLocation,\n    exporter: exporter,\n    filter: filter,\n    filterDefaultValues: filterDefaultValues,\n    perPage: perPage,\n    queryOptions: queryOptions,\n    resource: resource,\n    sort: sort,\n    storeKey: storeKey\n  }, React.createElement(ListView, __assign({}, rest)));\n};\nList.propTypes = {\n  // the props you can change\n  // @ts-ignore-line\n  actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  aside: PropTypes.element,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  emptyWhileLoading: PropTypes.bool,\n  filter: PropTypes.object,\n  filterDefaultValues: PropTypes.object,\n  filters: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n  // @ts-ignore-line\n  pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  perPage: PropTypes.number.isRequired,\n  //@ts-ignore-line\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  sx: PropTypes.any,\n  title: TitlePropType,\n  // the props managed by react-admin\n  disableSyncWithLocation: PropTypes.bool,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  resource: PropTypes.string\n};\nList.defaultProps = {\n  filter: {},\n  perPage: 10\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","ListBase","TitlePropType","ListView","List","_a","disableAuthentication","disableSyncWithLocation","exporter","filter","filterDefaultValues","perPage","queryOptions","resource","sort","storeKey","rest","debounce","__assign","propTypes","actions","oneOfType","bool","element","aside","children","node","isRequired","className","string","emptyWhileLoading","object","filters","arrayOf","pagination","number","shape","field","order","sx","any","title","hasCreate","hasEdit","hasList","hasShow","defaultProps"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/List.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { ListBase, ListControllerProps, RaRecord } from 'ra-core';\n\nimport { TitlePropType } from '../layout/Title';\n\nimport { ListView, ListViewProps } from './ListView';\n\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n *\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * The <List> component accepts the following props:\n *\n * - actions\n * - aside: Side Component\n * - children: List Layout\n * - component\n * - disableAuthentication\n * - disableSyncWithLocation\n * - empty: Empty Page Component\n * - emptyWhileLoading\n * - exporter\n * - filters: Filter Inputs\n * - filter: Permanent Filter\n * - filterDefaultValues\n * - pagination: Pagination Component\n * - perPage: Pagination Size\n * - queryOptions\n * - sort: Default Sort Field & Order\n * - title\n * - sx: CSS API\n *\n * @example\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = () => (\n *     <List\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nexport const List = <RecordType extends RaRecord = any>({\n    debounce,\n    disableAuthentication,\n    disableSyncWithLocation,\n    exporter,\n    filter,\n    filterDefaultValues,\n    perPage,\n    queryOptions,\n    resource,\n    sort,\n    storeKey,\n    ...rest\n}: ListProps<RecordType>): ReactElement => (\n    <ListBase<RecordType>\n        debounce={debounce}\n        disableAuthentication={disableAuthentication}\n        disableSyncWithLocation={disableSyncWithLocation}\n        exporter={exporter}\n        filter={filter}\n        filterDefaultValues={filterDefaultValues}\n        perPage={perPage}\n        queryOptions={queryOptions}\n        resource={resource}\n        sort={sort}\n        storeKey={storeKey}\n    >\n        <ListView<RecordType> {...rest} />\n    </ListBase>\n);\n\nexport interface ListProps<RecordType extends RaRecord = any>\n    extends ListControllerProps<RecordType>,\n        ListViewProps {}\n\nList.propTypes = {\n    // the props you can change\n    // @ts-ignore-line\n    actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    aside: PropTypes.element,\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    emptyWhileLoading: PropTypes.bool,\n    filter: PropTypes.object,\n    filterDefaultValues: PropTypes.object,\n    filters: PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.arrayOf(PropTypes.element),\n    ]),\n    // @ts-ignore-line\n    pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    perPage: PropTypes.number.isRequired,\n    //@ts-ignore-line\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    sx: PropTypes.any,\n    title: TitlePropType,\n    // the props managed by react-admin\n    disableSyncWithLocation: PropTypes.bool,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasList: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    resource: PropTypes.string,\n};\n\nList.defaultProps = {\n    filter: {},\n    perPage: 10,\n};\n"]},"metadata":{},"sourceType":"module"}
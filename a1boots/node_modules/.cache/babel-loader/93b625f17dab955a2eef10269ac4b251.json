{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { ShowContext } from './ShowContext';\n/**\n * Hook to read the show controller props from the ShowContext.\n *\n * Mostly used within a <ShowContext.Provider> (e.g. as a descendent of <Show>).\n *\n * But you can also use it without a <ShowContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} ShowControllerResult\n *\n * @returns {ShowControllerResult} create controller props\n *\n * @see useShowController for how it is filled\n *\n */\n\nexport var useShowContext = function useShowContext(props) {\n  // Can't find a way to specify the RecordType when ShowContext is declared\n  // @ts-ignore\n  var context = useContext(ShowContext); // Props take precedence over the context\n\n  return useMemo(function () {\n    return defaults({}, props != null ? extractShowContextProps(props) : {}, context);\n  }, [context, props]);\n};\n/**\n * Extract only the show controller props\n *\n * @param {Object} props props passed to the useShowContext hook\n *\n * @returns {ShowControllerResult} show controller props\n */\n\nvar extractShowContextProps = function extractShowContextProps(_a) {\n  var record = _a.record,\n      data = _a.data,\n      defaultTitle = _a.defaultTitle,\n      isFetching = _a.isFetching,\n      isLoading = _a.isLoading,\n      resource = _a.resource;\n  return {\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    record: record || data,\n    data: record || data,\n    defaultTitle: defaultTitle,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    resource: resource\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAGA,SAASC,WAAT,QAA4B,eAA5B;AAGA;;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAC1BC,KAD0B,EACuB;EAEjD;EACA;EACA,IAAMC,OAAO,GAAGN,UAAU,CAAmCG,WAAnC,CAA1B,CAJiD,CAMjD;;EACA,OAAOF,OAAO,CACV;IACI,eAAQ,CACJ,EADI,EAEJI,KAAK,IAAI,IAAT,GAAgBE,uBAAuB,CAACF,KAAD,CAAvC,GAAiD,EAF7C,EAGJC,OAHI,CAAR;EAIC,CANK,EAOV,CAACA,OAAD,EAAUD,KAAV,CAPU,CAAd;AASH,CAjBM;AAmBP;;;;;;;;AAOA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,EAAD,EAO1B;MANFC,MAAM;MACNC,IAAI;MACJC,YAAY;MACZC,UAAU;MACVC,SAAS;MACTC,QAAQ;EACD,OAAC;IACR;IACA;IACAL,MAAM,EAAEA,MAAM,IAAIC,IAHV;IAIRA,IAAI,EAAED,MAAM,IAAIC,IAJR;IAKRC,YAAY,cALJ;IAMRC,UAAU,YANF;IAORC,SAAS,WAPD;IAQRC,QAAQ;EARA,CAAD;AAST,CAhBF","names":["useContext","useMemo","defaults","ShowContext","useShowContext","props","context","extractShowContextProps","_a","record","data","defaultTitle","isFetching","isLoading","resource"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/show/useShowContext.tsx"],"sourcesContent":["import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\n\nimport { RaRecord } from '../../types';\nimport { ShowContext } from './ShowContext';\nimport { ShowControllerResult } from './useShowController';\n\n/**\n * Hook to read the show controller props from the ShowContext.\n *\n * Mostly used within a <ShowContext.Provider> (e.g. as a descendent of <Show>).\n *\n * But you can also use it without a <ShowContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} ShowControllerResult\n *\n * @returns {ShowControllerResult} create controller props\n *\n * @see useShowController for how it is filled\n *\n */\nexport const useShowContext = <RecordType extends RaRecord = any>(\n    props?: Partial<ShowControllerResult<RecordType>>\n): ShowControllerResult<RecordType> => {\n    // Can't find a way to specify the RecordType when ShowContext is declared\n    // @ts-ignore\n    const context = useContext<ShowControllerResult<RecordType>>(ShowContext);\n\n    // Props take precedence over the context\n    return useMemo(\n        () =>\n            defaults(\n                {},\n                props != null ? extractShowContextProps(props) : {},\n                context\n            ),\n        [context, props]\n    );\n};\n\n/**\n * Extract only the show controller props\n *\n * @param {Object} props props passed to the useShowContext hook\n *\n * @returns {ShowControllerResult} show controller props\n */\nconst extractShowContextProps = ({\n    record,\n    data,\n    defaultTitle,\n    isFetching,\n    isLoading,\n    resource,\n}: any) => ({\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    record: record || data,\n    data: record || data,\n    defaultTitle,\n    isFetching,\n    isLoading,\n    resource,\n});\n"]},"metadata":{},"sourceType":"module"}
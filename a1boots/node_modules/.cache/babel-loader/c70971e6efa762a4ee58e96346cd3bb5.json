{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { isValidElement, cloneElement, createElement, useState, useEffect, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { TableCell, TableRow, Checkbox } from '@mui/material';\nimport { RecordContextProvider, shallowEqual, useExpanded, useResourceContext, useTranslate, useCreatePath, useRecordContext } from 'ra-core';\nimport { useNavigate } from 'react-router-dom';\nimport DatagridCell from './DatagridCell';\nimport ExpandRowButton from './ExpandRowButton';\nimport { DatagridClasses } from './useDatagridStyles';\nimport { useDatagridContext } from './useDatagridContext';\n\nvar computeNbColumns = function computeNbColumns(expand, children, hasBulkActions) {\n  return expand ? 1 + ( // show expand button\n  hasBulkActions ? 1 : 0) + // checkbox column\n  React.Children.toArray(children).filter(function (child) {\n    return !!child;\n  }).length // non-null children\n  : 0;\n}; // we don't need to compute columns if there is no expand panel;\n\n\nvar DatagridRow = React.forwardRef(function (props, ref) {\n  var _a, _b;\n\n  var children = props.children,\n      className = props.className,\n      expand = props.expand,\n      hasBulkActions = props.hasBulkActions,\n      hover = props.hover,\n      id = props.id,\n      onToggleItem = props.onToggleItem,\n      recordOverride = props.record,\n      rowClick = props.rowClick,\n      selected = props.selected,\n      style = props.style,\n      selectable = props.selectable,\n      rest = __rest(props, [\"children\", \"className\", \"expand\", \"hasBulkActions\", \"hover\", \"id\", \"onToggleItem\", \"record\", \"rowClick\", \"selected\", \"style\", \"selectable\"]);\n\n  var context = useDatagridContext();\n  var translate = useTranslate();\n  var record = useRecordContext(props);\n  var expandable = (!context || !context.isRowExpandable || context.isRowExpandable(record)) && expand;\n  var resource = useResourceContext(props);\n  var createPath = useCreatePath();\n\n  var _c = useExpanded(resource, id, context && context.expandSingle),\n      expanded = _c[0],\n      toggleExpanded = _c[1];\n\n  var _d = useState(function () {\n    return computeNbColumns(expandable, children, hasBulkActions);\n  }),\n      nbColumns = _d[0],\n      setNbColumns = _d[1];\n\n  useEffect(function () {\n    // Fields can be hidden dynamically based on permissions;\n    // The expand panel must span over the remaining columns\n    // So we must recompute the number of columns to span on\n    var newNbColumns = computeNbColumns(expandable, children, hasBulkActions);\n\n    if (newNbColumns !== nbColumns) {\n      setNbColumns(newNbColumns);\n    }\n  }, [expandable, nbColumns, children, hasBulkActions]);\n  var navigate = useNavigate();\n  var handleToggleExpand = useCallback(function (event) {\n    toggleExpanded();\n    event.stopPropagation();\n  }, [toggleExpanded]);\n  var handleToggleSelection = useCallback(function (event) {\n    if (!selectable) return;\n    onToggleItem(id, event);\n    event.stopPropagation();\n  }, [id, onToggleItem, selectable]);\n  var handleClick = useCallback(function (event) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var type, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            event.persist();\n            if (!(typeof rowClick === 'function')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , rowClick(id, resource, record)];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = rowClick;\n            _b.label = 3;\n\n          case 3:\n            type = _a;\n\n            if (type === false || type == null) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (['edit', 'show'].includes(type)) {\n              navigate(createPath({\n                resource: resource,\n                id: id,\n                type: type\n              }));\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (type === 'expand') {\n              handleToggleExpand(event);\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (type === 'toggleSelection') {\n              handleToggleSelection(event);\n              return [2\n              /*return*/\n              ];\n            }\n\n            navigate(type);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, [rowClick, id, resource, record, navigate, createPath, handleToggleExpand, handleToggleSelection]);\n  return React.createElement(RecordContextProvider, {\n    value: record\n  }, React.createElement(TableRow, __assign({\n    ref: ref,\n    className: clsx(className, (_a = {}, _a[DatagridClasses.expandable] = expandable, _a[DatagridClasses.selectable] = selectable, _a[DatagridClasses.clickableRow] = typeof rowClick === 'function' ? true : rowClick, _a)),\n    key: id,\n    style: style,\n    hover: hover,\n    onClick: handleClick\n  }, rest), expand && React.createElement(TableCell, {\n    padding: \"none\",\n    className: DatagridClasses.expandIconCell\n  }, expandable && React.createElement(ExpandRowButton, {\n    className: clsx(DatagridClasses.expandIcon, (_b = {}, _b[DatagridClasses.expanded] = expanded, _b)),\n    expanded: expanded,\n    onClick: handleToggleExpand,\n    expandContentId: \"\".concat(id, \"-expand\")\n  })), hasBulkActions && React.createElement(TableCell, {\n    padding: \"checkbox\"\n  }, React.createElement(Checkbox, {\n    \"aria-label\": translate('ra.action.select_row', {\n      _: 'Select this row'\n    }),\n    color: \"primary\",\n    className: \"select-item \".concat(DatagridClasses.checkbox),\n    checked: selectable && selected,\n    onClick: handleToggleSelection,\n    disabled: !selectable\n  })), React.Children.map(children, function (field, index) {\n    return isValidElement(field) ? React.createElement(DatagridCell, __assign({\n      key: \"\".concat(id, \"-\").concat(field.props.source || index),\n      className: clsx(\"column-\".concat(field.props.source), DatagridClasses.rowCell),\n      record: record\n    }, {\n      field: field,\n      resource: resource\n    })) : null;\n  })), expandable && expanded && React.createElement(TableRow, {\n    key: \"\".concat(id, \"-expand\"),\n    id: \"\".concat(id, \"-expand\"),\n    className: DatagridClasses.expandedPanel\n  }, React.createElement(TableCell, {\n    colSpan: nbColumns\n  }, isValidElement(expand) ? cloneElement(expand, {\n    // @ts-ignore\n    record: record,\n    resource: resource,\n    id: String(id)\n  }) : createElement(expand, {\n    record: record,\n    resource: resource,\n    id: String(id)\n  }))));\n});\nDatagridRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool.isRequired,\n  hover: PropTypes.bool,\n  id: PropTypes.any,\n  onToggleItem: PropTypes.func,\n  // @ts-ignore\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  // @ts-ignore\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.bool]),\n  selected: PropTypes.bool,\n  style: PropTypes.object,\n  selectable: PropTypes.bool\n};\nDatagridRow.defaultProps = {\n  hasBulkActions: false,\n  hover: true,\n  selected: false,\n  selectable: true\n};\n\nvar areEqual = function areEqual(prevProps, nextProps) {\n  var _1 = prevProps.children,\n      _2 = prevProps.expand,\n      prevPropsWithoutChildren = __rest(prevProps, [\"children\", \"expand\"]);\n\n  var _3 = nextProps.children,\n      _4 = nextProps.expand,\n      nextPropsWithoutChildren = __rest(nextProps, [\"children\", \"expand\"]);\n\n  return shallowEqual(prevPropsWithoutChildren, nextPropsWithoutChildren);\n};\n\nexport var PureDatagridRow = memo(DatagridRow, areEqual);\nPureDatagridRow.displayName = 'PureDatagridRow';\nexport default DatagridRow;","map":{"version":3,"mappings":"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","names":["React","isValidElement","cloneElement","createElement","useState","useEffect","useCallback","memo","PropTypes","clsx","TableCell","TableRow","Checkbox","RecordContextProvider","shallowEqual","useExpanded","useResourceContext","useTranslate","useCreatePath","useRecordContext","useNavigate","DatagridCell","ExpandRowButton","DatagridClasses","useDatagridContext","computeNbColumns","expand","children","hasBulkActions","Children","toArray","filter","child","length","DatagridRow","forwardRef","props","ref","className","hover","id","onToggleItem","recordOverride","rowClick","selected","style","selectable","rest","context","translate","record","expandable","isRowExpandable","resource","createPath","expandSingle","expanded","toggleExpanded","nbColumns","setNbColumns","newNbColumns","navigate","handleToggleExpand","event","stopPropagation","handleToggleSelection","handleClick","persist","_a","type","includes","value","__assign","clickableRow","key","onClick","padding","expandIconCell","expandIcon","_b","expandContentId","_","color","checkbox","checked","disabled","map","field","index","concat","source","rowCell","expandedPanel","colSpan","String","propTypes","node","string","oneOfType","element","elementType","bool","isRequired","any","func","object","defaultProps","areEqual","prevProps","nextProps","_1","_2","prevPropsWithoutChildren","_3","_4","nextPropsWithoutChildren","PureDatagridRow","displayName"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/datagrid/DatagridRow.tsx"],"sourcesContent":["import React, {\n    isValidElement,\n    cloneElement,\n    createElement,\n    useState,\n    useEffect,\n    useCallback,\n    memo,\n    FC,\n    ReactElement,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { TableCell, TableRow, TableRowProps, Checkbox } from '@mui/material';\nimport {\n    Identifier,\n    RaRecord,\n    RecordContextProvider,\n    shallowEqual,\n    useExpanded,\n    useResourceContext,\n    useTranslate,\n    useCreatePath,\n    useRecordContext,\n} from 'ra-core';\nimport { useNavigate } from 'react-router-dom';\n\nimport DatagridCell from './DatagridCell';\nimport ExpandRowButton from './ExpandRowButton';\nimport { DatagridClasses } from './useDatagridStyles';\nimport { useDatagridContext } from './useDatagridContext';\n\nconst computeNbColumns = (expand, children, hasBulkActions) =>\n    expand\n        ? 1 + // show expand button\n          (hasBulkActions ? 1 : 0) + // checkbox column\n          React.Children.toArray(children).filter(child => !!child).length // non-null children\n        : 0; // we don't need to compute columns if there is no expand panel;\n\nconst DatagridRow: FC<DatagridRowProps> = React.forwardRef((props, ref) => {\n    const {\n        children,\n        className,\n        expand,\n        hasBulkActions,\n        hover,\n        id,\n        onToggleItem,\n        record: recordOverride,\n        rowClick,\n        selected,\n        style,\n        selectable,\n        ...rest\n    } = props;\n\n    const context = useDatagridContext();\n    const translate = useTranslate();\n    const record = useRecordContext(props);\n    const expandable =\n        (!context ||\n            !context.isRowExpandable ||\n            context.isRowExpandable(record)) &&\n        expand;\n    const resource = useResourceContext(props);\n    const createPath = useCreatePath();\n    const [expanded, toggleExpanded] = useExpanded(\n        resource,\n        id,\n        context && context.expandSingle\n    );\n    const [nbColumns, setNbColumns] = useState(() =>\n        computeNbColumns(expandable, children, hasBulkActions)\n    );\n    useEffect(() => {\n        // Fields can be hidden dynamically based on permissions;\n        // The expand panel must span over the remaining columns\n        // So we must recompute the number of columns to span on\n        const newNbColumns = computeNbColumns(\n            expandable,\n            children,\n            hasBulkActions\n        );\n        if (newNbColumns !== nbColumns) {\n            setNbColumns(newNbColumns);\n        }\n    }, [expandable, nbColumns, children, hasBulkActions]);\n\n    const navigate = useNavigate();\n\n    const handleToggleExpand = useCallback(\n        event => {\n            toggleExpanded();\n            event.stopPropagation();\n        },\n        [toggleExpanded]\n    );\n    const handleToggleSelection = useCallback(\n        event => {\n            if (!selectable) return;\n            onToggleItem(id, event);\n            event.stopPropagation();\n        },\n        [id, onToggleItem, selectable]\n    );\n    const handleClick = useCallback(\n        async event => {\n            event.persist();\n            const type =\n                typeof rowClick === 'function'\n                    ? await rowClick(id, resource, record)\n                    : rowClick;\n            if (type === false || type == null) {\n                return;\n            }\n            if (['edit', 'show'].includes(type)) {\n                navigate(createPath({ resource, id, type }));\n                return;\n            }\n            if (type === 'expand') {\n                handleToggleExpand(event);\n                return;\n            }\n            if (type === 'toggleSelection') {\n                handleToggleSelection(event);\n                return;\n            }\n            navigate(type);\n        },\n        [\n            rowClick,\n            id,\n            resource,\n            record,\n            navigate,\n            createPath,\n            handleToggleExpand,\n            handleToggleSelection,\n        ]\n    );\n\n    return (\n        <RecordContextProvider value={record}>\n            <TableRow\n                ref={ref}\n                className={clsx(className, {\n                    [DatagridClasses.expandable]: expandable,\n                    [DatagridClasses.selectable]: selectable,\n                    [DatagridClasses.clickableRow]:\n                        typeof rowClick === 'function' ? true : rowClick,\n                })}\n                key={id}\n                style={style}\n                hover={hover}\n                onClick={handleClick}\n                {...rest}\n            >\n                {expand && (\n                    <TableCell\n                        padding=\"none\"\n                        className={DatagridClasses.expandIconCell}\n                    >\n                        {expandable && (\n                            <ExpandRowButton\n                                className={clsx(DatagridClasses.expandIcon, {\n                                    [DatagridClasses.expanded]: expanded,\n                                })}\n                                expanded={expanded}\n                                onClick={handleToggleExpand}\n                                expandContentId={`${id}-expand`}\n                            />\n                        )}\n                    </TableCell>\n                )}\n                {hasBulkActions && (\n                    <TableCell padding=\"checkbox\">\n                        <Checkbox\n                            aria-label={translate('ra.action.select_row', {\n                                _: 'Select this row',\n                            })}\n                            color=\"primary\"\n                            className={`select-item ${DatagridClasses.checkbox}`}\n                            checked={selectable && selected}\n                            onClick={handleToggleSelection}\n                            disabled={!selectable}\n                        />\n                    </TableCell>\n                )}\n                {React.Children.map(children, (field, index) =>\n                    isValidElement(field) ? (\n                        <DatagridCell\n                            key={`${id}-${\n                                (field.props as any).source || index\n                            }`}\n                            className={clsx(\n                                `column-${(field.props as any).source}`,\n                                DatagridClasses.rowCell\n                            )}\n                            record={record}\n                            {...{ field, resource }}\n                        />\n                    ) : null\n                )}\n            </TableRow>\n            {expandable && expanded && (\n                <TableRow\n                    key={`${id}-expand`}\n                    id={`${id}-expand`}\n                    className={DatagridClasses.expandedPanel}\n                >\n                    <TableCell colSpan={nbColumns}>\n                        {isValidElement(expand)\n                            ? cloneElement(expand, {\n                                  // @ts-ignore\n                                  record,\n                                  resource,\n                                  id: String(id),\n                              })\n                            : createElement(expand, {\n                                  record,\n                                  resource,\n                                  id: String(id),\n                              })}\n                    </TableCell>\n                </TableRow>\n            )}\n        </RecordContextProvider>\n    );\n});\n\nDatagridRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool.isRequired,\n    hover: PropTypes.bool,\n    id: PropTypes.any,\n    onToggleItem: PropTypes.func,\n    // @ts-ignore\n    record: PropTypes.object,\n    resource: PropTypes.string,\n    // @ts-ignore\n    rowClick: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.bool,\n    ]),\n    selected: PropTypes.bool,\n    style: PropTypes.object,\n    selectable: PropTypes.bool,\n};\n\nDatagridRow.defaultProps = {\n    hasBulkActions: false,\n    hover: true,\n    selected: false,\n    selectable: true,\n};\n\nexport interface DatagridRowProps\n    extends Omit<TableRowProps, 'id' | 'classes'> {\n    className?: string;\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RaRecord;\n              resource: string;\n          }>;\n    hasBulkActions?: boolean;\n    hover?: boolean;\n    id?: Identifier;\n    onToggleItem?: (\n        id: Identifier,\n        event: React.TouchEvent | React.MouseEvent\n    ) => void;\n    record?: RaRecord;\n    resource?: string;\n    rowClick?: RowClickFunction | string | false;\n    selected?: boolean;\n    style?: any;\n    selectable?: boolean;\n}\n\nexport type RowClickFunction = (\n    id: Identifier,\n    resource: string,\n    record: RaRecord\n) => string | false | Promise<string | false>;\n\nconst areEqual = (prevProps, nextProps) => {\n    const { children: _1, expand: _2, ...prevPropsWithoutChildren } = prevProps;\n    const { children: _3, expand: _4, ...nextPropsWithoutChildren } = nextProps;\n    return shallowEqual(prevPropsWithoutChildren, nextPropsWithoutChildren);\n};\n\nexport const PureDatagridRow = memo(DatagridRow, areEqual);\n\nPureDatagridRow.displayName = 'PureDatagridRow';\n\nexport default DatagridRow;\n"]},"metadata":{},"sourceType":"module"}
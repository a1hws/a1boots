{"ast":null,"code":"import { CREATE, DELETE, DELETE_MANY, GET_LIST, GET_MANY, GET_MANY_REFERENCE, GET_ONE, UPDATE, UPDATE_MANY } from './dataFetchActions';\n\nvar defaultDataProvider = function defaultDataProvider() {\n  return Promise.resolve();\n};\n\ndefaultDataProvider.create = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.delete = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.deleteMany = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getList = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getMany = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getManyReference = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.getOne = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.update = function () {\n  return Promise.resolve(null);\n};\n\ndefaultDataProvider.updateMany = function () {\n  return Promise.resolve(null);\n};\n\nvar fetchMap = {\n  create: CREATE,\n  delete: DELETE,\n  deleteMany: DELETE_MANY,\n  getList: GET_LIST,\n  getMany: GET_MANY,\n  getManyReference: GET_MANY_REFERENCE,\n  getOne: GET_ONE,\n  update: UPDATE,\n  updateMany: UPDATE_MANY\n};\n/**\n * Turn a function-based dataProvider to an object-based one\n *\n * Allows using legacy dataProviders transparently.\n *\n * @param {Function} legacyDataProvider A legacy dataProvider (type, resource, params) => Promise<any>\n *\n * @returns {Object} A dataProvider that react-admin can use\n */\n\nvar convertLegacyDataProvider = function convertLegacyDataProvider(legacyDataProvider) {\n  var proxy = new Proxy(defaultDataProvider, {\n    get: function get(_, name) {\n      return function (resource, params) {\n        if (Object.keys(fetchMap).includes(name.toString())) {\n          var fetchType = fetchMap[name.toString()];\n          return legacyDataProvider(fetchType, resource, params);\n        }\n\n        return legacyDataProvider(name.toString(), resource, params);\n      };\n    },\n    apply: function apply(_, __, args) {\n      return legacyDataProvider.apply(legacyDataProvider, args);\n    }\n  });\n  return proxy;\n};\n\nexport default convertLegacyDataProvider;","map":{"version":3,"mappings":"AAAA,SACIA,MADJ,EAEIC,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ,EAKIC,QALJ,EAMIC,kBANJ,EAOIC,OAPJ,EAQIC,MARJ,EASIC,WATJ,QAUO,oBAVP;;AAaA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;EAAM,cAAO,CAACC,OAAR;AAAiB,CAAnD;;AACAD,mBAAmB,CAACE,MAApB,GAA6B;EAAM,cAAO,CAACD,OAAR,CAAgB,IAAhB;AAAqB,CAAxD;;AACAD,mBAAmB,CAACG,MAApB,GAA6B;EAAM,cAAO,CAACF,OAAR,CAAgB,IAAhB;AAAqB,CAAxD;;AACAD,mBAAmB,CAACI,UAApB,GAAiC;EAAM,cAAO,CAACH,OAAR,CAAgB,IAAhB;AAAqB,CAA5D;;AACAD,mBAAmB,CAACK,OAApB,GAA8B;EAAM,cAAO,CAACJ,OAAR,CAAgB,IAAhB;AAAqB,CAAzD;;AACAD,mBAAmB,CAACM,OAApB,GAA8B;EAAM,cAAO,CAACL,OAAR,CAAgB,IAAhB;AAAqB,CAAzD;;AACAD,mBAAmB,CAACO,gBAApB,GAAuC;EAAM,cAAO,CAACN,OAAR,CAAgB,IAAhB;AAAqB,CAAlE;;AACAD,mBAAmB,CAACQ,MAApB,GAA6B;EAAM,cAAO,CAACP,OAAR,CAAgB,IAAhB;AAAqB,CAAxD;;AACAD,mBAAmB,CAACS,MAApB,GAA6B;EAAM,cAAO,CAACR,OAAR,CAAgB,IAAhB;AAAqB,CAAxD;;AACAD,mBAAmB,CAACU,UAApB,GAAiC;EAAM,cAAO,CAACT,OAAR,CAAgB,IAAhB;AAAqB,CAA5D;;AAEA,IAAMU,QAAQ,GAAG;EACbT,MAAM,EAAEX,MADK;EAEbY,MAAM,EAAEX,MAFK;EAGbY,UAAU,EAAEX,WAHC;EAIbY,OAAO,EAAEX,QAJI;EAKbY,OAAO,EAAEX,QALI;EAMbY,gBAAgB,EAAEX,kBANL;EAObY,MAAM,EAAEX,OAPK;EAQbY,MAAM,EAAEX,MARK;EASbY,UAAU,EAAEX;AATC,CAAjB;AAeA;;;;;;;;;;AASA,IAAMa,yBAAyB,GAAG,SAA5BA,yBAA4B,CAC9BC,kBAD8B,EACQ;EAEtC,IAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUf,mBAAV,EAA+B;IACzCgB,GAAG,eAACC,CAAD,EAAIC,IAAJ,EAAQ;MACP,OAAO,UAACC,QAAD,EAAWC,MAAX,EAAiB;QACpB,IAAIC,MAAM,CAACC,IAAP,CAAYX,QAAZ,EAAsBY,QAAtB,CAA+BL,IAAI,CAACM,QAAL,EAA/B,CAAJ,EAAqD;UACjD,IAAMC,SAAS,GAAGd,QAAQ,CAACO,IAAI,CAACM,QAAL,EAAD,CAA1B;UACA,OAAOX,kBAAkB,CAACY,SAAD,EAAYN,QAAZ,EAAsBC,MAAtB,CAAzB;QACH;;QAED,OAAOP,kBAAkB,CAACK,IAAI,CAACM,QAAL,EAAD,EAAkBL,QAAlB,EAA4BC,MAA5B,CAAzB;MACH,CAPD;IAQH,CAVwC;IAWzCM,KAAK,iBAACT,CAAD,EAAIU,EAAJ,EAAQC,IAAR,EAAY;MACb,OAAOf,kBAAkB,CAACa,KAAnB,CAAyBb,kBAAzB,EAA6Ce,IAA7C,CAAP;IACH;EAbwC,CAA/B,CAAd;EAgBA,OAAOd,KAAP;AACH,CApBD;;AAsBA,eAAeF,yBAAf","names":["CREATE","DELETE","DELETE_MANY","GET_LIST","GET_MANY","GET_MANY_REFERENCE","GET_ONE","UPDATE","UPDATE_MANY","defaultDataProvider","resolve","create","delete","deleteMany","getList","getMany","getManyReference","getOne","update","updateMany","fetchMap","convertLegacyDataProvider","legacyDataProvider","proxy","Proxy","get","_","name","resource","params","Object","keys","includes","toString","fetchType","apply","__","args"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/convertLegacyDataProvider.ts"],"sourcesContent":["import {\n    CREATE,\n    DELETE,\n    DELETE_MANY,\n    GET_LIST,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n    GET_ONE,\n    UPDATE,\n    UPDATE_MANY,\n} from './dataFetchActions';\nimport { LegacyDataProvider, DataProvider } from '../types';\n\nconst defaultDataProvider = () => Promise.resolve();\ndefaultDataProvider.create = () => Promise.resolve(null);\ndefaultDataProvider.delete = () => Promise.resolve(null);\ndefaultDataProvider.deleteMany = () => Promise.resolve(null);\ndefaultDataProvider.getList = () => Promise.resolve(null);\ndefaultDataProvider.getMany = () => Promise.resolve(null);\ndefaultDataProvider.getManyReference = () => Promise.resolve(null);\ndefaultDataProvider.getOne = () => Promise.resolve(null);\ndefaultDataProvider.update = () => Promise.resolve(null);\ndefaultDataProvider.updateMany = () => Promise.resolve(null);\n\nconst fetchMap = {\n    create: CREATE,\n    delete: DELETE,\n    deleteMany: DELETE_MANY,\n    getList: GET_LIST,\n    getMany: GET_MANY,\n    getManyReference: GET_MANY_REFERENCE,\n    getOne: GET_ONE,\n    update: UPDATE,\n    updateMany: UPDATE_MANY,\n};\n\ninterface ConvertedDataProvider extends DataProvider {\n    (type: string, resource: string, params: any): Promise<any>;\n}\n/**\n * Turn a function-based dataProvider to an object-based one\n *\n * Allows using legacy dataProviders transparently.\n *\n * @param {Function} legacyDataProvider A legacy dataProvider (type, resource, params) => Promise<any>\n *\n * @returns {Object} A dataProvider that react-admin can use\n */\nconst convertLegacyDataProvider = (\n    legacyDataProvider: LegacyDataProvider\n): ConvertedDataProvider => {\n    const proxy = new Proxy(defaultDataProvider, {\n        get(_, name) {\n            return (resource, params) => {\n                if (Object.keys(fetchMap).includes(name.toString())) {\n                    const fetchType = fetchMap[name.toString()];\n                    return legacyDataProvider(fetchType, resource, params);\n                }\n\n                return legacyDataProvider(name.toString(), resource, params);\n            };\n        },\n        apply(_, __, args) {\n            return legacyDataProvider.apply(legacyDataProvider, args);\n        },\n    });\n\n    return proxy;\n};\n\nexport default convertLegacyDataProvider;\n"]},"metadata":{},"sourceType":"module"}
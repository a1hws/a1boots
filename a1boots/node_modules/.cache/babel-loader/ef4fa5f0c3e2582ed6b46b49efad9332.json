{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useRecordContext } from 'ra-core';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Field using a render function\n *\n * @example\n * <FunctionField\n *     source=\"last_name\" // used for sorting\n *     label=\"Name\"\n *     render={record => record && `${record.first_name} ${record.last_name}`}\n * />\n */\n\nexport var FunctionField = function FunctionField(props) {\n  var className = props.className,\n      _a = props.source,\n      source = _a === void 0 ? '' : _a,\n      render = props.render,\n      rest = __rest(props, [\"className\", \"source\", \"render\"]);\n\n  var record = useRecordContext(props);\n  return useMemo(function () {\n    return record ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), render(record, source)) : null;\n  }, [className, record, source, render, rest]);\n};\nFunctionField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  render: PropTypes.func.isRequired\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAA4C,0BAA5C;AAEA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAAqBC,cAArB,QAA2C,SAA3C;AAEA;;;;;;;;;;;AAWA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAGzBC,KAHyB,EAGY;EAE7B,aAAS,GAAmCA,KAAK,UAAjD;EAAA,IAAWC,KAAiCD,KAAK,OAAjD;EAAA,IAAWE,MAAM,mBAAG,EAAH,GAAKD,EAAtB;EAAA,IAAwBE,MAAM,GAAcH,KAAK,OAAjD;EAAA,IAAmCI,IAAI,UAAKJ,KAAL,EAAzC,iCAAyC,CAAvC;;EACR,IAAMK,MAAM,GAAGX,gBAAgB,CAACM,KAAD,CAA/B;EACA,OAAOP,OAAO,CACV;IACI,aAAM,GACFD,oBAACI,UAAD,EAAWU;MACPC,SAAS,EAAC,MADH;MAEPC,OAAO,EAAC,OAFD;MAGPC,SAAS,EAAEA;IAHJ,GAIHZ,sBAAsB,CAACO,IAAD,CAJnB,CAAX,EAMKD,MAAM,CAACE,MAAD,EAASH,MAAT,CANX,CADE,GASF,IATJ;EASQ,CAXF,EAYV,CAACO,SAAD,EAAYJ,MAAZ,EAAoBH,MAApB,EAA4BC,MAA5B,EAAoCC,IAApC,CAZU,CAAd;AAcH,CArBM;AAuBPL,aAAa,CAACW,SAAd,GAAuBJ,+BAEhBV,UAAU,CAACc,SAFK,GAGhBZ,cAHgB,GAGF;EACjBK,MAAM,EAAER,SAAS,CAACgB,IAAV,CAAeC;AADN,CAHE,CAAvB","names":["React","useMemo","useRecordContext","PropTypes","Typography","sanitizeFieldRestProps","fieldPropTypes","FunctionField","props","_a","source","render","rest","record","__assign","component","variant","className","propTypes","func","isRequired"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/FunctionField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useMemo } from 'react';\nimport { useRecordContext } from 'ra-core';\nimport PropTypes from 'prop-types';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\n\n/**\n * Field using a render function\n *\n * @example\n * <FunctionField\n *     source=\"last_name\" // used for sorting\n *     label=\"Name\"\n *     render={record => record && `${record.first_name} ${record.last_name}`}\n * />\n */\n\nexport const FunctionField = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: FunctionFieldProps<RecordType>\n) => {\n    const { className, source = '', render, ...rest } = props;\n    const record = useRecordContext(props);\n    return useMemo(\n        () =>\n            record ? (\n                <Typography\n                    component=\"span\"\n                    variant=\"body2\"\n                    className={className}\n                    {...sanitizeFieldRestProps(rest)}\n                >\n                    {render(record, source)}\n                </Typography>\n            ) : null,\n        [className, record, source, render, rest]\n    );\n};\n\nFunctionField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    render: PropTypes.func.isRequired,\n};\n\nexport interface FunctionFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    render: (record?: RecordType, source?: string) => any;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { BulkUpdateWithConfirmButton } from './BulkUpdateWithConfirmButton';\nimport { BulkUpdateWithUndoButton } from './BulkUpdateWithUndoButton';\n/**\n * Updates the selected rows.\n *\n * To be used inside the <List bulkActionButtons> prop (where it's enabled by default).\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Fragment } from 'react';\n * import { BulkUpdateButton, BulkExportButton } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <Fragment>\n *         <BulkExportButton />\n *         <BulkUpdateButton label=\"Reset Views\" data={{ views: 0 }} />\n *     </Fragment>\n * );\n *\n * export const PostList = () => (\n *     <List bulkActionButtons={<PostBulkActionButtons />}>\n *         ...\n *     </List>\n * );\n */\n\nexport var BulkUpdateButton = function (props) {\n  var mutationMode = props.mutationMode,\n      rest = __rest(props, [\"mutationMode\"]);\n\n  return mutationMode === 'undoable' ? React.createElement(BulkUpdateWithUndoButton, __assign({}, rest)) : React.createElement(BulkUpdateWithConfirmButton, __assign({\n    mutationMode: mutationMode\n  }, rest));\n};\nBulkUpdateButton.propTypes = {\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  icon: PropTypes.element\n};\nBulkUpdateButton.defaultProps = {\n  mutationMode: 'undoable',\n  data: []\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACIC,2BADJ,QAGO,+BAHP;AAIA,SACIC,wBADJ,QAGO,4BAHP;AAMA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,gBAAgB,GAAG,UAACC,KAAD,EAA6B;EACjD,gBAAY,GAAcA,KAAK,aAA/B;EAAA,IAAiBC,IAAI,UAAKD,KAAL,EAAvB,gBAAuB,CAArB;;EAER,OAAOE,YAAY,KAAK,UAAjB,GACHP,oBAACG,wBAAD,EAAyBK,aAAKF,IAAL,CAAzB,CADG,GAGHN,oBAACE,2BAAD,EAA4BM;IAACD,YAAY,EAAEA;EAAf,GAAiCD,IAAjC,CAA5B,CAHJ;AAKH,CARM;AAiBPF,gBAAgB,CAACK,SAAjB,GAA6B;EACzBC,KAAK,EAAET,SAAS,CAACU,MADQ;EAEzBC,QAAQ,EAAEX,SAAS,CAACU,MAFK;EAGzBE,WAAW,EAAEZ,SAAS,CAACa,OAAV,CAAkBb,SAAS,CAACc,GAA5B,CAHY;EAIzBR,YAAY,EAAEN,SAAS,CAACe,KAAV,CAAgB,CAAC,aAAD,EAAgB,YAAhB,EAA8B,UAA9B,CAAhB,CAJW;EAKzBC,IAAI,EAAEhB,SAAS,CAACiB;AALS,CAA7B;AAQAd,gBAAgB,CAACe,YAAjB,GAAgC;EAC5BZ,YAAY,EAAE,UADc;EAE5Ba,IAAI,EAAE;AAFsB,CAAhC","names":["React","PropTypes","BulkUpdateWithConfirmButton","BulkUpdateWithUndoButton","BulkUpdateButton","props","rest","mutationMode","__assign","propTypes","label","string","resource","selectedIds","arrayOf","any","oneOf","icon","element","defaultProps","data"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/BulkUpdateButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    BulkUpdateWithConfirmButton,\n    BulkUpdateWithConfirmButtonProps,\n} from './BulkUpdateWithConfirmButton';\nimport {\n    BulkUpdateWithUndoButton,\n    BulkUpdateWithUndoButtonProps,\n} from './BulkUpdateWithUndoButton';\nimport { MutationMode } from 'ra-core';\n\n/**\n * Updates the selected rows.\n *\n * To be used inside the <List bulkActionButtons> prop (where it's enabled by default).\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Fragment } from 'react';\n * import { BulkUpdateButton, BulkExportButton } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <Fragment>\n *         <BulkExportButton />\n *         <BulkUpdateButton label=\"Reset Views\" data={{ views: 0 }} />\n *     </Fragment>\n * );\n *\n * export const PostList = () => (\n *     <List bulkActionButtons={<PostBulkActionButtons />}>\n *         ...\n *     </List>\n * );\n */\nexport const BulkUpdateButton = (props: BulkUpdateButtonProps) => {\n    const { mutationMode, ...rest } = props;\n\n    return mutationMode === 'undoable' ? (\n        <BulkUpdateWithUndoButton {...rest} />\n    ) : (\n        <BulkUpdateWithConfirmButton mutationMode={mutationMode} {...rest} />\n    );\n};\n\ninterface Props {\n    mutationMode?: MutationMode;\n}\n\nexport type BulkUpdateButtonProps = Props &\n    (BulkUpdateWithUndoButtonProps | BulkUpdateWithConfirmButtonProps);\n\nBulkUpdateButton.propTypes = {\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    icon: PropTypes.element,\n};\n\nBulkUpdateButton.defaultProps = {\n    mutationMode: 'undoable',\n    data: [],\n};\n"]},"metadata":{},"sourceType":"module"}
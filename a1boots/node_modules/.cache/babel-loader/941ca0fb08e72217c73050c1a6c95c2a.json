{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { EditContext } from './EditContext';\n/**\n * Hook to read the edit controller props from the CreateContext.\n *\n * Mostly used within a <EditContext.Provider> (e.g. as a descendent of <Edit>).\n *\n * But you can also use it without a <EditContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} EditControllerProps\n *\n * @returns {EditControllerResult} edit controller props\n *\n * @see useEditController for how it is filled\n *\n */\n\nexport var useEditContext = function (props) {\n  // Can't find a way to specify the RecordType when EditContext is declared\n  // @ts-ignore\n  var context = useContext(EditContext); // Props take precedence over the context\n\n  return useMemo(function () {\n    return defaults({}, props != null ? extractEditContextProps(props) : {}, context);\n  }, [context, props]);\n};\n/**\n * Extract only the edit controller props\n *\n * @param {Object} props props passed to the useEditContext hook\n *\n * @returns {EditControllerResult} edit controller props\n */\n\nvar extractEditContextProps = function (_a) {\n  var data = _a.data,\n      record = _a.record,\n      defaultTitle = _a.defaultTitle,\n      isFetching = _a.isFetching,\n      isLoading = _a.isLoading,\n      mutationMode = _a.mutationMode,\n      redirect = _a.redirect,\n      resource = _a.resource,\n      save = _a.save,\n      saving = _a.saving;\n  return {\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    data: record || data,\n    record: record || data,\n    defaultTitle: defaultTitle,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    mutationMode: mutationMode,\n    redirect: redirect,\n    resource: resource,\n    save: save,\n    saving: saving\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAGA,SAASC,WAAT,QAA4B,eAA5B;AAGA;;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAMC,cAAc,GAAG,UAC1BC,KAD0B,EACuB;EAEjD;EACA;EACA,IAAMC,OAAO,GAAGN,UAAU,CAAmCG,WAAnC,CAA1B,CAJiD,CAMjD;;EACA,OAAOF,OAAO,CACV;IACI,eAAQ,CACJ,EADI,EAEJI,KAAK,IAAI,IAAT,GAAgBE,uBAAuB,CAACF,KAAD,CAAvC,GAAiD,EAF7C,EAGJC,OAHI,CAAR;EAIC,CANK,EAOV,CAACA,OAAD,EAAUD,KAAV,CAPU,CAAd;AASH,CAjBM;AAmBP;;;;;;;;AAOA,IAAME,uBAAuB,GAAG,UAACC,EAAD,EAW1B;MAVFC,IAAI;MACJC,MAAM;MACNC,YAAY;MACZC,UAAU;MACVC,SAAS;MACTC,YAAY;MACZC,QAAQ;MACRC,QAAQ;MACRC,IAAI;MACJC,MAAM;EACC,OAAC;IACR;IACA;IACAT,IAAI,EAAEC,MAAM,IAAID,IAHR;IAIRC,MAAM,EAAEA,MAAM,IAAID,IAJV;IAKRE,YAAY,cALJ;IAMRC,UAAU,YANF;IAORC,SAAS,WAPD;IAQRC,YAAY,cARJ;IASRC,QAAQ,UATA;IAURC,QAAQ,UAVA;IAWRC,IAAI,MAXI;IAYRC,MAAM;EAZE,CAAD;AAaT,CAxBF","names":["useContext","useMemo","defaults","EditContext","useEditContext","props","context","extractEditContextProps","_a","data","record","defaultTitle","isFetching","isLoading","mutationMode","redirect","resource","save","saving"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/edit/useEditContext.tsx"],"sourcesContent":["import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\n\nimport { RaRecord } from '../../types';\nimport { EditContext } from './EditContext';\nimport { EditControllerResult } from './useEditController';\n\n/**\n * Hook to read the edit controller props from the CreateContext.\n *\n * Mostly used within a <EditContext.Provider> (e.g. as a descendent of <Edit>).\n *\n * But you can also use it without a <EditContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} EditControllerProps\n *\n * @returns {EditControllerResult} edit controller props\n *\n * @see useEditController for how it is filled\n *\n */\nexport const useEditContext = <RecordType extends RaRecord = any>(\n    props?: Partial<EditControllerResult<RecordType>>\n): EditControllerResult<RecordType> => {\n    // Can't find a way to specify the RecordType when EditContext is declared\n    // @ts-ignore\n    const context = useContext<EditControllerResult<RecordType>>(EditContext);\n\n    // Props take precedence over the context\n    return useMemo(\n        () =>\n            defaults(\n                {},\n                props != null ? extractEditContextProps(props) : {},\n                context\n            ),\n        [context, props]\n    );\n};\n\n/**\n * Extract only the edit controller props\n *\n * @param {Object} props props passed to the useEditContext hook\n *\n * @returns {EditControllerResult} edit controller props\n */\nconst extractEditContextProps = ({\n    data,\n    record,\n    defaultTitle,\n    isFetching,\n    isLoading,\n    mutationMode,\n    redirect,\n    resource,\n    save,\n    saving,\n}: any) => ({\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    data: record || data,\n    record: record || data,\n    defaultTitle,\n    isFetching,\n    isLoading,\n    mutationMode,\n    redirect,\n    resource,\n    save,\n    saving,\n});\n"]},"metadata":{},"sourceType":"module"}
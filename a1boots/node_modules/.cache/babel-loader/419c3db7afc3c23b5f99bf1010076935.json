{"ast":null,"code":"import { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useRecordContext } from '../controller';\n/*\n * This hook updates the input default value whenever the record changes\n * It applies either the record value if it has one or the defaultValue if it was specified\n */\n\nexport var useApplyInputDefaultValues = function (props) {\n  var defaultValue = props.defaultValue,\n      source = props.source;\n  var record = useRecordContext(props);\n\n  var _a = useFormContext(),\n      getValues = _a.getValues,\n      resetField = _a.resetField,\n      getFieldState = _a.getFieldState,\n      formState = _a.formState;\n\n  var recordValue = get(record, source);\n  var formValue = get(getValues(), source);\n  var isDirty = getFieldState(source, formState).isDirty;\n  useEffect(function () {\n    if (defaultValue == null) return;\n\n    if (formValue == null && recordValue == null && !isDirty) {\n      // special case for ArrayInput: since we use get(record, source),\n      // if source is like foo.23.bar, this effect will run.\n      // but we only want to set the default value for the subfield bar\n      // if the record actually has a value for foo.23\n      var pathContainsIndex = source.split('.').some(function (pathPart) {\n        return numericRegex.test(pathPart);\n      });\n\n      if (pathContainsIndex) {\n        var parentPath = source.split('.').slice(0, -1).join('.');\n        var parentValue = get(getValues(), parentPath);\n\n        if (parentValue == null) {\n          // the parent is undefined, so we don't want to set the default value\n          return;\n        }\n      }\n\n      resetField(source, {\n        defaultValue: defaultValue\n      });\n    }\n  });\n};\nvar numericRegex = /^\\d+$/;","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAGA;;;;;AAIA,OAAO,IAAMC,0BAA0B,GAAG,UACtCC,KADsC,EACS;EAEvC,gBAAY,GAAaA,KAAK,aAA9B;EAAA,IAAcC,MAAM,GAAKD,KAAK,OAA9B;EACR,IAAME,MAAM,GAAGJ,gBAAgB,CAACE,KAAD,CAA/B;;EACM,SAKFJ,cAAc,EALZ;EAAA,IACFO,SAAS,eADP;EAAA,IAEFC,UAAU,gBAFR;EAAA,IAGFC,aAAa,mBAHX;EAAA,IAIFC,SAAS,eAJP;;EAMN,IAAMC,WAAW,GAAGV,GAAG,CAACK,MAAD,EAASD,MAAT,CAAvB;EACA,IAAMO,SAAS,GAAGX,GAAG,CAACM,SAAS,EAAV,EAAcF,MAAd,CAArB;EACQ,WAAO,GAAKI,aAAa,CAACJ,MAAD,EAASK,SAAT,CAAb,CAAgCG,OAA5C;EAERd,SAAS,CAAC;IACN,IAAIe,YAAY,IAAI,IAApB,EAA0B;;IAC1B,IAAIF,SAAS,IAAI,IAAb,IAAqBD,WAAW,IAAI,IAApC,IAA4C,CAACE,OAAjD,EAA0D;MACtD;MACA;MACA;MACA;MACA,IAAME,iBAAiB,GAAGV,MAAM,CAC3BW,KADqB,CACf,GADe,EAErBC,IAFqB,CAEhB,oBAAQ;QAAI,mBAAY,CAACC,IAAb,CAAkBC,QAAlB;MAA2B,CAFvB,CAA1B;;MAGA,IAAIJ,iBAAJ,EAAuB;QACnB,IAAMK,UAAU,GAAGf,MAAM,CAACW,KAAP,CAAa,GAAb,EAAkBK,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B,EAA+BC,IAA/B,CAAoC,GAApC,CAAnB;QACA,IAAMC,WAAW,GAAGtB,GAAG,CAACM,SAAS,EAAV,EAAca,UAAd,CAAvB;;QACA,IAAIG,WAAW,IAAI,IAAnB,EAAyB;UACrB;UACA;QACH;MACJ;;MACDf,UAAU,CAACH,MAAD,EAAS;QAAES,YAAY;MAAd,CAAT,CAAV;IACH;EACJ,CApBQ,CAAT;AAqBH,CApCM;AAsCP,IAAMU,YAAY,GAAG,OAArB","names":["useEffect","useFormContext","get","useRecordContext","useApplyInputDefaultValues","props","source","record","getValues","resetField","getFieldState","formState","recordValue","formValue","isDirty","defaultValue","pathContainsIndex","split","some","test","pathPart","parentPath","slice","join","parentValue","numericRegex"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/useApplyInputDefaultValues.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useRecordContext } from '../controller';\nimport { InputProps } from './useInput';\n\n/*\n * This hook updates the input default value whenever the record changes\n * It applies either the record value if it has one or the defaultValue if it was specified\n */\nexport const useApplyInputDefaultValues = (\n    props: Partial<InputProps> & { source: string }\n) => {\n    const { defaultValue, source } = props;\n    const record = useRecordContext(props);\n    const {\n        getValues,\n        resetField,\n        getFieldState,\n        formState,\n    } = useFormContext();\n    const recordValue = get(record, source);\n    const formValue = get(getValues(), source);\n    const { isDirty } = getFieldState(source, formState);\n\n    useEffect(() => {\n        if (defaultValue == null) return;\n        if (formValue == null && recordValue == null && !isDirty) {\n            // special case for ArrayInput: since we use get(record, source),\n            // if source is like foo.23.bar, this effect will run.\n            // but we only want to set the default value for the subfield bar\n            // if the record actually has a value for foo.23\n            const pathContainsIndex = source\n                .split('.')\n                .some(pathPart => numericRegex.test(pathPart));\n            if (pathContainsIndex) {\n                const parentPath = source.split('.').slice(0, -1).join('.');\n                const parentValue = get(getValues(), parentPath);\n                if (parentValue == null) {\n                    // the parent is undefined, so we don't want to set the default value\n                    return;\n                }\n            }\n            resetField(source, { defaultValue });\n        }\n    });\n};\n\nconst numericRegex = /^\\d+$/;\n"]},"metadata":{},"sourceType":"module"}
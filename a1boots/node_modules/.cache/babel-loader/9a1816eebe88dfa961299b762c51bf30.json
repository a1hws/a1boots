{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TableCell from '@mui/material/TableCell';\nimport clsx from 'clsx';\nvar DatagridCell = React.forwardRef(function (_a, ref) {\n  var className = _a.className,\n      field = _a.field,\n      record = _a.record,\n      resource = _a.resource,\n      rest = __rest(_a, [\"className\", \"field\", \"record\", \"resource\"]);\n\n  return React.createElement(TableCell, __assign({\n    className: clsx(className, field.props.cellClassName),\n    align: field.props.textAlign,\n    ref: ref\n  }, rest), field);\n});\nDatagridCell.propTypes = {\n  className: PropTypes.string,\n  field: PropTypes.element,\n  // @ts-ignore\n  record: PropTypes.object,\n  resource: PropTypes.string\n}; // What? TypeScript loses the displayName if we don't set it explicitly\n\nDatagridCell.displayName = 'DatagridCell';\nexport default DatagridCell;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAA0C,yBAA1C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAGA,IAAMC,YAAY,GAAGJ,KAAK,CAACK,UAAN,CACjB,UAACC,EAAD,EAAkDC,GAAlD,EAAqD;EAAlD,aAAS,eAAT;EAAA,IAAWC,KAAK,WAAhB;EAAA,IAAkBC,MAAM,YAAxB;EAAA,IAA0BC,QAAQ,cAAlC;EAAA,IAAuCC,IAAI,cAA7C,4CAA6C,CAA3C;;EAAuD,OACtDX,oBAACE,SAAD,EAAUU;IACNC,SAAS,EAAEV,IAAI,CAACU,SAAD,EAAYL,KAAK,CAACM,KAAN,CAAYC,aAAxB,CADT;IAENC,KAAK,EAAER,KAAK,CAACM,KAAN,CAAYG,SAFb;IAGNV,GAAG,EAAEA;EAHC,GAIFI,IAJE,CAAV,EAMKH,KANL,CADsD;AASzD,CAVgB,CAArB;AAaAJ,YAAY,CAACc,SAAb,GAAyB;EACrBL,SAAS,EAAEZ,SAAS,CAACkB,MADA;EAErBX,KAAK,EAAEP,SAAS,CAACmB,OAFI;EAGrB;EACAX,MAAM,EAAER,SAAS,CAACoB,MAJG;EAKrBX,QAAQ,EAAET,SAAS,CAACkB;AALC,CAAzB,C,CAeA;;AACAf,YAAY,CAACkB,WAAb,GAA2B,cAA3B;AAEA,eAAelB,YAAf","names":["React","PropTypes","TableCell","clsx","DatagridCell","forwardRef","_a","ref","field","record","resource","rest","__assign","className","props","cellClassName","align","textAlign","propTypes","string","element","object","displayName"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/datagrid/DatagridCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TableCell, { TableCellProps } from '@mui/material/TableCell';\nimport clsx from 'clsx';\nimport { RaRecord } from 'ra-core';\n\nconst DatagridCell = React.forwardRef<HTMLTableCellElement, DatagridCellProps>(\n    ({ className, field, record, resource, ...rest }, ref) => (\n        <TableCell\n            className={clsx(className, field.props.cellClassName)}\n            align={field.props.textAlign}\n            ref={ref}\n            {...rest}\n        >\n            {field}\n        </TableCell>\n    )\n);\n\nDatagridCell.propTypes = {\n    className: PropTypes.string,\n    field: PropTypes.element,\n    // @ts-ignore\n    record: PropTypes.object, // eslint-disable-line react/forbid-prop-types\n    resource: PropTypes.string,\n};\n\nexport interface DatagridCellProps extends TableCellProps {\n    className?: string;\n    field?: JSX.Element;\n    record?: RaRecord;\n    resource?: string;\n}\n\n// What? TypeScript loses the displayName if we don't set it explicitly\nDatagridCell.displayName = 'DatagridCell';\n\nexport default DatagridCell;\n"]},"metadata":{},"sourceType":"module"}
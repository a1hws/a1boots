{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useListController } from './useListController';\nimport { ResourceContextProvider } from '../../core';\nimport { ListContextProvider } from './ListContextProvider';\n/**\n * Call useListController and put the value in a ListContext\n *\n * Base class for <List> components, without UI.\n *\n * Accepts any props accepted by useListController:\n * - filter: permanent filter applied to the list\n * - filters: Filter element, to display the filters\n * - filterDefaultValues: object;\n * - perPage: Number of results per page\n * - sort: Default sort\n * - exporter: exported function\n *\n * @example // Custom list layout\n *\n * const PostList = () => (\n *     <ListBase perPage={10}>\n *         <div>\n *              List metrics...\n *         </div>\n *         <Grid container>\n *             <Grid item xs={8}>\n *                 <SimpleList primaryText={record => record.title} />\n *             </Grid>\n *             <Grid item xs={4}>\n *                 List instructions...\n *             </Grid>\n *         </Grid>\n *         <div>\n *             Post related links...\n *         </div>\n *     </ListBase>\n * );\n */\n\nexport var ListBase = function (_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  return React.createElement(ResourceContextProvider, {\n    value: props.resource\n  }, React.createElement(ListContextProvider, {\n    value: useListController(props)\n  }, children));\n};","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,iBAAT,QAAuD,qBAAvD;AACA,SAASC,uBAAT,QAAwC,YAAxC;AAEA,SAASC,mBAAT,QAAoC,uBAApC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAO,IAAMC,QAAQ,GAAG,UAAoCC,EAApC,EAGoC;EAFxD,YAAQ,cAAR;EAAA,IACGC,KAAK,cAFgD,YAEhD,CADR;;EAE6D,OAC7DN,oBAACE,uBAAD,EAAwB;IAACK,KAAK,EAAED,KAAK,CAACE;EAAd,CAAxB,EACIR,oBAACG,mBAAD,EAAoB;IAACI,KAAK,EAAEN,iBAAiB,CAAaK,KAAb;EAAzB,CAApB,EACKG,QADL,CADJ,CAD6D;AAMhE,CATM","names":["React","useListController","ResourceContextProvider","ListContextProvider","ListBase","_a","props","value","resource","children"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/list/ListBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { useListController, ListControllerProps } from './useListController';\nimport { ResourceContextProvider } from '../../core';\nimport { RaRecord } from '../../types';\nimport { ListContextProvider } from './ListContextProvider';\n\n/**\n * Call useListController and put the value in a ListContext\n *\n * Base class for <List> components, without UI.\n *\n * Accepts any props accepted by useListController:\n * - filter: permanent filter applied to the list\n * - filters: Filter element, to display the filters\n * - filterDefaultValues: object;\n * - perPage: Number of results per page\n * - sort: Default sort\n * - exporter: exported function\n *\n * @example // Custom list layout\n *\n * const PostList = () => (\n *     <ListBase perPage={10}>\n *         <div>\n *              List metrics...\n *         </div>\n *         <Grid container>\n *             <Grid item xs={8}>\n *                 <SimpleList primaryText={record => record.title} />\n *             </Grid>\n *             <Grid item xs={4}>\n *                 List instructions...\n *             </Grid>\n *         </Grid>\n *         <div>\n *             Post related links...\n *         </div>\n *     </ListBase>\n * );\n */\nexport const ListBase = <RecordType extends RaRecord = any>({\n    children,\n    ...props\n}: ListControllerProps<RecordType> & { children: ReactNode }) => (\n    <ResourceContextProvider value={props.resource}>\n        <ListContextProvider value={useListController<RecordType>(props)}>\n            {children}\n        </ListContextProvider>\n    </ResourceContextProvider>\n);\n"]},"metadata":{},"sourceType":"module"}
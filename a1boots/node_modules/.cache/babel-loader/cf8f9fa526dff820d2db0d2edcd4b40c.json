{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/**\n * A dataProvider meant to be used in tests only. You can override any of its methods by passing a partial dataProvider.\n */\n\n\nexport var testDataProvider = function (overrides) {\n  return __assign({\n    getList: function () {\n      return Promise.resolve({\n        data: [],\n        total: 0\n      });\n    },\n    getOne: function () {\n      return Promise.resolve({\n        data: undefined\n      });\n    },\n    getMany: function () {\n      return Promise.resolve({\n        data: []\n      });\n    },\n    getManyReference: function () {\n      return Promise.resolve({\n        data: [],\n        total: 0\n      });\n    },\n    create: function () {\n      return Promise.resolve({\n        data: undefined\n      });\n    },\n    update: function () {\n      return Promise.resolve({\n        data: undefined\n      });\n    },\n    updateMany: function () {\n      return Promise.resolve({\n        data: []\n      });\n    },\n    delete: function () {\n      return Promise.resolve({\n        data: undefined\n      });\n    },\n    deleteMany: function () {\n      return Promise.resolve({\n        data: []\n      });\n    }\n  }, overrides);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;AAEA;;;;;AAGA,OAAO,IAAMA,gBAAgB,GAAG,UAC5BC,SAD4B,EACK;EAEjC;IACIC,OAAO,EAAE;MAAM,cAAO,CAACC,OAAR,CAAgB;QAAEC,IAAI,EAAE,EAAR;QAAYC,KAAK,EAAE;MAAnB,CAAhB;IAAuC,CAD1D;IAEIC,MAAM,EAAE;MAAM,cAAO,CAACH,OAAR,CAAgB;QAAEC,IAAI,EAAEG;MAAR,CAAhB;IAAoC,CAFtD;IAGIC,OAAO,EAAE;MAAM,cAAO,CAACL,OAAR,CAAgB;QAAEC,IAAI,EAAE;MAAR,CAAhB;IAA6B,CAHhD;IAIIK,gBAAgB,EAAE;MAAM,cAAO,CAACN,OAAR,CAAgB;QAAEC,IAAI,EAAE,EAAR;QAAYC,KAAK,EAAE;MAAnB,CAAhB;IAAuC,CAJnE;IAKIK,MAAM,EAAE;MAAM,cAAO,CAACP,OAAR,CAAgB;QAAEC,IAAI,EAAEG;MAAR,CAAhB;IAAoC,CALtD;IAMII,MAAM,EAAE;MAAM,cAAO,CAACR,OAAR,CAAgB;QAAEC,IAAI,EAAEG;MAAR,CAAhB;IAAoC,CANtD;IAOIK,UAAU,EAAE;MAAM,cAAO,CAACT,OAAR,CAAgB;QAAEC,IAAI,EAAE;MAAR,CAAhB;IAA6B,CAPnD;IAQIS,MAAM,EAAE;MAAM,cAAO,CAACV,OAAR,CAAgB;QAAEC,IAAI,EAAEG;MAAR,CAAhB;IAAoC,CARtD;IASIO,UAAU,EAAE;MAAM,cAAO,CAACX,OAAR,CAAgB;QAAEC,IAAI,EAAE;MAAR,CAAhB;IAA6B;EATnD,GAUOH,SAVP;AAYH,CAfM","names":["testDataProvider","overrides","getList","resolve","data","total","getOne","undefined","getMany","getManyReference","create","update","updateMany","delete","deleteMany"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/testDataProvider.ts"],"sourcesContent":["import { DataProvider } from '../types';\n\n/**\n * A dataProvider meant to be used in tests only. You can override any of its methods by passing a partial dataProvider.\n */\nexport const testDataProvider = (\n    overrides?: Partial<DataProvider>\n): DataProvider => {\n    return {\n        getList: () => Promise.resolve({ data: [], total: 0 }),\n        getOne: () => Promise.resolve({ data: undefined }),\n        getMany: () => Promise.resolve({ data: [] }),\n        getManyReference: () => Promise.resolve({ data: [], total: 0 }),\n        create: () => Promise.resolve({ data: undefined }),\n        update: () => Promise.resolve({ data: undefined }),\n        updateMany: () => Promise.resolve({ data: [] }),\n        delete: () => Promise.resolve({ data: undefined }),\n        deleteMany: () => Promise.resolve({ data: [] }),\n        ...overrides,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
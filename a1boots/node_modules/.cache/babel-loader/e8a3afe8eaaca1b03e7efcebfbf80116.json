{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useEffect, useRef, useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\nimport { useSafeSetState } from '../util';\n\nvar defaultFilterToQuery = function defaultFilterToQuery(v) {\n  return {\n    q: v\n  };\n};\n/**\n * Hooks to provide filter state and setFilter which update the query part of the filter\n *\n * @example\n *\n * const { filter, setFilter } = useFilter({\n *      filterToQuery: v => ({ query: v }),\n *      permanentFilter: { foo: 'bar' },\n *      debounceTime: 500,\n * });\n * // filter initial value:\n * {\n *      query: '',\n *      foo: 'bar'\n * }\n *  // after updating filter\n *  setFilter('needle');\n *  {\n *      query: 'needle',\n *      foo: 'bar'\n *  }\n *\n * @param {Object} option\n * @param {Function} option.filterToQuery Function to convert the filter string to a filter object. Defaults to v => ({ q: v }).\n * @param {Object} option.permanentFilter Permanent filter to be merged with the filter string. Defaults to {}.\n * @param {number} option.debounceTime Time in ms between filter updates - used to debounce the search. Defaults to 500ms.\n *\n * @returns {UseFilterStateOptions} The filter props\n */\n\n\nexport default (function (_a) {\n  var _b = _a.filterToQuery,\n      filterToQuery = _b === void 0 ? defaultFilterToQuery : _b,\n      _c = _a.permanentFilter,\n      permanentFilter = _c === void 0 ? {} : _c,\n      _d = _a.debounceTime,\n      debounceTime = _d === void 0 ? 500 : _d;\n  var permanentFilterProp = useRef(permanentFilter);\n  var latestValue = useRef();\n\n  var _e = useSafeSetState(__assign(__assign({}, permanentFilter), filterToQuery(''))),\n      filter = _e[0],\n      setFilterValue = _e[1]; // Developers often pass an object literal as permanent filter\n  // e.g. <ReferenceInput source=\"book_id\" reference=\"books\" filter={{ is_published: true }}>\n  // The effect should execute again when the parent component updates the filter value,\n  // but not when the object literal describes the same values. Therefore,\n  // we use JSON.stringify(permanentFilter) in the `useEffect` and `useCallback`\n  // dependencies instead of permanentFilter.\n\n\n  var permanentFilterSignature = JSON.stringify(permanentFilter);\n  useEffect(function () {\n    if (!isEqual(permanentFilterProp.current, permanentFilter)) {\n      permanentFilterProp.current = permanentFilter;\n      setFilterValue(__assign(__assign({}, permanentFilter), filterToQuery(latestValue.current)));\n    }\n  }, [permanentFilterSignature, permanentFilterProp, filterToQuery]); // eslint-disable-line react-hooks/exhaustive-deps\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  var setFilter = useCallback(debounce(function (value) {\n    setFilterValue(__assign(__assign({}, permanentFilter), filterToQuery(value)));\n    latestValue.current = value;\n  }, debounceTime), [permanentFilterSignature] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return {\n    filter: filter,\n    setFilter: setFilter\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,WAA5B,QAA+C,OAA/C;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,SAASC,eAAT,QAAgC,SAAhC;;AAmBA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,CAAD,EAAU;EAAK,OAAC;IAAEC,CAAC,EAAED;EAAL,CAAD;AAAU,CAAtD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,gBAAe,UAACE,EAAD,EAIS;MAHpBC;MAAAC,aAAa,mBAAGL,oBAAH,GAAuBI;MACpCE;MAAAC,eAAe,mBAAG,EAAH,GAAKD;MACpBE;MAAAC,YAAY,mBAAG,GAAH,GAAMD;EAElB,IAAME,mBAAmB,GAAGf,MAAM,CAACY,eAAD,CAAlC;EACA,IAAMI,WAAW,GAAGhB,MAAM,EAA1B;;EACM,SAA2BI,eAAe,uBACzCQ,eADyC,GAEzCF,aAAa,CAAC,EAAD,CAF4B,EAA1C;EAAA,IAACO,MAAM,QAAP;EAAA,IAASC,cAAc,QAAvB,CAHc,CAOpB;EACA;EACA;EACA;EACA;EACA;;;EACA,IAAMC,wBAAwB,GAAGC,IAAI,CAACC,SAAL,CAAeT,eAAf,CAAjC;EAEAb,SAAS,CAAC;IACN,IAAI,CAACI,OAAO,CAACY,mBAAmB,CAACO,OAArB,EAA8BV,eAA9B,CAAZ,EAA4D;MACxDG,mBAAmB,CAACO,OAApB,GAA8BV,eAA9B;MACAM,cAAc,uBACPN,eADO,GAEPF,aAAa,CAACM,WAAW,CAACM,OAAb,CAFN,EAAd;IAIH;EACJ,CARQ,EAQN,CAACH,wBAAD,EAA2BJ,mBAA3B,EAAgDL,aAAhD,CARM,CAAT,CAfoB,CAuBgD;EAEpE;;EACA,IAAMa,SAAS,GAAGtB,WAAW,CACzBC,QAAQ,CAAC,UAACsB,KAAD,EAAc;IACnBN,cAAc,uBACPN,eADO,GAEPF,aAAa,CAACc,KAAD,CAFN,EAAd;IAIAR,WAAW,CAACM,OAAZ,GAAsBE,KAAtB;EACH,CANO,EAMLV,YANK,CADiB,EAQzB,CAACK,wBAAD,CARyB,CAQE;EARF,CAA7B;EAWA,OAAO;IACHF,MAAM,QADH;IAEHM,SAAS;EAFN,CAAP;AAIH,CA7CD","names":["useEffect","useRef","useCallback","debounce","isEqual","useSafeSetState","defaultFilterToQuery","v","q","_a","_b","filterToQuery","_c","permanentFilter","_d","debounceTime","permanentFilterProp","latestValue","filter","setFilterValue","permanentFilterSignature","JSON","stringify","current","setFilter","value"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/useFilterState.ts"],"sourcesContent":["import { useEffect, useRef, useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\n\nimport { useSafeSetState } from '../util';\nimport { FilterPayload } from '../types';\n\ninterface UseFilterStateOptions {\n    filterToQuery?: (v: string) => FilterPayload;\n    permanentFilter?: FilterPayload;\n    debounceTime?: number;\n}\n\n/**\n * @typedef UseFilterStateProps\n * @property {Object} filter: The filter object.\n * @property {setFilter} setFilter: Update the filter with the given string\n */\ninterface UseFilterStateProps {\n    filter: FilterPayload;\n    setFilter: (v: string) => void;\n}\n\nconst defaultFilterToQuery = (v: string) => ({ q: v });\n\n/**\n * Hooks to provide filter state and setFilter which update the query part of the filter\n *\n * @example\n *\n * const { filter, setFilter } = useFilter({\n *      filterToQuery: v => ({ query: v }),\n *      permanentFilter: { foo: 'bar' },\n *      debounceTime: 500,\n * });\n * // filter initial value:\n * {\n *      query: '',\n *      foo: 'bar'\n * }\n *  // after updating filter\n *  setFilter('needle');\n *  {\n *      query: 'needle',\n *      foo: 'bar'\n *  }\n *\n * @param {Object} option\n * @param {Function} option.filterToQuery Function to convert the filter string to a filter object. Defaults to v => ({ q: v }).\n * @param {Object} option.permanentFilter Permanent filter to be merged with the filter string. Defaults to {}.\n * @param {number} option.debounceTime Time in ms between filter updates - used to debounce the search. Defaults to 500ms.\n *\n * @returns {UseFilterStateOptions} The filter props\n */\nexport default ({\n    filterToQuery = defaultFilterToQuery,\n    permanentFilter = {},\n    debounceTime = 500,\n}: UseFilterStateOptions): UseFilterStateProps => {\n    const permanentFilterProp = useRef(permanentFilter);\n    const latestValue = useRef<string>();\n    const [filter, setFilterValue] = useSafeSetState({\n        ...permanentFilter,\n        ...filterToQuery(''),\n    });\n    // Developers often pass an object literal as permanent filter\n    // e.g. <ReferenceInput source=\"book_id\" reference=\"books\" filter={{ is_published: true }}>\n    // The effect should execute again when the parent component updates the filter value,\n    // but not when the object literal describes the same values. Therefore,\n    // we use JSON.stringify(permanentFilter) in the `useEffect` and `useCallback`\n    // dependencies instead of permanentFilter.\n    const permanentFilterSignature = JSON.stringify(permanentFilter);\n\n    useEffect(() => {\n        if (!isEqual(permanentFilterProp.current, permanentFilter)) {\n            permanentFilterProp.current = permanentFilter;\n            setFilterValue({\n                ...permanentFilter,\n                ...filterToQuery(latestValue.current),\n            });\n        }\n    }, [permanentFilterSignature, permanentFilterProp, filterToQuery]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const setFilter = useCallback(\n        debounce((value: string) => {\n            setFilterValue({\n                ...permanentFilter,\n                ...filterToQuery(value),\n            });\n            latestValue.current = value;\n        }, debounceTime),\n        [permanentFilterSignature] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n\n    return {\n        filter,\n        setFilter,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { defaultDataProvider } from './defaultDataProvider';\n/**\n * Combine multiple data providers into one.\n *\n * @param dataProviderMatcher A function that returns a data provider for a given resource.\n *\n * @example\n * const dataProvider = combineDataProviders(resource => {\n *    switch(resource) {\n *       case 'posts':\n *       case 'comments':\n *          return dataProvider1;\n *       case 'users':\n *          return dataProvider2;\n *       default:\n *         throw new Error('Unknown resource');\n *    }\n * });\n */\n\nexport var combineDataProviders = function combineDataProviders(dataProviderMatcher) {\n  return new Proxy(defaultDataProvider, {\n    get: function get(target, name) {\n      return function (resource, params) {\n        if (typeof name === 'symbol' || name === 'then') {\n          return;\n        }\n\n        return dataProviderMatcher(resource)[name](resource, params);\n      };\n    }\n  });\n};","map":{"version":3,"mappings":"AACA,SAASA,mBAAT,QAAoC,uBAApC;AAIA;;;;;;;;;;;;;;;;;;;AAkBA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAChCC,mBADgC,EACQ;EAExC,WAAIC,KAAJ,CAAUH,mBAAV,EAA+B;IAC3BI,GAAG,EAAE,aAACC,MAAD,EAASC,IAAT,EAAa;MACd,OAAO,UAACC,QAAD,EAAWC,MAAX,EAAiB;QACpB,IAAI,OAAOF,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,MAAzC,EAAiD;UAC7C;QACH;;QACD,OAAOJ,mBAAmB,CAACK,QAAD,CAAnB,CAA8BD,IAA9B,EAAoCC,QAApC,EAA8CC,MAA9C,CAAP;MACH,CALD;IAMH;EAR0B,CAA/B;AASE,CAZC","names":["defaultDataProvider","combineDataProviders","dataProviderMatcher","Proxy","get","target","name","resource","params"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/combineDataProviders.ts"],"sourcesContent":["import { DataProvider } from '../types';\nimport { defaultDataProvider } from './defaultDataProvider';\n\nexport type DataProviderMatcher = (resource: string) => DataProvider;\n\n/**\n * Combine multiple data providers into one.\n *\n * @param dataProviderMatcher A function that returns a data provider for a given resource.\n *\n * @example\n * const dataProvider = combineDataProviders(resource => {\n *    switch(resource) {\n *       case 'posts':\n *       case 'comments':\n *          return dataProvider1;\n *       case 'users':\n *          return dataProvider2;\n *       default:\n *         throw new Error('Unknown resource');\n *    }\n * });\n */\nexport const combineDataProviders = (\n    dataProviderMatcher: DataProviderMatcher\n): DataProvider =>\n    new Proxy(defaultDataProvider, {\n        get: (target, name) => {\n            return (resource, params) => {\n                if (typeof name === 'symbol' || name === 'then') {\n                    return;\n                }\n                return dataProviderMatcher(resource)[name](resource, params);\n            };\n        },\n    });\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\n\nvar NumberFieldImpl = function NumberFieldImpl(props) {\n  var className = props.className,\n      emptyText = props.emptyText,\n      source = props.source,\n      locales = props.locales,\n      options = props.options,\n      textAlign = props.textAlign,\n      rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n\n  var record = useRecordContext(props);\n  var translate = useTranslate();\n\n  if (!record) {\n    return null;\n  }\n\n  var value = get(record, source);\n\n  if (value == null) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n\n  return React.createElement(Typography, __assign({\n    variant: \"body2\",\n    component: \"span\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), hasNumberFormat && typeof value === 'number' ? value.toLocaleString(locales, options) : value);\n};\n\nNumberFieldImpl.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object\n}); // what? TypeScript loses the displayName if we don't set it explicitly\n\nNumberFieldImpl.displayName = 'NumberFieldImpl';\nNumberFieldImpl.defaultProps = {\n  textAlign: 'right'\n};\nexport var NumberField = genericMemo(NumberFieldImpl);\nvar hasNumberFormat = !!(typeof Intl === 'object' && Intl && typeof Intl.NumberFormat === 'function');","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,UAAP,MAA4C,0BAA5C;AACA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,SAA/C;AAEA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAAqBC,cAArB,QAA2C,SAA3C;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAGpBC,KAHoB,EAGe;EAG/B,aAAS,GAOTA,KAAK,UAPL;EAAA,IACAC,SAAS,GAMTD,KAAK,UAPL;EAAA,IAEAE,MAAM,GAKNF,KAAK,OAPL;EAAA,IAGAG,OAAO,GAIPH,KAAK,QAPL;EAAA,IAIAI,OAAO,GAGPJ,KAAK,QAPL;EAAA,IAKAK,SAAS,GAETL,KAAK,UAPL;EAAA,IAMGM,IAAI,UACPN,KADO,EAPL,uEAOK,CANP;;EAQJ,IAAMO,MAAM,GAAGb,gBAAgB,CAAaM,KAAb,CAA/B;EACA,IAAMQ,SAAS,GAAGb,YAAY,EAA9B;;EAEA,IAAI,CAACY,MAAL,EAAa;IACT,OAAO,IAAP;EACH;;EACD,IAAME,KAAK,GAAGjB,GAAG,CAACe,MAAD,EAASL,MAAT,CAAjB;;EAEA,IAAIO,KAAK,IAAI,IAAb,EAAmB;IACf,OAAOR,SAAS,GACZX,oBAACG,UAAD,EAAWiB;MACPC,SAAS,EAAC,MADH;MAEPC,OAAO,EAAC,OAFD;MAGPC,SAAS,EAAEA;IAHJ,GAIHjB,sBAAsB,CAACU,IAAD,CAJnB,CAAX,EAMKL,SAAS,IAAIO,SAAS,CAACP,SAAD,EAAY;MAAEa,CAAC,EAAEb;IAAL,CAAZ,CAN3B,CADY,GASZ,IATJ;EAUH;;EAED,OACIX,oBAACG,UAAD,EAAWiB;IACPE,OAAO,EAAC,OADD;IAEPD,SAAS,EAAC,MAFH;IAGPE,SAAS,EAAEA;EAHJ,GAIHjB,sBAAsB,CAACU,IAAD,CAJnB,CAAX,EAMKS,eAAe,IAAI,OAAON,KAAP,KAAiB,QAApC,GACKA,KAAK,CAACO,cAAN,CAAqBb,OAArB,EAA8BC,OAA9B,CADL,GAEKK,KARV,CADJ;AAYH,CA/CD;;AAiDAV,eAAe,CAACkB,SAAhB,GAAyBP,+BAElBjB,UAAU,CAACwB,SAFO,GAGlBpB,cAHkB,GAGJ;EACjBM,OAAO,EAAEZ,SAAS,CAAC2B,SAAV,CAAoB,CACzB3B,SAAS,CAAC4B,MADe,EAEzB5B,SAAS,CAAC6B,OAAV,CAAkB7B,SAAS,CAAC4B,MAA5B,CAFyB,CAApB,CADQ;EAKjBf,OAAO,EAAEb,SAAS,CAAC8B;AALF,CAHI,CAAzB,C,CAWA;;AACAtB,eAAe,CAACuB,WAAhB,GAA8B,iBAA9B;AACAvB,eAAe,CAACwB,YAAhB,GAA+B;EAC3BlB,SAAS,EAAE;AADgB,CAA/B;AAIA,OAAO,IAAMmB,WAAW,GAAG1B,WAAW,CAACC,eAAD,CAA/B;AAUP,IAAMgB,eAAe,GAAG,CAAC,EACrB,OAAOU,IAAP,KAAgB,QAAhB,IACAA,IADA,IAEA,OAAOA,IAAI,CAACC,YAAZ,KAA6B,UAHR,CAAzB","names":["React","PropTypes","get","Typography","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","genericMemo","NumberFieldImpl","props","emptyText","source","locales","options","textAlign","rest","record","translate","value","__assign","component","variant","className","_","hasNumberFormat","toLocaleString","propTypes","oneOfType","string","arrayOf","object","displayName","defaultProps","NumberField","Intl","NumberFormat"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/NumberField.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\nconst NumberFieldImpl = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: NumberFieldProps<RecordType>\n) => {\n    const {\n        className,\n        emptyText,\n        source,\n        locales,\n        options,\n        textAlign,\n        ...rest\n    } = props;\n    const record = useRecordContext<RecordType>(props);\n    const translate = useTranslate();\n\n    if (!record) {\n        return null;\n    }\n    const value = get(record, source);\n\n    if (value == null) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    return (\n        <Typography\n            variant=\"body2\"\n            component=\"span\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {hasNumberFormat && typeof value === 'number'\n                ? value.toLocaleString(locales, options)\n                : value}\n        </Typography>\n    );\n};\n\nNumberFieldImpl.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    options: PropTypes.object,\n};\n\n// what? TypeScript loses the displayName if we don't set it explicitly\nNumberFieldImpl.displayName = 'NumberFieldImpl';\nNumberFieldImpl.defaultProps = {\n    textAlign: 'right',\n};\n\nexport const NumberField = genericMemo(NumberFieldImpl);\n\nexport interface NumberFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType>,\n        Omit<TypographyProps, 'textAlign'> {\n    locales?: string | string[];\n    options?: object;\n}\n\nconst hasNumberFormat = !!(\n    typeof Intl === 'object' &&\n    Intl &&\n    typeof Intl.NumberFormat === 'function'\n);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n/**\n * Converts a time string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {string} value Date string, formatted as hh:mm\n * @return {Date}\n */\n\nvar parseTime = function (value) {\n  var _a, _b;\n\n  if (!value) return null;\n  var timeTokens = value.split(':').map(function (v) {\n    return parseInt(v);\n  });\n  var today = new Date();\n  today.setHours((_a = timeTokens[0]) !== null && _a !== void 0 ? _a : 0);\n  today.setMinutes((_b = timeTokens[1]) !== null && _b !== void 0 ? _b : 0);\n  return today;\n};\n/**\n * Form input to edit a time string value in the \"HH:mm\" format (e.g. '17:45'),\n * using the browser locale for the timezone.\n *\n * Renders a time picker or a text input depending on the browser.\n *\n * This component works with Date objects to handle the timezone using the browser locale.\n * You can still pass string values as long as those can be converted to a JavaScript Date object.\n *\n * @example\n * import { Edit, SimpleForm, TimeInput } from 'react-admin';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TimeInput source=\"published_at\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n */\n\n\nexport var TimeInput = function (_a) {\n  var className = _a.className,\n      defaultValue = _a.defaultValue,\n      _b = _a.format,\n      format = _b === void 0 ? formatTime : _b,\n      label = _a.label,\n      helperText = _a.helperText,\n      margin = _a.margin,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      source = _a.source,\n      resource = _a.resource,\n      _c = _a.parse,\n      parse = _c === void 0 ? parseTime : _c,\n      validate = _a.validate,\n      variant = _a.variant,\n      rest = __rest(_a, [\"className\", \"defaultValue\", \"format\", \"label\", \"helperText\", \"margin\", \"onBlur\", \"onChange\", \"source\", \"resource\", \"parse\", \"validate\", \"variant\"]);\n\n  var _d = useInput(__assign({\n    defaultValue: defaultValue,\n    format: format,\n    parse: parse,\n    onBlur: onBlur,\n    onChange: onChange,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      field = _d.field,\n      fieldState = _d.fieldState,\n      formState = _d.formState,\n      id = _d.id,\n      isRequired = _d.isRequired;\n\n  var error = fieldState.error,\n      invalid = fieldState.invalid,\n      isTouched = fieldState.isTouched;\n  var isSubmitted = formState.isSubmitted;\n  return React.createElement(TextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    type: \"time\",\n    size: \"small\",\n    variant: variant,\n    margin: margin,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    }),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    InputLabelProps: defaultInputLabelProps\n  }, sanitizeInputRestProps(rest)));\n};\nTimeInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\n\nvar leftPad = function (nb) {\n  if (nb === void 0) {\n    nb = 2;\n  }\n\n  return function (value) {\n    return ('0'.repeat(nb) + value).slice(-nb);\n  };\n};\n\nvar leftPad2 = leftPad(2);\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized time (hh:mm), to be passed to an <input type=\"time\" />\n */\n\nvar convertDateToString = function (value) {\n  if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n  var hh = leftPad2(value.getHours());\n  var mm = leftPad2(value.getMinutes());\n  return \"\".concat(hh, \":\").concat(mm);\n}; // hh:mm\n\n\nvar timeRegex = /^\\d{2}:\\d{2}$/;\nvar defaultInputLabelProps = {\n  shrink: true\n};\n/**\n * Converts a date from the dataProvider, with timezone, to a time string\n * without timezone for use in an <input type=\"time\" />.\n *\n * @param {Date | String} value date string or object\n */\n\nvar formatTime = function (value) {\n  // null, undefined and empty string values should not go through convertDateToString\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  }\n\n  if (value instanceof Date) {\n    return convertDateToString(value);\n  } // valid dates should not be converted\n\n\n  if (timeRegex.test(value)) {\n    return value;\n  }\n\n  return convertDateToString(new Date(value));\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","clsx","TextField","useInput","FieldTitle","sanitizeInputRestProps","InputHelperText","parseTime","value","timeTokens","split","map","v","today","Date","setHours","_a","setMinutes","_b","TimeInput","defaultValue","format","formatTime","label","helperText","margin","onBlur","onChange","source","resource","_c","parse","validate","variant","rest","field","fieldState","formState","id","isRequired","invalid","isTouched","__assign","className","type","size","error","isSubmitted","touched","message","InputLabelProps","defaultInputLabelProps","propTypes","oneOfType","string","bool","leftPad","nb","repeat","slice","leftPad2","convertDateToString","isNaN","getDate","hh","getHours","mm","getMinutes","concat","timeRegex","shrink","test"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/TimeInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n\n/**\n * Converts a time string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {string} value Date string, formatted as hh:mm\n * @return {Date}\n */\nconst parseTime = (value: string) => {\n    if (!value) return null;\n    const timeTokens = value.split(':').map(v => parseInt(v));\n    const today = new Date();\n    today.setHours(timeTokens[0] ?? 0);\n    today.setMinutes(timeTokens[1] ?? 0);\n    return today;\n};\n\n/**\n * Form input to edit a time string value in the \"HH:mm\" format (e.g. '17:45'),\n * using the browser locale for the timezone.\n *\n * Renders a time picker or a text input depending on the browser.\n *\n * This component works with Date objects to handle the timezone using the browser locale.\n * You can still pass string values as long as those can be converted to a JavaScript Date object.\n *\n * @example\n * import { Edit, SimpleForm, TimeInput } from 'react-admin';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TimeInput source=\"published_at\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n */\nexport const TimeInput = ({\n    className,\n    defaultValue,\n    format = formatTime,\n    label,\n    helperText,\n    margin,\n    onBlur,\n    onChange,\n    source,\n    resource,\n    parse = parseTime,\n    validate,\n    variant,\n    ...rest\n}: TimeInputProps) => {\n    const { field, fieldState, formState, id, isRequired } = useInput({\n        defaultValue,\n        format,\n        parse,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n    const { isSubmitted } = formState;\n\n    return (\n        <TextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"time\"\n            size=\"small\"\n            variant={variant}\n            margin={margin}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            InputLabelProps={defaultInputLabelProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nTimeInput.propTypes = {\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n\nexport type TimeInputProps = CommonInputProps &\n    Omit<TextFieldProps, 'helperText' | 'label'>;\n\nconst leftPad = (nb = 2) => value => ('0'.repeat(nb) + value).slice(-nb);\nconst leftPad2 = leftPad(2);\n\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized time (hh:mm), to be passed to an <input type=\"time\" />\n */\nconst convertDateToString = (value: Date) => {\n    if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n    const hh = leftPad2(value.getHours());\n    const mm = leftPad2(value.getMinutes());\n    return `${hh}:${mm}`;\n};\n\n// hh:mm\nconst timeRegex = /^\\d{2}:\\d{2}$/;\nconst defaultInputLabelProps = { shrink: true };\n\n/**\n * Converts a date from the dataProvider, with timezone, to a time string\n * without timezone for use in an <input type=\"time\" />.\n *\n * @param {Date | String} value date string or object\n */\nconst formatTime = (value: string | Date) => {\n    // null, undefined and empty string values should not go through convertDateToString\n    // otherwise, it returns undefined and will make the input an uncontrolled one.\n    if (value == null || value === '') {\n        return '';\n    }\n\n    if (value instanceof Date) {\n        return convertDateToString(value);\n    }\n    // valid dates should not be converted\n    if (timeRegex.test(value)) {\n        return value;\n    }\n\n    return convertDateToString(new Date(value));\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useTranslate } from '../i18n';\n/**\n * This internal hook returns a function that can translate an error message.\n * It handles simple string errors and those which have a message and args.\n * Only useful if you are implementing custom inputs without leveraging our useInput hook.\n *\n * @example\n * const MyInput = props => {\n *      const { field, fieldState } = useController(props);\n *      useEffect(() => {\n *          if (fieldState.error) {\n *              const errorMessage = useGetValidationErrorMessage(fieldState.error);\n *              alert(errorMessage);\n *          }\n *      }, [fieldState.error]);\n *\n *      return (\n *          <input {...field} />\n *      );\n * }\n *\n * @see ValidationErrorMessage\n * @see ValidationErrorMessageWithArgs\n */\n\nexport var useGetValidationErrorMessage = function () {\n  var translate = useTranslate();\n  return function (error) {\n    if (error.message != null) {\n      var _a = error,\n          message = _a.message,\n          args = _a.args;\n      return translate(message, __assign({\n        _: message\n      }, args));\n    }\n\n    return translate(error, {\n      _: error\n    });\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAIA,SAASA,YAAT,QAA6B,SAA7B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,4BAA4B,GAAG;EACxC,IAAMC,SAAS,GAAGF,YAAY,EAA9B;EAEA,OAAO,UAACG,KAAD,EAA8B;IACjC,IAAKA,KAAwC,CAACC,OAAzC,IAAoD,IAAzD,EAA+D;MACrD,SAAoBD,KAApB;MAAA,IAAEC,OAAO,aAAT;MAAA,IAAWC,IAAI,UAAf;MACN,OAAOH,SAAS,CAACE,OAAD,EAAQE;QAAIC,CAAC,EAAEH;MAAP,GAAmBC,IAAnB,CAAR,CAAhB;IACH;;IACD,OAAOH,SAAS,CAACC,KAAD,EAAkB;MAAEI,CAAC,EAAEJ;IAAL,CAAlB,CAAhB;EACH,CAND;AAOH,CAVM","names":["useTranslate","useGetValidationErrorMessage","translate","error","message","args","__assign","_"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/useGetValidationErrorMessage.ts"],"sourcesContent":["import {\n    ValidationErrorMessage,\n    ValidationErrorMessageWithArgs,\n} from './validate';\nimport { useTranslate } from '../i18n';\n\n/**\n * This internal hook returns a function that can translate an error message.\n * It handles simple string errors and those which have a message and args.\n * Only useful if you are implementing custom inputs without leveraging our useInput hook.\n *\n * @example\n * const MyInput = props => {\n *      const { field, fieldState } = useController(props);\n *      useEffect(() => {\n *          if (fieldState.error) {\n *              const errorMessage = useGetValidationErrorMessage(fieldState.error);\n *              alert(errorMessage);\n *          }\n *      }, [fieldState.error]);\n *\n *      return (\n *          <input {...field} />\n *      );\n * }\n *\n * @see ValidationErrorMessage\n * @see ValidationErrorMessageWithArgs\n */\nexport const useGetValidationErrorMessage = () => {\n    const translate = useTranslate();\n\n    return (error: ValidationErrorMessage) => {\n        if ((error as ValidationErrorMessageWithArgs).message != null) {\n            const { message, args } = error as ValidationErrorMessageWithArgs;\n            return translate(message, { _: message, ...args });\n        }\n        return translate(error as string, { _: error });\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
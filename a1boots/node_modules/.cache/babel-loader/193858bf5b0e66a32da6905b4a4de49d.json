{"ast":null,"code":"import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { I18nContext } from './I18nContext';\nimport { useStore } from '../store/useStore';\nimport { useNotify } from '../notification';\n/**\n * Store the i18nProvider in a context, and rerender children when the locale changes\n */\n\nexport var I18nContextProvider = function (_a) {\n  var _b = _a.value,\n      value = _b === void 0 ? defaulti18nContext : _b,\n      children = _a.children;\n  var locale = useStore('locale')[0];\n  var notify = useNotify();\n\n  var _c = useState(0),\n      key = _c[0],\n      setKey = _c[1]; // to avoid blinking effect, delay first render if the user has a non-default locale\n\n\n  var _d = useState(locale === value.getLocale()),\n      isInitialized = _d[0],\n      setInitialized = _d[1]; // watch store for locale changes\n\n\n  useEffect(function () {\n    if (locale && value.getLocale() !== locale) {\n      new Promise(function (resolve) {\n        // so we systematically return a Promise for the messages\n        // i18nProvider may return a Promise for language changes,\n        resolve(value.changeLocale(locale));\n      }).then(function () {\n        // Force full page re-render.\n        // This is slow on locale change, but it's a good way\n        // to avoid having one subscription to the locale\n        // for each call to translate()\n        setKey(function (key) {\n          return key + 1;\n        });\n        setInitialized(true);\n      }).catch(function (error) {\n        setInitialized(true);\n        notify('ra.notification.i18n_error', {\n          type: 'error'\n        });\n        console.error(error);\n      });\n    } else {\n      setInitialized(true);\n    }\n  }, [value, locale, notify]);\n  return isInitialized ? React.createElement(I18nContext.Provider, {\n    value: value,\n    key: key\n  }, children) : null;\n};\nvar defaulti18nContext = {\n  translate: function (x) {\n    return x;\n  },\n  changeLocale: function () {\n    return Promise.resolve();\n  },\n  getLocale: function () {\n    return 'en';\n  }\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAA+C,OAA/C;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAGA;;;;AAGA,OAAO,IAAMC,mBAAmB,GAAG,UAACC,EAAD,EAGR;MAFvBC;MAAAC,KAAK,mBAAGC,kBAAH,GAAqBF;MAC1BG,QAAQ;EAED,UAAM,GAAIP,QAAQ,CAAC,QAAD,CAAR,CAAkB,CAAlB,CAAV;EACP,IAAMQ,MAAM,GAAGP,SAAS,EAAxB;;EACM,SAAgBH,QAAQ,CAAC,CAAD,CAAxB;EAAA,IAACW,GAAG,QAAJ;EAAA,IAAMC,MAAM,QAAZ,CAHiB,CAIvB;;;EACM,SAAkCZ,QAAQ,CAC5Ca,MAAM,KAAKN,KAAK,CAACO,SAAN,EADiC,CAA1C;EAAA,IAACC,aAAa,QAAd;EAAA,IAAgBC,cAAc,QAA9B,CALiB,CASvB;;;EACAjB,SAAS,CAAC;IACN,IAAIc,MAAM,IAAIN,KAAK,CAACO,SAAN,OAAsBD,MAApC,EAA4C;MACxC,IAAII,OAAJ,CAAY,mBAAO;QACf;QACA;QACAC,OAAO,CAACX,KAAK,CAACY,YAAN,CAAmBN,MAAnB,CAAD,CAAP;MACH,CAJD,EAKKO,IALL,CAKU;QACF;QACA;QACA;QACA;QACAR,MAAM,CAAC,eAAG;UAAI,UAAG,GAAG,CAAN;QAAO,CAAf,CAAN;QACAI,cAAc,CAAC,IAAD,CAAd;MACH,CAZL,EAaKK,KAbL,CAaW,iBAAK;QACRL,cAAc,CAAC,IAAD,CAAd;QACAN,MAAM,CAAC,4BAAD,EAA+B;UAAEY,IAAI,EAAE;QAAR,CAA/B,CAAN;QACAC,OAAO,CAACC,KAAR,CAAcA,KAAd;MACH,CAjBL;IAkBH,CAnBD,MAmBO;MACHR,cAAc,CAAC,IAAD,CAAd;IACH;EACJ,CAvBQ,EAuBN,CAACT,KAAD,EAAQM,MAAR,EAAgBH,MAAhB,CAvBM,CAAT;EAyBA,OAAOK,aAAa,GAChBjB,oBAACG,WAAW,CAACwB,QAAb,EAAqB;IAAClB,KAAK,EAAEA,KAAR;IAAeI,GAAG,EAAEA;EAApB,CAArB,EACKF,QADL,CADgB,GAIhB,IAJJ;AAKH,CA3CM;AAkDP,IAAMD,kBAAkB,GAAG;EACvBkB,SAAS,EAAE,aAAC;IAAI;EAAC,CADM;EAEvBP,YAAY,EAAE;IAAM,cAAO,CAACD,OAAR;EAAiB,CAFd;EAGvBJ,SAAS,EAAE;IAAM;EAAI;AAHE,CAA3B","names":["React","useEffect","useState","I18nContext","useStore","useNotify","I18nContextProvider","_a","_b","value","defaulti18nContext","children","notify","key","setKey","locale","getLocale","isInitialized","setInitialized","Promise","resolve","changeLocale","then","catch","type","console","error","Provider","translate"],"sources":["/var/www/a1boots/node_modules/ra-core/src/i18n/I18nContextProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useState, ReactNode } from 'react';\n\nimport { I18nContext } from './I18nContext';\nimport { useStore } from '../store/useStore';\nimport { useNotify } from '../notification';\nimport { I18nProvider } from '../types';\n\n/**\n * Store the i18nProvider in a context, and rerender children when the locale changes\n */\nexport const I18nContextProvider = ({\n    value = defaulti18nContext,\n    children,\n}: I18nContextProviderProps) => {\n    const [locale] = useStore('locale');\n    const notify = useNotify();\n    const [key, setKey] = useState(0);\n    // to avoid blinking effect, delay first render if the user has a non-default locale\n    const [isInitialized, setInitialized] = useState(\n        locale === value.getLocale()\n    );\n\n    // watch store for locale changes\n    useEffect(() => {\n        if (locale && value.getLocale() !== locale) {\n            new Promise(resolve => {\n                // so we systematically return a Promise for the messages\n                // i18nProvider may return a Promise for language changes,\n                resolve(value.changeLocale(locale));\n            })\n                .then(() => {\n                    // Force full page re-render.\n                    // This is slow on locale change, but it's a good way\n                    // to avoid having one subscription to the locale\n                    // for each call to translate()\n                    setKey(key => key + 1);\n                    setInitialized(true);\n                })\n                .catch(error => {\n                    setInitialized(true);\n                    notify('ra.notification.i18n_error', { type: 'error' });\n                    console.error(error);\n                });\n        } else {\n            setInitialized(true);\n        }\n    }, [value, locale, notify]);\n\n    return isInitialized ? (\n        <I18nContext.Provider value={value} key={key}>\n            {children}\n        </I18nContext.Provider>\n    ) : null;\n};\n\nexport interface I18nContextProviderProps {\n    value: I18nProvider;\n    children: ReactNode;\n}\n\nconst defaulti18nContext = {\n    translate: x => x,\n    changeLocale: () => Promise.resolve(),\n    getLocale: () => 'en',\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useMemo } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getList parameters { pagination, sort, filter, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @prop params.sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @prop params.filter The request filters, e.g. { title: 'hello, world' }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, total, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, total, isLoading, error } = useGetList(\n *         'posts',\n *         { pagination: { page: 1, perPage: 10 }, sort: { field: 'published_at', order: 'DESC' } }\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(item =>\n *         <li key={item.id}>{item.title}</li>\n *     )}</ul>;\n * };\n */\n\nexport var useGetList = function useGetList(resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var _a = params.pagination,\n      pagination = _a === void 0 ? {\n    page: 1,\n    perPage: 25\n  } : _a,\n      _b = params.sort,\n      sort = _b === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _b,\n      _c = params.filter,\n      filter = _c === void 0 ? {} : _c,\n      meta = params.meta;\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var result = useQuery([resource, 'getList', {\n    pagination: pagination,\n    sort: sort,\n    filter: filter,\n    meta: meta\n  }], function () {\n    return dataProvider.getList(resource, {\n      pagination: pagination,\n      sort: sort,\n      filter: filter,\n      meta: meta\n    }).then(function (_a) {\n      var data = _a.data,\n          total = _a.total,\n          pageInfo = _a.pageInfo;\n      return {\n        data: data,\n        total: total,\n        pageInfo: pageInfo\n      };\n    });\n  }, __assign(__assign({}, options), {\n    onSuccess: function onSuccess(value) {\n      var _a; // optimistically populate the getOne cache\n\n\n      (_a = value === null || value === void 0 ? void 0 : value.data) === null || _a === void 0 ? void 0 : _a.forEach(function (record) {\n        queryClient.setQueryData([resource, 'getOne', {\n          id: String(record.id),\n          meta: meta\n        }], function (oldRecord) {\n          return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record;\n        });\n      }); // execute call-time onSuccess if provided\n\n      if (options === null || options === void 0 ? void 0 : options.onSuccess) {\n        options.onSuccess(value);\n      }\n    }\n  }));\n  return useMemo(function () {\n    var _a, _b, _c;\n\n    return result.data ? __assign(__assign({}, result), {\n      data: (_a = result.data) === null || _a === void 0 ? void 0 : _a.data,\n      total: (_b = result.data) === null || _b === void 0 ? void 0 : _b.total,\n      pageInfo: (_c = result.data) === null || _c === void 0 ? void 0 : _c.pageInfo\n    }) : result;\n  }, [result]);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACIC,QADJ,EAIIC,cAJJ,QAKO,aALP;AAQA,SAASC,eAAT,QAAgC,mBAAhC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACtBC,QADsB,EAEtBC,MAFsB,EAGtBC,OAHsB,EAGqC;EAD3D;IAAAD;EAAmC;;EAI/B,SAIAA,MAAM,WAJN;EAAA,cAAU,mBAAG;IAAEE,IAAI,EAAE,CAAR;IAAWC,OAAO,EAAE;EAApB,CAAH,GAA2BC,EAArC;EAAA,IACAC,KAGAL,MAAM,KAJN;EAAA,IACAM,IAAI,mBAAG;IAAEC,KAAK,EAAE,IAAT;IAAeC,KAAK,EAAE;EAAtB,CAAH,GAAiCH,EADrC;EAAA,IAEAI,KAEAT,MAAM,OAJN;EAAA,IAEAU,MAAM,mBAAG,EAAH,GAAKD,EAFX;EAAA,IAGAE,IAAI,GACJX,MAAM,KAJN;EAKJ,IAAMY,YAAY,GAAGf,eAAe,EAApC;EACA,IAAMgB,WAAW,GAAGjB,cAAc,EAAlC;EACA,IAAMkB,MAAM,GAAGnB,QAAQ,CAKnB,CAACI,QAAD,EAAW,SAAX,EAAsB;IAAEgB,UAAU,YAAZ;IAAcT,IAAI,MAAlB;IAAoBI,MAAM,QAA1B;IAA4BC,IAAI;EAAhC,CAAtB,CALmB,EAMnB;IACI,mBAAY,CACPK,OADL,CACyBjB,QADzB,EACmC;MAC3BgB,UAAU,YADiB;MAE3BT,IAAI,MAFuB;MAG3BI,MAAM,QAHqB;MAI3BC,IAAI;IAJuB,CADnC,EAOKM,IAPL,CAOU,UAACb,EAAD,EAA0B;UAAvBc,IAAI;UAAEC,KAAK;UAAEC,QAAQ;MAAO,OAAC;QAClCF,IAAI,MAD8B;QAElCC,KAAK,OAF6B;QAGlCC,QAAQ;MAH0B,CAAD;IAInC,CAXN;EAWO,CAlBQ,EAkBRC,sBAEJpB,OAFI,GAEG;IACVqB,SAAS,EAAE,0BAAK;aAAA,CACZ;;;MACA,WAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEJ,IAAP,MAAW,IAAX,IAAWd,aAAX,GAAW,MAAX,GAAWA,GAAEmB,OAAF,CAAU,kBAAM;QACvBV,WAAW,CAACW,YAAZ,CACI,CAACzB,QAAD,EAAW,QAAX,EAAqB;UAAE0B,EAAE,EAAEC,MAAM,CAACC,MAAM,CAACF,EAAR,CAAZ;UAAyBd,IAAI;QAA7B,CAArB,CADJ,EAEI,qBAAS;UAAI,gBAAS,SAAT,aAAS,WAAT,eAAagB,MAAb;QAAmB,CAFpC;MAIH,CALU,CAAX,CAFY,CAQZ;;MACA,IAAI1B,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEqB,SAAb,EAAwB;QACpBrB,OAAO,CAACqB,SAAR,CAAkBM,KAAlB;MACH;IACJ;EAbS,CAFH,CAlBQ,CAAvB;EAqCA,OAAOlC,OAAO,CACV;;;IACI,aAAM,CAACwB,IAAP,GACKG,sBACQP,MADR,GACc;MACTI,IAAI,EAAE,YAAM,CAACA,IAAP,MAAW,IAAX,IAAWd,aAAX,GAAW,MAAX,GAAWA,GAAEc,IADV;MAETC,KAAK,EAAE,YAAM,CAACD,IAAP,MAAW,IAAX,IAAWb,aAAX,GAAW,MAAX,GAAWA,GAAEc,KAFX;MAGTC,QAAQ,EAAE,YAAM,CAACF,IAAP,MAAW,IAAX,IAAWT,aAAX,GAAW,MAAX,GAAWA,GAAEW;IAHd,CADd,CADL,GAOMN,MAPN;EAOY,CATN,EAUV,CAACA,MAAD,CAVU,CAAd;AAkBH,CApEM","names":["useMemo","useQuery","useQueryClient","useDataProvider","useGetList","resource","params","options","page","perPage","_a","_b","sort","field","order","_c","filter","meta","dataProvider","queryClient","result","pagination","getList","then","data","total","pageInfo","__assign","onSuccess","forEach","setQueryData","id","String","record","value"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/useGetList.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport {\n    useQuery,\n    UseQueryOptions,\n    UseQueryResult,\n    useQueryClient,\n} from 'react-query';\n\nimport { RaRecord, GetListParams, GetListResult } from '../types';\nimport { useDataProvider } from './useDataProvider';\n\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, refetch }\n * - success: { data: [data from store], total: [total from response], isLoading: false, refetch }\n * - error: { error: [error from response], isLoading: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Params} params The getList parameters { pagination, sort, filter, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @prop params.sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @prop params.filter The request filters, e.g. { title: 'hello, world' }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current request state. Destructure as { data, total, error, isLoading, refetch }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, total, isLoading, error } = useGetList(\n *         'posts',\n *         { pagination: { page: 1, perPage: 10 }, sort: { field: 'published_at', order: 'DESC' } }\n *     );\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(item =>\n *         <li key={item.id}>{item.title}</li>\n *     )}</ul>;\n * };\n */\nexport const useGetList = <RecordType extends RaRecord = any>(\n    resource: string,\n    params: Partial<GetListParams> = {},\n    options?: UseQueryOptions<GetListResult<RecordType>, Error>\n): UseGetListHookValue<RecordType> => {\n    const {\n        pagination = { page: 1, perPage: 25 },\n        sort = { field: 'id', order: 'DESC' },\n        filter = {},\n        meta,\n    } = params;\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const result = useQuery<\n        GetListResult<RecordType>,\n        Error,\n        GetListResult<RecordType>\n    >(\n        [resource, 'getList', { pagination, sort, filter, meta }],\n        () =>\n            dataProvider\n                .getList<RecordType>(resource, {\n                    pagination,\n                    sort,\n                    filter,\n                    meta,\n                })\n                .then(({ data, total, pageInfo }) => ({\n                    data,\n                    total,\n                    pageInfo,\n                })),\n        {\n            ...options,\n            onSuccess: value => {\n                // optimistically populate the getOne cache\n                value?.data?.forEach(record => {\n                    queryClient.setQueryData(\n                        [resource, 'getOne', { id: String(record.id), meta }],\n                        oldRecord => oldRecord ?? record\n                    );\n                });\n                // execute call-time onSuccess if provided\n                if (options?.onSuccess) {\n                    options.onSuccess(value);\n                }\n            },\n        }\n    );\n\n    return useMemo(\n        () =>\n            result.data\n                ? {\n                      ...result,\n                      data: result.data?.data,\n                      total: result.data?.total,\n                      pageInfo: result.data?.pageInfo,\n                  }\n                : result,\n        [result]\n    ) as UseQueryResult<RecordType[], Error> & {\n        total?: number;\n        pageInfo?: {\n            hasNextPage?: boolean;\n            hasPreviousPage?: boolean;\n        };\n    };\n};\n\nexport type UseGetListHookValue<\n    RecordType extends RaRecord = any\n> = UseQueryResult<RecordType[], Error> & {\n    total?: number;\n    pageInfo?: {\n        hasNextPage?: boolean;\n        hasPreviousPage?: boolean;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
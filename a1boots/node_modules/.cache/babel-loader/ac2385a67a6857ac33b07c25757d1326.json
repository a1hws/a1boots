{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\nimport { alpha } from '@mui/material/styles';\nimport ActionCheck from '@mui/icons-material/CheckCircle';\nimport AlertError from '@mui/icons-material/ErrorOutline';\nimport clsx from 'clsx';\nimport { useTranslate } from 'ra-core';\n/**\n * Confirmation dialog\n *\n * @example\n * <Confirm\n *     isOpen={true}\n *     title=\"Delete Item\"\n *     content=\"Are you sure you want to delete this item?\"\n *     confirm=\"Yes\"\n *     confirmColor=\"primary\"\n *     ConfirmIcon=ActionCheck\n *     CancelIcon=AlertError\n *     cancel=\"Cancel\"\n *     onConfirm={() => { // do something }}\n *     onClose={() => { // do something }}\n * />\n */\n\nexport var Confirm = function Confirm(props) {\n  var _a;\n\n  var className = props.className,\n      _b = props.isOpen,\n      isOpen = _b === void 0 ? false : _b,\n      loading = props.loading,\n      title = props.title,\n      content = props.content,\n      _c = props.cancel,\n      cancel = _c === void 0 ? 'ra.action.cancel' : _c,\n      _d = props.confirm,\n      confirm = _d === void 0 ? 'ra.action.confirm' : _d,\n      _e = props.confirmColor,\n      confirmColor = _e === void 0 ? 'primary' : _e,\n      _f = props.ConfirmIcon,\n      ConfirmIcon = _f === void 0 ? ActionCheck : _f,\n      _g = props.CancelIcon,\n      CancelIcon = _g === void 0 ? AlertError : _g,\n      onClose = props.onClose,\n      onConfirm = props.onConfirm,\n      _h = props.translateOptions,\n      translateOptions = _h === void 0 ? {} : _h,\n      rest = __rest(props, [\"className\", \"isOpen\", \"loading\", \"title\", \"content\", \"cancel\", \"confirm\", \"confirmColor\", \"ConfirmIcon\", \"CancelIcon\", \"onClose\", \"onConfirm\", \"translateOptions\"]);\n\n  var translate = useTranslate();\n  var handleConfirm = useCallback(function (e) {\n    e.stopPropagation();\n    onConfirm(e);\n  }, [onConfirm]);\n  var handleClick = useCallback(function (e) {\n    e.stopPropagation();\n  }, []);\n  return React.createElement(StyledDialog, __assign({\n    className: className,\n    open: isOpen,\n    onClose: onClose,\n    onClick: handleClick,\n    \"aria-labelledby\": \"alert-dialog-title\"\n  }, rest), React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\"\n  }, translate(title, __assign({\n    _: title\n  }, translateOptions))), React.createElement(DialogContent, null, typeof content === 'string' ? React.createElement(DialogContentText, null, translate(content, __assign({\n    _: content\n  }, translateOptions))) : content), React.createElement(DialogActions, null, React.createElement(Button, {\n    disabled: loading,\n    onClick: onClose,\n    startIcon: React.createElement(CancelIcon, null)\n  }, translate(cancel, {\n    _: cancel\n  })), React.createElement(Button, {\n    disabled: loading,\n    onClick: handleConfirm,\n    className: clsx('ra-confirm', (_a = {}, _a[ConfirmClasses.confirmWarning] = confirmColor === 'warning', _a[ConfirmClasses.confirmPrimary] = confirmColor === 'primary', _a)),\n    autoFocus: true,\n    startIcon: React.createElement(ConfirmIcon, null)\n  }, translate(confirm, {\n    _: confirm\n  }))));\n};\nConfirm.propTypes = {\n  cancel: PropTypes.string,\n  className: PropTypes.string,\n  confirm: PropTypes.string,\n  confirmColor: PropTypes.string,\n  ConfirmIcon: PropTypes.elementType,\n  CancelIcon: PropTypes.elementType,\n  content: PropTypes.node.isRequired,\n  isOpen: PropTypes.bool,\n  loading: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  sx: PropTypes.any\n};\nvar PREFIX = 'RaConfirm';\nexport var ConfirmClasses = {\n  confirmPrimary: \"\".concat(PREFIX, \"-confirmPrimary\"),\n  confirmWarning: \"\".concat(PREFIX, \"-confirmWarning\")\n};\nvar StyledDialog = styled(Dialog, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(ConfirmClasses.confirmPrimary)] = {\n    color: theme.palette.primary.main\n  }, _b[\"& .\".concat(ConfirmClasses.confirmWarning)] = {\n    color: theme.palette.error.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.error.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","styled","useCallback","PropTypes","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Button","alpha","ActionCheck","AlertError","clsx","useTranslate","Confirm","props","_b","isOpen","loading","title","content","_c","cancel","_d","confirm","_e","confirmColor","_f","ConfirmIcon","_g","CancelIcon","onClose","onConfirm","_h","translateOptions","rest","translate","handleConfirm","e","stopPropagation","handleClick","StyledDialog","__assign","className","open","onClick","id","_","disabled","startIcon","_a","ConfirmClasses","confirmWarning","confirmPrimary","autoFocus","propTypes","string","elementType","node","isRequired","bool","func","sx","any","PREFIX","name","overridesResolver","styles","root","theme","color","palette","primary","main","error","backgroundColor"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/layout/Confirm.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, MouseEventHandler } from 'react';\nimport PropTypes, { ReactComponentLike } from 'prop-types';\nimport Dialog, { DialogProps } from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\nimport { alpha } from '@mui/material/styles';\nimport ActionCheck from '@mui/icons-material/CheckCircle';\nimport AlertError from '@mui/icons-material/ErrorOutline';\nimport clsx from 'clsx';\nimport { useTranslate } from 'ra-core';\n\n/**\n * Confirmation dialog\n *\n * @example\n * <Confirm\n *     isOpen={true}\n *     title=\"Delete Item\"\n *     content=\"Are you sure you want to delete this item?\"\n *     confirm=\"Yes\"\n *     confirmColor=\"primary\"\n *     ConfirmIcon=ActionCheck\n *     CancelIcon=AlertError\n *     cancel=\"Cancel\"\n *     onConfirm={() => { // do something }}\n *     onClose={() => { // do something }}\n * />\n */\nexport const Confirm = (props: ConfirmProps) => {\n    const {\n        className,\n        isOpen = false,\n        loading,\n        title,\n        content,\n        cancel = 'ra.action.cancel',\n        confirm = 'ra.action.confirm',\n        confirmColor = 'primary',\n        ConfirmIcon = ActionCheck,\n        CancelIcon = AlertError,\n        onClose,\n        onConfirm,\n        translateOptions = {},\n        ...rest\n    } = props;\n\n    const translate = useTranslate();\n\n    const handleConfirm = useCallback(\n        e => {\n            e.stopPropagation();\n            onConfirm(e);\n        },\n        [onConfirm]\n    );\n\n    const handleClick = useCallback(e => {\n        e.stopPropagation();\n    }, []);\n\n    return (\n        <StyledDialog\n            className={className}\n            open={isOpen}\n            onClose={onClose}\n            onClick={handleClick}\n            aria-labelledby=\"alert-dialog-title\"\n            {...rest}\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                {translate(title, { _: title, ...translateOptions })}\n            </DialogTitle>\n            <DialogContent>\n                {typeof content === 'string' ? (\n                    <DialogContentText>\n                        {translate(content, {\n                            _: content,\n                            ...translateOptions,\n                        })}\n                    </DialogContentText>\n                ) : (\n                    content\n                )}\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    disabled={loading}\n                    onClick={onClose}\n                    startIcon={<CancelIcon />}\n                >\n                    {translate(cancel, { _: cancel })}\n                </Button>\n                <Button\n                    disabled={loading}\n                    onClick={handleConfirm}\n                    className={clsx('ra-confirm', {\n                        [ConfirmClasses.confirmWarning]:\n                            confirmColor === 'warning',\n                        [ConfirmClasses.confirmPrimary]:\n                            confirmColor === 'primary',\n                    })}\n                    autoFocus\n                    startIcon={<ConfirmIcon />}\n                >\n                    {translate(confirm, { _: confirm })}\n                </Button>\n            </DialogActions>\n        </StyledDialog>\n    );\n};\n\nexport interface ConfirmProps extends Omit<DialogProps, 'open' | 'onClose'> {\n    cancel?: string;\n    className?: string;\n    confirm?: string;\n    confirmColor?: string;\n    ConfirmIcon?: ReactComponentLike;\n    CancelIcon?: ReactComponentLike;\n    content: React.ReactNode;\n    isOpen?: boolean;\n    loading?: boolean;\n    onClose: MouseEventHandler;\n    onConfirm: MouseEventHandler;\n    title: string;\n    translateOptions?: object;\n}\n\nConfirm.propTypes = {\n    cancel: PropTypes.string,\n    className: PropTypes.string,\n    confirm: PropTypes.string,\n    confirmColor: PropTypes.string,\n    ConfirmIcon: PropTypes.elementType,\n    CancelIcon: PropTypes.elementType,\n    content: PropTypes.node.isRequired,\n    isOpen: PropTypes.bool,\n    loading: PropTypes.bool,\n    onClose: PropTypes.func.isRequired,\n    onConfirm: PropTypes.func.isRequired,\n    title: PropTypes.string.isRequired,\n    sx: PropTypes.any,\n};\n\nconst PREFIX = 'RaConfirm';\n\nexport const ConfirmClasses = {\n    confirmPrimary: `${PREFIX}-confirmPrimary`,\n    confirmWarning: `${PREFIX}-confirmWarning`,\n};\n\nconst StyledDialog = styled(Dialog, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ConfirmClasses.confirmPrimary}`]: {\n        color: theme.palette.primary.main,\n    },\n\n    [`& .${ConfirmClasses.confirmWarning}`]: {\n        color: theme.palette.error.main,\n        '&:hover': {\n            backgroundColor: alpha(theme.palette.error.main, 0.12),\n            // Reset on mouse devices\n            '@media (hover: none)': {\n                backgroundColor: 'transparent',\n            },\n        },\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { InputAdornment } from '@mui/material';\nimport { useTranslate } from 'ra-core';\nimport { TextInput } from './TextInput';\nexport var SearchInput = function SearchInput(props) {\n  var label = props.label,\n      rest = __rest(props, [\"label\"]);\n\n  var translate = useTranslate();\n\n  if (label) {\n    throw new Error(\"<SearchInput> isn't designed to be used with a label prop. Use <TextInput> if you need a label.\");\n  }\n\n  return React.createElement(StyledTextInput, __assign({\n    hiddenLabel: true,\n    label: \"\",\n    resettable: true,\n    placeholder: translate('ra.action.search'),\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\"\n      }, React.createElement(SearchIcon, {\n        color: \"disabled\"\n      }))\n    },\n    size: \"small\"\n  }, rest));\n};\nvar PREFIX = 'RaSearchInput';\nvar StyledTextInput = styled(TextInput, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  marginTop: 0\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,YAAT,QAA6B,SAA7B;AAGA,SAASC,SAAT,QAA0C,aAA1C;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAwB;EACvC,SAAK,GAAcA,KAAK,MAAxB;EAAA,IAAUC,IAAI,UAAKD,KAAL,EAAhB,SAAgB,CAAd;;EAER,IAAME,SAAS,GAAGL,YAAY,EAA9B;;EAEA,IAAIM,KAAJ,EAAW;IACP,MAAM,IAAIC,KAAJ,CACF,iGADE,CAAN;EAGH;;EAED,OACIX,oBAACY,eAAD,EAAgBC;IACZC,WAAW,MADC;IAEZJ,KAAK,EAAC,EAFM;IAGZK,UAAU,MAHE;IAIZC,WAAW,EAAEP,SAAS,CAAC,kBAAD,CAJV;IAKZQ,UAAU,EAAE;MACRC,YAAY,EACRlB,oBAACG,cAAD,EAAe;QAACgB,QAAQ,EAAC;MAAV,CAAf,EACInB,oBAACE,UAAD,EAAW;QAACkB,KAAK,EAAC;MAAP,CAAX,CADJ;IAFI,CALA;IAYZC,IAAI,EAAC;EAZO,GAaRb,IAbQ,CAAhB,CADJ;AAiBH,CA5BM;AAgCP,IAAMc,MAAM,GAAG,eAAf;AAEA,IAAMV,eAAe,GAAGX,MAAM,CAACI,SAAD,EAAY;EACtCkB,IAAI,EAAED,MADgC;EAEtCE,iBAAiB,EAAE,2BAACjB,KAAD,EAAQkB,MAAR,EAAc;IAAK,aAAM,CAACC,IAAP;EAAW;AAFX,CAAZ,CAAN,CAGrB;EACCC,SAAS,EAAE;AADZ,CAHqB,CAAxB","names":["React","styled","SearchIcon","InputAdornment","useTranslate","TextInput","SearchInput","props","rest","translate","label","Error","StyledTextInput","__assign","hiddenLabel","resettable","placeholder","InputProps","endAdornment","position","color","size","PREFIX","name","overridesResolver","styles","root","marginTop"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/SearchInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { InputAdornment } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport const SearchInput = (props: SearchInputProps) => {\n    const { label, ...rest } = props;\n\n    const translate = useTranslate();\n\n    if (label) {\n        throw new Error(\n            \"<SearchInput> isn't designed to be used with a label prop. Use <TextInput> if you need a label.\"\n        );\n    }\n\n    return (\n        <StyledTextInput\n            hiddenLabel\n            label=\"\"\n            resettable\n            placeholder={translate('ra.action.search')}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <SearchIcon color=\"disabled\" />\n                    </InputAdornment>\n                ),\n            }}\n            size=\"small\"\n            {...rest}\n        />\n    );\n};\n\nexport type SearchInputProps = CommonInputProps & TextInputProps;\n\nconst PREFIX = 'RaSearchInput';\n\nconst StyledTextInput = styled(TextInput, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    marginTop: 0,\n});\n"]},"metadata":{},"sourceType":"module"}
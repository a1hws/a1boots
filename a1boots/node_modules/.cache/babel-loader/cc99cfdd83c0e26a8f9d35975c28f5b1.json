{"ast":null,"code":"import * as React from 'react';\nimport { useMemo } from 'react';\nimport { QueryClientProvider, QueryClient } from 'react-query';\nimport { AdminRouter } from '../routing';\nimport { AuthContext, convertLegacyAuthProvider } from '../auth';\nimport { DataProviderContext, convertLegacyDataProvider, defaultDataProvider } from '../dataProvider';\nimport { StoreContextProvider, memoryStore } from '../store';\nimport { PreferencesEditorContextProvider } from '../preferences/PreferencesEditorContextProvider';\nimport { I18nContextProvider } from '../i18n';\nimport { ResourceDefinitionContextProvider } from './ResourceDefinitionContext';\nimport { NotificationContextProvider } from '../notification';\nexport var CoreAdminContext = function CoreAdminContext(props) {\n  var authProvider = props.authProvider,\n      basename = props.basename,\n      dataProvider = props.dataProvider,\n      i18nProvider = props.i18nProvider,\n      store = props.store,\n      children = props.children,\n      history = props.history,\n      queryClient = props.queryClient;\n\n  if (!dataProvider) {\n    throw new Error(\"Missing dataProvider prop.\\nReact-admin requires a valid dataProvider function to work.\");\n  }\n\n  var finalQueryClient = useMemo(function () {\n    return queryClient || new QueryClient();\n  }, [queryClient]);\n  var finalAuthProvider = useMemo(function () {\n    return authProvider instanceof Function ? convertLegacyAuthProvider(authProvider) : authProvider;\n  }, [authProvider]);\n  var finalDataProvider = useMemo(function () {\n    return dataProvider instanceof Function ? convertLegacyDataProvider(dataProvider) : dataProvider;\n  }, [dataProvider]);\n  return React.createElement(AuthContext.Provider, {\n    value: finalAuthProvider\n  }, React.createElement(DataProviderContext.Provider, {\n    value: finalDataProvider\n  }, React.createElement(StoreContextProvider, {\n    value: store\n  }, React.createElement(PreferencesEditorContextProvider, null, React.createElement(QueryClientProvider, {\n    client: finalQueryClient\n  }, React.createElement(AdminRouter, {\n    history: history,\n    basename: basename\n  }, React.createElement(I18nContextProvider, {\n    value: i18nProvider\n  }, React.createElement(NotificationContextProvider, null, React.createElement(ResourceDefinitionContextProvider, null, children)))))))));\n};\nCoreAdminContext.defaultProps = {\n  dataProvider: defaultDataProvider,\n  store: memoryStore()\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,mBAAT,EAA8BC,WAA9B,QAAiD,aAAjD;AAGA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,WAAT,EAAsBC,yBAAtB,QAAuD,SAAvD;AACA,SACIC,mBADJ,EAEIC,yBAFJ,EAGIC,mBAHJ,QAIO,iBAJP;AAKA,SAASC,oBAAT,EAAsCC,WAAtC,QAAyD,UAAzD;AACA,SAASC,gCAAT,QAAiD,iDAAjD;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,SAASC,iCAAT,QAAkD,6BAAlD;AACA,SAASC,2BAAT,QAA4C,iBAA5C;AA2BA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAA6B;EAErD,gBAAY,GAQZA,KAAK,aARL;EAAA,IACAC,QAAQ,GAORD,KAAK,SARL;EAAA,IAEAE,YAAY,GAMZF,KAAK,aARL;EAAA,IAGAG,YAAY,GAKZH,KAAK,aARL;EAAA,IAIAI,KAAK,GAILJ,KAAK,MARL;EAAA,IAKAK,QAAQ,GAGRL,KAAK,SARL;EAAA,IAMAM,OAAO,GAEPN,KAAK,QARL;EAAA,IAOAO,WAAW,GACXP,KAAK,YARL;;EAUJ,IAAI,CAACE,YAAL,EAAmB;IACf,MAAM,IAAIM,KAAJ,CAAU,yFAAV,CAAN;EAEH;;EAED,IAAMC,gBAAgB,GAAGzB,OAAO,CAAC;IAAM,kBAAW,IAAI,IAAIE,WAAJ,EAAf;EAAgC,CAAvC,EAAyC,CACrEqB,WADqE,CAAzC,CAAhC;EAIA,IAAMG,iBAAiB,GAAG1B,OAAO,CAC7B;IACI,mBAAY,YAAY2B,QAAxB,GACMtB,yBAAyB,CAACuB,YAAD,CAD/B,GAEMA,YAFN;EAEkB,CAJO,EAK7B,CAACA,YAAD,CAL6B,CAAjC;EAQA,IAAMC,iBAAiB,GAAG7B,OAAO,CAC7B;IACI,mBAAY,YAAY2B,QAAxB,GACMpB,yBAAyB,CAACW,YAAD,CAD/B,GAEMA,YAFN;EAEkB,CAJO,EAK7B,CAACA,YAAD,CAL6B,CAAjC;EAQA,OACInB,oBAACK,WAAW,CAAC0B,QAAb,EAAqB;IAACC,KAAK,EAAEL;EAAR,CAArB,EACI3B,oBAACO,mBAAmB,CAACwB,QAArB,EAA6B;IAACC,KAAK,EAAEF;EAAR,CAA7B,EACI9B,oBAACU,oBAAD,EAAqB;IAACsB,KAAK,EAAEX;EAAR,CAArB,EACIrB,oBAACY,gCAAD,EAAiC,IAAjC,EACIZ,oBAACE,mBAAD,EAAoB;IAAC+B,MAAM,EAAEP;EAAT,CAApB,EACI1B,oBAACI,WAAD,EAAY;IAACmB,OAAO,EAAEA,OAAV;IAAmBL,QAAQ,EAAEA;EAA7B,CAAZ,EACIlB,oBAACa,mBAAD,EAAoB;IAACmB,KAAK,EAAEZ;EAAR,CAApB,EACIpB,oBAACe,2BAAD,EAA4B,IAA5B,EACIf,oBAACc,iCAAD,EAAkC,IAAlC,EACKQ,QADL,CADJ,CADJ,CADJ,CADJ,CADJ,CADJ,CADJ,CADJ,CADJ;AAqBH,CA1DM;AA4DPN,gBAAgB,CAACkB,YAAjB,GAAgC;EAC5Bf,YAAY,EAAEV,mBADc;EAE5BY,KAAK,EAAEV,WAAW;AAFU,CAAhC","names":["React","useMemo","QueryClientProvider","QueryClient","AdminRouter","AuthContext","convertLegacyAuthProvider","DataProviderContext","convertLegacyDataProvider","defaultDataProvider","StoreContextProvider","memoryStore","PreferencesEditorContextProvider","I18nContextProvider","ResourceDefinitionContextProvider","NotificationContextProvider","CoreAdminContext","props","basename","dataProvider","i18nProvider","store","children","history","queryClient","Error","finalQueryClient","finalAuthProvider","Function","authProvider","finalDataProvider","Provider","value","client","defaultProps"],"sources":["/var/www/a1boots/node_modules/ra-core/src/core/CoreAdminContext.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useMemo } from 'react';\nimport { QueryClientProvider, QueryClient } from 'react-query';\nimport { History } from 'history';\n\nimport { AdminRouter } from '../routing';\nimport { AuthContext, convertLegacyAuthProvider } from '../auth';\nimport {\n    DataProviderContext,\n    convertLegacyDataProvider,\n    defaultDataProvider,\n} from '../dataProvider';\nimport { StoreContextProvider, Store, memoryStore } from '../store';\nimport { PreferencesEditorContextProvider } from '../preferences/PreferencesEditorContextProvider';\nimport { I18nContextProvider } from '../i18n';\nimport { ResourceDefinitionContextProvider } from './ResourceDefinitionContext';\nimport { NotificationContextProvider } from '../notification';\nimport {\n    AuthProvider,\n    LegacyAuthProvider,\n    I18nProvider,\n    DataProvider,\n    AdminChildren,\n    DashboardComponent,\n    LegacyDataProvider,\n} from '../types';\n\nexport interface CoreAdminContextProps {\n    authProvider?: AuthProvider | LegacyAuthProvider;\n    basename?: string;\n    children?: AdminChildren;\n    dashboard?: DashboardComponent;\n    dataProvider?: DataProvider | LegacyDataProvider;\n    store?: Store;\n    queryClient?: QueryClient;\n    /**\n     * @deprecated Wrap your Admin inside a Router to change the routing strategy\n     */\n    history?: History;\n    i18nProvider?: I18nProvider;\n    theme?: object;\n}\n\nexport const CoreAdminContext = (props: CoreAdminContextProps) => {\n    const {\n        authProvider,\n        basename,\n        dataProvider,\n        i18nProvider,\n        store,\n        children,\n        history,\n        queryClient,\n    } = props;\n\n    if (!dataProvider) {\n        throw new Error(`Missing dataProvider prop.\nReact-admin requires a valid dataProvider function to work.`);\n    }\n\n    const finalQueryClient = useMemo(() => queryClient || new QueryClient(), [\n        queryClient,\n    ]);\n\n    const finalAuthProvider = useMemo(\n        () =>\n            authProvider instanceof Function\n                ? convertLegacyAuthProvider(authProvider)\n                : authProvider,\n        [authProvider]\n    );\n\n    const finalDataProvider = useMemo(\n        () =>\n            dataProvider instanceof Function\n                ? convertLegacyDataProvider(dataProvider)\n                : dataProvider,\n        [dataProvider]\n    );\n\n    return (\n        <AuthContext.Provider value={finalAuthProvider}>\n            <DataProviderContext.Provider value={finalDataProvider}>\n                <StoreContextProvider value={store}>\n                    <PreferencesEditorContextProvider>\n                        <QueryClientProvider client={finalQueryClient}>\n                            <AdminRouter history={history} basename={basename}>\n                                <I18nContextProvider value={i18nProvider}>\n                                    <NotificationContextProvider>\n                                        <ResourceDefinitionContextProvider>\n                                            {children}\n                                        </ResourceDefinitionContextProvider>\n                                    </NotificationContextProvider>\n                                </I18nContextProvider>\n                            </AdminRouter>\n                        </QueryClientProvider>\n                    </PreferencesEditorContextProvider>\n                </StoreContextProvider>\n            </DataProviderContext.Provider>\n        </AuthContext.Provider>\n    );\n};\n\nCoreAdminContext.defaultProps = {\n    dataProvider: defaultDataProvider,\n    store: memoryStore(),\n};\n"]},"metadata":{},"sourceType":"module"}
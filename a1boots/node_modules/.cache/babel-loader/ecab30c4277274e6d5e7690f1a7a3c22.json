{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Children, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { AppBar as MuiAppBar, Toolbar, useMediaQuery } from '@mui/material';\nimport { ComponentPropType, useLocales } from 'ra-core';\nimport { SidebarToggleButton } from './SidebarToggleButton';\nimport { LoadingIndicator } from './LoadingIndicator';\nimport { UserMenu } from './UserMenu';\nimport { HideOnScroll } from './HideOnScroll';\nimport { TitlePortal } from './TitlePortal';\nimport { LocalesMenuButton } from '../button';\nimport { useThemesContext } from './Theme/useThemesContext';\nimport { ToggleThemeButton } from '../button/ToggleThemeButton';\n/**\n * The AppBar component renders a custom MuiAppBar.\n *\n * @param {Object} props\n * @param {ReactNode} props.children React node/s to be rendered as children of the AppBar\n * @param {string} props.className CSS class applied to the MuiAppBar component\n * @param {string} props.color The color of the AppBar\n * @param {Element | boolean} props.userMenu A custom user menu component for the AppBar. <UserMenu/> component by default. Pass false to disable.\n *\n * @example // add a custom button to the AppBar\n *\n * const MyAppBar = () => (\n *   <AppBar>\n *     <TitlePortal />\n *     <MyCustomButton />\n *   </AppBar>\n * );\n *\n * @example // without a user menu\n *\n * const MyAppBar = () => <AppBar userMenu={false} />;\n */\n\nexport var AppBar = memo(function (props) {\n  var alwaysOn = props.alwaysOn,\n      children = props.children,\n      className = props.className,\n      _a = props.color,\n      color = _a === void 0 ? 'secondary' : _a,\n      open = props.open,\n      title = props.title,\n      _b = props.toolbar,\n      toolbar = _b === void 0 ? defaultToolbarElement : _b,\n      _c = props.userMenu,\n      userMenu = _c === void 0 ? DefaultUserMenu : _c,\n      _d = props.container,\n      Container = _d === void 0 ? alwaysOn ? 'div' : HideOnScroll : _d,\n      rest = __rest(props, [\"alwaysOn\", \"children\", \"className\", \"color\", \"open\", \"title\", \"toolbar\", \"userMenu\", \"container\"]);\n\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  });\n  return React.createElement(Container, {\n    className: className\n  }, React.createElement(StyledAppBar, __assign({\n    className: AppBarClasses.appBar,\n    color: color\n  }, rest), React.createElement(Toolbar, {\n    disableGutters: true,\n    variant: isXSmall ? 'regular' : 'dense',\n    className: AppBarClasses.toolbar\n  }, React.createElement(SidebarToggleButton, {\n    className: AppBarClasses.menuButton\n  }), Children.count(children) === 0 ? React.createElement(TitlePortal, {\n    className: AppBarClasses.title\n  }) : children, toolbar, typeof userMenu === 'boolean' ? userMenu === true ? React.createElement(UserMenu, null) : null : userMenu)));\n});\n\nvar DefaultToolbar = function DefaultToolbar() {\n  var locales = useLocales();\n  var darkTheme = useThemesContext().darkTheme;\n  return React.createElement(React.Fragment, null, locales && locales.length > 1 ? React.createElement(LocalesMenuButton, null) : null, darkTheme && React.createElement(ToggleThemeButton, null), React.createElement(LoadingIndicator, null));\n};\n\nvar defaultToolbarElement = React.createElement(DefaultToolbar, null);\nAppBar.propTypes = {\n  alwaysOn: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary', 'transparent']),\n  container: ComponentPropType,\n\n  /**\n   * @deprecated\n   */\n  open: PropTypes.bool,\n  toolbar: PropTypes.element,\n  userMenu: PropTypes.oneOfType([PropTypes.element, PropTypes.bool])\n};\nvar DefaultUserMenu = React.createElement(UserMenu, null);\nvar PREFIX = 'RaAppBar';\nexport var AppBarClasses = {\n  appBar: \"\".concat(PREFIX, \"-appBar\"),\n  toolbar: \"\".concat(PREFIX, \"-toolbar\"),\n  menuButton: \"\".concat(PREFIX, \"-menuButton\"),\n  menuButtonIconClosed: \"\".concat(PREFIX, \"-menuButtonIconClosed\"),\n  menuButtonIconOpen: \"\".concat(PREFIX, \"-menuButtonIconOpen\"),\n  title: \"\".concat(PREFIX, \"-title\")\n};\nvar StyledAppBar = styled(MuiAppBar, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b, _c;\n\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(AppBarClasses.toolbar)] = (_c = {\n    padding: \"0 \".concat(theme.spacing(1))\n  }, _c[theme.breakpoints.down('md')] = {\n    minHeight: theme.spacing(6)\n  }, _c), _b[\"& .\".concat(AppBarClasses.menuButton)] = {\n    marginRight: '0.2em'\n  }, _b[\"& .\".concat(AppBarClasses.title)] = {}, _b;\n});","map":{"version":3,"mappings":"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","names":["React","styled","Children","memo","PropTypes","AppBar","MuiAppBar","Toolbar","useMediaQuery","ComponentPropType","useLocales","SidebarToggleButton","LoadingIndicator","UserMenu","HideOnScroll","TitlePortal","LocalesMenuButton","useThemesContext","ToggleThemeButton","props","children","className","_a","color","open","title","_b","toolbar","defaultToolbarElement","_c","userMenu","DefaultUserMenu","_d","Container","alwaysOn","rest","isXSmall","breakpoints","down","StyledAppBar","__assign","AppBarClasses","appBar","disableGutters","variant","menuButton","count","DefaultToolbar","locales","darkTheme","length","propTypes","bool","node","string","oneOf","container","element","oneOfType","PREFIX","menuButtonIconClosed","menuButtonIconOpen","name","overridesResolver","styles","root","theme","padding","spacing","minHeight","marginRight"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/layout/AppBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FC } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Children, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    AppBar as MuiAppBar,\n    AppBarProps as MuiAppBarProps,\n    Toolbar,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport { ComponentPropType, useLocales } from 'ra-core';\n\nimport { SidebarToggleButton } from './SidebarToggleButton';\nimport { LoadingIndicator } from './LoadingIndicator';\nimport { UserMenu } from './UserMenu';\nimport { HideOnScroll } from './HideOnScroll';\nimport { TitlePortal } from './TitlePortal';\nimport { LocalesMenuButton } from '../button';\nimport { useThemesContext } from './Theme/useThemesContext';\nimport { ToggleThemeButton } from '../button/ToggleThemeButton';\n\n/**\n * The AppBar component renders a custom MuiAppBar.\n *\n * @param {Object} props\n * @param {ReactNode} props.children React node/s to be rendered as children of the AppBar\n * @param {string} props.className CSS class applied to the MuiAppBar component\n * @param {string} props.color The color of the AppBar\n * @param {Element | boolean} props.userMenu A custom user menu component for the AppBar. <UserMenu/> component by default. Pass false to disable.\n *\n * @example // add a custom button to the AppBar\n *\n * const MyAppBar = () => (\n *   <AppBar>\n *     <TitlePortal />\n *     <MyCustomButton />\n *   </AppBar>\n * );\n *\n * @example // without a user menu\n *\n * const MyAppBar = () => <AppBar userMenu={false} />;\n */\nexport const AppBar: FC<AppBarProps> = memo(props => {\n    const {\n        alwaysOn,\n        children,\n        className,\n        color = 'secondary',\n        open,\n        title,\n        toolbar = defaultToolbarElement,\n        userMenu = DefaultUserMenu,\n        container: Container = alwaysOn ? 'div' : HideOnScroll,\n        ...rest\n    } = props;\n\n    const isXSmall = useMediaQuery<Theme>(theme =>\n        theme.breakpoints.down('sm')\n    );\n\n    return (\n        <Container className={className}>\n            <StyledAppBar\n                className={AppBarClasses.appBar}\n                color={color}\n                {...rest}\n            >\n                <Toolbar\n                    disableGutters\n                    variant={isXSmall ? 'regular' : 'dense'}\n                    className={AppBarClasses.toolbar}\n                >\n                    <SidebarToggleButton className={AppBarClasses.menuButton} />\n                    {Children.count(children) === 0 ? (\n                        <TitlePortal className={AppBarClasses.title} />\n                    ) : (\n                        children\n                    )}\n                    {toolbar}\n                    {typeof userMenu === 'boolean' ? (\n                        userMenu === true ? (\n                            <UserMenu />\n                        ) : null\n                    ) : (\n                        userMenu\n                    )}\n                </Toolbar>\n            </StyledAppBar>\n        </Container>\n    );\n});\n\nconst DefaultToolbar = () => {\n    const locales = useLocales();\n    const { darkTheme } = useThemesContext();\n    return (\n        <>\n            {locales && locales.length > 1 ? <LocalesMenuButton /> : null}\n            {darkTheme && <ToggleThemeButton />}\n            <LoadingIndicator />\n        </>\n    );\n};\n\nconst defaultToolbarElement = <DefaultToolbar />;\n\nAppBar.propTypes = {\n    alwaysOn: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: PropTypes.oneOf([\n        'default',\n        'inherit',\n        'primary',\n        'secondary',\n        'transparent',\n    ]),\n    container: ComponentPropType,\n    /**\n     * @deprecated\n     */\n    open: PropTypes.bool,\n    toolbar: PropTypes.element,\n    userMenu: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n};\n\nconst DefaultUserMenu = <UserMenu />;\n\nexport interface AppBarProps extends Omit<MuiAppBarProps, 'title'> {\n    /**\n     * This prop is injected by Layout. You should not use it directly unless\n     * you are using a custom layout.\n     * If you are using the default layout, use `<Layout appBarAlwaysOn>` instead.\n     */\n    alwaysOn?: boolean;\n    container?: React.ElementType<any>;\n    /**\n     * @deprecated injected by Layout but not used by this AppBar\n     */\n    open?: boolean;\n    /**\n     * @deprecated injected by Layout but not used by this AppBar\n     */\n    title?: string | JSX.Element;\n    toolbar?: JSX.Element;\n    userMenu?: JSX.Element | boolean;\n}\n\nconst PREFIX = 'RaAppBar';\n\nexport const AppBarClasses = {\n    appBar: `${PREFIX}-appBar`,\n    toolbar: `${PREFIX}-toolbar`,\n    menuButton: `${PREFIX}-menuButton`,\n    menuButtonIconClosed: `${PREFIX}-menuButtonIconClosed`,\n    menuButtonIconOpen: `${PREFIX}-menuButtonIconOpen`,\n    title: `${PREFIX}-title`,\n};\n\nconst StyledAppBar = styled(MuiAppBar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${AppBarClasses.toolbar}`]: {\n        padding: `0 ${theme.spacing(1)}`,\n        [theme.breakpoints.down('md')]: {\n            minHeight: theme.spacing(6),\n        },\n    },\n    [`& .${AppBarClasses.menuButton}`]: {\n        marginRight: '0.2em',\n    },\n    [`& .${AppBarClasses.title}`]: {},\n}));\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport Polyglot from 'node-polyglot';\n/**\n * Build a polyglot-based i18nProvider based on a function returning the messages for a locale\n *\n * @example\n *\n * import { Admin, Resource, polyglotI18nProvider } from 'react-admin';\n * import englishMessages from 'ra-language-english';\n * import frenchMessages from 'ra-language-french';\n *\n * const messages = {\n *     fr: frenchMessages,\n *     en: englishMessages,\n * };\n * const i18nProvider = polyglotI18nProvider(\n *     locale => messages[locale],\n *     'en',\n *     [{ locale: 'en', name: 'English' }, { locale: 'fr', name: 'Français' }]\n * )\n */\n\nexport default (function (getMessages, initialLocale, availableLocales, polyglotOptions) {\n  if (initialLocale === void 0) {\n    initialLocale = 'en';\n  }\n\n  if (availableLocales === void 0) {\n    availableLocales = [{\n      locale: 'en',\n      name: 'English'\n    }];\n  }\n\n  if (polyglotOptions === void 0) {\n    polyglotOptions = {};\n  }\n\n  var locale = initialLocale;\n  var messages = getMessages(initialLocale);\n\n  if (messages instanceof Promise) {\n    throw new Error(\"The i18nProvider returned a Promise for the messages of the default locale (\".concat(initialLocale, \"). Please update your i18nProvider to return the messages of the default locale in a synchronous way.\"));\n  }\n\n  var availableLocalesFinal, polyglotOptionsFinal;\n\n  if (Array.isArray(availableLocales)) {\n    // third argument is an array of locales\n    availableLocalesFinal = availableLocales;\n    polyglotOptionsFinal = polyglotOptions;\n  } else {\n    // third argument is the polyglotOptions\n    availableLocalesFinal = [{\n      locale: 'en',\n      name: 'English'\n    }];\n    polyglotOptionsFinal = availableLocales;\n  }\n\n  var polyglot = new Polyglot(__assign({\n    locale: locale,\n    phrases: __assign({\n      '': ''\n    }, messages)\n  }, polyglotOptionsFinal));\n\n  var _translate = polyglot.t.bind(polyglot);\n\n  return {\n    translate: function translate(key, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      return _translate(key, options);\n    },\n    changeLocale: function changeLocale(newLocale) {\n      // We systematically return a Promise for the messages because\n      // getMessages may return a Promise\n      return Promise.resolve(getMessages(newLocale)).then(function (messages) {\n        locale = newLocale;\n        var newPolyglot = new Polyglot(__assign({\n          locale: newLocale,\n          phrases: __assign({\n            '': ''\n          }, messages)\n        }, polyglotOptions));\n        _translate = newPolyglot.t.bind(newPolyglot);\n      });\n    },\n    getLocale: function getLocale() {\n      return locale;\n    },\n    getLocales: function getLocales() {\n      return availableLocalesFinal;\n    }\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,eAArB;AAQA;;;;;;;;;;;;;;;;;;;;AAmBA,gBAAe,UACXC,WADW,EAEXC,aAFW,EAGXC,gBAHW,EAIXC,eAJW,EAIc;EAFzB;IAAAF;EAA4B;;EAC5B;IAAAC,oBAAoC;MAAEE,MAAM,EAAE,IAAV;MAAgBC,IAAI,EAAE;IAAtB,CAApC;EAAsE;;EACtE;IAAAF;EAAyB;;EAEzB,IAAIC,MAAM,GAAGH,aAAb;EACA,IAAMK,QAAQ,GAAGN,WAAW,CAACC,aAAD,CAA5B;;EACA,IAAIK,QAAQ,YAAYC,OAAxB,EAAiC;IAC7B,MAAM,IAAIC,KAAJ,CACF,sFAA+EP,aAA/E,EAA4F,uGAA5F,CADE,CAAN;EAGH;;EAED,IAAIQ,qBAAJ,EAA2BC,oBAA3B;;EACA,IAAIC,KAAK,CAACC,OAAN,CAAcV,gBAAd,CAAJ,EAAqC;IACjC;IACAO,qBAAqB,GAAGP,gBAAxB;IACAQ,oBAAoB,GAAGP,eAAvB;EACH,CAJD,MAIO;IACH;IACAM,qBAAqB,GAAG,CAAC;MAAEL,MAAM,EAAE,IAAV;MAAgBC,IAAI,EAAE;IAAtB,CAAD,CAAxB;IACAK,oBAAoB,GAAGR,gBAAvB;EACH;;EACD,IAAMW,QAAQ,GAAG,IAAId,QAAJ,CAAYe;IACzBV,MAAM,QADmB;IAEzBW,OAAO;MAAI,IAAI;IAAR,GAAeT,QAAf;EAFkB,GAGtBI,oBAHsB,CAAZ,CAAjB;;EAKA,IAAIM,UAAS,GAAGH,QAAQ,CAACI,CAAT,CAAWC,IAAX,CAAgBL,QAAhB,CAAhB;;EAEA,OAAO;IACHG,SAAS,EAAE,mBAACG,GAAD,EAAcC,OAAd,EAA+B;MAAjB;QAAAA;MAAiB;;MAAK,iBAAS,CAACD,GAAD,EAAMC,OAAN,CAAT;IAAuB,CADnE;IAEHC,YAAY,EAAE,sBAACC,SAAD,EAAkB;MAC5B;MACA;MACA,cAAO,CAACC,OAAR,CAAgBvB,WAAW,CAACsB,SAAD,CAA3B,EAAkDE,IAAlD,CACI,UAAClB,QAAD,EAA8B;QAC1BF,MAAM,GAAGkB,SAAT;QACA,IAAMG,WAAW,GAAG,IAAI1B,QAAJ,CAAYe;UAC5BV,MAAM,EAAEkB,SADoB;UAE5BP,OAAO;YAAI,IAAI;UAAR,GAAeT,QAAf;QAFqB,GAGzBH,eAHyB,CAAZ,CAApB;QAKAa,UAAS,GAAGS,WAAW,CAACR,CAAZ,CAAcC,IAAd,CAAmBO,WAAnB,CAAZ;MACH,CATL;IAUC,CAfF;IAgBHC,SAAS,EAAE;MAAM;IAAM,CAhBpB;IAiBHC,UAAU,EAAE;MAAM;IAAqB;EAjBpC,CAAP;AAmBH,CAlDD","names":["Polyglot","getMessages","initialLocale","availableLocales","polyglotOptions","locale","name","messages","Promise","Error","availableLocalesFinal","polyglotOptionsFinal","Array","isArray","polyglot","__assign","phrases","translate","t","bind","key","options","changeLocale","newLocale","resolve","then","newPolyglot","getLocale","getLocales"],"sources":["/var/www/a1boots/node_modules/ra-i18n-polyglot/src/index.ts"],"sourcesContent":["import Polyglot from 'node-polyglot';\n\nimport { I18nProvider, TranslationMessages, Locale } from 'ra-core';\n\ntype GetMessages = (\n    locale: string\n) => TranslationMessages | Promise<TranslationMessages>;\n\n/**\n * Build a polyglot-based i18nProvider based on a function returning the messages for a locale\n *\n * @example\n *\n * import { Admin, Resource, polyglotI18nProvider } from 'react-admin';\n * import englishMessages from 'ra-language-english';\n * import frenchMessages from 'ra-language-french';\n *\n * const messages = {\n *     fr: frenchMessages,\n *     en: englishMessages,\n * };\n * const i18nProvider = polyglotI18nProvider(\n *     locale => messages[locale],\n *     'en',\n *     [{ locale: 'en', name: 'English' }, { locale: 'fr', name: 'Français' }]\n * )\n */\nexport default (\n    getMessages: GetMessages,\n    initialLocale: string = 'en',\n    availableLocales: Locale[] | any = [{ locale: 'en', name: 'English' }],\n    polyglotOptions: any = {}\n): I18nProvider => {\n    let locale = initialLocale;\n    const messages = getMessages(initialLocale);\n    if (messages instanceof Promise) {\n        throw new Error(\n            `The i18nProvider returned a Promise for the messages of the default locale (${initialLocale}). Please update your i18nProvider to return the messages of the default locale in a synchronous way.`\n        );\n    }\n\n    let availableLocalesFinal, polyglotOptionsFinal;\n    if (Array.isArray(availableLocales)) {\n        // third argument is an array of locales\n        availableLocalesFinal = availableLocales;\n        polyglotOptionsFinal = polyglotOptions;\n    } else {\n        // third argument is the polyglotOptions\n        availableLocalesFinal = [{ locale: 'en', name: 'English' }];\n        polyglotOptionsFinal = availableLocales;\n    }\n    const polyglot = new Polyglot({\n        locale,\n        phrases: { '': '', ...messages },\n        ...polyglotOptionsFinal,\n    });\n    let translate = polyglot.t.bind(polyglot);\n\n    return {\n        translate: (key: string, options: any = {}) => translate(key, options),\n        changeLocale: (newLocale: string) =>\n            // We systematically return a Promise for the messages because\n            // getMessages may return a Promise\n            Promise.resolve(getMessages(newLocale as string)).then(\n                (messages: TranslationMessages) => {\n                    locale = newLocale;\n                    const newPolyglot = new Polyglot({\n                        locale: newLocale,\n                        phrases: { '': '', ...messages },\n                        ...polyglotOptions,\n                    });\n                    translate = newPolyglot.t.bind(newPolyglot);\n                }\n            ),\n        getLocale: () => locale,\n        getLocales: () => availableLocalesFinal,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
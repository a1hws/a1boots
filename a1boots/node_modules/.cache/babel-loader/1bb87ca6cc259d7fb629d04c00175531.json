{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { isValidElement, useEffect, useMemo } from 'react';\nimport { useAuthenticated } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport { useGetList } from '../../dataProvider';\nimport { SORT_ASC } from './queryReducer';\nimport { defaultExporter } from '../../export';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\n/**\n * Prepare data for the List view\n *\n * @param {Object} props The props passed to the List component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\n\nexport var useListController = function useListController(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _a = props.debounce,\n      debounce = _a === void 0 ? 500 : _a,\n      disableAuthentication = props.disableAuthentication,\n      disableSyncWithLocation = props.disableSyncWithLocation,\n      _b = props.exporter,\n      exporter = _b === void 0 ? defaultExporter : _b,\n      filter = props.filter,\n      filterDefaultValues = props.filterDefaultValues,\n      _c = props.perPage,\n      perPage = _c === void 0 ? 10 : _c,\n      _d = props.queryOptions,\n      queryOptions = _d === void 0 ? {} : _d,\n      _e = props.sort,\n      sort = _e === void 0 ? defaultSort : _e,\n      storeKey = props.storeKey;\n  useAuthenticated({\n    enabled: !disableAuthentication\n  });\n  var resource = useResourceContext(props);\n\n  var meta = queryOptions.meta,\n      otherQueryOptions = __rest(queryOptions, [\"meta\"]);\n\n  if (!resource) {\n    throw new Error(\"<List> was called outside of a ResourceContext and without a resource prop. You must set the resource prop.\");\n  }\n\n  if (filter && isValidElement(filter)) {\n    throw new Error('<List> received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.');\n  }\n\n  var translate = useTranslate();\n  var notify = useNotify();\n\n  var _f = useListParams({\n    debounce: debounce,\n    disableSyncWithLocation: disableSyncWithLocation,\n    filterDefaultValues: filterDefaultValues,\n    perPage: perPage,\n    resource: resource,\n    sort: sort,\n    storeKey: storeKey\n  }),\n      query = _f[0],\n      queryModifiers = _f[1];\n\n  var _g = useRecordSelection(resource),\n      selectedIds = _g[0],\n      selectionModifiers = _g[1];\n\n  var _h = useGetList(resource, {\n    pagination: {\n      page: query.page,\n      perPage: query.perPage\n    },\n    sort: {\n      field: query.sort,\n      order: query.order\n    },\n    filter: __assign(__assign({}, query.filter), filter),\n    meta: meta\n  }, __assign({\n    keepPreviousData: true,\n    retry: false,\n    onError: function onError(error) {\n      return notify((error === null || error === void 0 ? void 0 : error.message) || 'ra.notification.http_error', {\n        type: 'error',\n        messageArgs: {\n          _: error === null || error === void 0 ? void 0 : error.message\n        }\n      });\n    }\n  }, otherQueryOptions)),\n      data = _h.data,\n      pageInfo = _h.pageInfo,\n      total = _h.total,\n      error = _h.error,\n      isLoading = _h.isLoading,\n      isFetching = _h.isFetching,\n      refetch = _h.refetch; // change page if there is no data\n\n\n  useEffect(function () {\n    if (query.page <= 0 || !isFetching && query.page > 1 && (data == null || (data === null || data === void 0 ? void 0 : data.length) === 0)) {\n      // Query for a page that doesn't exist, set page to 1\n      queryModifiers.setPage(1);\n      return;\n    }\n\n    if (total == null) {\n      return;\n    }\n\n    var totalPages = Math.ceil(total / query.perPage) || 1;\n\n    if (!isFetching && query.page > totalPages) {\n      // Query for a page out of bounds, set page to the last existing page\n      // It occurs when deleting the last element of the last page\n      queryModifiers.setPage(totalPages);\n    }\n  }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n  var currentSort = useMemo(function () {\n    return {\n      field: query.sort,\n      order: query.order\n    };\n  }, [query.sort, query.order]);\n  var getResourceLabel = useGetResourceLabel();\n  var defaultTitle = translate('ra.page.list', {\n    name: getResourceLabel(resource, 2)\n  });\n  return {\n    sort: currentSort,\n    data: data,\n    defaultTitle: defaultTitle,\n    displayedFilters: query.displayedFilters,\n    error: error,\n    exporter: exporter,\n    filter: filter,\n    filterValues: query.filterValues,\n    hideFilter: queryModifiers.hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: query.page,\n    perPage: query.perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: queryModifiers.setFilters,\n    setPage: queryModifiers.setPage,\n    setPerPage: queryModifiers.setPerPage,\n    setSort: queryModifiers.setSort,\n    showFilter: queryModifiers.showFilter,\n    total: total,\n    hasNextPage: pageInfo ? pageInfo.hasNextPage : total != null ? query.page * query.perPage < total : undefined,\n    hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : query.page > 1\n  };\n};\nvar defaultSort = {\n  field: 'id',\n  order: SORT_ASC\n};\nexport var injectedProps = ['sort', 'data', 'defaultTitle', 'displayedFilters', 'error', 'exporter', 'filterValues', 'hideFilter', 'isFetching', 'isLoading', 'onSelect', 'onToggleItem', 'onUnselectItems', 'page', 'perPage', 'refetch', 'refresh', 'resource', 'selectedIds', 'setFilters', 'setPage', 'setPerPage', 'setSort', 'showFilter', 'total', 'totalPages'];\n/**\n * Select the props injected by the useListController hook\n * to be passed to the List children need\n * This is an implementation of pick()\n */\n\nexport var getListControllerProps = function getListControllerProps(props) {\n  return injectedProps.reduce(function (acc, key) {\n    var _a;\n\n    return __assign(__assign({}, acc), (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};\n/**\n * Select the props not injected by the useListController hook\n * to be used inside the List children to sanitize props injected by List\n * This is an implementation of omit()\n */\n\nexport var sanitizeListRestProps = function sanitizeListRestProps(props) {\n  return Object.keys(props).filter(function (propName) {\n    return !injectedProps.includes(propName);\n  }).reduce(function (acc, key) {\n    var _a;\n\n    return __assign(__assign({}, acc), (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};","map":{"version":3,"mappings":"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","names":["isValidElement","useEffect","useMemo","useAuthenticated","useTranslate","useNotify","useGetList","SORT_ASC","defaultExporter","useResourceContext","useGetResourceLabel","useRecordSelection","useListParams","useListController","props","_a","disableAuthentication","disableSyncWithLocation","_b","exporter","filter","filterDefaultValues","_c","perPage","_d","queryOptions","_e","sort","defaultSort","storeKey","enabled","resource","otherQueryOptions","Error","translate","notify","debounce","query","queryModifiers","selectedIds","selectionModifiers","pagination","page","field","order","meta","__assign","keepPreviousData","retry","onError","message","type","messageArgs","_","error","data","pageInfo","total","isLoading","isFetching","refetch","length","setPage","totalPages","Math","ceil","currentSort","getResourceLabel","defaultTitle","name","displayedFilters","filterValues","hideFilter","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection","setFilters","setPerPage","setSort","showFilter","hasNextPage","undefined","hasPreviousPage","injectedProps","getListControllerProps","reduce","acc","key","sanitizeListRestProps","keys","includes","propName"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/list/useListController.ts"],"sourcesContent":["import { isValidElement, useEffect, useMemo } from 'react';\nimport { UseQueryOptions } from 'react-query';\n\nimport { useAuthenticated } from '../../auth';\nimport { useTranslate } from '../../i18n';\nimport { useNotify } from '../../notification';\nimport { useGetList, UseGetListHookValue } from '../../dataProvider';\nimport { SORT_ASC } from './queryReducer';\nimport { defaultExporter } from '../../export';\nimport { FilterPayload, SortPayload, RaRecord, Exporter } from '../../types';\nimport { useResourceContext, useGetResourceLabel } from '../../core';\nimport { useRecordSelection } from './useRecordSelection';\nimport { useListParams } from './useListParams';\n\n/**\n * Prepare data for the List view\n *\n * @param {Object} props The props passed to the List component.\n *\n * @return {Object} controllerProps Fetched and computed data for the List view\n *\n * @example\n *\n * import { useListController } from 'react-admin';\n * import ListView from './ListView';\n *\n * const MyList = props => {\n *     const controllerProps = useListController(props);\n *     return <ListView {...controllerProps} {...props} />;\n * }\n */\nexport const useListController = <RecordType extends RaRecord = any>(\n    props: ListControllerProps<RecordType> = {}\n): ListControllerResult<RecordType> => {\n    const {\n        debounce = 500,\n        disableAuthentication,\n        disableSyncWithLocation,\n        exporter = defaultExporter,\n        filter,\n        filterDefaultValues,\n        perPage = 10,\n        queryOptions = {},\n        sort = defaultSort,\n        storeKey,\n    } = props;\n    useAuthenticated({ enabled: !disableAuthentication });\n    const resource = useResourceContext(props);\n    const { meta, ...otherQueryOptions } = queryOptions;\n\n    if (!resource) {\n        throw new Error(\n            `<List> was called outside of a ResourceContext and without a resource prop. You must set the resource prop.`\n        );\n    }\n    if (filter && isValidElement(filter)) {\n        throw new Error(\n            '<List> received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.'\n        );\n    }\n\n    const translate = useTranslate();\n    const notify = useNotify();\n\n    const [query, queryModifiers] = useListParams({\n        debounce,\n        disableSyncWithLocation,\n        filterDefaultValues,\n        perPage,\n        resource,\n        sort,\n        storeKey,\n    });\n\n    const [selectedIds, selectionModifiers] = useRecordSelection(resource);\n\n    const {\n        data,\n        pageInfo,\n        total,\n        error,\n        isLoading,\n        isFetching,\n        refetch,\n    } = useGetList<RecordType>(\n        resource,\n        {\n            pagination: {\n                page: query.page,\n                perPage: query.perPage,\n            },\n            sort: { field: query.sort, order: query.order },\n            filter: { ...query.filter, ...filter },\n            meta,\n        },\n        {\n            keepPreviousData: true,\n            retry: false,\n            onError: error =>\n                notify(error?.message || 'ra.notification.http_error', {\n                    type: 'error',\n                    messageArgs: {\n                        _: error?.message,\n                    },\n                }),\n            ...otherQueryOptions,\n        }\n    );\n\n    // change page if there is no data\n    useEffect(() => {\n        if (\n            query.page <= 0 ||\n            (!isFetching &&\n                query.page > 1 &&\n                (data == null || data?.length === 0))\n        ) {\n            // Query for a page that doesn't exist, set page to 1\n            queryModifiers.setPage(1);\n            return;\n        }\n        if (total == null) {\n            return;\n        }\n        const totalPages = Math.ceil(total / query.perPage) || 1;\n        if (!isFetching && query.page > totalPages) {\n            // Query for a page out of bounds, set page to the last existing page\n            // It occurs when deleting the last element of the last page\n            queryModifiers.setPage(totalPages);\n        }\n    }, [isFetching, query.page, query.perPage, data, queryModifiers, total]);\n\n    const currentSort = useMemo(\n        () => ({\n            field: query.sort,\n            order: query.order,\n        }),\n        [query.sort, query.order]\n    );\n\n    const getResourceLabel = useGetResourceLabel();\n    const defaultTitle = translate('ra.page.list', {\n        name: getResourceLabel(resource, 2),\n    });\n\n    return {\n        sort: currentSort,\n        data,\n        defaultTitle,\n        displayedFilters: query.displayedFilters,\n        error,\n        exporter,\n        filter,\n        filterValues: query.filterValues,\n        hideFilter: queryModifiers.hideFilter,\n        isFetching,\n        isLoading,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page: query.page,\n        perPage: query.perPage,\n        refetch,\n        resource,\n        selectedIds,\n        setFilters: queryModifiers.setFilters,\n        setPage: queryModifiers.setPage,\n        setPerPage: queryModifiers.setPerPage,\n        setSort: queryModifiers.setSort,\n        showFilter: queryModifiers.showFilter,\n        total: total,\n        hasNextPage: pageInfo\n            ? pageInfo.hasNextPage\n            : total != null\n            ? query.page * query.perPage < total\n            : undefined,\n        hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : query.page > 1,\n    };\n};\n\nexport interface ListControllerProps<RecordType extends RaRecord = any> {\n    debounce?: number;\n    disableAuthentication?: boolean;\n    /**\n     * Whether to disable the synchronization of the list parameters with the current location (URL search parameters)\n     */\n    disableSyncWithLocation?: boolean;\n    exporter?: Exporter | false;\n    filter?: FilterPayload;\n    filterDefaultValues?: object;\n    perPage?: number;\n    queryOptions?: UseQueryOptions<{\n        data: RecordType[];\n        total?: number;\n        pageInfo?: {\n            hasNextPage?: boolean;\n            hasPreviousPage?: boolean;\n        };\n    }> & { meta?: any };\n    resource?: string;\n    sort?: SortPayload;\n    storeKey?: string;\n}\n\nconst defaultSort = {\n    field: 'id',\n    order: SORT_ASC,\n};\n\nexport interface ListControllerResult<RecordType extends RaRecord = any> {\n    sort: SortPayload;\n    data: RecordType[];\n    defaultTitle?: string;\n    displayedFilters: any;\n    error?: any;\n    exporter?: Exporter | false;\n    filter?: FilterPayload;\n    filterValues: any;\n    hideFilter: (filterName: string) => void;\n    isFetching: boolean;\n    isLoading: boolean;\n    onSelect: (ids: RecordType['id'][]) => void;\n    onToggleItem: (id: RecordType['id']) => void;\n    onUnselectItems: () => void;\n    page: number;\n    perPage: number;\n    refetch: (() => void) | UseGetListHookValue<RecordType>['refetch'];\n    resource: string;\n    selectedIds: RecordType['id'][];\n    setFilters: (\n        filters: any,\n        displayedFilters: any,\n        debounce?: boolean\n    ) => void;\n    setPage: (page: number) => void;\n    setPerPage: (page: number) => void;\n    setSort: (sort: SortPayload) => void;\n    showFilter: (filterName: string, defaultValue: any) => void;\n    total: number;\n    hasNextPage: boolean;\n    hasPreviousPage: boolean;\n}\n\nexport const injectedProps = [\n    'sort',\n    'data',\n    'defaultTitle',\n    'displayedFilters',\n    'error',\n    'exporter',\n    'filterValues',\n    'hideFilter',\n    'isFetching',\n    'isLoading',\n    'onSelect',\n    'onToggleItem',\n    'onUnselectItems',\n    'page',\n    'perPage',\n    'refetch',\n    'refresh',\n    'resource',\n    'selectedIds',\n    'setFilters',\n    'setPage',\n    'setPerPage',\n    'setSort',\n    'showFilter',\n    'total',\n    'totalPages',\n];\n\n/**\n * Select the props injected by the useListController hook\n * to be passed to the List children need\n * This is an implementation of pick()\n */\nexport const getListControllerProps = props =>\n    injectedProps.reduce((acc, key) => ({ ...acc, [key]: props[key] }), {});\n\n/**\n * Select the props not injected by the useListController hook\n * to be used inside the List children to sanitize props injected by List\n * This is an implementation of omit()\n */\nexport const sanitizeListRestProps = props =>\n    Object.keys(props)\n        .filter(propName => !injectedProps.includes(propName))\n        .reduce((acc, key) => ({ ...acc, [key]: props[key] }), {});\n"]},"metadata":{},"sourceType":"module"}
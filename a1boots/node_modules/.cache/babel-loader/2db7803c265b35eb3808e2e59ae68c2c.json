{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as React from 'react';\nimport { useMemo, useRef } from 'react';\nimport { FormGroupsContext } from './FormGroupsContext';\n/**\n * This component provides functions through context to manage form groups,\n * allowing to link or unlink an input to a group.\n * @see FormGroupContextProvider\n * @see useFormGroup\n * @see useFormGroups\n */\n\nexport var FormGroupsProvider = function (_a) {\n  var children = _a.children;\n  var formGroups = useRef({});\n  var subscribers = useRef({});\n  var formContextValue = useMemo(function () {\n    return {\n      /**\n       * Register a subscriber function for the specified group. The subscriber\n       * will be called whenever the group content changes (fields added or removed).\n       */\n      subscribe: function (group, subscriber) {\n        if (!subscribers.current[group]) {\n          subscribers.current[group] = [];\n        }\n\n        subscribers.current[group].push(subscriber);\n        return function () {\n          subscribers.current[group] = subscribers.current[group].filter(function (s) {\n            return s !== subscriber;\n          });\n        };\n      },\n      getGroupFields: function (name) {\n        return formGroups.current[name] || [];\n      },\n      registerGroup: function (name) {\n        formGroups.current[name] = formGroups.current[name] || [];\n      },\n      unregisterGroup: function (name) {\n        delete formGroups[name];\n      },\n      registerField: function (source, group) {\n        if (group != null) {\n          if (!(formGroups.current[group] || []).includes(source)) {\n            formGroups.current[group] = __spreadArray(__spreadArray([], formGroups.current[group] || [], true), [source], false); // Notify subscribers that the group fields have changed\n\n            if (subscribers.current[group]) {\n              subscribers.current[group].forEach(function (subscriber) {\n                return subscriber();\n              });\n            }\n          }\n        }\n      },\n      unregisterField: function (source, group) {\n        if (group != null) {\n          if (!formGroups.current[group]) {\n            console.warn(\"Invalid form group \".concat(group));\n          } else {\n            var fields = new Set(formGroups.current[group]);\n            fields.delete(source);\n            formGroups.current[group] = Array.from(fields); // Notify subscribers that the group fields have changed\n\n            if (subscribers.current[group]) {\n              subscribers.current[group].forEach(function (subscriber) {\n                return subscriber();\n              });\n            }\n          }\n        }\n      }\n    };\n  }, []);\n  return React.createElement(FormGroupsContext.Provider, {\n    value: formContextValue\n  }, children);\n};","map":{"version":3,"mappings":"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","names":["React","useMemo","useRef","FormGroupsContext","FormGroupsProvider","_a","children","formGroups","subscribers","formContextValue","subscribe","group","subscriber","current","push","filter","getGroupFields","name","registerGroup","unregisterGroup","registerField","source","includes","__spreadArray","forEach","unregisterField","console","warn","fields","Set","delete","Array","from","Provider","value"],"sources":["/var/www/a1boots/node_modules/ra-core/src/form/FormGroupsProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode, useMemo, useRef } from 'react';\nimport {\n    FormGroupsContext,\n    FormGroupsContextValue,\n    FormGroupSubscriber,\n} from './FormGroupsContext';\n\n/**\n * This component provides functions through context to manage form groups,\n * allowing to link or unlink an input to a group.\n * @see FormGroupContextProvider\n * @see useFormGroup\n * @see useFormGroups\n */\nexport const FormGroupsProvider = ({ children }: { children: ReactNode }) => {\n    const formGroups = useRef<{ [key: string]: string[] }>({});\n    const subscribers = useRef<{\n        [key: string]: FormGroupSubscriber[];\n    }>({});\n\n    const formContextValue = useMemo<FormGroupsContextValue>(\n        () => ({\n            /**\n             * Register a subscriber function for the specified group. The subscriber\n             * will be called whenever the group content changes (fields added or removed).\n             */\n            subscribe: (group, subscriber) => {\n                if (!subscribers.current[group]) {\n                    subscribers.current[group] = [];\n                }\n                subscribers.current[group].push(subscriber);\n\n                return () => {\n                    subscribers.current[group] = subscribers.current[\n                        group\n                    ].filter(s => s !== subscriber);\n                };\n            },\n            getGroupFields: name => formGroups.current[name] || [],\n            registerGroup: name => {\n                formGroups.current[name] = formGroups.current[name] || [];\n            },\n            unregisterGroup: name => {\n                delete formGroups[name];\n            },\n            registerField: (source, group) => {\n                if (group != null) {\n                    if (!(formGroups.current[group] || []).includes(source)) {\n                        formGroups.current[group] = [\n                            ...(formGroups.current[group] || []),\n                            source,\n                        ];\n                        // Notify subscribers that the group fields have changed\n                        if (subscribers.current[group]) {\n                            subscribers.current[group].forEach(subscriber =>\n                                subscriber()\n                            );\n                        }\n                    }\n                }\n            },\n            unregisterField: (source, group) => {\n                if (group != null) {\n                    if (!formGroups.current[group]) {\n                        console.warn(`Invalid form group ${group}`);\n                    } else {\n                        const fields = new Set(formGroups.current[group]);\n                        fields.delete(source);\n                        formGroups.current[group] = Array.from(fields);\n\n                        // Notify subscribers that the group fields have changed\n                        if (subscribers.current[group]) {\n                            subscribers.current[group].forEach(subscriber =>\n                                subscriber()\n                            );\n                        }\n                    }\n                }\n            },\n        }),\n        []\n    );\n\n    return (\n        <FormGroupsContext.Provider value={formContextValue}>\n            {children}\n        </FormGroupsContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
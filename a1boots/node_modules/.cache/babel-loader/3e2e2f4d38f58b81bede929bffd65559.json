{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar _a;\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport get from 'lodash/get';\nimport Chip from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\nvar ChipFieldImpl = function (props) {\n  var className = props.className,\n      source = props.source,\n      emptyText = props.emptyText,\n      rest = __rest(props, [\"className\", \"source\", \"emptyText\"]);\n\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  var translate = useTranslate();\n\n  if (value == null && emptyText) {\n    return React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    }));\n  }\n\n  return React.createElement(StyledChip, __assign({\n    className: clsx(ChipFieldClasses.chip, className),\n    label: value\n  }, sanitizeFieldRestProps(rest)));\n};\n\nChipFieldImpl.propTypes = __assign(__assign({}, Chip.propTypes), fieldPropTypes);\nChipFieldImpl.displayName = 'ChipFieldImpl';\nexport var ChipField = genericMemo(ChipFieldImpl);\nvar PREFIX = 'RaChipField';\nvar ChipFieldClasses = {\n  chip: \"\".concat(PREFIX, \"-chip\")\n};\nvar StyledChip = styled(Chip, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"&.\".concat(ChipFieldClasses.chip)] = {\n  margin: 4,\n  cursor: 'inherit'\n}, _a));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,IAAP,MAAgC,oBAAhC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,SAA/C;AAEA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAAqBC,cAArB,QAA2C,SAA3C;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,IAAMC,aAAa,GAAG,UAGlBC,KAHkB,EAGe;EAEzB,aAAS,GAAiCA,KAAK,UAA/C;EAAA,IAAWC,MAAM,GAAyBD,KAAK,OAA/C;EAAA,IAAmBE,SAAS,GAAcF,KAAK,UAA/C;EAAA,IAAiCG,IAAI,UAAKH,KAAL,EAAvC,oCAAuC,CAArC;;EACR,IAAMI,MAAM,GAAGV,gBAAgB,CAAaM,KAAb,CAA/B;EACA,IAAMK,KAAK,GAAGf,GAAG,CAACc,MAAD,EAASH,MAAT,CAAjB;EACA,IAAMK,SAAS,GAAGX,YAAY,EAA9B;;EAEA,IAAIU,KAAK,IAAI,IAAT,IAAiBH,SAArB,EAAgC;IAC5B,OACId,oBAACI,UAAD,EAAWe;MACPC,SAAS,EAAC,MADH;MAEPC,OAAO,EAAC,OAFD;MAGPC,SAAS,EAAEA;IAHJ,GAIHd,sBAAsB,CAACO,IAAD,CAJnB,CAAX,EAMKD,SAAS,IAAII,SAAS,CAACJ,SAAD,EAAY;MAAES,CAAC,EAAET;IAAL,CAAZ,CAN3B,CADJ;EAUH;;EAED,OACId,oBAACwB,UAAD,EAAWL;IACPG,SAAS,EAAEjB,IAAI,CAACoB,gBAAgB,CAACC,IAAlB,EAAwBJ,SAAxB,CADR;IAEPK,KAAK,EAAEV;EAFA,GAGHT,sBAAsB,CAACO,IAAD,CAHnB,CAAX,CADJ;AAOH,CA9BD;;AAgCAJ,aAAa,CAACiB,SAAd,GAAuBT,sBAEhBhB,IAAI,CAACyB,SAFW,GAGhBnB,cAHgB,CAAvB;AAKAE,aAAa,CAACkB,WAAd,GAA4B,eAA5B;AAEA,OAAO,IAAMC,SAAS,GAAGpB,WAAW,CAACC,aAAD,CAA7B;AAOP,IAAMoB,MAAM,GAAG,aAAf;AAEA,IAAMN,gBAAgB,GAAG;EACrBC,IAAI,EAAE,UAAGK,MAAH,EAAS,OAAT;AADe,CAAzB;AAIA,IAAMP,UAAU,GAAGvB,MAAM,CAACE,IAAD,EAAO;EAC5B6B,IAAI,EAAED,MADsB;EAE5BE,iBAAiB,EAAE,UAACrB,KAAD,EAAQsB,MAAR,EAAc;IAAK,aAAM,CAACC,IAAP;EAAW;AAFrB,CAAP,CAAN,EAGjBC,SACEA,GAAC,YAAKX,gBAAgB,CAACC,IAAtB,CAAD,IAAgC;EAAEW,MAAM,EAAE,CAAV;EAAaC,MAAM,EAAE;AAArB,CADlC,IAHiB,EAAnB","names":["React","styled","get","Chip","Typography","clsx","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","genericMemo","ChipFieldImpl","props","source","emptyText","rest","record","value","translate","__assign","component","variant","className","_","StyledChip","ChipFieldClasses","chip","label","propTypes","displayName","ChipField","PREFIX","name","overridesResolver","styles","root","_a","margin","cursor"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/field/ChipField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport get from 'lodash/get';\nimport Chip, { ChipProps } from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { FieldProps, fieldPropTypes } from './types';\nimport { genericMemo } from './genericMemo';\n\nconst ChipFieldImpl = <\n    RecordType extends Record<string, unknown> = Record<string, any>\n>(\n    props: ChipFieldProps<RecordType>\n) => {\n    const { className, source, emptyText, ...rest } = props;\n    const record = useRecordContext<RecordType>(props);\n    const value = get(record, source);\n    const translate = useTranslate();\n\n    if (value == null && emptyText) {\n        return (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        );\n    }\n\n    return (\n        <StyledChip\n            className={clsx(ChipFieldClasses.chip, className)}\n            label={value}\n            {...sanitizeFieldRestProps(rest)}\n        />\n    );\n};\n\nChipFieldImpl.propTypes = {\n    // @ts-ignore\n    ...Chip.propTypes,\n    ...fieldPropTypes,\n};\nChipFieldImpl.displayName = 'ChipFieldImpl';\n\nexport const ChipField = genericMemo(ChipFieldImpl);\n\nexport interface ChipFieldProps<\n    RecordType extends Record<string, unknown> = Record<string, any>\n> extends FieldProps<RecordType>,\n        Omit<ChipProps, 'label'> {}\n\nconst PREFIX = 'RaChipField';\n\nconst ChipFieldClasses = {\n    chip: `${PREFIX}-chip`,\n};\n\nconst StyledChip = styled(Chip, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`&.${ChipFieldClasses.chip}`]: { margin: 4, cursor: 'inherit' },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { IconButton, Tooltip } from '@mui/material';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport { useTranslate, usePreferencesEditor } from 'ra-core';\nexport var InspectorButton = React.forwardRef(function (_a, ref) {\n  var _b = _a.label,\n      label = _b === void 0 ? 'ra.configurable.configureMode' : _b,\n      _c = _a.SvgIconProps,\n      SvgIconProps = _c === void 0 ? {} : _c,\n      props = __rest(_a, [\"label\", \"SvgIconProps\"]);\n\n  var _d = usePreferencesEditor(),\n      enable = _d.enable,\n      disable = _d.disable,\n      setPreferenceKey = _d.setPreferenceKey,\n      isEnabled = _d.isEnabled;\n\n  var translate = useTranslate();\n\n  var handleClick = function handleClick() {\n    if (isEnabled) {\n      disable();\n      setPreferenceKey(null);\n    } else {\n      enable();\n    }\n  };\n\n  var translatedLabel = translate(label, {\n    _: 'Configure mode'\n  });\n  return React.createElement(Tooltip, {\n    title: translatedLabel\n  }, React.createElement(IconButton, __assign({\n    \"aria-label\": translatedLabel,\n    onClick: handleClick,\n    color: \"inherit\",\n    ref: ref\n  }, props), React.createElement(SettingsIcon, __assign({\n    fontSize: \"inherit\"\n  }, SvgIconProps))));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,UAAT,EAAsCC,OAAtC,QAAqD,eAArD;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,SAAnD;AAEA,OAAO,IAAMC,eAAe,GAAGN,KAAK,CAACO,UAAN,CAI3B,UACIC,EADJ,EAMIC,GANJ,EAMO;EAJC;EAAA,SAAK,mBAAG,+BAAH,GAAkCC,EAAvC;EAAA,IACAC,oBADA;EAAA,IACAC,YAAY,mBAAG,EAAH,GAAKD,EADjB;EAAA,IAEGE,KAAK,cAHZ,yBAGY,CAFR;;EAME,SAKFR,oBAAoB,EALlB;EAAA,IACFS,MAAM,YADJ;EAAA,IAEFC,OAAO,aAFL;EAAA,IAGFC,gBAAgB,sBAHd;EAAA,IAIFC,SAAS,eAJP;;EAMN,IAAMC,SAAS,GAAGd,YAAY,EAA9B;;EAEA,IAAMe,WAAW,GAAyC,SAApDA,WAAoD;IACtD,IAAIF,SAAJ,EAAe;MACXF,OAAO;MACPC,gBAAgB,CAAC,IAAD,CAAhB;IACH,CAHD,MAGO;MACHF,MAAM;IACT;EACJ,CAPD;;EASA,IAAMM,eAAe,GAAGF,SAAS,CAACG,KAAD,EAAQ;IAAEC,CAAC,EAAE;EAAL,CAAR,CAAjC;EAEA,OACItB,oBAACE,OAAD,EAAQ;IAACqB,KAAK,EAAEH;EAAR,CAAR,EACIpB,oBAACC,UAAD,EAAWuB;IAAA,cACKJ,eADL;IAEPK,OAAO,EAAEN,WAFF;IAGPO,KAAK,EAAC,SAHC;IAIPjB,GAAG,EAAEA;EAJE,GAKHI,KALG,CAAX,EAOIb,oBAACG,YAAD,EAAaqB;IAACG,QAAQ,EAAC;EAAV,GAAwBf,YAAxB,CAAb,CAPJ,CADJ,CADJ;AAaH,CA5C0B,CAAxB","names":["React","IconButton","Tooltip","SettingsIcon","useTranslate","usePreferencesEditor","InspectorButton","forwardRef","_a","ref","_b","_c","SvgIconProps","props","enable","disable","setPreferenceKey","isEnabled","translate","handleClick","translatedLabel","label","_","title","__assign","onClick","color","fontSize"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/preferences/InspectorButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { MouseEventHandler } from 'react';\nimport { IconButton, IconButtonProps, Tooltip } from '@mui/material';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport { useTranslate, usePreferencesEditor } from 'ra-core';\n\nexport const InspectorButton = React.forwardRef<\n    HTMLButtonElement,\n    IconButtonProps & { label?: string; SvgIconProps?: any }\n>(\n    (\n        {\n            label = 'ra.configurable.configureMode',\n            SvgIconProps = {},\n            ...props\n        },\n        ref\n    ) => {\n        const {\n            enable,\n            disable,\n            setPreferenceKey,\n            isEnabled,\n        } = usePreferencesEditor();\n        const translate = useTranslate();\n\n        const handleClick: MouseEventHandler<HTMLButtonElement> = () => {\n            if (isEnabled) {\n                disable();\n                setPreferenceKey(null);\n            } else {\n                enable();\n            }\n        };\n\n        const translatedLabel = translate(label, { _: 'Configure mode' });\n\n        return (\n            <Tooltip title={translatedLabel}>\n                <IconButton\n                    aria-label={translatedLabel}\n                    onClick={handleClick}\n                    color=\"inherit\"\n                    ref={ref}\n                    {...props}\n                >\n                    <SettingsIcon fontSize=\"inherit\" {...SvgIconProps} />\n                </IconButton>\n            </Tooltip>\n        );\n    }\n);\n"]},"metadata":{},"sourceType":"module"}
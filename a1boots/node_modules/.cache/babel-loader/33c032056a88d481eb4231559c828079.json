{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport DownloadIcon from '@mui/icons-material/GetApp';\nimport { fetchRelatedRecords, useDataProvider, useNotify, useListContext } from 'ra-core';\nimport { Button } from './Button';\n/**\n * Export the selected rows\n *\n * To be used inside the <List bulkActionButtons> prop.\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Fragment } from 'react';\n * import { BulkDeleteButton, BulkExportButton } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <Fragment>\n *         <BulkExportButton />\n *         <BulkDeleteButton />\n *     </Fragment>\n * );\n *\n * export const PostList = () => (\n *     <List bulkActionButtons={<PostBulkActionButtons />}>\n *         ...\n *     </List>\n * );\n */\n\nexport var BulkExportButton = function (props) {\n  var onClick = props.onClick,\n      _a = props.label,\n      label = _a === void 0 ? 'ra.action.export' : _a,\n      _b = props.icon,\n      icon = _b === void 0 ? defaultIcon : _b,\n      customExporter = props.exporter,\n      meta = props.meta,\n      rest = __rest(props, [\"onClick\", \"label\", \"icon\", \"exporter\", \"meta\"]);\n\n  var _c = useListContext(props),\n      exporterFromContext = _c.exporter,\n      resource = _c.resource,\n      selectedIds = _c.selectedIds;\n\n  var exporter = customExporter || exporterFromContext;\n  var dataProvider = useDataProvider();\n  var notify = useNotify();\n  var handleClick = useCallback(function (event) {\n    exporter && dataProvider.getMany(resource, {\n      ids: selectedIds,\n      meta: meta\n    }).then(function (_a) {\n      var data = _a.data;\n      return exporter(data, fetchRelatedRecords(dataProvider), dataProvider, resource);\n    }).catch(function (error) {\n      console.error(error);\n      notify('ra.notification.http_error', {\n        type: 'error'\n      });\n    });\n\n    if (typeof onClick === 'function') {\n      onClick(event);\n    }\n  }, [dataProvider, exporter, notify, onClick, resource, selectedIds, meta]);\n  return React.createElement(Button, __assign({\n    onClick: handleClick,\n    label: label\n  }, sanitizeRestProps(rest)), icon);\n};\nvar defaultIcon = React.createElement(DownloadIcon, null);\n\nvar sanitizeRestProps = function (_a) {\n  var filterValues = _a.filterValues,\n      selectedIds = _a.selectedIds,\n      resource = _a.resource,\n      rest = __rest(_a, [\"filterValues\", \"selectedIds\", \"resource\"]);\n\n  return rest;\n};\n\nBulkExportButton.propTypes = {\n  exporter: PropTypes.func,\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  icon: PropTypes.element,\n  meta: PropTypes.any\n};","map":{"version":3,"mappings":"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","names":["React","useCallback","PropTypes","DownloadIcon","fetchRelatedRecords","useDataProvider","useNotify","useListContext","Button","BulkExportButton","props","_a","label","_b","icon","defaultIcon","customExporter","meta","rest","exporterFromContext","resource","selectedIds","exporter","dataProvider","notify","handleClick","getMany","ids","then","data","catch","console","error","type","onClick","event","__assign","sanitizeRestProps","propTypes","func","string","arrayOf","any","element"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/BulkExportButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport DownloadIcon from '@mui/icons-material/GetApp';\nimport {\n    fetchRelatedRecords,\n    useDataProvider,\n    useNotify,\n    Identifier,\n    Exporter,\n    useListContext,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Export the selected rows\n *\n * To be used inside the <List bulkActionButtons> prop.\n *\n * @example // basic usage\n * import * as React from 'react';\n * import { Fragment } from 'react';\n * import { BulkDeleteButton, BulkExportButton } from 'react-admin';\n *\n * const PostBulkActionButtons = () => (\n *     <Fragment>\n *         <BulkExportButton />\n *         <BulkDeleteButton />\n *     </Fragment>\n * );\n *\n * export const PostList = () => (\n *     <List bulkActionButtons={<PostBulkActionButtons />}>\n *         ...\n *     </List>\n * );\n */\nexport const BulkExportButton = (props: BulkExportButtonProps) => {\n    const {\n        onClick,\n        label = 'ra.action.export',\n        icon = defaultIcon,\n        exporter: customExporter,\n        meta,\n        ...rest\n    } = props;\n    const {\n        exporter: exporterFromContext,\n        resource,\n        selectedIds,\n    } = useListContext(props);\n    const exporter = customExporter || exporterFromContext;\n    const dataProvider = useDataProvider();\n    const notify = useNotify();\n    const handleClick = useCallback(\n        event => {\n            exporter &&\n                dataProvider\n                    .getMany(resource, { ids: selectedIds, meta })\n                    .then(({ data }) =>\n                        exporter(\n                            data,\n                            fetchRelatedRecords(dataProvider),\n                            dataProvider,\n                            resource\n                        )\n                    )\n                    .catch(error => {\n                        console.error(error);\n                        notify('ra.notification.http_error', {\n                            type: 'error',\n                        });\n                    });\n            if (typeof onClick === 'function') {\n                onClick(event);\n            }\n        },\n        [dataProvider, exporter, notify, onClick, resource, selectedIds, meta]\n    );\n\n    return (\n        <Button\n            onClick={handleClick}\n            label={label}\n            {...sanitizeRestProps(rest)}\n        >\n            {icon}\n        </Button>\n    );\n};\n\nconst defaultIcon = <DownloadIcon />;\n\nconst sanitizeRestProps = ({\n    filterValues,\n    selectedIds,\n    resource,\n    ...rest\n}: Omit<BulkExportButtonProps, 'exporter' | 'label' | 'meta'>) => rest;\n\ninterface Props {\n    exporter?: Exporter;\n    filterValues?: any;\n    icon?: JSX.Element;\n    label?: string;\n    onClick?: (e: Event) => void;\n    selectedIds?: Identifier[];\n    resource?: string;\n    meta?: any;\n}\n\nexport type BulkExportButtonProps = Props & ButtonProps;\n\nBulkExportButton.propTypes = {\n    exporter: PropTypes.func,\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    icon: PropTypes.element,\n    meta: PropTypes.any,\n};\n"]},"metadata":{},"sourceType":"module"}
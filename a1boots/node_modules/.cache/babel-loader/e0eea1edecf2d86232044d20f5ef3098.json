{"ast":null,"code":"import React from 'react';\nimport { notifyManager, useQueryClient } from 'react-query';\n/**\n * Get the state of the dataProvider connection.\n *\n * Returns true if a query or a mutation is pending.\n *\n * Custom implementation because react-query's useIsFetching and useIsMutating\n * render each time the number of active queries changes, which is too often.\n *\n * @see useIsFetching\n * @see useIsMutating\n */\n\nexport var useLoading = function useLoading() {\n  var client = useQueryClient();\n  var mountedRef = React.useRef(false);\n  var isFetchingRef = React.useRef(client.isFetching() > 0);\n  var isMutatingRef = React.useRef(client.isMutating() > 0);\n\n  var _a = React.useState(isFetchingRef.current || isMutatingRef.current),\n      isLoading = _a[0],\n      setIsLoading = _a[1];\n\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribeQueryCache = client.getQueryCache().subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        isFetchingRef.current = client.isFetching() > 0;\n        setIsLoading(isFetchingRef.current || isMutatingRef.current);\n      }\n    }));\n    var unsubscribeMutationCache = client.getMutationCache().subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        isMutatingRef.current = client.isMutating() > 0;\n        setIsLoading(isFetchingRef.current || isMutatingRef.current);\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribeQueryCache();\n      unsubscribeMutationCache();\n    };\n  }, [client]);\n  return isLoading;\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,aAA9C;AAEA;;;;;;;;;;;;AAWA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;EACtB,IAAMC,MAAM,GAAGF,cAAc,EAA7B;EACA,IAAMG,UAAU,GAAGL,KAAK,CAACM,MAAN,CAAa,KAAb,CAAnB;EACA,IAAMC,aAAa,GAAGP,KAAK,CAACM,MAAN,CAAaF,MAAM,CAACI,UAAP,KAAsB,CAAnC,CAAtB;EACA,IAAMC,aAAa,GAAGT,KAAK,CAACM,MAAN,CAAaF,MAAM,CAACM,UAAP,KAAsB,CAAnC,CAAtB;;EAEM,SAA4BV,KAAK,CAACW,QAAN,CAC9BJ,aAAa,CAACK,OAAd,IAAyBH,aAAa,CAACG,OADT,CAA5B;EAAA,IAACC,SAAS,QAAV;EAAA,IAAYC,YAAY,QAAxB;;EAINd,KAAK,CAACe,SAAN,CAAgB;IACZV,UAAU,CAACO,OAAX,GAAqB,IAArB;IAEA,IAAMI,qBAAqB,GAAGZ,MAAM,CAACa,aAAP,GAAuBC,SAAvB,CAC1BjB,aAAa,CAACkB,UAAd,CAAyB;MACrB,IAAId,UAAU,CAACO,OAAf,EAAwB;QACpBL,aAAa,CAACK,OAAd,GAAwBR,MAAM,CAACI,UAAP,KAAsB,CAA9C;QACAM,YAAY,CACRP,aAAa,CAACK,OAAd,IAAyBH,aAAa,CAACG,OAD/B,CAAZ;MAGH;IACJ,CAPD,CAD0B,CAA9B;IAWA,IAAMQ,wBAAwB,GAAGhB,MAAM,CAACiB,gBAAP,GAA0BH,SAA1B,CAC7BjB,aAAa,CAACkB,UAAd,CAAyB;MACrB,IAAId,UAAU,CAACO,OAAf,EAAwB;QACpBH,aAAa,CAACG,OAAd,GAAwBR,MAAM,CAACM,UAAP,KAAsB,CAA9C;QACAI,YAAY,CACRP,aAAa,CAACK,OAAd,IAAyBH,aAAa,CAACG,OAD/B,CAAZ;MAGH;IACJ,CAPD,CAD6B,CAAjC;IAWA,OAAO;MACHP,UAAU,CAACO,OAAX,GAAqB,KAArB;MACAI,qBAAqB;MACrBI,wBAAwB;IAC3B,CAJD;EAKH,CA9BD,EA8BG,CAAChB,MAAD,CA9BH;EAgCA,OAAOS,SAAP;AACH,CA3CM","names":["React","notifyManager","useQueryClient","useLoading","client","mountedRef","useRef","isFetchingRef","isFetching","isMutatingRef","isMutating","useState","current","isLoading","setIsLoading","useEffect","unsubscribeQueryCache","getQueryCache","subscribe","batchCalls","unsubscribeMutationCache","getMutationCache"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/useLoading.ts"],"sourcesContent":["import React from 'react';\n\nimport { notifyManager, useQueryClient } from 'react-query';\n\n/**\n * Get the state of the dataProvider connection.\n *\n * Returns true if a query or a mutation is pending.\n *\n * Custom implementation because react-query's useIsFetching and useIsMutating\n * render each time the number of active queries changes, which is too often.\n *\n * @see useIsFetching\n * @see useIsMutating\n */\nexport const useLoading = (): boolean => {\n    const client = useQueryClient();\n    const mountedRef = React.useRef(false);\n    const isFetchingRef = React.useRef(client.isFetching() > 0);\n    const isMutatingRef = React.useRef(client.isMutating() > 0);\n\n    const [isLoading, setIsLoading] = React.useState<boolean>(\n        isFetchingRef.current || isMutatingRef.current\n    );\n\n    React.useEffect(() => {\n        mountedRef.current = true;\n\n        const unsubscribeQueryCache = client.getQueryCache().subscribe(\n            notifyManager.batchCalls(() => {\n                if (mountedRef.current) {\n                    isFetchingRef.current = client.isFetching() > 0;\n                    setIsLoading(\n                        isFetchingRef.current || isMutatingRef.current\n                    );\n                }\n            })\n        );\n\n        const unsubscribeMutationCache = client.getMutationCache().subscribe(\n            notifyManager.batchCalls(() => {\n                if (mountedRef.current) {\n                    isMutatingRef.current = client.isMutating() > 0;\n                    setIsLoading(\n                        isFetchingRef.current || isMutatingRef.current\n                    );\n                }\n            })\n        );\n\n        return () => {\n            mountedRef.current = false;\n            unsubscribeQueryCache();\n            unsubscribeMutationCache();\n        };\n    }, [client]);\n\n    return isLoading;\n};\n"]},"metadata":{},"sourceType":"module"}
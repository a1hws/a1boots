{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useMemo } from 'react';\nimport { useStore, useRemoveFromStore } from '../../store';\n/**\n * Get the list of selected items for a resource, and callbacks to change the selection\n *\n * @param resource The resource name, e.g. 'posts'\n *\n * @returns {Object} Destructure as [selectedIds, { select, toggle, clearSelection }].\n */\n\nexport var useRecordSelection = function (resource) {\n  var storeKey = \"\".concat(resource, \".selectedIds\");\n\n  var _a = useStore(storeKey, defaultSelection),\n      ids = _a[0],\n      setIds = _a[1];\n\n  var reset = useRemoveFromStore(storeKey);\n  var selectionModifiers = useMemo(function () {\n    return {\n      select: function (idsToAdd) {\n        if (!idsToAdd) return;\n        setIds(__spreadArray([], idsToAdd, true));\n      },\n      unselect: function (idsToRemove) {\n        if (!idsToRemove || idsToRemove.length === 0) return;\n        setIds(function (ids) {\n          if (!Array.isArray(ids)) return [];\n          return ids.filter(function (id) {\n            return !idsToRemove.includes(id);\n          });\n        });\n      },\n      toggle: function (id) {\n        if (typeof id === 'undefined') return;\n        setIds(function (ids) {\n          if (!Array.isArray(ids)) return __spreadArray([], ids, true);\n          var index = ids.indexOf(id);\n          return index > -1 ? __spreadArray(__spreadArray([], ids.slice(0, index), true), ids.slice(index + 1), true) : __spreadArray(__spreadArray([], ids, true), [id], false);\n        });\n      },\n      clearSelection: function () {\n        reset();\n      }\n    };\n  }, [setIds, reset]);\n  return [ids, selectionModifiers];\n};\nvar defaultSelection = [];","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,aAA7C;AAGA;;;;;;;;AAOA,OAAO,IAAMC,kBAAkB,GAAG,UAC9BC,QAD8B,EACd;EAUhB,IAAMC,QAAQ,GAAG,UAAGD,QAAH,EAAW,cAAX,CAAjB;;EACM,SAAgBH,QAAQ,CAACI,QAAD,EAAWC,gBAAX,CAAxB;EAAA,IAACC,GAAG,QAAJ;EAAA,IAAMC,MAAM,QAAZ;;EACN,IAAMC,KAAK,GAAGP,kBAAkB,CAACG,QAAD,CAAhC;EAEA,IAAMK,kBAAkB,GAAGV,OAAO,CAC9B;IAAM,OAAC;MACHW,MAAM,EAAE,UAACC,QAAD,EAA6B;QACjC,IAAI,CAACA,QAAL,EAAe;QACfJ,MAAM,mBAAKI,QAAL,EAAa,IAAb,EAAN;MACH,CAJE;MAKHC,QAAQ,YAACC,WAAD,EAAgC;QACpC,IAAI,CAACA,WAAD,IAAgBA,WAAW,CAACC,MAAZ,KAAuB,CAA3C,EAA8C;QAC9CP,MAAM,CAAC,eAAG;UACN,IAAI,CAACQ,KAAK,CAACC,OAAN,CAAcV,GAAd,CAAL,EAAyB,OAAO,EAAP;UACzB,OAAOA,GAAG,CAACW,MAAJ,CAAW,cAAE;YAAI,QAACJ,WAAW,CAACK,QAAZ,CAAqBC,EAArB,CAAD;UAAyB,CAA1C,CAAP;QACH,CAHK,CAAN;MAIH,CAXE;MAYHC,MAAM,EAAE,UAACD,EAAD,EAAqB;QACzB,IAAI,OAAOA,EAAP,KAAc,WAAlB,EAA+B;QAC/BZ,MAAM,CAAC,eAAG;UACN,IAAI,CAACQ,KAAK,CAACC,OAAN,CAAcV,GAAd,CAAL,EAAyB,yBAAWA,GAAX,EAAc,IAAd;UACzB,IAAMe,KAAK,GAAGf,GAAG,CAACgB,OAAJ,CAAYH,EAAZ,CAAd;UACA,OAAOE,KAAK,GAAG,CAAC,CAAT,GACFE,gCAAKjB,GAAG,CAACkB,KAAJ,CAAU,CAAV,EAAaH,KAAb,CAAL,EAAwB,IAAxB,GAA6Bf,GAAG,CAACkB,KAAJ,CAAUH,KAAK,GAAG,CAAlB,CAA7B,EAAiD,IAAjD,CADE,GAEFE,gCAAKjB,GAAL,EAAQ,IAAR,GAAQ,CAAEa,EAAF,CAAR,EAAY,KAAZ,CAFL;QAGH,CANK,CAAN;MAOH,CArBE;MAsBHM,cAAc,EAAE;QACZjB,KAAK;MACR;IAxBE,CAAD;EAyBJ,CA1B4B,EA2B9B,CAACD,MAAD,EAASC,KAAT,CA3B8B,CAAlC;EA8BA,OAAO,CAACF,GAAD,EAAMG,kBAAN,CAAP;AACH,CA9CM;AAgDP,IAAMJ,gBAAgB,GAAG,EAAzB","names":["useMemo","useStore","useRemoveFromStore","useRecordSelection","resource","storeKey","defaultSelection","ids","setIds","reset","selectionModifiers","select","idsToAdd","unselect","idsToRemove","length","Array","isArray","filter","includes","id","toggle","index","indexOf","__spreadArray","slice","clearSelection"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/list/useRecordSelection.ts"],"sourcesContent":["import { useMemo } from 'react';\n\nimport { useStore, useRemoveFromStore } from '../../store';\nimport { RaRecord } from '../../types';\n\n/**\n * Get the list of selected items for a resource, and callbacks to change the selection\n *\n * @param resource The resource name, e.g. 'posts'\n *\n * @returns {Object} Destructure as [selectedIds, { select, toggle, clearSelection }].\n */\nexport const useRecordSelection = <RecordType extends RaRecord = any>(\n    resource: string\n): [\n    RecordType['id'][],\n    {\n        select: (ids: RecordType['id'][]) => void;\n        unselect: (ids: RecordType['id'][]) => void;\n        toggle: (id: RecordType['id']) => void;\n        clearSelection: () => void;\n    }\n] => {\n    const storeKey = `${resource}.selectedIds`;\n    const [ids, setIds] = useStore(storeKey, defaultSelection);\n    const reset = useRemoveFromStore(storeKey);\n\n    const selectionModifiers = useMemo(\n        () => ({\n            select: (idsToAdd: RecordType['id'][]) => {\n                if (!idsToAdd) return;\n                setIds([...idsToAdd]);\n            },\n            unselect(idsToRemove: RecordType['id'][]) {\n                if (!idsToRemove || idsToRemove.length === 0) return;\n                setIds(ids => {\n                    if (!Array.isArray(ids)) return [];\n                    return ids.filter(id => !idsToRemove.includes(id));\n                });\n            },\n            toggle: (id: RecordType['id']) => {\n                if (typeof id === 'undefined') return;\n                setIds(ids => {\n                    if (!Array.isArray(ids)) return [...ids];\n                    const index = ids.indexOf(id);\n                    return index > -1\n                        ? [...ids.slice(0, index), ...ids.slice(index + 1)]\n                        : [...ids, id];\n                });\n            },\n            clearSelection: () => {\n                reset();\n            },\n        }),\n        [setIds, reset]\n    );\n\n    return [ids, selectionModifiers];\n};\n\nconst defaultSelection = [];\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport { ListBase, getElementsFromRecords, InferredElement, useListContext, useResourceContext, useResourceDefinition } from 'ra-core';\nimport { ListView } from './ListView';\nimport { listFieldTypes } from './listFieldTypes';\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\n\nexport var ListGuesser = function ListGuesser(props) {\n  var debounce = props.debounce,\n      disableAuthentication = props.disableAuthentication,\n      disableSyncWithLocation = props.disableSyncWithLocation,\n      exporter = props.exporter,\n      filter = props.filter,\n      filterDefaultValues = props.filterDefaultValues,\n      perPage = props.perPage,\n      queryOptions = props.queryOptions,\n      resource = props.resource,\n      sort = props.sort,\n      rest = __rest(props, [\"debounce\", \"disableAuthentication\", \"disableSyncWithLocation\", \"exporter\", \"filter\", \"filterDefaultValues\", \"perPage\", \"queryOptions\", \"resource\", \"sort\"]);\n\n  return React.createElement(ListBase, {\n    debounce: debounce,\n    disableAuthentication: disableAuthentication,\n    disableSyncWithLocation: disableSyncWithLocation,\n    exporter: exporter,\n    filter: filter,\n    filterDefaultValues: filterDefaultValues,\n    perPage: perPage,\n    queryOptions: {\n      keepPreviousData: false\n    },\n    resource: resource,\n    sort: sort\n  }, React.createElement(ListViewGuesser, __assign({}, rest)));\n};\n\nvar ListViewGuesser = function ListViewGuesser(props) {\n  var data = useListContext(props).data;\n  var resource = useResourceContext();\n\n  var _a = useResourceDefinition(props),\n      hasEdit = _a.hasEdit,\n      hasShow = _a.hasShow;\n\n  var _b = useState(null),\n      child = _b[0],\n      setChild = _b[1];\n\n  useEffect(function () {\n    setChild(null);\n  }, [resource]);\n  useEffect(function () {\n    if (data && data.length > 0 && !child) {\n      var inferredElements = getElementsFromRecords(data, listFieldTypes);\n      var inferredChild = new InferredElement(listFieldTypes.table, {\n        hasEdit: hasEdit,\n        hasShow: hasShow\n      }, inferredElements);\n      setChild(inferredChild.getElement());\n      if (process.env.NODE_ENV === 'production') return;\n      var representation = inferredChild.getRepresentation();\n      var components = ['List'].concat(Array.from(new Set(Array.from(representation.matchAll(/<([^/\\s>]+)/g)).map(function (match) {\n        return match[1];\n      }).filter(function (component) {\n        return component !== 'span';\n      })))).sort(); // eslint-disable-next-line no-console\n\n      console.log(\"Guessed List:\\n\\nimport { \".concat(components.join(', '), \" } from 'react-admin';\\n\\nexport const \").concat(inflection.capitalize(inflection.singularize(resource)), \"List = () => (\\n    <List>\\n\").concat(inferredChild.getRepresentation(), \"\\n    </List>\\n);\"));\n    }\n  }, [data, child, resource, hasEdit, hasShow]);\n  return React.createElement(ListView, __assign({}, props), child);\n};\n\nListViewGuesser.propTypes = ListView.propTypes;","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","inflection","ListBase","getElementsFromRecords","InferredElement","useListContext","useResourceContext","useResourceDefinition","ListView","listFieldTypes","ListGuesser","props","disableAuthentication","disableSyncWithLocation","exporter","filter","filterDefaultValues","perPage","queryOptions","resource","sort","rest","debounce","keepPreviousData","ListViewGuesser","__assign","data","hasEdit","hasShow","child","setChild","length","inferredElements","inferredChild","table","getElement","process","env","NODE_ENV","representation","getRepresentation","components","concat","Array","from","Set","matchAll","map","console","log","join","capitalize","singularize","propTypes"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/ListGuesser.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport inflection from 'inflection';\nimport {\n    ListBase,\n    getElementsFromRecords,\n    InferredElement,\n    useListContext,\n    useResourceContext,\n    RaRecord,\n    useResourceDefinition,\n} from 'ra-core';\n\nimport { ListProps } from './List';\nimport { ListView, ListViewProps } from './ListView';\nimport { listFieldTypes } from './listFieldTypes';\n\n/**\n * List component rendering a <Datagrid> based on the result of the\n * dataProvider.getList() call.\n *\n * The result (choice and type of columns) isn't configurable, but the\n * <ListGuesser> outputs the <Datagrid> it has guessed to the console so that\n * developers can start from there.\n *\n * To be used as the list prop of a <Resource>.\n *\n * @example\n *\n * import { Admin, Resource, ListGuesser } from 'react-admin';\n *\n * const App = () => (\n *     <Admin dataProvider={myDataProvider}>\n *         <Resource name=\"posts\" list={ListGuesser} />\n *     </Admin>\n * );\n */\nexport const ListGuesser = <RecordType extends RaRecord = any>(\n    props: Omit<ListProps, 'children'>\n) => {\n    const {\n        debounce,\n        disableAuthentication,\n        disableSyncWithLocation,\n        exporter,\n        filter,\n        filterDefaultValues,\n        perPage,\n        queryOptions,\n        resource,\n        sort,\n        ...rest\n    } = props;\n    return (\n        <ListBase<RecordType>\n            debounce={debounce}\n            disableAuthentication={disableAuthentication}\n            disableSyncWithLocation={disableSyncWithLocation}\n            exporter={exporter}\n            filter={filter}\n            filterDefaultValues={filterDefaultValues}\n            perPage={perPage}\n            queryOptions={{ keepPreviousData: false }}\n            resource={resource}\n            sort={sort}\n        >\n            <ListViewGuesser {...rest} />\n        </ListBase>\n    );\n};\n\nconst ListViewGuesser = (props: Omit<ListViewProps, 'children'>) => {\n    const { data } = useListContext(props);\n    const resource = useResourceContext();\n    const { hasEdit, hasShow } = useResourceDefinition(props);\n    const [child, setChild] = useState(null);\n\n    useEffect(() => {\n        setChild(null);\n    }, [resource]);\n\n    useEffect(() => {\n        if (data && data.length > 0 && !child) {\n            const inferredElements = getElementsFromRecords(\n                data,\n                listFieldTypes\n            );\n            const inferredChild = new InferredElement(\n                listFieldTypes.table,\n                { hasEdit, hasShow },\n                inferredElements\n            );\n            setChild(inferredChild.getElement());\n\n            if (process.env.NODE_ENV === 'production') return;\n\n            const representation = inferredChild.getRepresentation();\n            const components = ['List']\n                .concat(\n                    Array.from(\n                        new Set(\n                            Array.from(representation.matchAll(/<([^/\\s>]+)/g))\n                                .map(match => match[1])\n                                .filter(component => component !== 'span')\n                        )\n                    )\n                )\n                .sort();\n\n            // eslint-disable-next-line no-console\n            console.log(\n                `Guessed List:\n\nimport { ${components.join(', ')} } from 'react-admin';\n\nexport const ${inflection.capitalize(\n                    inflection.singularize(resource)\n                )}List = () => (\n    <List>\n${inferredChild.getRepresentation()}\n    </List>\n);`\n            );\n        }\n    }, [data, child, resource, hasEdit, hasShow]);\n\n    return <ListView {...props}>{child}</ListView>;\n};\n\nListViewGuesser.propTypes = ListView.propTypes;\n"]},"metadata":{},"sourceType":"module"}
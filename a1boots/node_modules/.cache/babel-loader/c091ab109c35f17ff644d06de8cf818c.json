{"ast":null,"code":"import * as React from 'react';\nimport inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport InferredElement from './InferredElement';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString } from './assertions';\n\nvar DefaultComponent = function DefaultComponent() {\n  return React.createElement(\"span\", null, \";\");\n};\n\nvar defaultType = {\n  type: DefaultComponent,\n  representation: function representation() {\n    return '<DefaultComponent />';\n  }\n};\nvar defaultTypes = {\n  array: defaultType,\n  boolean: defaultType,\n  date: defaultType,\n  email: defaultType,\n  id: defaultType,\n  number: defaultType,\n  reference: defaultType,\n  referenceArray: defaultType,\n  richText: defaultType,\n  string: defaultType,\n  url: defaultType\n};\n\nvar hasType = function hasType(type, types) {\n  return typeof types[type] !== 'undefined';\n};\n/**\n * Guesses an element based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *         { number: NumberField, string: StringField }\n *     );\n *     // new InferredElement(<StringField source=\"address\" />)\n *\n * Types are optional: if a type isn't provided, the function falls back\n * to the nearest type.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField } // no richText type\n *     );\n *     // new InferredElement(<StringField source=\"content\" />)\n *\n * Types can be disabled by passing a falsy value.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField, richText: false }\n *     );\n *     // null\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n * @param {Object} types A set of components indexed by type. The string type is the only required one\n *\n * @return InferredElement\n */\n\n\nvar inferElementFromValues = function inferElementFromValues(name, values, types) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (types === void 0) {\n    types = defaultTypes;\n  }\n\n  if (name === 'id' && hasType('id', types)) {\n    return new InferredElement(types.id, {\n      source: name\n    });\n  }\n\n  if (name.substr(name.length - 3) === '_id' && hasType('reference', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 3));\n    return types.reference && new InferredElement(types.reference, {\n      source: name,\n      reference: reference\n    });\n  }\n\n  if (name.substr(name.length - 2) === 'Id' && hasType('reference', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 2));\n    return types.reference && new InferredElement(types.reference, {\n      source: name,\n      reference: reference\n    });\n  }\n\n  if (name.substr(name.length - 4) === '_ids' && hasType('referenceArray', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 4));\n    return types.referenceArray && new InferredElement(types.referenceArray, {\n      source: name,\n      reference: reference\n    });\n  }\n\n  if (name.substr(name.length - 3) === 'Ids' && hasType('referenceArray', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 3));\n    return types.referenceArray && new InferredElement(types.referenceArray, {\n      source: name,\n      reference: reference\n    });\n  }\n\n  if (values.length === 0) {\n    // FIXME introspect further using name\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n\n  if (valuesAreArray(values)) {\n    if (isObject(values[0][0]) && hasType('array', types)) {\n      var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) {\n        return acc.concat(vals);\n      }, [])); // FIXME bad visual representation\n\n      return types.array && new InferredElement(types.array, {\n        source: name\n      }, Object.keys(leafValues_1).map(function (leafName) {\n        return inferElementFromValues(leafName, leafValues_1[leafName], types);\n      }));\n    } // FIXME introspect further\n\n\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n\n  if (valuesAreBoolean(values) && hasType('boolean', types)) {\n    return new InferredElement(types.boolean, {\n      source: name\n    });\n  }\n\n  if (valuesAreDate(values) && hasType('date', types)) {\n    return new InferredElement(types.date, {\n      source: name\n    });\n  }\n\n  if (valuesAreString(values)) {\n    if (name === 'email' && hasType('email', types)) {\n      return new InferredElement(types.email, {\n        source: name\n      });\n    }\n\n    if (name === 'url' && hasType('url', types)) {\n      return new InferredElement(types.url, {\n        source: name\n      });\n    }\n\n    if (valuesAreDateString(values) && hasType('date', types)) {\n      return new InferredElement(types.date, {\n        source: name\n      });\n    }\n\n    if (valuesAreHtml(values) && hasType('richText', types)) {\n      return new InferredElement(types.richText, {\n        source: name\n      });\n    }\n\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n\n  if ((valuesAreInteger(values) || valuesAreNumeric(values)) && hasType('number', types)) {\n    return new InferredElement(types.number, {\n      source: name\n    });\n  }\n\n  if (valuesAreObject(values)) {\n    // we need to go deeper\n    // Arbitrarily, choose the first prop of the first object\n    var propName_1 = Object.keys(values[0]).shift();\n\n    if (!propName_1) {\n      return new InferredElement(types.string, {\n        source: name\n      });\n    }\n\n    var leafValues = values.map(function (v) {\n      return v[propName_1];\n    });\n    return inferElementFromValues(\"\".concat(name, \".\").concat(propName_1), leafValues, types);\n  }\n\n  return new InferredElement(types.string, {\n    source: name\n  });\n};\n\nexport default inferElementFromValues;","map":{"version":3,"mappings":"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","names":["React","inflection","getValuesFromRecords","InferredElement","isObject","valuesAreArray","valuesAreBoolean","valuesAreDate","valuesAreDateString","valuesAreHtml","valuesAreInteger","valuesAreNumeric","valuesAreObject","valuesAreString","DefaultComponent","defaultType","type","representation","defaultTypes","array","boolean","date","email","id","number","reference","referenceArray","richText","string","url","hasType","types","inferElementFromValues","name","values","source","substr","length","pluralize","leafValues_1","reduce","acc","vals","concat","Object","keys","map","leafName","propName_1","shift","leafValues"],"sources":["/var/www/a1boots/node_modules/ra-core/src/inference/inferElementFromValues.tsx"],"sourcesContent":["import * as React from 'react';\nimport inflection from 'inflection';\n\nimport getValuesFromRecords from './getValuesFromRecords';\nimport InferredElement from './InferredElement';\n\nimport {\n    isObject,\n    valuesAreArray,\n    valuesAreBoolean,\n    valuesAreDate,\n    valuesAreDateString,\n    valuesAreHtml,\n    valuesAreInteger,\n    valuesAreNumeric,\n    valuesAreObject,\n    valuesAreString,\n} from './assertions';\nimport { InferredTypeMap } from './types';\n\nconst DefaultComponent = () => <span>;</span>;\nconst defaultType = {\n    type: DefaultComponent,\n    representation: () => '<DefaultComponent />',\n};\nconst defaultTypes = {\n    array: defaultType,\n    boolean: defaultType,\n    date: defaultType,\n    email: defaultType,\n    id: defaultType,\n    number: defaultType,\n    reference: defaultType,\n    referenceArray: defaultType,\n    richText: defaultType,\n    string: defaultType,\n    url: defaultType,\n};\n\nconst hasType = (type, types) => typeof types[type] !== 'undefined';\n\n/**\n * Guesses an element based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *         { number: NumberField, string: StringField }\n *     );\n *     // new InferredElement(<StringField source=\"address\" />)\n *\n * Types are optional: if a type isn't provided, the function falls back\n * to the nearest type.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField } // no richText type\n *     );\n *     // new InferredElement(<StringField source=\"content\" />)\n *\n * Types can be disabled by passing a falsy value.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField, richText: false }\n *     );\n *     // null\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n * @param {Object} types A set of components indexed by type. The string type is the only required one\n *\n * @return InferredElement\n */\nconst inferElementFromValues = (\n    name,\n    values = [],\n    types: InferredTypeMap = defaultTypes\n) => {\n    if (name === 'id' && hasType('id', types)) {\n        return new InferredElement(types.id, { source: name });\n    }\n    if (name.substr(name.length - 3) === '_id' && hasType('reference', types)) {\n        const reference = inflection.pluralize(name.substr(0, name.length - 3));\n        return (\n            types.reference &&\n            new InferredElement(types.reference, {\n                source: name,\n                reference,\n            })\n        );\n    }\n    if (name.substr(name.length - 2) === 'Id' && hasType('reference', types)) {\n        const reference = inflection.pluralize(name.substr(0, name.length - 2));\n        return (\n            types.reference &&\n            new InferredElement(types.reference, {\n                source: name,\n                reference,\n            })\n        );\n    }\n    if (\n        name.substr(name.length - 4) === '_ids' &&\n        hasType('referenceArray', types)\n    ) {\n        const reference = inflection.pluralize(name.substr(0, name.length - 4));\n        return (\n            types.referenceArray &&\n            new InferredElement(types.referenceArray, {\n                source: name,\n                reference,\n            })\n        );\n    }\n    if (\n        name.substr(name.length - 3) === 'Ids' &&\n        hasType('referenceArray', types)\n    ) {\n        const reference = inflection.pluralize(name.substr(0, name.length - 3));\n        return (\n            types.referenceArray &&\n            new InferredElement(types.referenceArray, {\n                source: name,\n                reference,\n            })\n        );\n    }\n    if (values.length === 0) {\n        // FIXME introspect further using name\n        return new InferredElement(types.string, { source: name });\n    }\n    if (valuesAreArray(values)) {\n        if (isObject(values[0][0]) && hasType('array', types)) {\n            const leafValues = getValuesFromRecords(\n                values.reduce((acc, vals) => acc.concat(vals), [])\n            );\n            // FIXME bad visual representation\n            return (\n                types.array &&\n                new InferredElement(\n                    types.array,\n                    {\n                        source: name,\n                    },\n                    Object.keys(leafValues).map(leafName =>\n                        inferElementFromValues(\n                            leafName,\n                            leafValues[leafName],\n                            types\n                        )\n                    )\n                )\n            );\n        }\n        // FIXME introspect further\n        return new InferredElement(types.string, { source: name });\n    }\n    if (valuesAreBoolean(values) && hasType('boolean', types)) {\n        return new InferredElement(types.boolean, { source: name });\n    }\n    if (valuesAreDate(values) && hasType('date', types)) {\n        return new InferredElement(types.date, { source: name });\n    }\n    if (valuesAreString(values)) {\n        if (name === 'email' && hasType('email', types)) {\n            return new InferredElement(types.email, { source: name });\n        }\n        if (name === 'url' && hasType('url', types)) {\n            return new InferredElement(types.url, { source: name });\n        }\n        if (valuesAreDateString(values) && hasType('date', types)) {\n            return new InferredElement(types.date, { source: name });\n        }\n        if (valuesAreHtml(values) && hasType('richText', types)) {\n            return new InferredElement(types.richText, { source: name });\n        }\n        return new InferredElement(types.string, { source: name });\n    }\n    if (\n        (valuesAreInteger(values) || valuesAreNumeric(values)) &&\n        hasType('number', types)\n    ) {\n        return new InferredElement(types.number, { source: name });\n    }\n    if (valuesAreObject(values)) {\n        // we need to go deeper\n        // Arbitrarily, choose the first prop of the first object\n        const propName = Object.keys(values[0]).shift();\n        if (!propName) {\n            return new InferredElement(types.string, { source: name });\n        }\n        const leafValues = values.map(v => v[propName]);\n        return inferElementFromValues(`${name}.${propName}`, leafValues, types);\n    }\n    return new InferredElement(types.string, { source: name });\n};\n\nexport default inferElementFromValues;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { isMatch, isValid, parseISO } from 'date-fns';\nexport var isNumeric = function isNumeric(value) {\n  return !isNaN(parseFloat(value)) && isFinite(value);\n};\nexport var valuesAreNumeric = function valuesAreNumeric(values) {\n  return values.every(isNumeric);\n};\nexport var isInteger = function isInteger(value) {\n  return Number.isInteger(value) || !isNaN(parseInt(value));\n};\nexport var valuesAreInteger = function valuesAreInteger(values) {\n  return values.every(isInteger);\n};\nexport var isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\nexport var valuesAreBoolean = function valuesAreBoolean(values) {\n  return values.every(isBoolean);\n};\nexport var isBooleanString = function isBooleanString(value) {\n  return ['true', 'false'].includes(value.toString().toLowerCase());\n};\nexport var valuesAreBooleanString = function valuesAreBooleanString(values) {\n  return values.every(isBooleanString);\n};\nexport var isString = function isString(value) {\n  return typeof value === 'string';\n};\nexport var valuesAreString = function valuesAreString(values) {\n  return values.every(isString);\n};\nvar HtmlRegexp = /<([A-Z][A-Z0-9]*)\\b[^>]*>(.*?)<\\/\\1>/i;\nexport var isHtml = function isHtml(value) {\n  return !value || HtmlRegexp.test(value);\n};\nexport var valuesAreHtml = function valuesAreHtml(values) {\n  return values.every(isHtml);\n};\nvar UrlRegexp = /http(s*):\\/\\/.*/i;\nexport var isUrl = function isUrl(value) {\n  return !value || UrlRegexp.test(value);\n};\nexport var valuesAreUrl = function valuesAreUrl(values) {\n  return values.every(isUrl);\n};\nvar ImageUrlRegexp = /http(s*):\\/\\/.*\\.(jpeg|jpg|jfif|pjpeg|pjp|png|svg|gif|webp|apng|bmp|ico|cur|tif|tiff)/i;\nexport var isImageUrl = function isImageUrl(value) {\n  return !value || ImageUrlRegexp.test(value);\n};\nexport var valuesAreImageUrl = function valuesAreImageUrl(values) {\n  return values.every(isImageUrl);\n}; // This is a very simple regex to find emails\n// It is NOT meant to validate emails as the spec is way more complicated but is\n// enough for our inference needs\n\nvar EmailRegexp = /@{1}/;\nexport var isEmail = function isEmail(value) {\n  return !value || EmailRegexp.test(value);\n};\nexport var valuesAreEmail = function valuesAreEmail(values) {\n  return values.every(isEmail);\n};\nexport var isArray = function isArray(value) {\n  return Array.isArray(value);\n};\nexport var valuesAreArray = function valuesAreArray(values) {\n  return values.every(isArray);\n};\nexport var isDate = function isDate(value) {\n  return !value || value instanceof Date;\n};\nexport var valuesAreDate = function valuesAreDate(values) {\n  return values.every(isDate);\n};\nexport var isDateString = function isDateString(value) {\n  return !value || typeof value === 'string' && (isMatch(value, 'MM/dd/yyyy') || isMatch(value, 'MM/dd/yy') || isValid(parseISO(value)));\n};\nexport var valuesAreDateString = function valuesAreDateString(values) {\n  return values.every(isDateString);\n};\nexport var isObject = function isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n};\nexport var valuesAreObject = function valuesAreObject(values) {\n  return values.every(isObject);\n};","map":{"version":3,"mappings":"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","names":["isMatch","isValid","parseISO","isNumeric","value","isNaN","parseFloat","isFinite","valuesAreNumeric","values","every","isInteger","parseInt","valuesAreInteger","isBoolean","valuesAreBoolean","isBooleanString","includes","toString","toLowerCase","valuesAreBooleanString","isString","valuesAreString","HtmlRegexp","isHtml","test","valuesAreHtml","UrlRegexp","isUrl","valuesAreUrl","ImageUrlRegexp","isImageUrl","valuesAreImageUrl","EmailRegexp","isEmail","valuesAreEmail","isArray","valuesAreArray","isDate","Date","valuesAreDate","isDateString","valuesAreDateString","isObject","prototype","call","valuesAreObject"],"sources":["/var/www/a1boots/node_modules/ra-core/src/inference/assertions.ts"],"sourcesContent":["import { isMatch, isValid, parseISO } from 'date-fns';\n\nexport const isNumeric = (value: any) =>\n    !isNaN(parseFloat(value)) && isFinite(value);\nexport const valuesAreNumeric = (values: any[]) => values.every(isNumeric);\n\nexport const isInteger = (value: any) =>\n    Number.isInteger(value) || !isNaN(parseInt(value));\nexport const valuesAreInteger = (values: any[]) => values.every(isInteger);\n\nexport const isBoolean = (value: any) => typeof value === 'boolean';\nexport const valuesAreBoolean = (values: any[]) => values.every(isBoolean);\n\nexport const isBooleanString = (value: any) =>\n    ['true', 'false'].includes(value.toString().toLowerCase());\nexport const valuesAreBooleanString = (values: any[]) =>\n    values.every(isBooleanString);\n\nexport const isString = (value: any) => typeof value === 'string';\nexport const valuesAreString = (values: any[]) => values.every(isString);\n\nconst HtmlRegexp = /<([A-Z][A-Z0-9]*)\\b[^>]*>(.*?)<\\/\\1>/i;\nexport const isHtml = (value: any) => !value || HtmlRegexp.test(value);\nexport const valuesAreHtml = (values: any[]) => values.every(isHtml);\n\nconst UrlRegexp = /http(s*):\\/\\/.*/i;\nexport const isUrl = (value: any) => !value || UrlRegexp.test(value);\nexport const valuesAreUrl = (values: any[]) => values.every(isUrl);\n\nconst ImageUrlRegexp = /http(s*):\\/\\/.*\\.(jpeg|jpg|jfif|pjpeg|pjp|png|svg|gif|webp|apng|bmp|ico|cur|tif|tiff)/i;\nexport const isImageUrl = (value: any) => !value || ImageUrlRegexp.test(value);\nexport const valuesAreImageUrl = (values: any[]) => values.every(isImageUrl);\n\n// This is a very simple regex to find emails\n// It is NOT meant to validate emails as the spec is way more complicated but is\n// enough for our inference needs\nconst EmailRegexp = /@{1}/;\nexport const isEmail = (value: any) => !value || EmailRegexp.test(value);\nexport const valuesAreEmail = (values: any[]) => values.every(isEmail);\n\nexport const isArray = (value: any) => Array.isArray(value);\nexport const valuesAreArray = (values: any[]) => values.every(isArray);\n\nexport const isDate = (value: any) => !value || value instanceof Date;\nexport const valuesAreDate = (values: any[]) => values.every(isDate);\n\nexport const isDateString = (value: any) =>\n    !value ||\n    (typeof value === 'string' &&\n        (isMatch(value, 'MM/dd/yyyy') ||\n            isMatch(value, 'MM/dd/yy') ||\n            isValid(parseISO(value))));\n\nexport const valuesAreDateString = (values: any[]) =>\n    values.every(isDateString);\n\nexport const isObject = (value: any) =>\n    Object.prototype.toString.call(value) === '[object Object]';\nexport const valuesAreObject = (values: any[]) => values.every(isObject);\n"]},"metadata":{},"sourceType":"module"}
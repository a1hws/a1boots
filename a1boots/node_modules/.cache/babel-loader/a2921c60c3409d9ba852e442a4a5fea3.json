{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as React from 'react';\nimport { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { MenuItem } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useChoicesContext, useInput, FieldTitle, useTranslate, useChoices, useGetRecordRepresentation } from 'ra-core';\nimport { ResettableTextField, ResettableTextFieldStyles } from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { useSupportCreateSuggestion } from './useSupportCreateSuggestion';\nimport { LoadingInput } from './LoadingInput';\n/**\n * An Input component for a select box, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n * <SelectInput source=\"author\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the Material UI <Select> component\n *\n * You can disable some choices by providing a `disableValue` field which name is `disabled` by default\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', disabled: true },\n * ];\n *\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', not_available: true },\n * ];\n * <SelectInput source=\"gender\" choices={choices} disableValue=\"not_available\" />\n *\n */\n\nexport var SelectInput = function SelectInput(props) {\n  var choicesProp = props.choices,\n      className = props.className,\n      create = props.create,\n      createLabel = props.createLabel,\n      createValue = props.createValue,\n      defaultValue = props.defaultValue,\n      disableValue = props.disableValue,\n      emptyText = props.emptyText,\n      emptyValue = props.emptyValue,\n      format = props.format,\n      filter = props.filter,\n      helperText = props.helperText,\n      isFetchingProp = props.isFetching,\n      isLoadingProp = props.isLoading,\n      label = props.label,\n      _a = props.margin,\n      margin = _a === void 0 ? 'dense' : _a,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onCreate = props.onCreate,\n      optionText = props.optionText,\n      optionValue = props.optionValue,\n      parse = props.parse,\n      resourceProp = props.resource,\n      sourceProp = props.source,\n      translateChoice = props.translateChoice,\n      validate = props.validate,\n      rest = __rest(props, [\"choices\", \"className\", \"create\", \"createLabel\", \"createValue\", \"defaultValue\", \"disableValue\", \"emptyText\", \"emptyValue\", \"format\", \"filter\", \"helperText\", \"isFetching\", \"isLoading\", \"label\", \"margin\", \"onBlur\", \"onChange\", \"onCreate\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"source\", \"translateChoice\", \"validate\"]);\n\n  var translate = useTranslate();\n  useEffect(function () {\n    // eslint-disable-next-line eqeqeq\n    if (emptyValue == null) {\n      throw new Error(\"emptyValue being set to null or undefined is not supported. Use parse to turn the empty string into null.\");\n    }\n  }, [emptyValue]);\n\n  var _b = useChoicesContext({\n    choices: choicesProp,\n    isLoading: isLoadingProp,\n    isFetching: isFetchingProp,\n    resource: resourceProp,\n    source: sourceProp\n  }),\n      allChoices = _b.allChoices,\n      isLoading = _b.isLoading,\n      fetchError = _b.error,\n      source = _b.source,\n      resource = _b.resource,\n      isFromReference = _b.isFromReference;\n\n  if (source === undefined) {\n    throw new Error(\"If you're not wrapping the SelectInput inside a ReferenceInput, you must provide the source prop\");\n  }\n\n  if (!isLoading && !fetchError && allChoices === undefined) {\n    throw new Error(\"If you're not wrapping the SelectInput inside a ReferenceInput, you must provide the choices prop\");\n  }\n\n  var getRecordRepresentation = useGetRecordRepresentation(resource);\n\n  var _c = useChoices({\n    optionText: optionText !== null && optionText !== void 0 ? optionText : isFromReference ? getRecordRepresentation : undefined,\n    optionValue: optionValue,\n    disableValue: disableValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _c.getChoiceText,\n      getChoiceValue = _c.getChoiceValue,\n      getDisableValue = _c.getDisableValue;\n\n  var _d = useInput(__assign({\n    defaultValue: defaultValue,\n    parse: parse,\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      field = _d.field,\n      fieldState = _d.fieldState,\n      id = _d.id,\n      isRequired = _d.isRequired,\n      isSubmitted = _d.formState.isSubmitted;\n\n  var error = fieldState.error,\n      invalid = fieldState.invalid,\n      isTouched = fieldState.isTouched;\n  var renderEmptyItemOption = useCallback(function () {\n    return React.isValidElement(emptyText) ? emptyText : emptyText === '' ? ' ' // em space, forces the display of an empty line of normal height\n    : translate(emptyText, {\n      _: emptyText\n    });\n  }, [emptyText, translate]);\n  var renderMenuItemOption = useCallback(function (choice) {\n    return getChoiceText(choice);\n  }, [getChoiceText]);\n  var handleChange = useCallback(function (eventOrChoice) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // We might receive an event from the mui component\n        // In this case, it will be the choice id\n        if (eventOrChoice === null || eventOrChoice === void 0 ? void 0 : eventOrChoice.target) {\n          field.onChange(eventOrChoice);\n        } else {\n          // Or we might receive a choice directly, for instance a newly created one\n          field.onChange(getChoiceValue(eventOrChoice));\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  }, [field, getChoiceValue]);\n\n  var _e = useSupportCreateSuggestion({\n    create: create,\n    createLabel: createLabel,\n    createValue: createValue,\n    handleChange: handleChange,\n    onCreate: onCreate,\n    optionText: optionText\n  }),\n      getCreateItem = _e.getCreateItem,\n      handleChangeWithCreateSupport = _e.handleChange,\n      createElement = _e.createElement;\n\n  var createItem = create || onCreate ? getCreateItem() : null;\n  var finalChoices = allChoices;\n\n  if (create || onCreate) {\n    finalChoices = __spreadArray(__spreadArray([], finalChoices, true), [createItem], false);\n  }\n\n  var renderMenuItem = useCallback(function (choice) {\n    return choice ? React.createElement(MenuItem, {\n      key: getChoiceValue(choice),\n      value: getChoiceValue(choice),\n      disabled: getDisableValue(choice)\n    }, renderMenuItemOption(!!createItem && (choice === null || choice === void 0 ? void 0 : choice.id) === createItem.id ? createItem : choice)) : null;\n  }, [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]);\n\n  if (isLoading) {\n    return React.createElement(LoadingInput, {\n      label: label !== '' && label !== false && React.createElement(FieldTitle, {\n        label: label,\n        source: source,\n        resource: resourceProp,\n        isRequired: isRequired\n      }),\n      sx: props.sx,\n      helperText: React.createElement(InputHelperText, {\n        touched: isTouched || isSubmitted,\n        error: error === null || error === void 0 ? void 0 : error.message,\n        helperText: helperText\n      }),\n      variant: props.variant,\n      size: props.size,\n      margin: props.margin,\n      fullWidth: props.fullWidth\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(StyledResettableTextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    onChange: handleChangeWithCreateSupport,\n    select: true,\n    label: label !== '' && label !== false && React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resourceProp,\n      isRequired: isRequired\n    }),\n    clearAlwaysVisible: true,\n    error: !!fetchError || (isTouched || isSubmitted) && invalid,\n    helperText: React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted || fetchError,\n      error: (error === null || error === void 0 ? void 0 : error.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n      helperText: helperText\n    }),\n    margin: margin\n  }, sanitizeRestProps(rest)), !isRequired && React.createElement(MenuItem, {\n    value: emptyValue,\n    key: \"null\",\n    \"aria-label\": translate('ra.action.clear_input_value'),\n    title: translate('ra.action.clear_input_value')\n  }, renderEmptyItemOption()), finalChoices.map(renderMenuItem)), createElement);\n};\nSelectInput.propTypes = {\n  emptyText: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  emptyValue: PropTypes.any,\n  choices: PropTypes.arrayOf(PropTypes.object),\n  className: PropTypes.string,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  disableValue: PropTypes.string,\n  resettable: PropTypes.bool,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nSelectInput.defaultProps = {\n  emptyText: '',\n  emptyValue: '',\n  options: {},\n  translateChoice: true,\n  disableValue: 'disabled'\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var afterSubmit = _a.afterSubmit,\n      allowNull = _a.allowNull,\n      beforeSubmit = _a.beforeSubmit,\n      choices = _a.choices,\n      className = _a.className,\n      crudGetMatching = _a.crudGetMatching,\n      crudGetOne = _a.crudGetOne,\n      data = _a.data,\n      field = _a.field,\n      fieldState = _a.fieldState,\n      formState = _a.formState,\n      filter = _a.filter,\n      filterToQuery = _a.filterToQuery,\n      formatOnBlur = _a.formatOnBlur,\n      isEqual = _a.isEqual,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      multiple = _a.multiple,\n      name = _a.name,\n      pagination = _a.pagination,\n      perPage = _a.perPage,\n      ref = _a.ref,\n      reference = _a.reference,\n      refetch = _a.refetch,\n      render = _a.render,\n      setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      shouldUnregister = _a.shouldUnregister,\n      sort = _a.sort,\n      subscription = _a.subscription,\n      type = _a.type,\n      validateFields = _a.validateFields,\n      validation = _a.validation,\n      value = _a.value,\n      rest = __rest(_a, [\"afterSubmit\", \"allowNull\", \"beforeSubmit\", \"choices\", \"className\", \"crudGetMatching\", \"crudGetOne\", \"data\", \"field\", \"fieldState\", \"formState\", \"filter\", \"filterToQuery\", \"formatOnBlur\", \"isEqual\", \"limitChoicesToValue\", \"multiple\", \"name\", \"pagination\", \"perPage\", \"ref\", \"reference\", \"refetch\", \"render\", \"setFilter\", \"setPagination\", \"setSort\", \"shouldUnregister\", \"sort\", \"subscription\", \"type\", \"validateFields\", \"validation\", \"value\"]);\n\n  return sanitizeInputRestProps(rest);\n};\n\nvar PREFIX = 'RaSelectInput';\nvar StyledResettableTextField = styled(ResettableTextField, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return __assign(__assign({}, ResettableTextFieldStyles), {\n    minWidth: theme.spacing(20),\n    '& .MuiFilledInput-root': {\n      paddingRight: 0\n    }\n  });\n});","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","PropTypes","clsx","MenuItem","styled","useChoicesContext","useInput","FieldTitle","useTranslate","useChoices","useGetRecordRepresentation","ResettableTextField","ResettableTextFieldStyles","InputHelperText","sanitizeInputRestProps","useSupportCreateSuggestion","LoadingInput","SelectInput","props","choicesProp","className","create","createLabel","createValue","defaultValue","disableValue","emptyText","emptyValue","format","filter","helperText","isFetchingProp","isLoadingProp","label","_a","margin","onBlur","onChange","onCreate","optionText","optionValue","parse","resourceProp","sourceProp","translateChoice","validate","rest","translate","Error","choices","isLoading","isFetching","resource","source","allChoices","fetchError","isFromReference","undefined","getRecordRepresentation","getChoiceText","getChoiceValue","getDisableValue","field","fieldState","id","isRequired","isSubmitted","invalid","isTouched","renderEmptyItemOption","isValidElement","_","renderMenuItemOption","choice","handleChange","eventOrChoice","target","getCreateItem","handleChangeWithCreateSupport","createElement","createItem","finalChoices","renderMenuItem","key","value","disabled","sx","touched","error","message","variant","size","fullWidth","StyledResettableTextField","__assign","select","clearAlwaysVisible","sanitizeRestProps","title","map","propTypes","oneOfType","string","element","any","arrayOf","object","bool","options","func","resettable","defaultProps","allowNull","beforeSubmit","crudGetMatching","crudGetOne","data","formState","filterToQuery","formatOnBlur","isEqual","limitChoicesToValue","multiple","name","pagination","perPage","ref","reference","refetch","render","setFilter","setPagination","setSort","shouldUnregister","sort","subscription","type","validateFields","validation","PREFIX","overridesResolver","styles","root","theme","minWidth","spacing","paddingRight"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/SelectInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, useCallback, useEffect, ChangeEvent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { MenuItem, TextFieldProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n    useChoicesContext,\n    useInput,\n    FieldTitle,\n    useTranslate,\n    ChoicesProps,\n    useChoices,\n    RaRecord,\n    useGetRecordRepresentation,\n} from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport {\n    ResettableTextField,\n    ResettableTextFieldStyles,\n} from './ResettableTextField';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport {\n    useSupportCreateSuggestion,\n    SupportCreateSuggestionOptions,\n} from './useSupportCreateSuggestion';\nimport { LoadingInput } from './LoadingInput';\n\n/**\n * An Input component for a select box, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return <span>{record.first_name} {record.last_name}</span>;\n * }\n * <SelectInput source=\"author\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the Material UI <Select> component\n *\n * You can disable some choices by providing a `disableValue` field which name is `disabled` by default\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', disabled: true },\n * ];\n *\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', not_available: true },\n * ];\n * <SelectInput source=\"gender\" choices={choices} disableValue=\"not_available\" />\n *\n */\nexport const SelectInput = (props: SelectInputProps) => {\n    const {\n        choices: choicesProp,\n        className,\n        create,\n        createLabel,\n        createValue,\n        defaultValue,\n        disableValue,\n        emptyText,\n        emptyValue,\n        format,\n        filter,\n        helperText,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        label,\n        margin = 'dense',\n        onBlur,\n        onChange,\n        onCreate,\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        source: sourceProp,\n        translateChoice,\n        validate,\n        ...rest\n    } = props;\n    const translate = useTranslate();\n\n    useEffect(() => {\n        // eslint-disable-next-line eqeqeq\n        if (emptyValue == null) {\n            throw new Error(\n                `emptyValue being set to null or undefined is not supported. Use parse to turn the empty string into null.`\n            );\n        }\n    }, [emptyValue]);\n\n    const {\n        allChoices,\n        isLoading,\n        error: fetchError,\n        source,\n        resource,\n        isFromReference,\n    } = useChoicesContext({\n        choices: choicesProp,\n        isLoading: isLoadingProp,\n        isFetching: isFetchingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    if (source === undefined) {\n        throw new Error(\n            `If you're not wrapping the SelectInput inside a ReferenceInput, you must provide the source prop`\n        );\n    }\n\n    if (!isLoading && !fetchError && allChoices === undefined) {\n        throw new Error(\n            `If you're not wrapping the SelectInput inside a ReferenceInput, you must provide the choices prop`\n        );\n    }\n\n    const getRecordRepresentation = useGetRecordRepresentation(resource);\n    const { getChoiceText, getChoiceValue, getDisableValue } = useChoices({\n        optionText:\n            optionText ??\n            (isFromReference ? getRecordRepresentation : undefined),\n        optionValue,\n        disableValue,\n        translateChoice,\n    });\n    const {\n        field,\n        fieldState,\n        id,\n        isRequired,\n        formState: { isSubmitted },\n    } = useInput({\n        defaultValue,\n        parse,\n        format,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n\n    const renderEmptyItemOption = useCallback(() => {\n        return React.isValidElement(emptyText)\n            ? emptyText\n            : emptyText === ''\n            ? ' ' // em space, forces the display of an empty line of normal height\n            : translate(emptyText, { _: emptyText });\n    }, [emptyText, translate]);\n\n    const renderMenuItemOption = useCallback(choice => getChoiceText(choice), [\n        getChoiceText,\n    ]);\n\n    const handleChange = useCallback(\n        async (eventOrChoice: ChangeEvent<HTMLInputElement> | RaRecord) => {\n            // We might receive an event from the mui component\n            // In this case, it will be the choice id\n            if (eventOrChoice?.target) {\n                field.onChange(eventOrChoice);\n            } else {\n                // Or we might receive a choice directly, for instance a newly created one\n                field.onChange(getChoiceValue(eventOrChoice));\n            }\n        },\n        [field, getChoiceValue]\n    );\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createValue,\n        handleChange,\n        onCreate,\n        optionText,\n    });\n\n    const createItem = create || onCreate ? getCreateItem() : null;\n    let finalChoices = allChoices;\n    if (create || onCreate) {\n        finalChoices = [...finalChoices, createItem];\n    }\n\n    const renderMenuItem = useCallback(\n        choice => {\n            return choice ? (\n                <MenuItem\n                    key={getChoiceValue(choice)}\n                    value={getChoiceValue(choice)}\n                    disabled={getDisableValue(choice)}\n                >\n                    {renderMenuItemOption(\n                        !!createItem && choice?.id === createItem.id\n                            ? createItem\n                            : choice\n                    )}\n                </MenuItem>\n            ) : null;\n        },\n        [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]\n    );\n\n    if (isLoading) {\n        return (\n            <LoadingInput\n                label={\n                    label !== '' &&\n                    label !== false && (\n                        <FieldTitle\n                            label={label}\n                            source={source}\n                            resource={resourceProp}\n                            isRequired={isRequired}\n                        />\n                    )\n                }\n                sx={props.sx}\n                helperText={\n                    <InputHelperText\n                        touched={isTouched || isSubmitted}\n                        error={error?.message}\n                        helperText={helperText}\n                    />\n                }\n                variant={props.variant}\n                size={props.size}\n                margin={props.margin}\n                fullWidth={props.fullWidth}\n            />\n        );\n    }\n\n    return (\n        <>\n            <StyledResettableTextField\n                id={id}\n                {...field}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                onChange={handleChangeWithCreateSupport}\n                select\n                label={\n                    label !== '' &&\n                    label !== false && (\n                        <FieldTitle\n                            label={label}\n                            source={source}\n                            resource={resourceProp}\n                            isRequired={isRequired}\n                        />\n                    )\n                }\n                clearAlwaysVisible\n                error={!!fetchError || ((isTouched || isSubmitted) && invalid)}\n                helperText={\n                    <InputHelperText\n                        touched={isTouched || isSubmitted || fetchError}\n                        error={error?.message || fetchError?.message}\n                        helperText={helperText}\n                    />\n                }\n                margin={margin}\n                {...sanitizeRestProps(rest)}\n            >\n                {!isRequired && (\n                    <MenuItem\n                        value={emptyValue}\n                        key=\"null\"\n                        aria-label={translate('ra.action.clear_input_value')}\n                        title={translate('ra.action.clear_input_value')}\n                    >\n                        {renderEmptyItemOption()}\n                    </MenuItem>\n                )}\n                {finalChoices.map(renderMenuItem)}\n            </StyledResettableTextField>\n            {createElement}\n        </>\n    );\n};\n\nSelectInput.propTypes = {\n    emptyText: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    emptyValue: PropTypes.any,\n    choices: PropTypes.arrayOf(PropTypes.object),\n    className: PropTypes.string,\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    disableValue: PropTypes.string,\n    resettable: PropTypes.bool,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nSelectInput.defaultProps = {\n    emptyText: '',\n    emptyValue: '',\n    options: {},\n    translateChoice: true,\n    disableValue: 'disabled',\n};\n\nconst sanitizeRestProps = ({\n    afterSubmit,\n    allowNull,\n    beforeSubmit,\n    choices,\n    className,\n    crudGetMatching,\n    crudGetOne,\n    data,\n    field,\n    fieldState,\n    formState,\n    filter,\n    filterToQuery,\n    formatOnBlur,\n    isEqual,\n    limitChoicesToValue,\n    multiple,\n    name,\n    pagination,\n    perPage,\n    ref,\n    reference,\n    refetch,\n    render,\n    setFilter,\n    setPagination,\n    setSort,\n    shouldUnregister,\n    sort,\n    subscription,\n    type,\n    validateFields,\n    validation,\n    value,\n    ...rest\n}: any) => sanitizeInputRestProps(rest);\n\nconst PREFIX = 'RaSelectInput';\n\nconst StyledResettableTextField = styled(ResettableTextField, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    ...ResettableTextFieldStyles,\n    minWidth: theme.spacing(20),\n    '& .MuiFilledInput-root': { paddingRight: 0 },\n}));\n\nexport type SelectInputProps = Omit<CommonInputProps, 'source'> &\n    ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    Omit<TextFieldProps, 'label' | 'helperText' | 'classes' | 'onChange'> & {\n        disableValue?: string;\n        emptyText?: string | ReactElement;\n        emptyValue?: any;\n        resettable?: boolean;\n        // Source is optional as AutocompleteInput can be used inside a ReferenceInput that already defines the source\n        source?: string;\n        onChange?: (event: ChangeEvent<HTMLInputElement> | RaRecord) => void;\n    };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, TableCell, TableHead, TableRow, TableBody, IconButton, Checkbox } from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport clsx from 'clsx';\nimport { useTimeout } from 'ra-core';\nimport { DatagridClasses } from './useDatagridStyles';\nimport { Placeholder } from '../Placeholder';\n\nvar times = function times(nbChildren, fn) {\n  return Array.from({\n    length: nbChildren\n  }, function (_, key) {\n    return fn(key);\n  });\n};\n\nvar DatagridLoading = function DatagridLoading(_a) {\n  var className = _a.className,\n      expand = _a.expand,\n      hasBulkActions = _a.hasBulkActions,\n      nbChildren = _a.nbChildren,\n      _b = _a.nbFakeLines,\n      nbFakeLines = _b === void 0 ? 5 : _b,\n      size = _a.size;\n  var oneSecondHasPassed = useTimeout(1000);\n  return oneSecondHasPassed ? React.createElement(\"div\", {\n    className: DatagridClasses.root\n  }, React.createElement(Table, {\n    className: clsx(DatagridClasses.table, className),\n    size: size\n  }, React.createElement(TableHead, null, React.createElement(TableRow, {\n    className: DatagridClasses.row\n  }, expand && React.createElement(TableCell, {\n    padding: \"none\",\n    className: DatagridClasses.expandHeader\n  }), hasBulkActions && React.createElement(TableCell, {\n    padding: \"checkbox\",\n    className: DatagridClasses.expandIconCell\n  }, React.createElement(Checkbox, {\n    className: \"select-all\",\n    color: \"primary\",\n    checked: false\n  })), times(nbChildren, function (key) {\n    return React.createElement(TableCell, {\n      variant: \"head\",\n      className: DatagridClasses.headerCell,\n      key: key\n    }, React.createElement(Placeholder, null));\n  }))), React.createElement(TableBody, null, times(nbFakeLines, function (key1) {\n    return React.createElement(TableRow, {\n      key: key1,\n      style: {\n        opacity: 1 / (key1 + 1)\n      }\n    }, expand && React.createElement(TableCell, {\n      padding: \"none\",\n      className: DatagridClasses.expandIconCell\n    }, React.createElement(IconButton, {\n      className: DatagridClasses.expandIcon,\n      component: \"div\",\n      \"aria-hidden\": \"true\",\n      size: \"large\"\n    }, React.createElement(ExpandMoreIcon, null))), hasBulkActions && React.createElement(TableCell, {\n      padding: \"checkbox\",\n      className: DatagridClasses.expandIconCell\n    }, React.createElement(Checkbox, {\n      className: \"select-all\",\n      color: \"primary\",\n      checked: false\n    })), times(nbChildren, function (key2) {\n      return React.createElement(TableCell, {\n        className: DatagridClasses.rowCell,\n        key: key2\n      }, React.createElement(Placeholder, null));\n    }));\n  })))) : null;\n};\n\nDatagridLoading.propTypes = {\n  className: PropTypes.string,\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool,\n  nbChildren: PropTypes.number,\n  nbFakeLines: PropTypes.number,\n  size: PropTypes.oneOf(['small', 'medium'])\n};\nexport default memo(DatagridLoading);","map":{"version":3,"mappings":"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","names":["React","memo","PropTypes","Table","TableCell","TableHead","TableRow","TableBody","IconButton","Checkbox","ExpandMoreIcon","clsx","useTimeout","DatagridClasses","Placeholder","times","nbChildren","fn","from","length","_","key","DatagridLoading","_a","className","expand","hasBulkActions","_b","nbFakeLines","size","oneSecondHasPassed","root","table","row","padding","expandHeader","expandIconCell","color","checked","variant","headerCell","key1","style","opacity","expandIcon","component","rowCell","key2","propTypes","string","oneOfType","element","elementType","bool","number","oneOf"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/list/datagrid/DatagridLoading.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, FC, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Table,\n    TableCell,\n    TableHead,\n    TableRow,\n    TableBody,\n    IconButton,\n    Checkbox,\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport clsx from 'clsx';\nimport { useTimeout, Identifier, RaRecord } from 'ra-core';\n\nimport { DatagridClasses } from './useDatagridStyles';\nimport { Placeholder } from '../Placeholder';\n\nconst times = (nbChildren, fn) =>\n    Array.from({ length: nbChildren }, (_, key) => fn(key));\n\nconst DatagridLoading = ({\n    className,\n    expand,\n    hasBulkActions,\n    nbChildren,\n    nbFakeLines = 5,\n    size,\n}: DatagridLoadingProps): JSX.Element => {\n    const oneSecondHasPassed = useTimeout(1000);\n\n    return oneSecondHasPassed ? (\n        <div className={DatagridClasses.root}>\n            <Table\n                className={clsx(DatagridClasses.table, className)}\n                size={size}\n            >\n                <TableHead>\n                    <TableRow className={DatagridClasses.row}>\n                        {expand && (\n                            <TableCell\n                                padding=\"none\"\n                                className={DatagridClasses.expandHeader}\n                            />\n                        )}\n                        {hasBulkActions && (\n                            <TableCell\n                                padding=\"checkbox\"\n                                className={DatagridClasses.expandIconCell}\n                            >\n                                <Checkbox\n                                    className=\"select-all\"\n                                    color=\"primary\"\n                                    checked={false}\n                                />\n                            </TableCell>\n                        )}\n                        {times(nbChildren, key => (\n                            <TableCell\n                                variant=\"head\"\n                                className={DatagridClasses.headerCell}\n                                key={key}\n                            >\n                                <Placeholder />\n                            </TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {times(nbFakeLines, key1 => (\n                        <TableRow\n                            key={key1}\n                            style={{ opacity: 1 / (key1 + 1) }}\n                        >\n                            {expand && (\n                                <TableCell\n                                    padding=\"none\"\n                                    className={DatagridClasses.expandIconCell}\n                                >\n                                    <IconButton\n                                        className={DatagridClasses.expandIcon}\n                                        component=\"div\"\n                                        aria-hidden=\"true\"\n                                        size=\"large\"\n                                    >\n                                        <ExpandMoreIcon />\n                                    </IconButton>\n                                </TableCell>\n                            )}\n                            {hasBulkActions && (\n                                <TableCell\n                                    padding=\"checkbox\"\n                                    className={DatagridClasses.expandIconCell}\n                                >\n                                    <Checkbox\n                                        className=\"select-all\"\n                                        color=\"primary\"\n                                        checked={false}\n                                    />\n                                </TableCell>\n                            )}\n                            {times(nbChildren, key2 => (\n                                <TableCell\n                                    className={DatagridClasses.rowCell}\n                                    key={key2}\n                                >\n                                    <Placeholder />\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    ) : null;\n};\n\nDatagridLoading.propTypes = {\n    className: PropTypes.string,\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool,\n    nbChildren: PropTypes.number,\n    nbFakeLines: PropTypes.number,\n    size: PropTypes.oneOf(['small', 'medium']),\n};\n\nexport interface DatagridLoadingProps {\n    className?: string;\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RaRecord;\n              resource: string;\n          }>;\n    hasBulkActions?: boolean;\n    nbChildren: number;\n    nbFakeLines?: number;\n    size?: 'small' | 'medium';\n}\n\nexport default memo(DatagridLoading);\n"]},"metadata":{},"sourceType":"module"}
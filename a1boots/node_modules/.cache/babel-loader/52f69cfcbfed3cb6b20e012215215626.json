{"ast":null,"code":"import { useState, useRef, useEffect, useCallback } from 'react';\nimport isEqual from 'lodash/isEqual'; // thanks Kent C Dodds for the following helpers\n\nexport function useSafeSetState(initialState) {\n  var _a = useState(initialState),\n      state = _a[0],\n      setState = _a[1];\n\n  var mountedRef = useRef(false);\n  useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n  var safeSetState = useCallback(function (args) {\n    if (mountedRef.current) {\n      return setState(args);\n    }\n  }, [mountedRef, setState]);\n  return [state, safeSetState];\n}\nexport function usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\nexport function useDeepCompareEffect(callback, inputs) {\n  var cleanupRef = useRef();\n  useEffect(function () {\n    if (!isEqual(previousInputs, inputs)) {\n      cleanupRef.current = callback();\n    }\n\n    return cleanupRef.current;\n  });\n  var previousInputs = usePrevious(inputs);\n}\n/**\n * A hook that returns true once a delay has expired.\n * @param ms The delay in milliseconds\n * @param key A key that can be used to reset the timer\n * @returns true if the delay has expired, false otherwise\n */\n\nexport function useTimeout(ms, key) {\n  if (ms === void 0) {\n    ms = 0;\n  }\n\n  if (key === void 0) {\n    key = '';\n  }\n\n  var _a = useSafeSetState(false),\n      ready = _a[0],\n      setReady = _a[1];\n\n  useEffect(function () {\n    setReady(false);\n    var timer = setTimeout(function () {\n      setReady(true);\n    }, ms);\n    return function () {\n      clearTimeout(timer);\n    };\n  }, [key, ms, setReady]);\n  return ready;\n}\nexport function useIsMounted() {\n  var isMounted = useRef(true);\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,EAAsCC,WAAtC,QAAyD,OAAzD;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAEA;;AAEA,OAAM,SAAUC,eAAV,CACFC,YADE,EAC0B;EAEtB,SAAoBN,QAAQ,CAACM,YAAD,CAA5B;EAAA,IAACC,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB;;EAEN,IAAMC,UAAU,GAAGR,MAAM,CAAC,KAAD,CAAzB;EACAC,SAAS,CAAC;IACNO,UAAU,CAACC,OAAX,GAAqB,IAArB;IACA,OAAO;MACHD,UAAU,CAACC,OAAX,GAAqB,KAArB;IACH,CAFD;EAGH,CALQ,EAKN,EALM,CAAT;EAMA,IAAMC,YAAY,GAAGR,WAAW,CAC5B,gBAAI;IACA,IAAIM,UAAU,CAACC,OAAf,EAAwB;MACpB,OAAOF,QAAQ,CAACI,IAAD,CAAf;IACH;EACJ,CAL2B,EAM5B,CAACH,UAAD,EAAaD,QAAb,CAN4B,CAAhC;EASA,OAAO,CAACD,KAAD,EAAQI,YAAR,CAAP;AACH;AAED,OAAM,SAAUE,WAAV,CAAsBC,KAAtB,EAA2B;EAC7B,IAAMC,GAAG,GAAGd,MAAM,EAAlB;EACAC,SAAS,CAAC;IACNa,GAAG,CAACL,OAAJ,GAAcI,KAAd;EACH,CAFQ,CAAT;EAGA,OAAOC,GAAG,CAACL,OAAX;AACH;AAED,OAAM,SAAUM,oBAAV,CAA+BC,QAA/B,EAAyCC,MAAzC,EAA+C;EACjD,IAAMC,UAAU,GAAGlB,MAAM,EAAzB;EACAC,SAAS,CAAC;IACN,IAAI,CAACE,OAAO,CAACgB,cAAD,EAAiBF,MAAjB,CAAZ,EAAsC;MAClCC,UAAU,CAACT,OAAX,GAAqBO,QAAQ,EAA7B;IACH;;IACD,OAAOE,UAAU,CAACT,OAAlB;EACH,CALQ,CAAT;EAMA,IAAMU,cAAc,GAAGP,WAAW,CAACK,MAAD,CAAlC;AACH;AAED;;;;;;;AAMA,OAAM,SAAUG,UAAV,CAAqBC,EAArB,EAA6BC,GAA7B,EAAqC;EAAhB;IAAAD;EAAM;;EAAE;IAAAC;EAAQ;;EACjC,SAAoBlB,eAAe,CAAC,KAAD,CAAnC;EAAA,IAACmB,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB;;EAENvB,SAAS,CAAC;IACNuB,QAAQ,CAAC,KAAD,CAAR;IACA,IAAIC,KAAK,GAAGC,UAAU,CAAC;MACnBF,QAAQ,CAAC,IAAD,CAAR;IACH,CAFqB,EAEnBH,EAFmB,CAAtB;IAIA,OAAO;MACHM,YAAY,CAACF,KAAD,CAAZ;IACH,CAFD;EAGH,CATQ,EASN,CAACH,GAAD,EAAMD,EAAN,EAAUG,QAAV,CATM,CAAT;EAWA,OAAOD,KAAP;AACH;AAED,OAAM,SAAUK,YAAV,GAAsB;EACxB,IAAMC,SAAS,GAAG7B,MAAM,CAAC,IAAD,CAAxB;EACAC,SAAS,CAAC;IACN4B,SAAS,CAACpB,OAAV,GAAoB,IAApB;IACA,OAAO;MACHoB,SAAS,CAACpB,OAAV,GAAoB,KAApB;IACH,CAFD;EAGH,CALQ,EAKN,EALM,CAAT;EAMA,OAAOoB,SAAP;AACH","names":["useState","useRef","useEffect","useCallback","isEqual","useSafeSetState","initialState","state","setState","mountedRef","current","safeSetState","args","usePrevious","value","ref","useDeepCompareEffect","callback","inputs","cleanupRef","previousInputs","useTimeout","ms","key","ready","setReady","timer","setTimeout","clearTimeout","useIsMounted","isMounted"],"sources":["/var/www/a1boots/node_modules/ra-core/src/util/hooks.ts"],"sourcesContent":["import * as React from 'react';\nimport { useState, useRef, useEffect, useCallback } from 'react';\nimport isEqual from 'lodash/isEqual';\n\n// thanks Kent C Dodds for the following helpers\n\nexport function useSafeSetState<T>(\n    initialState?: T | (() => T)\n): [T | undefined, React.Dispatch<React.SetStateAction<T>>] {\n    const [state, setState] = useState(initialState);\n\n    const mountedRef = useRef(false);\n    useEffect(() => {\n        mountedRef.current = true;\n        return () => {\n            mountedRef.current = false;\n        };\n    }, []);\n    const safeSetState = useCallback(\n        args => {\n            if (mountedRef.current) {\n                return setState(args);\n            }\n        },\n        [mountedRef, setState]\n    );\n\n    return [state, safeSetState];\n}\n\nexport function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nexport function useDeepCompareEffect(callback, inputs) {\n    const cleanupRef = useRef();\n    useEffect(() => {\n        if (!isEqual(previousInputs, inputs)) {\n            cleanupRef.current = callback();\n        }\n        return cleanupRef.current;\n    });\n    const previousInputs = usePrevious(inputs);\n}\n\n/**\n * A hook that returns true once a delay has expired.\n * @param ms The delay in milliseconds\n * @param key A key that can be used to reset the timer\n * @returns true if the delay has expired, false otherwise\n */\nexport function useTimeout(ms = 0, key = '') {\n    const [ready, setReady] = useSafeSetState(false);\n\n    useEffect(() => {\n        setReady(false);\n        let timer = setTimeout(() => {\n            setReady(true);\n        }, ms);\n\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [key, ms, setReady]);\n\n    return ready;\n}\n\nexport function useIsMounted() {\n    const isMounted = useRef(true);\n    useEffect(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n"]},"metadata":{},"sourceType":"module"}
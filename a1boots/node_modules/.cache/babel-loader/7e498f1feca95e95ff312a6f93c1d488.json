{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useQueryClient, QueryObserver } from 'react-query';\n/**\n * Check if react-query has already fetched data for a query key.\n *\n * This hook is reactive.\n *\n * @example\n * const isCustomerLoaded = useIsDataLoaded(['customers', 'getOne', { id: customerId }]);\n *\n * @returns {boolean} true if the data is loaded, false otherwise\n */\n\nexport var useIsDataLoaded = function useIsDataLoaded(queryKey, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.enabled,\n      enabled = _a === void 0 ? true : _a;\n  var queryClient = useQueryClient();\n\n  var _b = useState(function () {\n    if (!enabled) {\n      return false;\n    }\n\n    return queryClient.getQueryData(queryKey) !== undefined;\n  }),\n      isDataLoaded = _b[0],\n      setDataLoaded = _b[1];\n\n  useEffect(function () {\n    if (!enabled) return;\n\n    if (queryClient.getQueryData(queryKey) === undefined) {\n      var observer = new QueryObserver(queryClient, {\n        queryKey: queryKey\n      });\n      var unsubscribe_1 = observer.subscribe(function (result) {\n        setDataLoaded(!result.isLoading);\n        unsubscribe_1();\n      });\n      return unsubscribe_1;\n    }\n  }, [enabled, queryKey, queryClient]);\n  return isDataLoaded;\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,aAA9C;AAEA;;;;;;;;;;;AAUA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAC3BC,QAD2B,EAE3BC,OAF2B,EAEQ;EAAnC;IAAAA;EAAmC;;EAE3B,SAAmBA,OAAO,QAA1B;EAAA,WAAO,mBAAG,IAAH,GAAOC,EAAd;EACR,IAAMC,WAAW,GAAGN,cAAc,EAAlC;;EACM,SAAgCD,QAAQ,CAAU;IACpD,IAAI,CAACQ,OAAL,EAAc;MACV,OAAO,KAAP;IACH;;IACD,OAAOD,WAAW,CAACE,YAAZ,CAAyBL,QAAzB,MAAuCM,SAA9C;EACH,CAL6C,CAAxC;EAAA,IAACC,YAAY,QAAb;EAAA,IAAeC,aAAa,QAA5B;;EAONb,SAAS,CAAC;IACN,IAAI,CAACS,OAAL,EAAc;;IACd,IAAID,WAAW,CAACE,YAAZ,CAAyBL,QAAzB,MAAuCM,SAA3C,EAAsD;MAClD,IAAMG,QAAQ,GAAG,IAAIX,aAAJ,CAAkBK,WAAlB,EAA+B;QAAEH,QAAQ;MAAV,CAA/B,CAAjB;MACA,IAAMU,aAAW,GAAGD,QAAQ,CAACE,SAAT,CAAmB,kBAAM;QACzCH,aAAa,CAAC,CAACI,MAAM,CAACC,SAAT,CAAb;QACAH,aAAW;MACd,CAHmB,CAApB;MAIA,OAAOA,aAAP;IACH;EACJ,CAVQ,EAUN,CAACN,OAAD,EAAUJ,QAAV,EAAoBG,WAApB,CAVM,CAAT;EAYA,OAAOI,YAAP;AACH,CA1BM","names":["useEffect","useState","useQueryClient","QueryObserver","useIsDataLoaded","queryKey","options","_a","queryClient","enabled","getQueryData","undefined","isDataLoaded","setDataLoaded","observer","unsubscribe_1","subscribe","result","isLoading"],"sources":["/var/www/a1boots/node_modules/ra-core/src/dataProvider/useIsDataLoaded.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useQueryClient, QueryObserver } from 'react-query';\n\n/**\n * Check if react-query has already fetched data for a query key.\n *\n * This hook is reactive.\n *\n * @example\n * const isCustomerLoaded = useIsDataLoaded(['customers', 'getOne', { id: customerId }]);\n *\n * @returns {boolean} true if the data is loaded, false otherwise\n */\nexport const useIsDataLoaded = (\n    queryKey: any,\n    options: { enabled?: boolean } = {}\n) => {\n    const { enabled = true } = options;\n    const queryClient = useQueryClient();\n    const [isDataLoaded, setDataLoaded] = useState<boolean>(() => {\n        if (!enabled) {\n            return false;\n        }\n        return queryClient.getQueryData(queryKey) !== undefined;\n    });\n\n    useEffect(() => {\n        if (!enabled) return;\n        if (queryClient.getQueryData(queryKey) === undefined) {\n            const observer = new QueryObserver(queryClient, { queryKey });\n            const unsubscribe = observer.subscribe(result => {\n                setDataLoaded(!result.isLoading);\n                unsubscribe();\n            });\n            return unsubscribe;\n        }\n    }, [enabled, queryKey, queryClient]);\n\n    return isDataLoaded;\n};\n"]},"metadata":{},"sourceType":"module"}
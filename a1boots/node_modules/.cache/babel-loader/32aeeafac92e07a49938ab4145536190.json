{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../notification';\nimport { useNavigate } from 'react-router';\nvar timer;\n/**\n * Returns a callback used to call the authProvider.checkError() method\n * and an error from the dataProvider. If the authProvider rejects the call,\n * the hook logs the user out and shows a logged out notification.\n *\n * Used in the useDataProvider hook to check for access denied responses\n * (e.g. 401 or 403 responses) and trigger a logout.\n *\n * @see useLogout\n * @see useDataProvider\n *\n * @returns {Function} logoutIfAccessDenied callback\n *\n * @example\n *\n * import { useLogoutIfAccessDenied, useNotify, DataProviderContext } from 'react-admin';\n *\n * const FetchRestrictedResource = () => {\n *     const dataProvider = useContext(DataProviderContext);\n *     const logoutIfAccessDenied = useLogoutIfAccessDenied();\n *     const notify = useNotify()\n *     useEffect(() => {\n *         dataProvider.getOne('secret', { id: 123 })\n *             .catch(error => {\n *                  logoutIfAccessDenied(error);\n *                  notify('server error',  { type: 'error' });\n *              })\n *     }, []);\n *     // ...\n * }\n */\n\nvar useLogoutIfAccessDenied = function useLogoutIfAccessDenied() {\n  var authProvider = useAuthProvider();\n  var logout = useLogout();\n  var notify = useNotify();\n  var navigate = useNavigate();\n  var logoutIfAccessDenied = useCallback(function (error, disableNotification) {\n    return authProvider.checkError(error).then(function () {\n      return false;\n    }).catch(function (e) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var logoutUser, redirectTo, shouldNotify;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          logoutUser = (_a = e === null || e === void 0 ? void 0 : e.logoutUser) !== null && _a !== void 0 ? _a : true; //manual debounce\n\n          if (timer) {\n            // side effects already triggered in this tick, exit\n            return [2\n            /*return*/\n            , true];\n          }\n\n          timer = setTimeout(function () {\n            timer = undefined;\n          }, 0);\n          redirectTo = e && e.redirectTo != null ? e.redirectTo : error && error.redirectTo ? error.redirectTo : undefined;\n          shouldNotify = !(disableNotification || e && e.message === false || error && error.message === false || (redirectTo === null || redirectTo === void 0 ? void 0 : redirectTo.startsWith('http')));\n\n          if (shouldNotify) {\n            // notify only if not yet logged out\n            authProvider.checkAuth({}).then(function () {\n              if (logoutUser) {\n                notify(getErrorMessage(e, 'ra.notification.logged_out'), {\n                  type: 'error'\n                });\n              } else {\n                notify(getErrorMessage(e, 'ra.notification.not_authorized'), {\n                  type: 'error'\n                });\n              }\n            }).catch(function () {});\n          }\n\n          if (logoutUser) {\n            logout({}, redirectTo);\n          } else {\n            if (redirectTo.startsWith('http')) {\n              // absolute link (e.g. https://my.oidc.server/login)\n              window.location.href = redirectTo;\n            } else {\n              // internal location\n              navigate(redirectTo);\n            }\n          }\n\n          return [2\n          /*return*/\n          , true];\n        });\n      });\n    });\n  }, [authProvider, logout, notify, navigate]);\n  return authProvider ? logoutIfAccessDenied : logoutIfAccessDeniedWithoutProvider;\n};\n\nvar logoutIfAccessDeniedWithoutProvider = function logoutIfAccessDeniedWithoutProvider() {\n  return Promise.resolve(false);\n};\n\nvar getErrorMessage = function getErrorMessage(error, defaultMessage) {\n  return typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? defaultMessage : error.message;\n};\n\nexport default useLogoutIfAccessDenied;","map":{"version":3,"mappings":"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","names":["useCallback","useAuthProvider","useLogout","useNotify","useNavigate","timer","useLogoutIfAccessDenied","authProvider","logout","notify","navigate","logoutIfAccessDenied","error","disableNotification","checkError","then","catch","e","logoutUser","_a","setTimeout","undefined","redirectTo","shouldNotify","message","startsWith","checkAuth","getErrorMessage","type","window","location","href","logoutIfAccessDeniedWithoutProvider","resolve","defaultMessage"],"sources":["/var/www/a1boots/node_modules/ra-core/src/auth/useLogoutIfAccessDenied.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport useAuthProvider from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../notification';\nimport { useNavigate } from 'react-router';\n\nlet timer;\n\n/**\n * Returns a callback used to call the authProvider.checkError() method\n * and an error from the dataProvider. If the authProvider rejects the call,\n * the hook logs the user out and shows a logged out notification.\n *\n * Used in the useDataProvider hook to check for access denied responses\n * (e.g. 401 or 403 responses) and trigger a logout.\n *\n * @see useLogout\n * @see useDataProvider\n *\n * @returns {Function} logoutIfAccessDenied callback\n *\n * @example\n *\n * import { useLogoutIfAccessDenied, useNotify, DataProviderContext } from 'react-admin';\n *\n * const FetchRestrictedResource = () => {\n *     const dataProvider = useContext(DataProviderContext);\n *     const logoutIfAccessDenied = useLogoutIfAccessDenied();\n *     const notify = useNotify()\n *     useEffect(() => {\n *         dataProvider.getOne('secret', { id: 123 })\n *             .catch(error => {\n *                  logoutIfAccessDenied(error);\n *                  notify('server error',  { type: 'error' });\n *              })\n *     }, []);\n *     // ...\n * }\n */\nconst useLogoutIfAccessDenied = (): LogoutIfAccessDenied => {\n    const authProvider = useAuthProvider();\n    const logout = useLogout();\n    const notify = useNotify();\n    const navigate = useNavigate();\n    const logoutIfAccessDenied = useCallback(\n        (error?: any, disableNotification?: boolean) =>\n            authProvider\n                .checkError(error)\n                .then(() => false)\n                .catch(async e => {\n                    const logoutUser = e?.logoutUser ?? true;\n\n                    //manual debounce\n                    if (timer) {\n                        // side effects already triggered in this tick, exit\n                        return true;\n                    }\n                    timer = setTimeout(() => {\n                        timer = undefined;\n                    }, 0);\n\n                    const redirectTo =\n                        e && e.redirectTo != null\n                            ? e.redirectTo\n                            : error && error.redirectTo\n                            ? error.redirectTo\n                            : undefined;\n\n                    const shouldNotify = !(\n                        disableNotification ||\n                        (e && e.message === false) ||\n                        (error && error.message === false) ||\n                        redirectTo?.startsWith('http')\n                    );\n                    if (shouldNotify) {\n                        // notify only if not yet logged out\n                        authProvider\n                            .checkAuth({})\n                            .then(() => {\n                                if (logoutUser) {\n                                    notify(\n                                        getErrorMessage(\n                                            e,\n                                            'ra.notification.logged_out'\n                                        ),\n                                        { type: 'error' }\n                                    );\n                                } else {\n                                    notify(\n                                        getErrorMessage(\n                                            e,\n                                            'ra.notification.not_authorized'\n                                        ),\n                                        { type: 'error' }\n                                    );\n                                }\n                            })\n                            .catch(() => {});\n                    }\n\n                    if (logoutUser) {\n                        logout({}, redirectTo);\n                    } else {\n                        if (redirectTo.startsWith('http')) {\n                            // absolute link (e.g. https://my.oidc.server/login)\n                            window.location.href = redirectTo;\n                        } else {\n                            // internal location\n                            navigate(redirectTo);\n                        }\n                    }\n\n                    return true;\n                }),\n        [authProvider, logout, notify, navigate]\n    );\n    return authProvider\n        ? logoutIfAccessDenied\n        : logoutIfAccessDeniedWithoutProvider;\n};\n\nconst logoutIfAccessDeniedWithoutProvider = () => Promise.resolve(false);\n\n/**\n * Call the authProvider.authError() method, using the error passed as argument.\n * If the authProvider rejects the call, logs the user out and shows a logged out notification.\n *\n * @param {Error} error An Error object (usually returned by the dataProvider)\n * @param {boolean} disableNotification Avoid showing a notification after the user is logged out. false by default.\n *\n * @return {Promise} Resolved to true if there was a logout, false otherwise\n */\ntype LogoutIfAccessDenied = (\n    error?: any,\n    /** @deprecated to disable the notification, authProvider.checkAuth() should return an object with an error property set to true */\n    disableNotification?: boolean\n) => Promise<boolean>;\n\nconst getErrorMessage = (error, defaultMessage) =>\n    typeof error === 'string'\n        ? error\n        : typeof error === 'undefined' || !error.message\n        ? defaultMessage\n        : error.message;\n\nexport default useLogoutIfAccessDenied;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport ContentCreate from '@mui/icons-material/Create';\nimport { Link } from 'react-router-dom';\nimport { useResourceContext, useRecordContext, useCreatePath } from 'ra-core';\nimport { Button } from './Button';\n/**\n * Opens the Edit view for the current record.\n *\n * Reads the record and resource from the context.\n *\n * @example // basic usage\n * import { EditButton } from 'react-admin';\n *\n * const CommentEditButton = () => (\n *     <EditButton label=\"Edit comment\" />\n * );\n */\n\nexport var EditButton = function (props) {\n  var _a = props.icon,\n      icon = _a === void 0 ? defaultIcon : _a,\n      _b = props.label,\n      label = _b === void 0 ? 'ra.action.edit' : _b,\n      _c = props.scrollToTop,\n      scrollToTop = _c === void 0 ? true : _c,\n      className = props.className,\n      rest = __rest(props, [\"icon\", \"label\", \"scrollToTop\", \"className\"]);\n\n  var resource = useResourceContext(props);\n  var record = useRecordContext(props);\n  var createPath = useCreatePath();\n  if (!record) return null;\n  return React.createElement(StyledButton, __assign({\n    component: Link,\n    to: createPath({\n      type: 'edit',\n      resource: resource,\n      id: record.id\n    }),\n    state: scrollStates[String(scrollToTop)],\n    label: label,\n    onClick: stopPropagation,\n    className: clsx(EditButtonClasses.root, className)\n  }, rest), icon);\n}; // avoids using useMemo to get a constant value for the link state\n\nvar scrollStates = {\n  true: {\n    _scrollToTop: true\n  },\n  false: {}\n};\nvar defaultIcon = React.createElement(ContentCreate, null); // useful to prevent click bubbling in a datagrid with rowClick\n\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};\n\nEditButton.propTypes = {\n  icon: PropTypes.element,\n  label: PropTypes.string,\n  record: PropTypes.any,\n  scrollToTop: PropTypes.bool\n};\nvar PREFIX = 'RaEditButton';\nexport var EditButtonClasses = {\n  root: \"\".concat(PREFIX, \"-root\")\n};\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (_props, styles) {\n    return styles.root;\n  }\n})({});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAEIC,kBAFJ,EAGIC,gBAHJ,EAIIC,aAJJ,QAKO,SALP;AAOA,SAASC,MAAT,QAAoC,UAApC;AAEA;;;;;;;;;;;;;AAYA,OAAO,IAAMC,UAAU,GAAG,UACtBC,KADsB,EACY;EAG9B,SAKAA,KAAK,KALL;EAAA,QAAI,mBAAGC,WAAH,GAAcC,EAAlB;EAAA,IACAC,KAIAH,KAAK,MALL;EAAA,IACAI,KAAK,mBAAG,gBAAH,GAAmBD,EADxB;EAAA,IAEAE,KAGAL,KAAK,YALL;EAAA,IAEAM,WAAW,mBAAG,IAAH,GAAOD,EAFlB;EAAA,IAGAE,SAAS,GAETP,KAAK,UALL;EAAA,IAIGQ,IAAI,UACPR,KADO,EALL,6CAKK,CAJP;;EAMJ,IAAMS,QAAQ,GAAGd,kBAAkB,CAACK,KAAD,CAAnC;EACA,IAAMU,MAAM,GAAGd,gBAAgB,CAACI,KAAD,CAA/B;EACA,IAAMW,UAAU,GAAGd,aAAa,EAAhC;EACA,IAAI,CAACa,MAAL,EAAa,OAAO,IAAP;EACb,OACIrB,oBAACuB,YAAD,EAAaC;IACTC,SAAS,EAAEpB,IADF;IAETqB,EAAE,EAAEJ,UAAU,CAAC;MAAEK,IAAI,EAAE,MAAR;MAAgBP,QAAQ,UAAxB;MAA0BQ,EAAE,EAAEP,MAAM,CAACO;IAArC,CAAD,CAFL;IAGTC,KAAK,EAAEC,YAAY,CAACC,MAAM,CAACd,WAAD,CAAP,CAHV;IAITF,KAAK,EAAEA,KAJE;IAKTiB,OAAO,EAAEC,eALA;IAMTf,SAAS,EAAEhB,IAAI,CAACgC,iBAAiB,CAACC,IAAnB,EAAyBjB,SAAzB;EANN,GAOJC,IAPI,CAAb,EASKiB,IATL,CADJ;AAaH,CA3BM,C,CA6BP;;AACA,IAAMN,YAAY,GAAG;EACjBO,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAhB,CADW;EAEjBC,KAAK,EAAE;AAFU,CAArB;AAKA,IAAM3B,WAAW,GAAGZ,oBAACI,aAAD,EAAc,IAAd,CAApB,C,CAEA;;AACA,IAAM6B,eAAe,GAAG,aAAC;EAAI,QAAC,CAACA,eAAF;AAAmB,CAAhD;;AAeAvB,UAAU,CAAC8B,SAAX,GAAuB;EACnBJ,IAAI,EAAEnC,SAAS,CAACwC,OADG;EAEnB1B,KAAK,EAAEd,SAAS,CAACyC,MAFE;EAGnBrB,MAAM,EAAEpB,SAAS,CAAC0C,GAHC;EAInB1B,WAAW,EAAEhB,SAAS,CAAC2C;AAJJ,CAAvB;AAOA,IAAMC,MAAM,GAAG,cAAf;AAEA,OAAO,IAAMX,iBAAiB,GAAG;EAC7BC,IAAI,EAAE,UAAGU,MAAH,EAAS,OAAT;AADuB,CAA1B;AAIP,IAAMtB,YAAY,GAAGpB,MAAM,CAACM,MAAD,EAAS;EAChCqC,IAAI,EAAED,MAD0B;EAEhCE,iBAAiB,EAAE,UAACC,MAAD,EAASC,MAAT,EAAe;IAAK,aAAM,CAACd,IAAP;EAAW;AAFlB,CAAT,CAAN,CAGlB,EAHkB,CAArB","names":["React","PropTypes","clsx","styled","ContentCreate","Link","useResourceContext","useRecordContext","useCreatePath","Button","EditButton","props","defaultIcon","_a","_b","label","_c","scrollToTop","className","rest","resource","record","createPath","StyledButton","__assign","component","to","type","id","state","scrollStates","String","onClick","stopPropagation","EditButtonClasses","root","icon","true","_scrollToTop","false","propTypes","element","string","any","bool","PREFIX","name","overridesResolver","_props","styles"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/button/EditButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport ContentCreate from '@mui/icons-material/Create';\nimport { Link } from 'react-router-dom';\nimport {\n    RaRecord,\n    useResourceContext,\n    useRecordContext,\n    useCreatePath,\n} from 'ra-core';\n\nimport { Button, ButtonProps } from './Button';\n\n/**\n * Opens the Edit view for the current record.\n *\n * Reads the record and resource from the context.\n *\n * @example // basic usage\n * import { EditButton } from 'react-admin';\n *\n * const CommentEditButton = () => (\n *     <EditButton label=\"Edit comment\" />\n * );\n */\nexport const EditButton = <RecordType extends RaRecord = any>(\n    props: EditButtonProps<RecordType>\n) => {\n    const {\n        icon = defaultIcon,\n        label = 'ra.action.edit',\n        scrollToTop = true,\n        className,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const record = useRecordContext(props);\n    const createPath = useCreatePath();\n    if (!record) return null;\n    return (\n        <StyledButton\n            component={Link}\n            to={createPath({ type: 'edit', resource, id: record.id })}\n            state={scrollStates[String(scrollToTop)]}\n            label={label}\n            onClick={stopPropagation}\n            className={clsx(EditButtonClasses.root, className)}\n            {...(rest as any)}\n        >\n            {icon}\n        </StyledButton>\n    );\n};\n\n// avoids using useMemo to get a constant value for the link state\nconst scrollStates = {\n    true: { _scrollToTop: true },\n    false: {},\n};\n\nconst defaultIcon = <ContentCreate />;\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\ninterface Props<RecordType extends RaRecord = any> {\n    icon?: ReactElement;\n    label?: string;\n    record?: RecordType;\n    resource?: string;\n    scrollToTop?: boolean;\n}\n\nexport type EditButtonProps<RecordType extends RaRecord = any> = Props<\n    RecordType\n> &\n    ButtonProps;\n\nEditButton.propTypes = {\n    icon: PropTypes.element,\n    label: PropTypes.string,\n    record: PropTypes.any,\n    scrollToTop: PropTypes.bool,\n};\n\nconst PREFIX = 'RaEditButton';\n\nexport const EditButtonClasses = {\n    root: `${PREFIX}-root`,\n};\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (_props, styles) => styles.root,\n})({});\n"]},"metadata":{},"sourceType":"module"}
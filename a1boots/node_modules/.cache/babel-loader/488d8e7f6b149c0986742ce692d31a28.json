{"ast":null,"code":"import { createContext } from 'react';\nexport var SaveContext = createContext(undefined);","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;AAiCA,OAAO,IAAMC,WAAW,GAAGD,aAAa,CAAmBE,SAAnB,CAAjC","names":["createContext","SaveContext","undefined"],"sources":["/var/www/a1boots/node_modules/ra-core/src/controller/saveContext/SaveContext.ts"],"sourcesContent":["import { createContext } from 'react';\nimport {\n    RaRecord,\n    OnError,\n    OnSuccess,\n    TransformData,\n    MutationMode,\n} from '../../types';\nimport { Middleware } from './useMutationMiddlewares';\n\nexport interface SaveContextValue<\n    RecordType extends RaRecord = any,\n    MutateFunc extends (...args: any[]) => any = (...args: any[]) => any\n> {\n    save?: SaveHandler<RecordType>;\n    /**\n     * @deprecated. Rely on the form isSubmitting value instead\n     */\n    saving?: boolean;\n    mutationMode?: MutationMode;\n    registerMutationMiddleware?: (callback: Middleware<MutateFunc>) => void;\n    unregisterMutationMiddleware?: (callback: Middleware<MutateFunc>) => void;\n}\n\nexport type SaveHandler<RecordType> = (\n    record: Partial<RecordType>,\n    callbacks?: {\n        onSuccess?: OnSuccess;\n        onError?: OnError;\n        transform?: TransformData;\n    }\n) => Promise<void | RecordType> | Record<string, string>;\n\nexport const SaveContext = createContext<SaveContextValue>(undefined);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Snackbar } from '@mui/material';\nimport clsx from 'clsx';\nimport { useNotificationContext, undoableEventEmitter, useTranslate } from 'ra-core';\nvar defaultAnchorOrigin = {\n  vertical: 'bottom',\n  horizontal: 'center'\n};\n/**\n * Provides a way to show a notification.\n * @see useNotify\n *\n * @example <caption>Basic usage</caption>\n * <Notification />\n *\n * @param props The component props\n * @param {string} props.type The notification type. Defaults to 'info'.\n * @param {number} props.autoHideDuration Duration in milliseconds to wait until hiding a given notification. Defaults to 4000.\n * @param {boolean} props.multiLine Set it to `true` if the notification message should be shown in more than one line.\n */\n\nexport var Notification = function (props) {\n  var _a;\n\n  var className = props.className,\n      _b = props.type,\n      type = _b === void 0 ? 'info' : _b,\n      _c = props.autoHideDuration,\n      autoHideDuration = _c === void 0 ? 4000 : _c,\n      _d = props.multiLine,\n      multiLine = _d === void 0 ? false : _d,\n      _e = props.anchorOrigin,\n      anchorOrigin = _e === void 0 ? defaultAnchorOrigin : _e,\n      rest = __rest(props, [\"className\", \"type\", \"autoHideDuration\", \"multiLine\", \"anchorOrigin\"]);\n\n  var _f = useNotificationContext(),\n      notifications = _f.notifications,\n      takeNotification = _f.takeNotification;\n\n  var _g = useState(false),\n      open = _g[0],\n      setOpen = _g[1];\n\n  var _h = React.useState(undefined),\n      messageInfo = _h[0],\n      setMessageInfo = _h[1];\n\n  var translate = useTranslate();\n  useEffect(function () {\n    if (notifications.length && !messageInfo) {\n      // Set a new snack when we don't have an active one\n      setMessageInfo(takeNotification());\n      setOpen(true);\n    } else if (notifications.length && messageInfo && open) {\n      // Close an active snack when a new one is added\n      setOpen(false);\n    }\n  }, [notifications, messageInfo, open, takeNotification]);\n  var handleRequestClose = useCallback(function () {\n    setOpen(false);\n  }, [setOpen]);\n  var handleExited = useCallback(function () {\n    if (messageInfo && messageInfo.notificationOptions.undoable) {\n      undoableEventEmitter.emit('end', {\n        isUndo: false\n      });\n    }\n\n    setMessageInfo(undefined);\n  }, [messageInfo]);\n  var handleUndo = useCallback(function () {\n    undoableEventEmitter.emit('end', {\n      isUndo: true\n    });\n    setOpen(false);\n  }, []);\n  if (!messageInfo) return null;\n\n  var message = messageInfo.message,\n      typeFromMessage = messageInfo.type,\n      _j = messageInfo.notificationOptions,\n      autoHideDurationFromMessage = _j.autoHideDuration,\n      messageArgs = _j.messageArgs,\n      multilineFromMessage = _j.multiLine,\n      undoable = _j.undoable,\n      options = __rest(_j, [\"autoHideDuration\", \"messageArgs\", \"multiLine\", \"undoable\"]);\n\n  return React.createElement(StyledSnackbar, __assign({\n    className: className,\n    open: open,\n    message: message && typeof message === 'string' && translate(message, messageArgs),\n    autoHideDuration: autoHideDurationFromMessage || autoHideDuration,\n    disableWindowBlurListener: undoable,\n    TransitionProps: {\n      onExited: handleExited\n    },\n    onClose: handleRequestClose,\n    ContentProps: {\n      className: clsx(NotificationClasses[typeFromMessage || type], (_a = {}, _a[NotificationClasses.multiLine] = multilineFromMessage || multiLine, _a))\n    },\n    action: undoable ? React.createElement(Button, {\n      color: \"primary\",\n      className: NotificationClasses.undo,\n      size: \"small\",\n      onClick: handleUndo\n    }, React.createElement(React.Fragment, null, translate('ra.action.undo'))) : null,\n    anchorOrigin: anchorOrigin\n  }, rest, options), message && typeof message !== 'string' ? message : null);\n};\nNotification.propTypes = {\n  type: PropTypes.string,\n  autoHideDuration: PropTypes.number,\n  multiLine: PropTypes.bool\n};\nvar PREFIX = 'RaNotification';\nexport var NotificationClasses = {\n  success: \"\".concat(PREFIX, \"-success\"),\n  error: \"\".concat(PREFIX, \"-error\"),\n  warning: \"\".concat(PREFIX, \"-warning\"),\n  undo: \"\".concat(PREFIX, \"-undo\"),\n  multiLine: \"\".concat(PREFIX, \"-multiLine\")\n};\nvar StyledSnackbar = styled(Snackbar, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n\n  var theme = _a.theme,\n      type = _a.type;\n  return _b = {}, _b[\"& .\".concat(NotificationClasses.success)] = {\n    backgroundColor: theme.palette.success.main,\n    color: theme.palette.success.contrastText\n  }, _b[\"& .\".concat(NotificationClasses.error)] = {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText\n  }, _b[\"& .\".concat(NotificationClasses.warning)] = {\n    backgroundColor: theme.palette.warning.main,\n    color: theme.palette.warning.contrastText\n  }, _b[\"& .\".concat(NotificationClasses.undo)] = {\n    color: type === 'success' ? theme.palette.success.contrastText : theme.palette.primary.light\n  }, _b[\"& .\".concat(NotificationClasses.multiLine)] = {\n    whiteSpace: 'pre-wrap'\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","styled","useState","useEffect","useCallback","PropTypes","Button","Snackbar","clsx","useNotificationContext","undoableEventEmitter","useTranslate","defaultAnchorOrigin","vertical","horizontal","Notification","props","_b","type","_c","autoHideDuration","_d","multiLine","_e","anchorOrigin","rest","notifications","takeNotification","open","setOpen","undefined","messageInfo","setMessageInfo","translate","length","handleRequestClose","handleExited","notificationOptions","undoable","emit","isUndo","handleUndo","typeFromMessage","_j","autoHideDurationFromMessage","messageArgs","multilineFromMessage","options","StyledSnackbar","__assign","className","message","disableWindowBlurListener","TransitionProps","onExited","onClose","ContentProps","NotificationClasses","_a","action","color","undo","size","onClick","propTypes","string","number","bool","PREFIX","success","error","warning","name","overridesResolver","styles","root","theme","backgroundColor","palette","main","contrastText","primary","light","whiteSpace"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/layout/Notification.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled, Theme } from '@mui/material/styles';\nimport { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Snackbar, SnackbarProps, SnackbarOrigin } from '@mui/material';\nimport clsx from 'clsx';\n\nimport {\n    useNotificationContext,\n    undoableEventEmitter,\n    useTranslate,\n} from 'ra-core';\n\nconst defaultAnchorOrigin: SnackbarOrigin = {\n    vertical: 'bottom',\n    horizontal: 'center',\n};\n\n/**\n * Provides a way to show a notification.\n * @see useNotify\n *\n * @example <caption>Basic usage</caption>\n * <Notification />\n *\n * @param props The component props\n * @param {string} props.type The notification type. Defaults to 'info'.\n * @param {number} props.autoHideDuration Duration in milliseconds to wait until hiding a given notification. Defaults to 4000.\n * @param {boolean} props.multiLine Set it to `true` if the notification message should be shown in more than one line.\n */\nexport const Notification = (props: NotificationProps) => {\n    const {\n        className,\n        type = 'info',\n        autoHideDuration = 4000,\n        multiLine = false,\n        anchorOrigin = defaultAnchorOrigin,\n        ...rest\n    } = props;\n    const { notifications, takeNotification } = useNotificationContext();\n    const [open, setOpen] = useState(false);\n    const [messageInfo, setMessageInfo] = React.useState(undefined);\n    const translate = useTranslate();\n\n    useEffect(() => {\n        if (notifications.length && !messageInfo) {\n            // Set a new snack when we don't have an active one\n            setMessageInfo(takeNotification());\n            setOpen(true);\n        } else if (notifications.length && messageInfo && open) {\n            // Close an active snack when a new one is added\n            setOpen(false);\n        }\n    }, [notifications, messageInfo, open, takeNotification]);\n\n    const handleRequestClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const handleExited = useCallback(() => {\n        if (messageInfo && messageInfo.notificationOptions.undoable) {\n            undoableEventEmitter.emit('end', { isUndo: false });\n        }\n        setMessageInfo(undefined);\n    }, [messageInfo]);\n\n    const handleUndo = useCallback(() => {\n        undoableEventEmitter.emit('end', { isUndo: true });\n        setOpen(false);\n    }, []);\n\n    if (!messageInfo) return null;\n    const {\n        message,\n        type: typeFromMessage,\n        notificationOptions: {\n            autoHideDuration: autoHideDurationFromMessage,\n            messageArgs,\n            multiLine: multilineFromMessage,\n            undoable,\n            ...options\n        },\n    } = messageInfo;\n\n    return (\n        <StyledSnackbar\n            className={className}\n            open={open}\n            message={\n                message &&\n                typeof message === 'string' &&\n                translate(message, messageArgs)\n            }\n            autoHideDuration={autoHideDurationFromMessage || autoHideDuration}\n            disableWindowBlurListener={undoable}\n            TransitionProps={{ onExited: handleExited }}\n            onClose={handleRequestClose}\n            ContentProps={{\n                className: clsx(NotificationClasses[typeFromMessage || type], {\n                    [NotificationClasses.multiLine]:\n                        multilineFromMessage || multiLine,\n                }),\n            }}\n            action={\n                undoable ? (\n                    <Button\n                        color=\"primary\"\n                        className={NotificationClasses.undo}\n                        size=\"small\"\n                        onClick={handleUndo}\n                    >\n                        <>{translate('ra.action.undo')}</>\n                    </Button>\n                ) : null\n            }\n            anchorOrigin={anchorOrigin}\n            {...rest}\n            {...options}\n        >\n            {message && typeof message !== 'string' ? message : null}\n        </StyledSnackbar>\n    );\n};\n\nNotification.propTypes = {\n    type: PropTypes.string,\n    autoHideDuration: PropTypes.number,\n    multiLine: PropTypes.bool,\n};\n\nconst PREFIX = 'RaNotification';\n\nexport const NotificationClasses = {\n    success: `${PREFIX}-success`,\n    error: `${PREFIX}-error`,\n    warning: `${PREFIX}-warning`,\n    undo: `${PREFIX}-undo`,\n    multiLine: `${PREFIX}-multiLine`,\n};\n\nconst StyledSnackbar = styled(Snackbar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme, type }: NotificationProps & { theme?: Theme }) => ({\n    [`& .${NotificationClasses.success}`]: {\n        backgroundColor: theme.palette.success.main,\n        color: theme.palette.success.contrastText,\n    },\n\n    [`& .${NotificationClasses.error}`]: {\n        backgroundColor: theme.palette.error.main,\n        color: theme.palette.error.contrastText,\n    },\n\n    [`& .${NotificationClasses.warning}`]: {\n        backgroundColor: theme.palette.warning.main,\n        color: theme.palette.warning.contrastText,\n    },\n\n    [`& .${NotificationClasses.undo}`]: {\n        color:\n            type === 'success'\n                ? theme.palette.success.contrastText\n                : theme.palette.primary.light,\n    },\n    [`& .${NotificationClasses.multiLine}`]: {\n        whiteSpace: 'pre-wrap',\n    },\n}));\n\nexport interface NotificationProps extends Omit<SnackbarProps, 'open'> {\n    type?: string;\n    autoHideDuration?: number;\n    multiLine?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}
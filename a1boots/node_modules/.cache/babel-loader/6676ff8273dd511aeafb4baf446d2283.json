{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n/**\n * Form input to edit a Date string value in the \"YYYY-MM-DD\" format (e.g. '2021-06-23').\n *\n * Renders a date picker (the exact UI depends on the browser).\n *\n * @example\n * import { Edit, SimpleForm, DateInput } from 'react-admin';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <DateInput source=\"published_at\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n * // If the initial value is a Date object, DateInput converts it to a string\n * // but you must pass a custom parse method to convert the form value\n * // (which is always a date string) back to a Date object.\n * <DateInput source=\"published_at\" parse={val => new Date(val)} />\n */\n\nexport var DateInput = function (_a) {\n  var className = _a.className,\n      defaultValue = _a.defaultValue,\n      _b = _a.format,\n      format = _b === void 0 ? getStringFromDate : _b,\n      label = _a.label,\n      name = _a.name,\n      source = _a.source,\n      resource = _a.resource,\n      helperText = _a.helperText,\n      margin = _a.margin,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      parse = _a.parse,\n      validate = _a.validate,\n      variant = _a.variant,\n      rest = __rest(_a, [\"className\", \"defaultValue\", \"format\", \"label\", \"name\", \"source\", \"resource\", \"helperText\", \"margin\", \"onBlur\", \"onChange\", \"parse\", \"validate\", \"variant\"]);\n\n  var _c = useInput(__assign({\n    defaultValue: defaultValue,\n    name: name,\n    format: format,\n    parse: parse,\n    onBlur: onBlur,\n    onChange: onChange,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      field = _c.field,\n      fieldState = _c.fieldState,\n      formState = _c.formState,\n      id = _c.id,\n      isRequired = _c.isRequired;\n\n  var error = fieldState.error,\n      invalid = fieldState.invalid,\n      isTouched = fieldState.isTouched;\n  var isSubmitted = formState.isSubmitted;\n  return React.createElement(TextField, __assign({\n    id: id\n  }, field, {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    type: \"date\",\n    size: \"small\",\n    variant: variant,\n    margin: margin,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    }),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    InputLabelProps: defaultInputLabelProps\n  }, sanitizeInputRestProps(rest)));\n};\nDateInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\n/**\n * Convert Date object to String\n *\n * @param {Date} value value to convert\n * @returns {String} A standardized date (yyyy-MM-dd), to be passed to an <input type=\"date\" />\n */\n\nvar convertDateToString = function (value) {\n  if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n  var pad = '00';\n  var yyyy = value.getFullYear().toString();\n  var MM = (value.getMonth() + 1).toString();\n  var dd = value.getDate().toString();\n  return \"\".concat(yyyy, \"-\").concat((pad + MM).slice(-2), \"-\").concat((pad + dd).slice(-2));\n};\n\nvar dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\nvar defaultInputLabelProps = {\n  shrink: true\n};\n\nvar getStringFromDate = function (value) {\n  // null, undefined and empty string values should not go through dateFormatter\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  }\n\n  if (value instanceof Date) {\n    return convertDateToString(value);\n  } // valid dates should not be converted\n\n\n  if (dateRegex.test(value)) {\n    return value;\n  }\n\n  return convertDateToString(new Date(value));\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","clsx","TextField","useInput","FieldTitle","sanitizeInputRestProps","InputHelperText","DateInput","_a","defaultValue","_b","format","getStringFromDate","label","name","source","resource","helperText","margin","onBlur","onChange","parse","validate","variant","rest","field","fieldState","formState","id","isRequired","invalid","isTouched","__assign","className","type","size","error","isSubmitted","touched","message","InputLabelProps","defaultInputLabelProps","propTypes","oneOfType","string","bool","element","convertDateToString","value","Date","isNaN","getDate","pad","yyyy","getFullYear","toString","MM","getMonth","dd","concat","slice","dateRegex","shrink","test"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/input/DateInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\nimport { InputHelperText } from './InputHelperText';\n\n/**\n * Form input to edit a Date string value in the \"YYYY-MM-DD\" format (e.g. '2021-06-23').\n *\n * Renders a date picker (the exact UI depends on the browser).\n *\n * @example\n * import { Edit, SimpleForm, DateInput } from 'react-admin';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <DateInput source=\"published_at\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n * // If the initial value is a Date object, DateInput converts it to a string\n * // but you must pass a custom parse method to convert the form value\n * // (which is always a date string) back to a Date object.\n * <DateInput source=\"published_at\" parse={val => new Date(val)} />\n */\nexport const DateInput = ({\n    className,\n    defaultValue,\n    format = getStringFromDate,\n    label,\n    name,\n    source,\n    resource,\n    helperText,\n    margin,\n    onBlur,\n    onChange,\n    parse,\n    validate,\n    variant,\n    ...rest\n}: DateInputProps) => {\n    const { field, fieldState, formState, id, isRequired } = useInput({\n        defaultValue,\n        name,\n        format,\n        parse,\n        onBlur,\n        onChange,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n    const { isSubmitted } = formState;\n\n    return (\n        <TextField\n            id={id}\n            {...field}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"date\"\n            size=\"small\"\n            variant={variant}\n            margin={margin}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            InputLabelProps={defaultInputLabelProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nDateInput.propTypes = {\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    resource: PropTypes.string,\n    source: PropTypes.string,\n};\n\nexport type DateInputProps = CommonInputProps &\n    Omit<TextFieldProps, 'helperText' | 'label'>;\n\n/**\n * Convert Date object to String\n *\n * @param {Date} value value to convert\n * @returns {String} A standardized date (yyyy-MM-dd), to be passed to an <input type=\"date\" />\n */\nconst convertDateToString = (value: Date) => {\n    if (!(value instanceof Date) || isNaN(value.getDate())) return '';\n    const pad = '00';\n    const yyyy = value.getFullYear().toString();\n    const MM = (value.getMonth() + 1).toString();\n    const dd = value.getDate().toString();\n    return `${yyyy}-${(pad + MM).slice(-2)}-${(pad + dd).slice(-2)}`;\n};\n\nconst dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\nconst defaultInputLabelProps = { shrink: true };\n\nconst getStringFromDate = (value: string | Date) => {\n    // null, undefined and empty string values should not go through dateFormatter\n    // otherwise, it returns undefined and will make the input an uncontrolled one.\n    if (value == null || value === '') {\n        return '';\n    }\n\n    if (value instanceof Date) {\n        return convertDateToString(value);\n    }\n\n    // valid dates should not be converted\n    if (dateRegex.test(value)) {\n        return value;\n    }\n\n    return convertDateToString(new Date(value));\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { SimpleForm } from '../form';\nimport { ArrayInput, BooleanInput, DateInput, NumberInput, ReferenceInput, ReferenceArrayInput, SelectInput, SimpleFormIterator, TextInput } from '../input';\nexport var editFieldTypes = {\n  form: {\n    component: SimpleForm,\n    representation: function (_, children) {\n      return \"        <SimpleForm>\\n\".concat(children.map(function (child) {\n        return \"            \".concat(child.getRepresentation());\n      }).join('\\n'), \"\\n        </SimpleForm>\");\n    }\n  },\n  array: {\n    // eslint-disable-next-line react/display-name\n    component: function (_a) {\n      var children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n      return React.createElement(ArrayInput, __assign({}, props), React.createElement(SimpleFormIterator, null, children));\n    },\n    representation: function (props, children) {\n      return \"<ArrayInput source=\\\"\".concat(props.source, \"\\\"><SimpleFormIterator>\").concat(children.map(function (child) {\n        return child.getRepresentation();\n      }).join('\\n'), \"</SimpleFormIterator></ArrayInput>\");\n    }\n  },\n  boolean: {\n    component: BooleanInput,\n    representation: function (props) {\n      return \"<BooleanInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  date: {\n    component: DateInput,\n    representation: function (props) {\n      return \"<DateInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  email: {\n    component: TextInput,\n    representation: function (props) {\n      return \"<TextInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  id: {\n    component: TextInput,\n    representation: function (props) {\n      return \"<TextInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  number: {\n    component: NumberInput,\n    representation: function (props) {\n      return \"<NumberInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  reference: {\n    component: ReferenceInput,\n    representation: function (props, children) {\n      return \"<ReferenceInput source=\\\"\".concat(props.source, \"\\\" reference=\\\"\").concat(props.reference, \"\\\" />\");\n    }\n  },\n  referenceArray: {\n    component: ReferenceArrayInput,\n    representation: function (props) {\n      return \"<ReferenceArrayInput source=\\\"\".concat(props.source, \"\\\" reference=\\\"\").concat(props.reference, \"\\\"><TextInput source=\\\"id\\\" /></ReferenceArrayInput>\");\n    }\n  },\n  referenceArrayChild: {\n    component: function (props) {\n      return React.createElement(SelectInput, __assign({\n        optionText: \"id\"\n      }, props));\n    },\n    representation: function () {\n      return \"<SelectInput optionText=\\\"id\\\" />\";\n    }\n  },\n  richText: {\n    component: TextInput,\n    representation: function (props) {\n      return \"<TextInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  string: {\n    component: TextInput,\n    representation: function (props) {\n      return \"<TextInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  },\n  url: {\n    component: TextInput,\n    representation: function (props) {\n      return \"<TextInput source=\\\"\".concat(props.source, \"\\\" />\");\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["React","SimpleForm","ArrayInput","BooleanInput","DateInput","NumberInput","ReferenceInput","ReferenceArrayInput","SelectInput","SimpleFormIterator","TextInput","editFieldTypes","form","component","representation","_","children","map","child","getRepresentation","join","array","_a","props","__assign","source","concat","boolean","date","email","id","number","reference","referenceArray","referenceArrayChild","optionText","richText","string","url"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/detail/editFieldTypes.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode, ReactElement } from 'react';\nimport { SimpleForm } from '../form';\nimport {\n    ArrayInput,\n    BooleanInput,\n    DateInput,\n    NumberInput,\n    ReferenceInput,\n    ReferenceInputProps,\n    ReferenceArrayInput,\n    ReferenceArrayInputProps,\n    SelectInput,\n    SimpleFormIterator,\n    TextInput,\n} from '../input';\nimport { InferredElement, InferredTypeMap, InputProps } from 'ra-core';\n\nexport const editFieldTypes: InferredTypeMap = {\n    form: {\n        component: SimpleForm,\n        representation: (\n            _,\n            children: InferredElement[]\n        ) => `        <SimpleForm>\n${children.map(child => `            ${child.getRepresentation()}`).join('\\n')}\n        </SimpleForm>`,\n    },\n    array: {\n        // eslint-disable-next-line react/display-name\n        component: ({\n            children,\n            ...props\n        }: { children: ReactNode } & InputProps) => (\n            <ArrayInput {...props}>\n                <SimpleFormIterator>{children}</SimpleFormIterator>\n            </ArrayInput>\n        ),\n        representation: (props: InputProps, children: InferredElement[]) =>\n            `<ArrayInput source=\"${\n                props.source\n            }\"><SimpleFormIterator>${children\n                .map(child => child.getRepresentation())\n                .join('\\n')}</SimpleFormIterator></ArrayInput>`,\n    },\n    boolean: {\n        component: BooleanInput,\n        representation: (props: InputProps) =>\n            `<BooleanInput source=\"${props.source}\" />`,\n    },\n    date: {\n        component: DateInput,\n        representation: (props: InputProps) =>\n            `<DateInput source=\"${props.source}\" />`,\n    },\n    email: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    id: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    number: {\n        component: NumberInput,\n        representation: (props: InputProps) =>\n            `<NumberInput source=\"${props.source}\" />`,\n    },\n    reference: {\n        component: ReferenceInput,\n        representation: (\n            props: ReferenceInputProps,\n            children: InferredElement\n        ) =>\n            `<ReferenceInput source=\"${props.source}\" reference=\"${props.reference}\" />`,\n    },\n    referenceArray: {\n        component: ReferenceArrayInput,\n        representation: (props: ReferenceArrayInputProps) =>\n            `<ReferenceArrayInput source=\"${props.source}\" reference=\"${props.reference}\"><TextInput source=\"id\" /></ReferenceArrayInput>`,\n    },\n    referenceArrayChild: {\n        component: (\n            props: { children: ReactNode } & InputProps\n        ): ReactElement => <SelectInput optionText=\"id\" {...props} />, // eslint-disable-line react/display-name\n        representation: () => `<SelectInput optionText=\"id\" />`,\n    },\n    richText: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    string: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n    url: {\n        component: TextInput,\n        representation: (props: InputProps) =>\n            `<TextInput source=\"${props.source}\" />`,\n    },\n};\n"]},"metadata":{},"sourceType":"module"}
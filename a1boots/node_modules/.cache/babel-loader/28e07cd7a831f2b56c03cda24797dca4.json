{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport * as React from 'react';\nimport { usePreference, useTranslate } from 'ra-core';\nimport { Box, Button } from '@mui/material';\nimport { FieldToggle } from './FieldToggle';\n/**\n * UI to select / deselect fields, and store the selection in preferences\n */\n\nexport var FieldsSelector = function FieldsSelector(_a) {\n  var _b = _a.name,\n      name = _b === void 0 ? 'columns' : _b,\n      _c = _a.availableName,\n      availableName = _c === void 0 ? 'availableColumns' : _c;\n  var translate = useTranslate();\n\n  var _d = usePreference(availableName, []),\n      availableFields = _d[0],\n      setAvailableFields = _d[1];\n\n  var omit = usePreference('omit', [])[0];\n\n  var _e = usePreference(name, availableFields.filter(function (field) {\n    return !(omit === null || omit === void 0 ? void 0 : omit.includes(field.source));\n  }).map(function (field) {\n    return field.index;\n  })),\n      fields = _e[0],\n      setFields = _e[1];\n\n  var handleToggle = function handleToggle(event) {\n    if (event.target.checked) {\n      // add the column at the right position\n      setFields(availableFields.filter(function (field) {\n        return field.index === event.target.name || fields.includes(field.index);\n      }).map(function (field) {\n        return field.index;\n      }));\n    } else {\n      setFields(fields.filter(function (index) {\n        return index !== event.target.name;\n      }));\n    }\n  };\n\n  var handleMove = function handleMove(index1, index2) {\n    var index1Pos = availableFields.findIndex( // eslint-disable-next-line eqeqeq\n    function (field) {\n      return field.index == index1;\n    });\n    var index2Pos = availableFields.findIndex( // eslint-disable-next-line eqeqeq\n    function (field) {\n      return field.index == index2;\n    });\n\n    if (index1Pos === -1 || index2Pos === -1) {\n      return;\n    }\n\n    var newAvailableFields;\n\n    if (index1Pos > index2Pos) {\n      newAvailableFields = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], availableFields.slice(0, index2Pos), true), [availableFields[index1Pos]], false), availableFields.slice(index2Pos, index1Pos), true), availableFields.slice(index1Pos + 1), true);\n    } else {\n      newAvailableFields = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], availableFields.slice(0, index1Pos), true), availableFields.slice(index1Pos + 1, index2Pos + 1), true), [availableFields[index1Pos]], false), availableFields.slice(index2Pos + 1), true);\n    }\n\n    setAvailableFields(newAvailableFields);\n    setFields(function (fields) {\n      return newAvailableFields.filter(function (field) {\n        return fields.includes(field.index);\n      }).map(function (field) {\n        return field.index;\n      });\n    });\n  };\n\n  var handleHideAll = function handleHideAll() {\n    setFields([]);\n  };\n\n  var handleShowAll = function handleShowAll() {\n    setFields(availableFields.map(function (field) {\n      return field.index;\n    }));\n  };\n\n  return React.createElement(Box, {\n    pt: 0.5\n  }, availableFields.map(function (field) {\n    return React.createElement(FieldToggle, {\n      key: field.index,\n      source: field.source,\n      label: field.label,\n      index: field.index,\n      selected: fields.includes(field.index),\n      onToggle: handleToggle,\n      onMove: handleMove\n    });\n  }), React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    mx: -0.5,\n    mt: 1\n  }, React.createElement(Button, {\n    size: \"small\",\n    onClick: handleHideAll\n  }, translate('ra.inspector.hideAll', {\n    _: 'Hide All'\n  })), React.createElement(Button, {\n    size: \"small\",\n    onClick: handleShowAll\n  }, translate('ra.inspector.showAll', {\n    _: 'Show All'\n  }))));\n};","map":{"version":3,"mappings":"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","names":["React","usePreference","useTranslate","Box","Button","FieldToggle","FieldsSelector","_a","_b","name","_c","availableName","translate","availableFields","setAvailableFields","filter","omit","includes","field","source","map","index","fields","setFields","handleToggle","event","target","checked","handleMove","index1","index2","index1Pos","findIndex","index2Pos","newAvailableFields","slice","handleHideAll","handleShowAll","pt","key","label","selected","onToggle","onMove","display","justifyContent","mx","mt","size","onClick","_"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/preferences/FieldsSelector.tsx"],"sourcesContent":["import * as React from 'react';\nimport { usePreference, useTranslate } from 'ra-core';\nimport { Box, Button } from '@mui/material';\n\nimport { FieldToggle } from './FieldToggle';\n\n/**\n * UI to select / deselect fields, and store the selection in preferences\n */\nexport const FieldsSelector = ({\n    name = 'columns',\n    availableName = 'availableColumns',\n}) => {\n    const translate = useTranslate();\n\n    const [availableFields, setAvailableFields] = usePreference<\n        SelectableField[]\n    >(availableName, []);\n    const [omit] = usePreference('omit', []);\n\n    const [fields, setFields] = usePreference(\n        name,\n        availableFields\n            .filter(field => !omit?.includes(field.source))\n            .map(field => field.index)\n    );\n\n    const handleToggle = event => {\n        if (event.target.checked) {\n            // add the column at the right position\n            setFields(\n                availableFields\n                    .filter(\n                        field =>\n                            field.index === event.target.name ||\n                            fields.includes(field.index)\n                    )\n                    .map(field => field.index)\n            );\n        } else {\n            setFields(fields.filter(index => index !== event.target.name));\n        }\n    };\n\n    const handleMove = (index1, index2) => {\n        const index1Pos = availableFields.findIndex(\n            // eslint-disable-next-line eqeqeq\n            field => field.index == index1\n        );\n        const index2Pos = availableFields.findIndex(\n            // eslint-disable-next-line eqeqeq\n            field => field.index == index2\n        );\n        if (index1Pos === -1 || index2Pos === -1) {\n            return;\n        }\n        let newAvailableFields;\n        if (index1Pos > index2Pos) {\n            newAvailableFields = [\n                ...availableFields.slice(0, index2Pos),\n                availableFields[index1Pos],\n                ...availableFields.slice(index2Pos, index1Pos),\n                ...availableFields.slice(index1Pos + 1),\n            ];\n        } else {\n            newAvailableFields = [\n                ...availableFields.slice(0, index1Pos),\n                ...availableFields.slice(index1Pos + 1, index2Pos + 1),\n                availableFields[index1Pos],\n                ...availableFields.slice(index2Pos + 1),\n            ];\n        }\n        setAvailableFields(newAvailableFields);\n        setFields(fields =>\n            newAvailableFields\n                .filter(field => fields.includes(field.index))\n                .map(field => field.index)\n        );\n    };\n\n    const handleHideAll = () => {\n        setFields([]);\n    };\n    const handleShowAll = () => {\n        setFields(availableFields.map(field => field.index));\n    };\n\n    return (\n        <Box pt={0.5}>\n            {availableFields.map(field => (\n                <FieldToggle\n                    key={field.index}\n                    source={field.source}\n                    label={field.label}\n                    index={field.index}\n                    selected={fields.includes(field.index)}\n                    onToggle={handleToggle}\n                    onMove={handleMove}\n                />\n            ))}\n            <Box display=\"flex\" justifyContent=\"space-between\" mx={-0.5} mt={1}>\n                <Button size=\"small\" onClick={handleHideAll}>\n                    {translate('ra.inspector.hideAll', {\n                        _: 'Hide All',\n                    })}\n                </Button>\n                <Button size=\"small\" onClick={handleShowAll}>\n                    {translate('ra.inspector.showAll', {\n                        _: 'Show All',\n                    })}\n                </Button>\n            </Box>\n        </Box>\n    );\n};\n\nexport interface SelectableField {\n    index: string;\n    source: string;\n    label?: string;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * Gets a list of values indexed by field based on a list of records\n *\n * @example\n * const records = [\n *     {\n *         id: 1,\n *         title: \"Lorem Ipsum\",\n *         views: 254,\n *         user_id: 123,\n *     },\n *     {\n *         id: 2,\n *         title: \"Sic Dolor amet\",\n *         views: 65,\n *         user_id: 456,\n *     },\n * ];\n * getValuesFromRecords(records);\n * // {\n * //    id: [1, 2],\n * //    title: ['Lorem Ipsum', 'Sic Dolor amet'],\n * //    views: [254, 65],\n * //    user_id: [123, 456],\n * // }\n */\nexport default (function (records) {\n  return records.reduce(function (values, record) {\n    Object.keys(record).forEach(function (fieldName) {\n      if (!values[fieldName]) {\n        values[fieldName] = [];\n      }\n\n      if (record[fieldName] != null) {\n        var value = Array.isArray(record[fieldName]) ? [record[fieldName]] : record[fieldName];\n        values[fieldName] = values[fieldName].concat(value);\n      }\n    });\n    return values;\n  }, {});\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,gBAAe,UAACA,OAAD,EAAe;EAC1B,cAAO,CAACC,MAAR,CAAe,UAACC,MAAD,EAASC,MAAT,EAAe;IAC1BC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4B,qBAAS;MACjC,IAAI,CAACJ,MAAM,CAACK,SAAD,CAAX,EAAwB;QACpBL,MAAM,CAACK,SAAD,CAAN,GAAoB,EAApB;MACH;;MACD,IAAIJ,MAAM,CAACI,SAAD,CAAN,IAAqB,IAAzB,EAA+B;QAC3B,IAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcP,MAAM,CAACI,SAAD,CAApB,IACR,CAACJ,MAAM,CAACI,SAAD,CAAP,CADQ,GAERJ,MAAM,CAACI,SAAD,CAFZ;QAGAL,MAAM,CAACK,SAAD,CAAN,GAAoBL,MAAM,CAACK,SAAD,CAAN,CAAkBI,MAAlB,CAAyBH,KAAzB,CAApB;MACH;IACJ,CAVD;IAWA,OAAON,MAAP;EACH,CAbD,EAaG,EAbH;AAaM,CAdV","names":["records","reduce","values","record","Object","keys","forEach","fieldName","value","Array","isArray","concat"],"sources":["/var/www/a1boots/node_modules/ra-core/src/inference/getValuesFromRecords.ts"],"sourcesContent":["/**\n * Gets a list of values indexed by field based on a list of records\n *\n * @example\n * const records = [\n *     {\n *         id: 1,\n *         title: \"Lorem Ipsum\",\n *         views: 254,\n *         user_id: 123,\n *     },\n *     {\n *         id: 2,\n *         title: \"Sic Dolor amet\",\n *         views: 65,\n *         user_id: 456,\n *     },\n * ];\n * getValuesFromRecords(records);\n * // {\n * //    id: [1, 2],\n * //    title: ['Lorem Ipsum', 'Sic Dolor amet'],\n * //    views: [254, 65],\n * //    user_id: [123, 456],\n * // }\n */\nexport default (records: any[]) =>\n    records.reduce((values, record) => {\n        Object.keys(record).forEach(fieldName => {\n            if (!values[fieldName]) {\n                values[fieldName] = [];\n            }\n            if (record[fieldName] != null) {\n                const value = Array.isArray(record[fieldName])\n                    ? [record[fieldName]]\n                    : record[fieldName];\n                values[fieldName] = values[fieldName].concat(value);\n            }\n        });\n        return values;\n    }, {});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps } from 'ra-core';\nimport { EditView } from './EditView';\nimport { EditBase } from 'ra-core';\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - title\n * - mutationMode\n * - mutationOptions\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\n\nexport var Edit = function Edit(props) {\n  useCheckMinimumRequiredProps('Edit', ['children'], props);\n\n  var resource = props.resource,\n      id = props.id,\n      mutationMode = props.mutationMode,\n      mutationOptions = props.mutationOptions,\n      queryOptions = props.queryOptions,\n      redirect = props.redirect,\n      transform = props.transform,\n      disableAuthentication = props.disableAuthentication,\n      rest = __rest(props, [\"resource\", \"id\", \"mutationMode\", \"mutationOptions\", \"queryOptions\", \"redirect\", \"transform\", \"disableAuthentication\"]);\n\n  return React.createElement(EditBase, {\n    resource: resource,\n    id: id,\n    mutationMode: mutationMode,\n    mutationOptions: mutationOptions,\n    queryOptions: queryOptions,\n    redirect: redirect,\n    transform: transform,\n    disableAuthentication: disableAuthentication\n  }, React.createElement(EditView, __assign({}, rest)));\n};\nEdit.propTypes = {\n  actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  aside: PropTypes.element,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disableAuthentication: PropTypes.bool,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  id: PropTypes.any,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  mutationOptions: PropTypes.object,\n  queryOptions: PropTypes.object,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  resource: PropTypes.string,\n  title: PropTypes.node,\n  transform: PropTypes.func,\n  sx: PropTypes.any\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,4BAAT,QAAuD,SAAvD;AAEA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAChBC,KADgB,EACsC;EAEtDJ,4BAA4B,CAAC,MAAD,EAAS,CAAC,UAAD,CAAT,EAAuBI,KAAvB,CAA5B;;EAEI,YAAQ,GASRA,KAAK,SATL;EAAA,IACAC,EAAE,GAQFD,KAAK,GATL;EAAA,IAEAE,YAAY,GAOZF,KAAK,aATL;EAAA,IAGAG,eAAe,GAMfH,KAAK,gBATL;EAAA,IAIAI,YAAY,GAKZJ,KAAK,aATL;EAAA,IAKAK,QAAQ,GAIRL,KAAK,SATL;EAAA,IAMAM,SAAS,GAGTN,KAAK,UATL;EAAA,IAOAO,qBAAqB,GAErBP,KAAK,sBATL;EAAA,IAQGQ,IAAI,UACPR,KADO,EATL,uHASK,CARP;;EAUJ,OACIN,oBAACI,QAAD,EAAS;IACLW,QAAQ,EAAEA,QADL;IAELR,EAAE,EAAEA,EAFC;IAGLC,YAAY,EAAEA,YAHT;IAILC,eAAe,EAAEA,eAJZ;IAKLC,YAAY,EAAEA,YALT;IAMLC,QAAQ,EAAEA,QANL;IAOLC,SAAS,EAAEA,SAPN;IAQLC,qBAAqB,EAAEA;EARlB,CAAT,EAUIb,oBAACG,QAAD,EAASa,aAAKF,IAAL,CAAT,CAVJ,CADJ;AAcH,CA7BM;AA+BPT,IAAI,CAACY,SAAL,GAAiB;EACbC,OAAO,EAAEjB,SAAS,CAACkB,SAAV,CAAoB,CAAClB,SAAS,CAACmB,OAAX,EAAoBnB,SAAS,CAACoB,IAA9B,CAApB,CADI;EAEbC,KAAK,EAAErB,SAAS,CAACmB,OAFJ;EAGbG,QAAQ,EAAEtB,SAAS,CAACuB,IAHP;EAIbC,SAAS,EAAExB,SAAS,CAACyB,MAJR;EAKbb,qBAAqB,EAAEZ,SAAS,CAACoB,IALpB;EAMbM,SAAS,EAAE1B,SAAS,CAACoB,IANR;EAObO,OAAO,EAAE3B,SAAS,CAACoB,IAPN;EAQbQ,OAAO,EAAE5B,SAAS,CAACoB,IARN;EASbS,OAAO,EAAE7B,SAAS,CAACoB,IATN;EAUbd,EAAE,EAAEN,SAAS,CAAC8B,GAVD;EAWbvB,YAAY,EAAEP,SAAS,CAAC+B,KAAV,CAAgB,CAAC,aAAD,EAAgB,YAAhB,EAA8B,UAA9B,CAAhB,CAXD;EAYbvB,eAAe,EAAER,SAAS,CAACgC,MAZd;EAabvB,YAAY,EAAET,SAAS,CAACgC,MAbX;EAcbtB,QAAQ,EAAEV,SAAS,CAACkB,SAAV,CAAoB,CAC1BlB,SAAS,CAACyB,MADgB,EAE1BzB,SAAS,CAACoB,IAFgB,EAG1BpB,SAAS,CAACiC,IAHgB,CAApB,CAdG;EAmBbnB,QAAQ,EAAEd,SAAS,CAACyB,MAnBP;EAoBbS,KAAK,EAAElC,SAAS,CAACuB,IApBJ;EAqBbZ,SAAS,EAAEX,SAAS,CAACiC,IArBR;EAsBbE,EAAE,EAAEnC,SAAS,CAAC8B;AAtBD,CAAjB","names":["React","PropTypes","useCheckMinimumRequiredProps","EditView","EditBase","Edit","props","id","mutationMode","mutationOptions","queryOptions","redirect","transform","disableAuthentication","rest","resource","__assign","propTypes","actions","oneOfType","element","bool","aside","children","node","className","string","hasCreate","hasEdit","hasShow","hasList","any","oneOf","object","func","title","sx"],"sources":["/var/www/a1boots/node_modules/ra-ui-materialui/src/detail/Edit.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps, RaRecord } from 'ra-core';\nimport { EditProps } from '../types';\nimport { EditView } from './EditView';\nimport { EditBase } from 'ra-core';\n\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - title\n * - mutationMode\n * - mutationOptions\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\nexport const Edit = <RecordType extends RaRecord = any>(\n    props: EditProps<RecordType> & { children: ReactNode }\n) => {\n    useCheckMinimumRequiredProps('Edit', ['children'], props);\n    const {\n        resource,\n        id,\n        mutationMode,\n        mutationOptions,\n        queryOptions,\n        redirect,\n        transform,\n        disableAuthentication,\n        ...rest\n    } = props;\n    return (\n        <EditBase\n            resource={resource}\n            id={id}\n            mutationMode={mutationMode}\n            mutationOptions={mutationOptions}\n            queryOptions={queryOptions}\n            redirect={redirect}\n            transform={transform}\n            disableAuthentication={disableAuthentication}\n        >\n            <EditView {...rest} />\n        </EditBase>\n    );\n};\n\nEdit.propTypes = {\n    actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    aside: PropTypes.element,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    disableAuthentication: PropTypes.bool,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    id: PropTypes.any,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    mutationOptions: PropTypes.object,\n    queryOptions: PropTypes.object,\n    redirect: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]),\n    resource: PropTypes.string,\n    title: PropTypes.node,\n    transform: PropTypes.func,\n    sx: PropTypes.any,\n};\n"]},"metadata":{},"sourceType":"module"}